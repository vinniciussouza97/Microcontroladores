
UART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000042c0  00400000  00400000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  004042c0  004042c0  000142c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     0000087c  20000000  004042c8  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          000000dc  2000087c  00404b44  0002087c  2**2
                  ALLOC
  4 .stack        00003000  20000958  00404c20  0002087c  2**0
                  ALLOC
  5 .ARM.attributes 0000002a  00000000  00000000  0002087c  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  000208a6  2**0
                  CONTENTS, READONLY
  7 .debug_info   0000989a  00000000  00000000  000208ff  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000019d9  00000000  00000000  0002a199  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00003c20  00000000  00000000  0002bb72  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000888  00000000  00000000  0002f792  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000007b8  00000000  00000000  0003001a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0001247b  00000000  00000000  000307d2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00009797  00000000  00000000  00042c4d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00052a46  00000000  00000000  0004c3e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00001f1c  00000000  00000000  0009ee2c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <_sfixed>:
  400000:	20003958 	.word	0x20003958
  400004:	004008e5 	.word	0x004008e5
  400008:	004008e1 	.word	0x004008e1
  40000c:	004008e1 	.word	0x004008e1
  400010:	004008e1 	.word	0x004008e1
  400014:	004008e1 	.word	0x004008e1
  400018:	004008e1 	.word	0x004008e1
	...
  40002c:	004008e1 	.word	0x004008e1
  400030:	004008e1 	.word	0x004008e1
  400034:	00000000 	.word	0x00000000
  400038:	004008e1 	.word	0x004008e1
  40003c:	004008e1 	.word	0x004008e1
  400040:	004008e1 	.word	0x004008e1
  400044:	004008e1 	.word	0x004008e1
  400048:	004008e1 	.word	0x004008e1
  40004c:	004008e1 	.word	0x004008e1
  400050:	004008e1 	.word	0x004008e1
  400054:	004008e1 	.word	0x004008e1
  400058:	004008e1 	.word	0x004008e1
  40005c:	004008e1 	.word	0x004008e1
  400060:	004008e1 	.word	0x004008e1
  400064:	004008e1 	.word	0x004008e1
  400068:	00000000 	.word	0x00000000
  40006c:	00400765 	.word	0x00400765
  400070:	00400779 	.word	0x00400779
  400074:	0040078d 	.word	0x0040078d
  400078:	004008e1 	.word	0x004008e1
  40007c:	004008e1 	.word	0x004008e1
	...
  400088:	004008e1 	.word	0x004008e1
  40008c:	004008e1 	.word	0x004008e1
  400090:	004008e1 	.word	0x004008e1
  400094:	004008e1 	.word	0x004008e1
  400098:	004008e1 	.word	0x004008e1
  40009c:	004008e1 	.word	0x004008e1
  4000a0:	004008e1 	.word	0x004008e1
  4000a4:	004008e1 	.word	0x004008e1
  4000a8:	004008e1 	.word	0x004008e1
  4000ac:	004008e1 	.word	0x004008e1
  4000b0:	004008e1 	.word	0x004008e1
  4000b4:	004008e1 	.word	0x004008e1
  4000b8:	004008e1 	.word	0x004008e1
  4000bc:	004008e1 	.word	0x004008e1
  4000c0:	004008e1 	.word	0x004008e1
  4000c4:	004008e1 	.word	0x004008e1
  4000c8:	004008e1 	.word	0x004008e1

004000cc <__do_global_dtors_aux>:
  4000cc:	b510      	push	{r4, lr}
  4000ce:	4c05      	ldr	r4, [pc, #20]	; (4000e4 <__do_global_dtors_aux+0x18>)
  4000d0:	7823      	ldrb	r3, [r4, #0]
  4000d2:	b933      	cbnz	r3, 4000e2 <__do_global_dtors_aux+0x16>
  4000d4:	4b04      	ldr	r3, [pc, #16]	; (4000e8 <__do_global_dtors_aux+0x1c>)
  4000d6:	b113      	cbz	r3, 4000de <__do_global_dtors_aux+0x12>
  4000d8:	4804      	ldr	r0, [pc, #16]	; (4000ec <__do_global_dtors_aux+0x20>)
  4000da:	f3af 8000 	nop.w
  4000de:	2301      	movs	r3, #1
  4000e0:	7023      	strb	r3, [r4, #0]
  4000e2:	bd10      	pop	{r4, pc}
  4000e4:	2000087c 	.word	0x2000087c
  4000e8:	00000000 	.word	0x00000000
  4000ec:	004042c8 	.word	0x004042c8

004000f0 <frame_dummy>:
  4000f0:	4b08      	ldr	r3, [pc, #32]	; (400114 <frame_dummy+0x24>)
  4000f2:	b510      	push	{r4, lr}
  4000f4:	b11b      	cbz	r3, 4000fe <frame_dummy+0xe>
  4000f6:	4908      	ldr	r1, [pc, #32]	; (400118 <frame_dummy+0x28>)
  4000f8:	4808      	ldr	r0, [pc, #32]	; (40011c <frame_dummy+0x2c>)
  4000fa:	f3af 8000 	nop.w
  4000fe:	4808      	ldr	r0, [pc, #32]	; (400120 <frame_dummy+0x30>)
  400100:	6803      	ldr	r3, [r0, #0]
  400102:	b903      	cbnz	r3, 400106 <frame_dummy+0x16>
  400104:	bd10      	pop	{r4, pc}
  400106:	4b07      	ldr	r3, [pc, #28]	; (400124 <frame_dummy+0x34>)
  400108:	2b00      	cmp	r3, #0
  40010a:	d0fb      	beq.n	400104 <frame_dummy+0x14>
  40010c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  400110:	4718      	bx	r3
  400112:	bf00      	nop
  400114:	00000000 	.word	0x00000000
  400118:	20000880 	.word	0x20000880
  40011c:	004042c8 	.word	0x004042c8
  400120:	004042c8 	.word	0x004042c8
  400124:	00000000 	.word	0x00000000

00400128 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
  400128:	b990      	cbnz	r0, 400150 <_read+0x28>
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
  40012a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40012e:	460c      	mov	r4, r1
  400130:	4690      	mov	r8, r2

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
  400132:	2a00      	cmp	r2, #0
  400134:	dd0f      	ble.n	400156 <_read+0x2e>
  400136:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
  400138:	4e08      	ldr	r6, [pc, #32]	; (40015c <_read+0x34>)
  40013a:	4d09      	ldr	r5, [pc, #36]	; (400160 <_read+0x38>)
  40013c:	6830      	ldr	r0, [r6, #0]
  40013e:	4621      	mov	r1, r4
  400140:	682b      	ldr	r3, [r5, #0]
  400142:	4798      	blx	r3
		ptr++;
  400144:	3401      	adds	r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
  400146:	42a7      	cmp	r7, r4
  400148:	d1f8      	bne.n	40013c <_read+0x14>
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
  40014a:	4640      	mov	r0, r8
  40014c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
		return -1;
  400150:	f04f 30ff 	mov.w	r0, #4294967295
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
}
  400154:	4770      	bx	lr

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
  400156:	2000      	movs	r0, #0
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
}
  400158:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40015c:	2000094c 	.word	0x2000094c
  400160:	20000944 	.word	0x20000944

00400164 <usart_write>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  400164:	6943      	ldr	r3, [r0, #20]
  400166:	f013 0f02 	tst.w	r3, #2
		return 1;
	}

	p_usart->US_THR = US_THR_TXCHR(c);
  40016a:	bf1d      	ittte	ne
  40016c:	f3c1 0108 	ubfxne	r1, r1, #0, #9
  400170:	61c1      	strne	r1, [r0, #28]
	return 0;
  400172:	2000      	movne	r0, #0
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
		return 1;
  400174:	2001      	moveq	r0, #1
	}

	p_usart->US_THR = US_THR_TXCHR(c);
	return 0;
}
  400176:	4770      	bx	lr

00400178 <usart_read>:
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  400178:	6943      	ldr	r3, [r0, #20]
  40017a:	f013 0f01 	tst.w	r3, #1
  40017e:	d005      	beq.n	40018c <usart_read+0x14>
		return 1;
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  400180:	6983      	ldr	r3, [r0, #24]
  400182:	f3c3 0308 	ubfx	r3, r3, #0, #9
  400186:	600b      	str	r3, [r1, #0]

	return 0;
  400188:	2000      	movs	r0, #0
  40018a:	4770      	bx	lr
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
		return 1;
  40018c:	2001      	movs	r0, #1

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;

	return 0;
}
  40018e:	4770      	bx	lr

00400190 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
  400190:	3801      	subs	r0, #1
  400192:	2802      	cmp	r0, #2
  400194:	d815      	bhi.n	4001c2 <_write+0x32>
int __attribute__((weak))
_write (int file, const char *ptr, int len);

int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
  400196:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40019a:	460e      	mov	r6, r1
  40019c:	4614      	mov	r4, r2

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
  40019e:	b19a      	cbz	r2, 4001c8 <_write+0x38>
  4001a0:	460d      	mov	r5, r1
		if (ptr_put(stdio_base, *ptr++) < 0) {
  4001a2:	f8df 8038 	ldr.w	r8, [pc, #56]	; 4001dc <_write+0x4c>
  4001a6:	4f0c      	ldr	r7, [pc, #48]	; (4001d8 <_write+0x48>)
  4001a8:	f8d8 0000 	ldr.w	r0, [r8]
  4001ac:	f815 1b01 	ldrb.w	r1, [r5], #1
  4001b0:	683b      	ldr	r3, [r7, #0]
  4001b2:	4798      	blx	r3
  4001b4:	2800      	cmp	r0, #0
  4001b6:	db0a      	blt.n	4001ce <_write+0x3e>
  4001b8:	1ba8      	subs	r0, r5, r6

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
  4001ba:	3c01      	subs	r4, #1
  4001bc:	d1f4      	bne.n	4001a8 <_write+0x18>
  4001be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
  4001c2:	f04f 30ff 	mov.w	r0, #4294967295
			return -1;
		}
		++nChars;
	}
	return nChars;
}
  4001c6:	4770      	bx	lr

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
  4001c8:	2000      	movs	r0, #0
  4001ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
  4001ce:	f04f 30ff 	mov.w	r0, #4294967295
		}
		++nChars;
	}
	return nChars;
}
  4001d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4001d6:	bf00      	nop
  4001d8:	20000948 	.word	0x20000948
  4001dc:	2000094c 	.word	0x2000094c

004001e0 <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
  4001e0:	b410      	push	{r4}
	uint32_t cd = 0;

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
  4001e2:	23ac      	movs	r3, #172	; 0xac
  4001e4:	6003      	str	r3, [r0, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
  4001e6:	680b      	ldr	r3, [r1, #0]
  4001e8:	684a      	ldr	r2, [r1, #4]
  4001ea:	fbb3 f3f2 	udiv	r3, r3, r2
  4001ee:	091b      	lsrs	r3, r3, #4
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
  4001f0:	1e5c      	subs	r4, r3, #1
  4001f2:	f64f 72fe 	movw	r2, #65534	; 0xfffe
  4001f6:	4294      	cmp	r4, r2
  4001f8:	d80a      	bhi.n	400210 <uart_init+0x30>
		return 1;

	p_uart->UART_BRGR = cd;
  4001fa:	6203      	str	r3, [r0, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
  4001fc:	688b      	ldr	r3, [r1, #8]
  4001fe:	6043      	str	r3, [r0, #4]

#if (!SAMV71 && !SAMV70 && !SAME70 && !SAMS70)
	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
  400200:	f240 2302 	movw	r3, #514	; 0x202
  400204:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120
#endif

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
  400208:	2350      	movs	r3, #80	; 0x50
  40020a:	6003      	str	r3, [r0, #0]

	return 0;
  40020c:	2000      	movs	r0, #0
  40020e:	e000      	b.n	400212 <uart_init+0x32>

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
		return 1;
  400210:	2001      	movs	r0, #1

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;

	return 0;
}
  400212:	bc10      	pop	{r4}
  400214:	4770      	bx	lr
  400216:	bf00      	nop

00400218 <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
  400218:	6943      	ldr	r3, [r0, #20]
  40021a:	f013 0f02 	tst.w	r3, #2
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
  40021e:	bf1a      	itte	ne
  400220:	61c1      	strne	r1, [r0, #28]
	return 0;
  400222:	2000      	movne	r0, #0
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
		return 1;
  400224:	2001      	moveq	r0, #1

	/* Send character */
	p_uart->UART_THR = uc_data;
	return 0;
}
  400226:	4770      	bx	lr

00400228 <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
  400228:	6943      	ldr	r3, [r0, #20]
  40022a:	f013 0f01 	tst.w	r3, #1
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
  40022e:	bf1d      	ittte	ne
  400230:	6983      	ldrne	r3, [r0, #24]
  400232:	700b      	strbne	r3, [r1, #0]
	return 0;
  400234:	2000      	movne	r0, #0
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
		return 1;
  400236:	2001      	moveq	r0, #1

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
	return 0;
}
  400238:	4770      	bx	lr
  40023a:	bf00      	nop

0040023c <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  40023c:	b510      	push	{r4, lr}
	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  40023e:	480e      	ldr	r0, [pc, #56]	; (400278 <sysclk_init+0x3c>)
  400240:	4b0e      	ldr	r3, [pc, #56]	; (40027c <sysclk_init+0x40>)
  400242:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  400244:	213e      	movs	r1, #62	; 0x3e
  400246:	2000      	movs	r0, #0
  400248:	4b0d      	ldr	r3, [pc, #52]	; (400280 <sysclk_init+0x44>)
  40024a:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  40024c:	4c0d      	ldr	r4, [pc, #52]	; (400284 <sysclk_init+0x48>)
  40024e:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  400250:	2800      	cmp	r0, #0
  400252:	d0fc      	beq.n	40024e <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  400254:	4b0c      	ldr	r3, [pc, #48]	; (400288 <sysclk_init+0x4c>)
  400256:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  400258:	4a0c      	ldr	r2, [pc, #48]	; (40028c <sysclk_init+0x50>)
  40025a:	4b0d      	ldr	r3, [pc, #52]	; (400290 <sysclk_init+0x54>)
  40025c:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
  40025e:	4c0d      	ldr	r4, [pc, #52]	; (400294 <sysclk_init+0x58>)
  400260:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  400262:	2800      	cmp	r0, #0
  400264:	d0fc      	beq.n	400260 <sysclk_init+0x24>

		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  400266:	2010      	movs	r0, #16
  400268:	4b0b      	ldr	r3, [pc, #44]	; (400298 <sysclk_init+0x5c>)
  40026a:	4798      	blx	r3
		pmc_switch_mck_to_pllbck(CONFIG_SYSCLK_PRES);
	}
#endif

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  40026c:	4b0b      	ldr	r3, [pc, #44]	; (40029c <sysclk_init+0x60>)
  40026e:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  400270:	4801      	ldr	r0, [pc, #4]	; (400278 <sysclk_init+0x3c>)
  400272:	4b02      	ldr	r3, [pc, #8]	; (40027c <sysclk_init+0x40>)
  400274:	4798      	blx	r3
  400276:	bd10      	pop	{r4, pc}
  400278:	07270e00 	.word	0x07270e00
  40027c:	00400aa9 	.word	0x00400aa9
  400280:	00400809 	.word	0x00400809
  400284:	0040085d 	.word	0x0040085d
  400288:	0040086d 	.word	0x0040086d
  40028c:	20133f01 	.word	0x20133f01
  400290:	400e0400 	.word	0x400e0400
  400294:	0040087d 	.word	0x0040087d
  400298:	004007a1 	.word	0x004007a1
  40029c:	00400995 	.word	0x00400995

004002a0 <board_init>:
#include "conf_board.h"
#include "gpio.h"
#include "ioport.h"

void board_init(void)
{
  4002a0:	b538      	push	{r3, r4, r5, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  4002a2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  4002a6:	4b46      	ldr	r3, [pc, #280]	; (4003c0 <board_init+0x120>)
  4002a8:	605a      	str	r2, [r3, #4]
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  4002aa:	200b      	movs	r0, #11
  4002ac:	4c45      	ldr	r4, [pc, #276]	; (4003c4 <board_init+0x124>)
  4002ae:	47a0      	blx	r4
  4002b0:	200c      	movs	r0, #12
  4002b2:	47a0      	blx	r4
  4002b4:	200d      	movs	r0, #13
  4002b6:	47a0      	blx	r4
	 * Here IOPORT must be initialized for others to use before setting up IO.
	 */
	ioport_init();

	/* Configure LED pins */
	gpio_configure_pin(LED0_GPIO, LED0_FLAGS);
  4002b8:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  4002bc:	2013      	movs	r0, #19
  4002be:	4c42      	ldr	r4, [pc, #264]	; (4003c8 <board_init+0x128>)
  4002c0:	47a0      	blx	r4
	gpio_configure_pin(LED1_GPIO, LED1_FLAGS);
  4002c2:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  4002c6:	2014      	movs	r0, #20
  4002c8:	47a0      	blx	r4

	/* Configure Push Button pins */
	gpio_configure_pin(GPIO_PUSH_BUTTON_1, GPIO_PUSH_BUTTON_1_FLAGS);
  4002ca:	4940      	ldr	r1, [pc, #256]	; (4003cc <board_init+0x12c>)
  4002cc:	2023      	movs	r0, #35	; 0x23
  4002ce:	47a0      	blx	r4
	gpio_configure_pin(GPIO_PUSH_BUTTON_2, GPIO_PUSH_BUTTON_2_FLAGS);
  4002d0:	493f      	ldr	r1, [pc, #252]	; (4003d0 <board_init+0x130>)
  4002d2:	204c      	movs	r0, #76	; 0x4c
  4002d4:	47a0      	blx	r4

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	gpio_configure_group(PINS_UART0_PIO, PINS_UART0, PINS_UART0_FLAGS);
  4002d6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  4002da:	f44f 61c0 	mov.w	r1, #1536	; 0x600
  4002de:	483d      	ldr	r0, [pc, #244]	; (4003d4 <board_init+0x134>)
  4002e0:	4b3d      	ldr	r3, [pc, #244]	; (4003d8 <board_init+0x138>)
  4002e2:	4798      	blx	r3
#endif

	/* Configure ADC example pins */
#ifdef CONF_BOARD_ADC
	/* TC TIOA configuration */
	gpio_configure_pin(PIN_TC0_TIOA0,PIN_TC0_TIOA0_FLAGS);
  4002e4:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  4002e8:	2000      	movs	r0, #0
  4002ea:	47a0      	blx	r4

	/* ADC Trigger configuration */
	gpio_configure_pin(PINS_ADC_TRIG, PINS_ADC_TRIG_FLAG);
  4002ec:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  4002f0:	2008      	movs	r0, #8
  4002f2:	47a0      	blx	r4

	/* PWMH0 configuration */
	gpio_configure_pin(PIN_PWMC_PWMH0_TRIG, PIN_PWMC_PWMH0_TRIG_FLAG);
  4002f4:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  4002f8:	2052      	movs	r0, #82	; 0x52
  4002fa:	47a0      	blx	r4
	gpio_configure_pin(TWI1_CLK_GPIO, TWI1_CLK_FLAGS);
#endif

	/* Configure SPI pins */
#ifdef CONF_BOARD_SPI
	gpio_configure_pin(SPI_MISO_GPIO, SPI_MISO_FLAGS);
  4002fc:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400300:	200c      	movs	r0, #12
  400302:	47a0      	blx	r4
	gpio_configure_pin(SPI_MOSI_GPIO, SPI_MOSI_FLAGS);
  400304:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400308:	200d      	movs	r0, #13
  40030a:	47a0      	blx	r4
	gpio_configure_pin(SPI_SPCK_GPIO, SPI_SPCK_FLAGS);
  40030c:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400310:	200e      	movs	r0, #14
  400312:	47a0      	blx	r4
	 * Hence a different PIN should be selected using the CONF_BOARD_SPI_NPCS_GPIO and
	 * CONF_BOARD_SPI_NPCS_FLAGS macros.
	 */

#  ifdef CONF_BOARD_SPI_NPCS0
	gpio_configure_pin(SPI_NPCS0_GPIO, SPI_NPCS0_FLAGS);
  400314:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400318:	200b      	movs	r0, #11
  40031a:	47a0      	blx	r4
#  endif
#endif /* CONF_BOARD_SPI */

#ifdef CONF_BOARD_USART_RXD
	/* Configure USART RXD pin */
	gpio_configure_pin(PIN_USART1_RXD_IDX, PIN_USART1_RXD_FLAGS);
  40031c:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400320:	2015      	movs	r0, #21
  400322:	47a0      	blx	r4
#endif

#ifdef CONF_BOARD_USART_TXD
	/* Configure USART TXD pin */
	gpio_configure_pin(PIN_USART1_TXD_IDX, PIN_USART1_TXD_FLAGS);
  400324:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400328:	2016      	movs	r0, #22
  40032a:	47a0      	blx	r4
	gpio_configure_pin(PIN_USART1_SCK_IDX, PIN_USART1_SCK_FLAGS);
#endif

#ifdef CONF_BOARD_ADM3312_EN
	/* Configure ADM33312 enable pin */
	gpio_configure_pin(PIN_USART1_EN_IDX, PIN_USART1_EN_FLAGS);
  40032c:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
  400330:	2017      	movs	r0, #23
  400332:	47a0      	blx	r4
	gpio_set_pin_low(PIN_USART1_EN_IDX);
  400334:	2017      	movs	r0, #23
  400336:	4b29      	ldr	r3, [pc, #164]	; (4003dc <board_init+0x13c>)
  400338:	4798      	blx	r3
	gpio_set_pin_low(PIN_RE_IDX);
#endif

#if defined(CONF_BOARD_ILI9325) || defined(CONF_BOARD_ILI93XX)
	/* Configure LCD EBI pins */
	gpio_configure_pin(PIN_EBI_DATA_BUS_D0, PIN_EBI_DATA_BUS_FLAGS);
  40033a:	4d29      	ldr	r5, [pc, #164]	; (4003e0 <board_init+0x140>)
  40033c:	4629      	mov	r1, r5
  40033e:	2040      	movs	r0, #64	; 0x40
  400340:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_DATA_BUS_D1, PIN_EBI_DATA_BUS_FLAGS);
  400342:	4629      	mov	r1, r5
  400344:	2041      	movs	r0, #65	; 0x41
  400346:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_DATA_BUS_D2, PIN_EBI_DATA_BUS_FLAGS);
  400348:	4629      	mov	r1, r5
  40034a:	2042      	movs	r0, #66	; 0x42
  40034c:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_DATA_BUS_D3, PIN_EBI_DATA_BUS_FLAGS);
  40034e:	4629      	mov	r1, r5
  400350:	2043      	movs	r0, #67	; 0x43
  400352:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_DATA_BUS_D4, PIN_EBI_DATA_BUS_FLAGS);
  400354:	4629      	mov	r1, r5
  400356:	2044      	movs	r0, #68	; 0x44
  400358:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_DATA_BUS_D5, PIN_EBI_DATA_BUS_FLAGS);
  40035a:	4629      	mov	r1, r5
  40035c:	2045      	movs	r0, #69	; 0x45
  40035e:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_DATA_BUS_D6, PIN_EBI_DATA_BUS_FLAGS);
  400360:	4629      	mov	r1, r5
  400362:	2046      	movs	r0, #70	; 0x46
  400364:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_DATA_BUS_D7, PIN_EBI_DATA_BUS_FLAGS);
  400366:	4629      	mov	r1, r5
  400368:	2047      	movs	r0, #71	; 0x47
  40036a:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_NRD, PIN_EBI_NRD_FLAGS);
  40036c:	4629      	mov	r1, r5
  40036e:	204b      	movs	r0, #75	; 0x4b
  400370:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_NWE, PIN_EBI_NWE_FLAGS);
  400372:	4629      	mov	r1, r5
  400374:	2048      	movs	r0, #72	; 0x48
  400376:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_NCS1, PIN_EBI_NCS1_FLAGS);
  400378:	4629      	mov	r1, r5
  40037a:	204f      	movs	r0, #79	; 0x4f
  40037c:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_LCD_RS, PIN_EBI_LCD_RS_FLAGS);
  40037e:	4629      	mov	r1, r5
  400380:	2053      	movs	r0, #83	; 0x53
  400382:	47a0      	blx	r4
#endif

#ifdef CONF_BOARD_AAT3155
	/* Configure Backlight control pin */
	gpio_configure_pin(BOARD_AAT31XX_SET_GPIO, BOARD_AAT31XX_SET_FLAGS);
  400384:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
  400388:	204d      	movs	r0, #77	; 0x4d
  40038a:	47a0      	blx	r4
#endif

#ifdef CONF_BOARD_ADS7843
	/* Configure Touchscreen SPI pins */
	gpio_configure_pin(BOARD_ADS7843_IRQ_GPIO,BOARD_ADS7843_IRQ_FLAGS);
  40038c:	f105 5500 	add.w	r5, r5, #536870912	; 0x20000000
  400390:	4629      	mov	r1, r5
  400392:	2010      	movs	r0, #16
  400394:	47a0      	blx	r4
	gpio_configure_pin(BOARD_ADS7843_BUSY_GPIO, BOARD_ADS7843_BUSY_FLAGS);
  400396:	4629      	mov	r1, r5
  400398:	2011      	movs	r0, #17
  40039a:	47a0      	blx	r4
	gpio_configure_pin(SPI_MISO_GPIO, SPI_MISO_FLAGS);
  40039c:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4003a0:	200c      	movs	r0, #12
  4003a2:	47a0      	blx	r4
	gpio_configure_pin(SPI_MOSI_GPIO, SPI_MOSI_FLAGS);
  4003a4:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4003a8:	200d      	movs	r0, #13
  4003aa:	47a0      	blx	r4
	gpio_configure_pin(SPI_SPCK_GPIO, SPI_SPCK_FLAGS);
  4003ac:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4003b0:	200e      	movs	r0, #14
  4003b2:	47a0      	blx	r4
	gpio_configure_pin(SPI_NPCS0_GPIO, SPI_NPCS0_FLAGS);
  4003b4:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4003b8:	200b      	movs	r0, #11
  4003ba:	47a0      	blx	r4
  4003bc:	bd38      	pop	{r3, r4, r5, pc}
  4003be:	bf00      	nop
  4003c0:	400e1450 	.word	0x400e1450
  4003c4:	0040088d 	.word	0x0040088d
  4003c8:	004004fd 	.word	0x004004fd
  4003cc:	28000079 	.word	0x28000079
  4003d0:	28000059 	.word	0x28000059
  4003d4:	400e0e00 	.word	0x400e0e00
  4003d8:	00400621 	.word	0x00400621
  4003dc:	004004e1 	.word	0x004004e1
  4003e0:	08000001 	.word	0x08000001

004003e4 <pio_set>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_SODR = ul_mask;
  4003e4:	6301      	str	r1, [r0, #48]	; 0x30
  4003e6:	4770      	bx	lr

004003e8 <pio_clear>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_clear(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_CODR = ul_mask;
  4003e8:	6341      	str	r1, [r0, #52]	; 0x34
  4003ea:	4770      	bx	lr

004003ec <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  4003ec:	6442      	str	r2, [r0, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  4003ee:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  4003f2:	d02f      	beq.n	400454 <pio_set_peripheral+0x68>
  4003f4:	d807      	bhi.n	400406 <pio_set_peripheral+0x1a>
  4003f6:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  4003fa:	d014      	beq.n	400426 <pio_set_peripheral+0x3a>
  4003fc:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  400400:	d01e      	beq.n	400440 <pio_set_peripheral+0x54>
  400402:	b939      	cbnz	r1, 400414 <pio_set_peripheral+0x28>
  400404:	4770      	bx	lr
  400406:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  40040a:	d036      	beq.n	40047a <pio_set_peripheral+0x8e>
  40040c:	d804      	bhi.n	400418 <pio_set_peripheral+0x2c>
  40040e:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  400412:	d029      	beq.n	400468 <pio_set_peripheral+0x7c>
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  400414:	6042      	str	r2, [r0, #4]
  400416:	4770      	bx	lr

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  400418:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  40041c:	d02d      	beq.n	40047a <pio_set_peripheral+0x8e>
  40041e:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  400422:	d02a      	beq.n	40047a <pio_set_peripheral+0x8e>
  400424:	e7f6      	b.n	400414 <pio_set_peripheral+0x28>
 * \param ul_type PIO type.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set_peripheral(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask)
{
  400426:	b410      	push	{r4}
	p_pio->PIO_IDR = ul_mask;

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABCDSR[0];
  400428:	6f04      	ldr	r4, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  40042a:	6f01      	ldr	r1, [r0, #112]	; 0x70
  40042c:	43d3      	mvns	r3, r2
  40042e:	4021      	ands	r1, r4
  400430:	4019      	ands	r1, r3
  400432:	6701      	str	r1, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  400434:	6f44      	ldr	r4, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  400436:	6f41      	ldr	r1, [r0, #116]	; 0x74
  400438:	4021      	ands	r1, r4
  40043a:	400b      	ands	r3, r1
  40043c:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  40043e:	e01a      	b.n	400476 <pio_set_peripheral+0x8a>
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  400440:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  400442:	4313      	orrs	r3, r2
  400444:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  400446:	6f41      	ldr	r1, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  400448:	6f43      	ldr	r3, [r0, #116]	; 0x74
  40044a:	400b      	ands	r3, r1
  40044c:	ea23 0302 	bic.w	r3, r3, r2
  400450:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  400452:	e7df      	b.n	400414 <pio_set_peripheral+0x28>
#if (!SAMG)
	case PIO_PERIPH_C:
		ul_sr = p_pio->PIO_ABCDSR[0];
  400454:	6f01      	ldr	r1, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  400456:	6f03      	ldr	r3, [r0, #112]	; 0x70
  400458:	400b      	ands	r3, r1
  40045a:	ea23 0302 	bic.w	r3, r3, r2
  40045e:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  400460:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  400462:	4313      	orrs	r3, r2
  400464:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  400466:	e7d5      	b.n	400414 <pio_set_peripheral+0x28>
	case PIO_PERIPH_D:
		ul_sr = p_pio->PIO_ABCDSR[0];
  400468:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  40046a:	4313      	orrs	r3, r2
  40046c:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  40046e:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  400470:	4313      	orrs	r3, r2
  400472:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  400474:	e7ce      	b.n	400414 <pio_set_peripheral+0x28>
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  400476:	6042      	str	r2, [r0, #4]
}
  400478:	bc10      	pop	{r4}
  40047a:	4770      	bx	lr

0040047c <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  40047c:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  40047e:	f012 0f01 	tst.w	r2, #1
		p_pio->PIO_PUER = ul_mask;
  400482:	bf14      	ite	ne
  400484:	6641      	strne	r1, [r0, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  400486:	6601      	streq	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  400488:	f012 0f0a 	tst.w	r2, #10
		p_pio->PIO_IFER = ul_mask;
  40048c:	bf14      	ite	ne
  40048e:	6201      	strne	r1, [r0, #32]
	} else {
		p_pio->PIO_IFDR = ul_mask;
  400490:	6241      	streq	r1, [r0, #36]	; 0x24
	}

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
  400492:	f012 0f02 	tst.w	r2, #2
  400496:	d002      	beq.n	40049e <pio_set_input+0x22>
		p_pio->PIO_IFSCDR = ul_mask;
  400498:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
  40049c:	e004      	b.n	4004a8 <pio_set_input+0x2c>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
  40049e:	f012 0f08 	tst.w	r2, #8
			p_pio->PIO_IFSCER = ul_mask;
  4004a2:	bf18      	it	ne
  4004a4:	f8c0 1084 	strne.w	r1, [r0, #132]	; 0x84
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
  4004a8:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
  4004aa:	6001      	str	r1, [r0, #0]
  4004ac:	4770      	bx	lr
  4004ae:	bf00      	nop

004004b0 <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
  4004b0:	b410      	push	{r4}
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  4004b2:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  4004b4:	9c01      	ldr	r4, [sp, #4]
  4004b6:	b10c      	cbz	r4, 4004bc <pio_set_output+0xc>
		p_pio->PIO_PUER = ul_mask;
  4004b8:	6641      	str	r1, [r0, #100]	; 0x64
  4004ba:	e000      	b.n	4004be <pio_set_output+0xe>
	} else {
		p_pio->PIO_PUDR = ul_mask;
  4004bc:	6601      	str	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
  4004be:	b10b      	cbz	r3, 4004c4 <pio_set_output+0x14>
		p_pio->PIO_MDER = ul_mask;
  4004c0:	6501      	str	r1, [r0, #80]	; 0x50
  4004c2:	e000      	b.n	4004c6 <pio_set_output+0x16>
	} else {
		p_pio->PIO_MDDR = ul_mask;
  4004c4:	6541      	str	r1, [r0, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
  4004c6:	b10a      	cbz	r2, 4004cc <pio_set_output+0x1c>
		p_pio->PIO_SODR = ul_mask;
  4004c8:	6301      	str	r1, [r0, #48]	; 0x30
  4004ca:	e000      	b.n	4004ce <pio_set_output+0x1e>
	} else {
		p_pio->PIO_CODR = ul_mask;
  4004cc:	6341      	str	r1, [r0, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
  4004ce:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
  4004d0:	6001      	str	r1, [r0, #0]
}
  4004d2:	bc10      	pop	{r4}
  4004d4:	4770      	bx	lr
  4004d6:	bf00      	nop

004004d8 <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  4004d8:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  4004da:	4770      	bx	lr

004004dc <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  4004dc:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  4004de:	4770      	bx	lr

004004e0 <pio_set_pin_low>:
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  4004e0:	0943      	lsrs	r3, r0, #5
  4004e2:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  4004e6:	f203 7307 	addw	r3, r3, #1799	; 0x707
  4004ea:	025b      	lsls	r3, r3, #9
void pio_set_pin_low(uint32_t ul_pin)
{
	Pio *p_pio = pio_get_pin_group(ul_pin);

	/* Value to be driven on the I/O line: 0. */
	p_pio->PIO_CODR = 1 << (ul_pin & 0x1F);
  4004ec:	f000 001f 	and.w	r0, r0, #31
  4004f0:	2201      	movs	r2, #1
  4004f2:	fa02 f000 	lsl.w	r0, r2, r0
  4004f6:	6358      	str	r0, [r3, #52]	; 0x34
  4004f8:	4770      	bx	lr
  4004fa:	bf00      	nop

004004fc <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
  4004fc:	b570      	push	{r4, r5, r6, lr}
  4004fe:	b082      	sub	sp, #8
  400500:	460d      	mov	r5, r1
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  400502:	0943      	lsrs	r3, r0, #5
  400504:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  400508:	f203 7307 	addw	r3, r3, #1799	; 0x707
  40050c:	025c      	lsls	r4, r3, #9
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
	Pio *p_pio = pio_get_pin_group(ul_pin);

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
  40050e:	f001 43f0 	and.w	r3, r1, #2013265920	; 0x78000000
  400512:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  400516:	d047      	beq.n	4005a8 <pio_configure_pin+0xac>
  400518:	d809      	bhi.n	40052e <pio_configure_pin+0x32>
  40051a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  40051e:	d021      	beq.n	400564 <pio_configure_pin+0x68>
  400520:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  400524:	d02f      	beq.n	400586 <pio_configure_pin+0x8a>
  400526:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  40052a:	d16f      	bne.n	40060c <pio_configure_pin+0x110>
  40052c:	e009      	b.n	400542 <pio_configure_pin+0x46>
  40052e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  400532:	d055      	beq.n	4005e0 <pio_configure_pin+0xe4>
  400534:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  400538:	d052      	beq.n	4005e0 <pio_configure_pin+0xe4>
  40053a:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  40053e:	d044      	beq.n	4005ca <pio_configure_pin+0xce>
  400540:	e064      	b.n	40060c <pio_configure_pin+0x110>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
  400542:	f000 001f 	and.w	r0, r0, #31
  400546:	2601      	movs	r6, #1
  400548:	4086      	lsls	r6, r0
  40054a:	4632      	mov	r2, r6
  40054c:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400550:	4620      	mov	r0, r4
  400552:	4b30      	ldr	r3, [pc, #192]	; (400614 <pio_configure_pin+0x118>)
  400554:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  400556:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  40055a:	bf14      	ite	ne
  40055c:	6666      	strne	r6, [r4, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  40055e:	6626      	streq	r6, [r4, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  400560:	2001      	movs	r0, #1
  400562:	e054      	b.n	40060e <pio_configure_pin+0x112>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
  400564:	f000 001f 	and.w	r0, r0, #31
  400568:	2601      	movs	r6, #1
  40056a:	4086      	lsls	r6, r0
  40056c:	4632      	mov	r2, r6
  40056e:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400572:	4620      	mov	r0, r4
  400574:	4b27      	ldr	r3, [pc, #156]	; (400614 <pio_configure_pin+0x118>)
  400576:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  400578:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  40057c:	bf14      	ite	ne
  40057e:	6666      	strne	r6, [r4, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  400580:	6626      	streq	r6, [r4, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  400582:	2001      	movs	r0, #1
  400584:	e043      	b.n	40060e <pio_configure_pin+0x112>
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	case PIO_TYPE_PIO_PERIPH_C:
		pio_set_peripheral(p_pio, PIO_PERIPH_C, (1 << (ul_pin & 0x1F)));
  400586:	f000 001f 	and.w	r0, r0, #31
  40058a:	2601      	movs	r6, #1
  40058c:	4086      	lsls	r6, r0
  40058e:	4632      	mov	r2, r6
  400590:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  400594:	4620      	mov	r0, r4
  400596:	4b1f      	ldr	r3, [pc, #124]	; (400614 <pio_configure_pin+0x118>)
  400598:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  40059a:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  40059e:	bf14      	ite	ne
  4005a0:	6666      	strne	r6, [r4, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  4005a2:	6626      	streq	r6, [r4, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  4005a4:	2001      	movs	r0, #1
  4005a6:	e032      	b.n	40060e <pio_configure_pin+0x112>
		pio_set_peripheral(p_pio, PIO_PERIPH_C, (1 << (ul_pin & 0x1F)));
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_D:
		pio_set_peripheral(p_pio, PIO_PERIPH_D, (1 << (ul_pin & 0x1F)));
  4005a8:	f000 001f 	and.w	r0, r0, #31
  4005ac:	2601      	movs	r6, #1
  4005ae:	4086      	lsls	r6, r0
  4005b0:	4632      	mov	r2, r6
  4005b2:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  4005b6:	4620      	mov	r0, r4
  4005b8:	4b16      	ldr	r3, [pc, #88]	; (400614 <pio_configure_pin+0x118>)
  4005ba:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  4005bc:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  4005c0:	bf14      	ite	ne
  4005c2:	6666      	strne	r6, [r4, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  4005c4:	6626      	streq	r6, [r4, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  4005c6:	2001      	movs	r0, #1
  4005c8:	e021      	b.n	40060e <pio_configure_pin+0x112>
				(ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
  4005ca:	f000 011f 	and.w	r1, r0, #31
  4005ce:	2601      	movs	r6, #1
  4005d0:	462a      	mov	r2, r5
  4005d2:	fa06 f101 	lsl.w	r1, r6, r1
  4005d6:	4620      	mov	r0, r4
  4005d8:	4b0f      	ldr	r3, [pc, #60]	; (400618 <pio_configure_pin+0x11c>)
  4005da:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
  4005dc:	4630      	mov	r0, r6
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;
  4005de:	e016      	b.n	40060e <pio_configure_pin+0x112>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  4005e0:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
  4005e4:	f000 011f 	and.w	r1, r0, #31
  4005e8:	2601      	movs	r6, #1
  4005ea:	ea05 0306 	and.w	r3, r5, r6
  4005ee:	9300      	str	r3, [sp, #0]
  4005f0:	f3c5 0380 	ubfx	r3, r5, #2, #1
  4005f4:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
  4005f8:	bf14      	ite	ne
  4005fa:	2200      	movne	r2, #0
  4005fc:	2201      	moveq	r2, #1
  4005fe:	fa06 f101 	lsl.w	r1, r6, r1
  400602:	4620      	mov	r0, r4
  400604:	4c05      	ldr	r4, [pc, #20]	; (40061c <pio_configure_pin+0x120>)
  400606:	47a0      	blx	r4

	default:
		return 0;
	}

	return 1;
  400608:	4630      	mov	r0, r6
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
  40060a:	e000      	b.n	40060e <pio_configure_pin+0x112>

	default:
		return 0;
  40060c:	2000      	movs	r0, #0
	}

	return 1;
}
  40060e:	b002      	add	sp, #8
  400610:	bd70      	pop	{r4, r5, r6, pc}
  400612:	bf00      	nop
  400614:	004003ed 	.word	0x004003ed
  400618:	0040047d 	.word	0x0040047d
  40061c:	004004b1 	.word	0x004004b1

00400620 <pio_configure_pin_group>:
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin_group(Pio *p_pio,
		uint32_t ul_mask, const uint32_t ul_flags)
{
  400620:	b570      	push	{r4, r5, r6, lr}
  400622:	b082      	sub	sp, #8
  400624:	4605      	mov	r5, r0
  400626:	460e      	mov	r6, r1
  400628:	4614      	mov	r4, r2
	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
  40062a:	f002 43f0 	and.w	r3, r2, #2013265920	; 0x78000000
  40062e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  400632:	d038      	beq.n	4006a6 <pio_configure_pin_group+0x86>
  400634:	d809      	bhi.n	40064a <pio_configure_pin_group+0x2a>
  400636:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  40063a:	d01c      	beq.n	400676 <pio_configure_pin_group+0x56>
  40063c:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  400640:	d025      	beq.n	40068e <pio_configure_pin_group+0x6e>
  400642:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  400646:	d150      	bne.n	4006ea <pio_configure_pin_group+0xca>
  400648:	e009      	b.n	40065e <pio_configure_pin_group+0x3e>
  40064a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  40064e:	d03a      	beq.n	4006c6 <pio_configure_pin_group+0xa6>
  400650:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  400654:	d037      	beq.n	4006c6 <pio_configure_pin_group+0xa6>
  400656:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  40065a:	d030      	beq.n	4006be <pio_configure_pin_group+0x9e>
  40065c:	e045      	b.n	4006ea <pio_configure_pin_group+0xca>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
  40065e:	460a      	mov	r2, r1
  400660:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400664:	4b22      	ldr	r3, [pc, #136]	; (4006f0 <pio_configure_pin_group+0xd0>)
  400666:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  400668:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
  40066c:	bf14      	ite	ne
  40066e:	666e      	strne	r6, [r5, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  400670:	662e      	streq	r6, [r5, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  400672:	2001      	movs	r0, #1
  400674:	e03a      	b.n	4006ec <pio_configure_pin_group+0xcc>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
  400676:	460a      	mov	r2, r1
  400678:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  40067c:	4b1c      	ldr	r3, [pc, #112]	; (4006f0 <pio_configure_pin_group+0xd0>)
  40067e:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  400680:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
  400684:	bf14      	ite	ne
  400686:	666e      	strne	r6, [r5, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  400688:	662e      	streq	r6, [r5, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  40068a:	2001      	movs	r0, #1
  40068c:	e02e      	b.n	4006ec <pio_configure_pin_group+0xcc>
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	case PIO_TYPE_PIO_PERIPH_C:
		pio_set_peripheral(p_pio, PIO_PERIPH_C, ul_mask);
  40068e:	460a      	mov	r2, r1
  400690:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  400694:	4b16      	ldr	r3, [pc, #88]	; (4006f0 <pio_configure_pin_group+0xd0>)
  400696:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  400698:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
  40069c:	bf14      	ite	ne
  40069e:	666e      	strne	r6, [r5, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  4006a0:	662e      	streq	r6, [r5, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  4006a2:	2001      	movs	r0, #1
  4006a4:	e022      	b.n	4006ec <pio_configure_pin_group+0xcc>
	case PIO_TYPE_PIO_PERIPH_C:
		pio_set_peripheral(p_pio, PIO_PERIPH_C, ul_mask);
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_D:
		pio_set_peripheral(p_pio, PIO_PERIPH_D, ul_mask);
  4006a6:	460a      	mov	r2, r1
  4006a8:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  4006ac:	4b10      	ldr	r3, [pc, #64]	; (4006f0 <pio_configure_pin_group+0xd0>)
  4006ae:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  4006b0:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
  4006b4:	bf14      	ite	ne
  4006b6:	666e      	strne	r6, [r5, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  4006b8:	662e      	streq	r6, [r5, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  4006ba:	2001      	movs	r0, #1
  4006bc:	e016      	b.n	4006ec <pio_configure_pin_group+0xcc>
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
  4006be:	4b0d      	ldr	r3, [pc, #52]	; (4006f4 <pio_configure_pin_group+0xd4>)
  4006c0:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
  4006c2:	2001      	movs	r0, #1
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;
  4006c4:	e012      	b.n	4006ec <pio_configure_pin_group+0xcc>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
  4006c6:	f004 5260 	and.w	r2, r4, #939524096	; 0x38000000
  4006ca:	f004 0301 	and.w	r3, r4, #1
  4006ce:	9300      	str	r3, [sp, #0]
  4006d0:	f3c4 0380 	ubfx	r3, r4, #2, #1
  4006d4:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
  4006d8:	bf14      	ite	ne
  4006da:	2200      	movne	r2, #0
  4006dc:	2201      	moveq	r2, #1
  4006de:	4631      	mov	r1, r6
  4006e0:	4628      	mov	r0, r5
  4006e2:	4c05      	ldr	r4, [pc, #20]	; (4006f8 <pio_configure_pin_group+0xd8>)
  4006e4:	47a0      	blx	r4

	default:
		return 0;
	}

	return 1;
  4006e6:	2001      	movs	r0, #1
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
  4006e8:	e000      	b.n	4006ec <pio_configure_pin_group+0xcc>

	default:
		return 0;
  4006ea:	2000      	movs	r0, #0
	}

	return 1;
}
  4006ec:	b002      	add	sp, #8
  4006ee:	bd70      	pop	{r4, r5, r6, pc}
  4006f0:	004003ed 	.word	0x004003ed
  4006f4:	0040047d 	.word	0x0040047d
  4006f8:	004004b1 	.word	0x004004b1

004006fc <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  4006fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  400700:	4681      	mov	r9, r0
  400702:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  400704:	4b12      	ldr	r3, [pc, #72]	; (400750 <pio_handler_process+0x54>)
  400706:	4798      	blx	r3
  400708:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  40070a:	4648      	mov	r0, r9
  40070c:	4b11      	ldr	r3, [pc, #68]	; (400754 <pio_handler_process+0x58>)
  40070e:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
  400710:	4005      	ands	r5, r0
  400712:	d013      	beq.n	40073c <pio_handler_process+0x40>
  400714:	4c10      	ldr	r4, [pc, #64]	; (400758 <pio_handler_process+0x5c>)
  400716:	f104 0660 	add.w	r6, r4, #96	; 0x60
		/* Find triggering source */
		i = 0;
		while (status != 0) {
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
  40071a:	6823      	ldr	r3, [r4, #0]
  40071c:	4543      	cmp	r3, r8
  40071e:	d108      	bne.n	400732 <pio_handler_process+0x36>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  400720:	6861      	ldr	r1, [r4, #4]
  400722:	4229      	tst	r1, r5
  400724:	d005      	beq.n	400732 <pio_handler_process+0x36>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  400726:	68e3      	ldr	r3, [r4, #12]
  400728:	4640      	mov	r0, r8
  40072a:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
  40072c:	6863      	ldr	r3, [r4, #4]
  40072e:	ea25 0503 	bic.w	r5, r5, r3
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
  400732:	42b4      	cmp	r4, r6
  400734:	d002      	beq.n	40073c <pio_handler_process+0x40>
  400736:	3410      	adds	r4, #16

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
  400738:	2d00      	cmp	r5, #0
  40073a:	d1ee      	bne.n	40071a <pio_handler_process+0x1e>
		}
	}

	/* Check capture events */
#if (SAM3S || SAM4S || SAM4E)
	if (pio_capture_enable_flag) {
  40073c:	4b07      	ldr	r3, [pc, #28]	; (40075c <pio_handler_process+0x60>)
  40073e:	681b      	ldr	r3, [r3, #0]
  400740:	b123      	cbz	r3, 40074c <pio_handler_process+0x50>
		if (pio_capture_handler) {
  400742:	4b07      	ldr	r3, [pc, #28]	; (400760 <pio_handler_process+0x64>)
  400744:	681b      	ldr	r3, [r3, #0]
  400746:	b10b      	cbz	r3, 40074c <pio_handler_process+0x50>
			pio_capture_handler(p_pio);
  400748:	4648      	mov	r0, r9
  40074a:	4798      	blx	r3
  40074c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  400750:	004004d9 	.word	0x004004d9
  400754:	004004dd 	.word	0x004004dd
  400758:	2000089c 	.word	0x2000089c
  40075c:	20000950 	.word	0x20000950
  400760:	20000898 	.word	0x20000898

00400764 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  400764:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
  400766:	210b      	movs	r1, #11
  400768:	4801      	ldr	r0, [pc, #4]	; (400770 <PIOA_Handler+0xc>)
  40076a:	4b02      	ldr	r3, [pc, #8]	; (400774 <PIOA_Handler+0x10>)
  40076c:	4798      	blx	r3
  40076e:	bd08      	pop	{r3, pc}
  400770:	400e0e00 	.word	0x400e0e00
  400774:	004006fd 	.word	0x004006fd

00400778 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  400778:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  40077a:	210c      	movs	r1, #12
  40077c:	4801      	ldr	r0, [pc, #4]	; (400784 <PIOB_Handler+0xc>)
  40077e:	4b02      	ldr	r3, [pc, #8]	; (400788 <PIOB_Handler+0x10>)
  400780:	4798      	blx	r3
  400782:	bd08      	pop	{r3, pc}
  400784:	400e1000 	.word	0x400e1000
  400788:	004006fd 	.word	0x004006fd

0040078c <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  40078c:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
  40078e:	210d      	movs	r1, #13
  400790:	4801      	ldr	r0, [pc, #4]	; (400798 <PIOC_Handler+0xc>)
  400792:	4b02      	ldr	r3, [pc, #8]	; (40079c <PIOC_Handler+0x10>)
  400794:	4798      	blx	r3
  400796:	bd08      	pop	{r3, pc}
  400798:	400e1200 	.word	0x400e1200
  40079c:	004006fd 	.word	0x004006fd

004007a0 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  4007a0:	4a18      	ldr	r2, [pc, #96]	; (400804 <pmc_switch_mck_to_pllack+0x64>)
  4007a2:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4007a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  4007a8:	4318      	orrs	r0, r3
  4007aa:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4007ac:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4007ae:	f013 0f08 	tst.w	r3, #8
  4007b2:	d003      	beq.n	4007bc <pmc_switch_mck_to_pllack+0x1c>
  4007b4:	e009      	b.n	4007ca <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  4007b6:	3b01      	subs	r3, #1
  4007b8:	d103      	bne.n	4007c2 <pmc_switch_mck_to_pllack+0x22>
  4007ba:	e01e      	b.n	4007fa <pmc_switch_mck_to_pllack+0x5a>
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4007bc:	f44f 6300 	mov.w	r3, #2048	; 0x800
  4007c0:	4910      	ldr	r1, [pc, #64]	; (400804 <pmc_switch_mck_to_pllack+0x64>)
  4007c2:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  4007c4:	f012 0f08 	tst.w	r2, #8
  4007c8:	d0f5      	beq.n	4007b6 <pmc_switch_mck_to_pllack+0x16>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  4007ca:	4a0e      	ldr	r2, [pc, #56]	; (400804 <pmc_switch_mck_to_pllack+0x64>)
  4007cc:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4007ce:	f023 0303 	bic.w	r3, r3, #3
  4007d2:	f043 0302 	orr.w	r3, r3, #2
  4007d6:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4007d8:	6e90      	ldr	r0, [r2, #104]	; 0x68
  4007da:	f010 0008 	ands.w	r0, r0, #8
  4007de:	d004      	beq.n	4007ea <pmc_switch_mck_to_pllack+0x4a>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
  4007e0:	2000      	movs	r0, #0
  4007e2:	4770      	bx	lr
	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
  4007e4:	3b01      	subs	r3, #1
  4007e6:	d103      	bne.n	4007f0 <pmc_switch_mck_to_pllack+0x50>
  4007e8:	e009      	b.n	4007fe <pmc_switch_mck_to_pllack+0x5e>
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4007ea:	f44f 6300 	mov.w	r3, #2048	; 0x800
  4007ee:	4905      	ldr	r1, [pc, #20]	; (400804 <pmc_switch_mck_to_pllack+0x64>)
  4007f0:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  4007f2:	f012 0f08 	tst.w	r2, #8
  4007f6:	d0f5      	beq.n	4007e4 <pmc_switch_mck_to_pllack+0x44>
  4007f8:	4770      	bx	lr

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
  4007fa:	2001      	movs	r0, #1
  4007fc:	4770      	bx	lr
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
  4007fe:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  400800:	4770      	bx	lr
  400802:	bf00      	nop
  400804:	400e0400 	.word	0x400e0400

00400808 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  400808:	b138      	cbz	r0, 40081a <pmc_switch_mainck_to_xtal+0x12>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  40080a:	4911      	ldr	r1, [pc, #68]	; (400850 <pmc_switch_mainck_to_xtal+0x48>)
  40080c:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  40080e:	4a11      	ldr	r2, [pc, #68]	; (400854 <pmc_switch_mainck_to_xtal+0x4c>)
  400810:	401a      	ands	r2, r3
  400812:	4b11      	ldr	r3, [pc, #68]	; (400858 <pmc_switch_mainck_to_xtal+0x50>)
  400814:	4313      	orrs	r3, r2
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  400816:	620b      	str	r3, [r1, #32]
  400818:	4770      	bx	lr
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  40081a:	480d      	ldr	r0, [pc, #52]	; (400850 <pmc_switch_mainck_to_xtal+0x48>)
  40081c:	6a02      	ldr	r2, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  40081e:	0209      	lsls	r1, r1, #8
  400820:	b289      	uxth	r1, r1
  400822:	f422 135c 	bic.w	r3, r2, #3604480	; 0x370000
  400826:	f023 0303 	bic.w	r3, r3, #3
  40082a:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  40082e:	f043 0301 	orr.w	r3, r3, #1
  400832:	430b      	orrs	r3, r1
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  400834:	6203      	str	r3, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  400836:	4602      	mov	r2, r0
  400838:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40083a:	f013 0f01 	tst.w	r3, #1
  40083e:	d0fb      	beq.n	400838 <pmc_switch_mainck_to_xtal+0x30>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  400840:	4a03      	ldr	r2, [pc, #12]	; (400850 <pmc_switch_mainck_to_xtal+0x48>)
  400842:	6a13      	ldr	r3, [r2, #32]
  400844:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
  400848:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  40084c:	6213      	str	r3, [r2, #32]
  40084e:	4770      	bx	lr
  400850:	400e0400 	.word	0x400e0400
  400854:	fec8fffc 	.word	0xfec8fffc
  400858:	01370002 	.word	0x01370002

0040085c <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  40085c:	4b02      	ldr	r3, [pc, #8]	; (400868 <pmc_osc_is_ready_mainck+0xc>)
  40085e:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  400860:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  400864:	4770      	bx	lr
  400866:	bf00      	nop
  400868:	400e0400 	.word	0x400e0400

0040086c <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  40086c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  400870:	4b01      	ldr	r3, [pc, #4]	; (400878 <pmc_disable_pllack+0xc>)
  400872:	629a      	str	r2, [r3, #40]	; 0x28
  400874:	4770      	bx	lr
  400876:	bf00      	nop
  400878:	400e0400 	.word	0x400e0400

0040087c <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  40087c:	4b02      	ldr	r3, [pc, #8]	; (400888 <pmc_is_locked_pllack+0xc>)
  40087e:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  400880:	f000 0002 	and.w	r0, r0, #2
  400884:	4770      	bx	lr
  400886:	bf00      	nop
  400888:	400e0400 	.word	0x400e0400

0040088c <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
  40088c:	2822      	cmp	r0, #34	; 0x22
  40088e:	d81e      	bhi.n	4008ce <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
  400890:	281f      	cmp	r0, #31
  400892:	d80c      	bhi.n	4008ae <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  400894:	4b11      	ldr	r3, [pc, #68]	; (4008dc <pmc_enable_periph_clk+0x50>)
  400896:	699a      	ldr	r2, [r3, #24]
  400898:	2301      	movs	r3, #1
  40089a:	4083      	lsls	r3, r0
  40089c:	4393      	bics	r3, r2
  40089e:	d018      	beq.n	4008d2 <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
  4008a0:	2301      	movs	r3, #1
  4008a2:	fa03 f000 	lsl.w	r0, r3, r0
  4008a6:	4b0d      	ldr	r3, [pc, #52]	; (4008dc <pmc_enable_periph_clk+0x50>)
  4008a8:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  4008aa:	2000      	movs	r0, #0
  4008ac:	4770      	bx	lr
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
  4008ae:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  4008b0:	4b0a      	ldr	r3, [pc, #40]	; (4008dc <pmc_enable_periph_clk+0x50>)
  4008b2:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  4008b6:	2301      	movs	r3, #1
  4008b8:	4083      	lsls	r3, r0
  4008ba:	4393      	bics	r3, r2
  4008bc:	d00b      	beq.n	4008d6 <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
  4008be:	2301      	movs	r3, #1
  4008c0:	fa03 f000 	lsl.w	r0, r3, r0
  4008c4:	4b05      	ldr	r3, [pc, #20]	; (4008dc <pmc_enable_periph_clk+0x50>)
  4008c6:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
		}
#endif
	}

	return 0;
  4008ca:	2000      	movs	r0, #0
  4008cc:	4770      	bx	lr
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
		return 1;
  4008ce:	2001      	movs	r0, #1
  4008d0:	4770      	bx	lr
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  4008d2:	2000      	movs	r0, #0
  4008d4:	4770      	bx	lr
  4008d6:	2000      	movs	r0, #0
}
  4008d8:	4770      	bx	lr
  4008da:	bf00      	nop
  4008dc:	400e0400 	.word	0x400e0400

004008e0 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  4008e0:	e7fe      	b.n	4008e0 <Dummy_Handler>
  4008e2:	bf00      	nop

004008e4 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  4008e4:	b508      	push	{r3, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc > pDest) {
  4008e6:	4b20      	ldr	r3, [pc, #128]	; (400968 <Reset_Handler+0x84>)
  4008e8:	4a20      	ldr	r2, [pc, #128]	; (40096c <Reset_Handler+0x88>)
  4008ea:	429a      	cmp	r2, r3
  4008ec:	d912      	bls.n	400914 <Reset_Handler+0x30>
		for (; pDest < &_erelocate;) {
  4008ee:	4b20      	ldr	r3, [pc, #128]	; (400970 <Reset_Handler+0x8c>)
  4008f0:	4a1d      	ldr	r2, [pc, #116]	; (400968 <Reset_Handler+0x84>)
  4008f2:	429a      	cmp	r2, r3
  4008f4:	d21e      	bcs.n	400934 <Reset_Handler+0x50>
  4008f6:	4611      	mov	r1, r2
  4008f8:	3b01      	subs	r3, #1
  4008fa:	1a9b      	subs	r3, r3, r2
  4008fc:	f023 0303 	bic.w	r3, r3, #3
  400900:	3304      	adds	r3, #4
  400902:	4a1a      	ldr	r2, [pc, #104]	; (40096c <Reset_Handler+0x88>)
  400904:	4413      	add	r3, r2
			*pDest++ = *pSrc++;
  400906:	f852 0b04 	ldr.w	r0, [r2], #4
  40090a:	f841 0b04 	str.w	r0, [r1], #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc > pDest) {
		for (; pDest < &_erelocate;) {
  40090e:	429a      	cmp	r2, r3
  400910:	d1f9      	bne.n	400906 <Reset_Handler+0x22>
  400912:	e00f      	b.n	400934 <Reset_Handler+0x50>
			*pDest++ = *pSrc++;
		}
	} else if (pSrc < pDest) {
  400914:	4b14      	ldr	r3, [pc, #80]	; (400968 <Reset_Handler+0x84>)
  400916:	4a15      	ldr	r2, [pc, #84]	; (40096c <Reset_Handler+0x88>)
  400918:	429a      	cmp	r2, r3
  40091a:	d20b      	bcs.n	400934 <Reset_Handler+0x50>
		uint32_t nb_bytes = (uint32_t)&_erelocate - (uint32_t)&_srelocate;
  40091c:	4b14      	ldr	r3, [pc, #80]	; (400970 <Reset_Handler+0x8c>)
  40091e:	4a12      	ldr	r2, [pc, #72]	; (400968 <Reset_Handler+0x84>)
  400920:	1a9a      	subs	r2, r3, r2
  400922:	4814      	ldr	r0, [pc, #80]	; (400974 <Reset_Handler+0x90>)
		pSrc = (uint32_t*)((uint32_t)pSrc + nb_bytes) - 1;
  400924:	1811      	adds	r1, r2, r0
		pDest = (uint32_t*)((uint32_t)pDest + nb_bytes) - 1;
		for (;nb_bytes;nb_bytes -= 4) {
  400926:	b12a      	cbz	r2, 400934 <Reset_Handler+0x50>
			*pDest-- = *pSrc--;
  400928:	f851 2904 	ldr.w	r2, [r1], #-4
  40092c:	f843 2d04 	str.w	r2, [r3, #-4]!
		}
	} else if (pSrc < pDest) {
		uint32_t nb_bytes = (uint32_t)&_erelocate - (uint32_t)&_srelocate;
		pSrc = (uint32_t*)((uint32_t)pSrc + nb_bytes) - 1;
		pDest = (uint32_t*)((uint32_t)pDest + nb_bytes) - 1;
		for (;nb_bytes;nb_bytes -= 4) {
  400930:	4281      	cmp	r1, r0
  400932:	d1f9      	bne.n	400928 <Reset_Handler+0x44>

    No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
  400934:	bf00      	nop
		}
	}
	__NOP();

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  400936:	4b10      	ldr	r3, [pc, #64]	; (400978 <Reset_Handler+0x94>)
  400938:	4a10      	ldr	r2, [pc, #64]	; (40097c <Reset_Handler+0x98>)
  40093a:	429a      	cmp	r2, r3
  40093c:	d20b      	bcs.n	400956 <Reset_Handler+0x72>
  40093e:	1d13      	adds	r3, r2, #4
  400940:	4a0f      	ldr	r2, [pc, #60]	; (400980 <Reset_Handler+0x9c>)
  400942:	1ad2      	subs	r2, r2, r3
  400944:	f022 0203 	bic.w	r2, r2, #3
  400948:	441a      	add	r2, r3
  40094a:	3b04      	subs	r3, #4
		*pDest++ = 0;
  40094c:	2100      	movs	r1, #0
  40094e:	f843 1b04 	str.w	r1, [r3], #4
		}
	}
	__NOP();

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  400952:	429a      	cmp	r2, r3
  400954:	d1fb      	bne.n	40094e <Reset_Handler+0x6a>
		*pDest++ = 0;
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc);
  400956:	4b0b      	ldr	r3, [pc, #44]	; (400984 <Reset_Handler+0xa0>)
  400958:	4a0b      	ldr	r2, [pc, #44]	; (400988 <Reset_Handler+0xa4>)
  40095a:	609a      	str	r2, [r3, #8]

	/* Initialize the C library */
	__libc_init_array();
  40095c:	4b0b      	ldr	r3, [pc, #44]	; (40098c <Reset_Handler+0xa8>)
  40095e:	4798      	blx	r3

	/* Branch to main function */
	main();
  400960:	4b0b      	ldr	r3, [pc, #44]	; (400990 <Reset_Handler+0xac>)
  400962:	4798      	blx	r3
  400964:	e7fe      	b.n	400964 <Reset_Handler+0x80>
  400966:	bf00      	nop
  400968:	20000000 	.word	0x20000000
  40096c:	004042c8 	.word	0x004042c8
  400970:	2000087c 	.word	0x2000087c
  400974:	004042c4 	.word	0x004042c4
  400978:	20000958 	.word	0x20000958
  40097c:	2000087c 	.word	0x2000087c
  400980:	2000095b 	.word	0x2000095b
  400984:	e000ed00 	.word	0xe000ed00
  400988:	00400000 	.word	0x00400000
  40098c:	00400ead 	.word	0x00400ead
  400990:	00400d65 	.word	0x00400d65

00400994 <SystemCoreClockUpdate>:
 * \brief Get Core Clock Frequency.
 */
void SystemCoreClockUpdate( void )
{
	/* Determine clock frequency according to clock register values */
	switch ( PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk ) {
  400994:	4b3d      	ldr	r3, [pc, #244]	; (400a8c <SystemCoreClockUpdate+0xf8>)
  400996:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400998:	f003 0303 	and.w	r3, r3, #3
  40099c:	2b03      	cmp	r3, #3
  40099e:	d85d      	bhi.n	400a5c <SystemCoreClockUpdate+0xc8>
  4009a0:	e8df f003 	tbb	[pc, r3]
  4009a4:	2b2b0e02 	.word	0x2b2b0e02
	case PMC_MCKR_CSS_SLOW_CLK: /* Slow clock */
			if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL ) {
  4009a8:	4b39      	ldr	r3, [pc, #228]	; (400a90 <SystemCoreClockUpdate+0xfc>)
  4009aa:	695b      	ldr	r3, [r3, #20]
  4009ac:	f013 0f80 	tst.w	r3, #128	; 0x80
				SystemCoreClock = CHIP_FREQ_XTAL_32K;
  4009b0:	bf14      	ite	ne
  4009b2:	f44f 4200 	movne.w	r2, #32768	; 0x8000
			} else {
				SystemCoreClock = CHIP_FREQ_SLCK_RC;
  4009b6:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  4009ba:	4b36      	ldr	r3, [pc, #216]	; (400a94 <SystemCoreClockUpdate+0x100>)
  4009bc:	601a      	str	r2, [r3, #0]
  4009be:	e04d      	b.n	400a5c <SystemCoreClockUpdate+0xc8>
			}
		break;
		
	case PMC_MCKR_CSS_MAIN_CLK: /* Main clock */
		if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  4009c0:	4b32      	ldr	r3, [pc, #200]	; (400a8c <SystemCoreClockUpdate+0xf8>)
  4009c2:	6a1b      	ldr	r3, [r3, #32]
  4009c4:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  4009c8:	d003      	beq.n	4009d2 <SystemCoreClockUpdate+0x3e>
			SystemCoreClock = CHIP_FREQ_XTAL;
  4009ca:	4a33      	ldr	r2, [pc, #204]	; (400a98 <SystemCoreClockUpdate+0x104>)
  4009cc:	4b31      	ldr	r3, [pc, #196]	; (400a94 <SystemCoreClockUpdate+0x100>)
  4009ce:	601a      	str	r2, [r3, #0]
  4009d0:	e044      	b.n	400a5c <SystemCoreClockUpdate+0xc8>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  4009d2:	4a32      	ldr	r2, [pc, #200]	; (400a9c <SystemCoreClockUpdate+0x108>)
  4009d4:	4b2f      	ldr	r3, [pc, #188]	; (400a94 <SystemCoreClockUpdate+0x100>)
  4009d6:	601a      	str	r2, [r3, #0]
			
			switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  4009d8:	4b2c      	ldr	r3, [pc, #176]	; (400a8c <SystemCoreClockUpdate+0xf8>)
  4009da:	6a1b      	ldr	r3, [r3, #32]
  4009dc:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4009e0:	2b10      	cmp	r3, #16
  4009e2:	d002      	beq.n	4009ea <SystemCoreClockUpdate+0x56>
  4009e4:	2b20      	cmp	r3, #32
  4009e6:	d004      	beq.n	4009f2 <SystemCoreClockUpdate+0x5e>
  4009e8:	e038      	b.n	400a5c <SystemCoreClockUpdate+0xc8>
			case CKGR_MOR_MOSCRCF_4_MHz:
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
			break;
			
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_8MHZ;
  4009ea:	4a2d      	ldr	r2, [pc, #180]	; (400aa0 <SystemCoreClockUpdate+0x10c>)
  4009ec:	4b29      	ldr	r3, [pc, #164]	; (400a94 <SystemCoreClockUpdate+0x100>)
  4009ee:	601a      	str	r2, [r3, #0]
			break;
  4009f0:	e034      	b.n	400a5c <SystemCoreClockUpdate+0xc8>
			
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
  4009f2:	4a29      	ldr	r2, [pc, #164]	; (400a98 <SystemCoreClockUpdate+0x104>)
  4009f4:	4b27      	ldr	r3, [pc, #156]	; (400a94 <SystemCoreClockUpdate+0x100>)
  4009f6:	601a      	str	r2, [r3, #0]
			break;
  4009f8:	e030      	b.n	400a5c <SystemCoreClockUpdate+0xc8>
		}
		break;
		
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_PLLB_CLK:	/* PLLB clock */
			if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  4009fa:	4b24      	ldr	r3, [pc, #144]	; (400a8c <SystemCoreClockUpdate+0xf8>)
  4009fc:	6a1b      	ldr	r3, [r3, #32]
  4009fe:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  400a02:	d003      	beq.n	400a0c <SystemCoreClockUpdate+0x78>
				SystemCoreClock = CHIP_FREQ_XTAL;
  400a04:	4a24      	ldr	r2, [pc, #144]	; (400a98 <SystemCoreClockUpdate+0x104>)
  400a06:	4b23      	ldr	r3, [pc, #140]	; (400a94 <SystemCoreClockUpdate+0x100>)
  400a08:	601a      	str	r2, [r3, #0]
  400a0a:	e012      	b.n	400a32 <SystemCoreClockUpdate+0x9e>
			} else {
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  400a0c:	4a23      	ldr	r2, [pc, #140]	; (400a9c <SystemCoreClockUpdate+0x108>)
  400a0e:	4b21      	ldr	r3, [pc, #132]	; (400a94 <SystemCoreClockUpdate+0x100>)
  400a10:	601a      	str	r2, [r3, #0]
				
				switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  400a12:	4b1e      	ldr	r3, [pc, #120]	; (400a8c <SystemCoreClockUpdate+0xf8>)
  400a14:	6a1b      	ldr	r3, [r3, #32]
  400a16:	f003 0370 	and.w	r3, r3, #112	; 0x70
  400a1a:	2b10      	cmp	r3, #16
  400a1c:	d002      	beq.n	400a24 <SystemCoreClockUpdate+0x90>
  400a1e:	2b20      	cmp	r3, #32
  400a20:	d004      	beq.n	400a2c <SystemCoreClockUpdate+0x98>
  400a22:	e006      	b.n	400a32 <SystemCoreClockUpdate+0x9e>
				case CKGR_MOR_MOSCRCF_4_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
					break;
				
				case CKGR_MOR_MOSCRCF_8_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_8MHZ;
  400a24:	4a1e      	ldr	r2, [pc, #120]	; (400aa0 <SystemCoreClockUpdate+0x10c>)
  400a26:	4b1b      	ldr	r3, [pc, #108]	; (400a94 <SystemCoreClockUpdate+0x100>)
  400a28:	601a      	str	r2, [r3, #0]
					break;
  400a2a:	e002      	b.n	400a32 <SystemCoreClockUpdate+0x9e>
				
				case CKGR_MOR_MOSCRCF_12_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
  400a2c:	4a1a      	ldr	r2, [pc, #104]	; (400a98 <SystemCoreClockUpdate+0x104>)
  400a2e:	4b19      	ldr	r3, [pc, #100]	; (400a94 <SystemCoreClockUpdate+0x100>)
  400a30:	601a      	str	r2, [r3, #0]
				default:
					break;
				}
			}
			
			if ( (uint32_t)(PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) ==
  400a32:	4b16      	ldr	r3, [pc, #88]	; (400a8c <SystemCoreClockUpdate+0xf8>)
  400a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400a36:	f003 0303 	and.w	r3, r3, #3
  400a3a:	2b02      	cmp	r3, #2
					PMC_MCKR_CSS_PLLA_CLK ) {
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
  400a3c:	4a13      	ldr	r2, [pc, #76]	; (400a8c <SystemCoreClockUpdate+0xf8>)
  400a3e:	bf07      	ittee	eq
  400a40:	6a93      	ldreq	r3, [r2, #40]	; 0x28
						>> CKGR_PLLAR_MULA_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
  400a42:	6a92      	ldreq	r2, [r2, #40]	; 0x28
						>> CKGR_PLLAR_DIVA_Pos));
			} else {
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
  400a44:	6ad3      	ldrne	r3, [r2, #44]	; 0x2c
						>> CKGR_PLLBR_MULB_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
  400a46:	6ad2      	ldrne	r2, [r2, #44]	; 0x2c
  400a48:	4812      	ldr	r0, [pc, #72]	; (400a94 <SystemCoreClockUpdate+0x100>)
  400a4a:	f3c3 410a 	ubfx	r1, r3, #16, #11
  400a4e:	6803      	ldr	r3, [r0, #0]
  400a50:	fb01 3303 	mla	r3, r1, r3, r3
  400a54:	b2d2      	uxtb	r2, r2
  400a56:	fbb3 f3f2 	udiv	r3, r3, r2
  400a5a:	6003      	str	r3, [r0, #0]
		
	default:
		break;
	}

	if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 ) {
  400a5c:	4b0b      	ldr	r3, [pc, #44]	; (400a8c <SystemCoreClockUpdate+0xf8>)
  400a5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400a60:	f003 0370 	and.w	r3, r3, #112	; 0x70
  400a64:	2b70      	cmp	r3, #112	; 0x70
  400a66:	d107      	bne.n	400a78 <SystemCoreClockUpdate+0xe4>
		SystemCoreClock /= 3U;
  400a68:	4a0a      	ldr	r2, [pc, #40]	; (400a94 <SystemCoreClockUpdate+0x100>)
  400a6a:	6813      	ldr	r3, [r2, #0]
  400a6c:	490d      	ldr	r1, [pc, #52]	; (400aa4 <SystemCoreClockUpdate+0x110>)
  400a6e:	fba1 1303 	umull	r1, r3, r1, r3
  400a72:	085b      	lsrs	r3, r3, #1
  400a74:	6013      	str	r3, [r2, #0]
  400a76:	4770      	bx	lr
	} else {
		SystemCoreClock >>=
			((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  400a78:	4b04      	ldr	r3, [pc, #16]	; (400a8c <SystemCoreClockUpdate+0xf8>)
  400a7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
	}

	if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 ) {
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>=
  400a7c:	4905      	ldr	r1, [pc, #20]	; (400a94 <SystemCoreClockUpdate+0x100>)
  400a7e:	f3c3 1202 	ubfx	r2, r3, #4, #3
  400a82:	680b      	ldr	r3, [r1, #0]
  400a84:	40d3      	lsrs	r3, r2
  400a86:	600b      	str	r3, [r1, #0]
  400a88:	4770      	bx	lr
  400a8a:	bf00      	nop
  400a8c:	400e0400 	.word	0x400e0400
  400a90:	400e1410 	.word	0x400e1410
  400a94:	20000000 	.word	0x20000000
  400a98:	00b71b00 	.word	0x00b71b00
  400a9c:	003d0900 	.word	0x003d0900
  400aa0:	007a1200 	.word	0x007a1200
  400aa4:	aaaaaaab 	.word	0xaaaaaaab

00400aa8 <system_init_flash>:
				}
			}
		}
	}
#else
	if ( ul_clk < CHIP_FREQ_FWS_0 ) {
  400aa8:	4b1a      	ldr	r3, [pc, #104]	; (400b14 <system_init_flash+0x6c>)
  400aaa:	4298      	cmp	r0, r3
  400aac:	d807      	bhi.n	400abe <system_init_flash+0x16>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  400aae:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  400ab2:	4a19      	ldr	r2, [pc, #100]	; (400b18 <system_init_flash+0x70>)
  400ab4:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  400ab6:	f502 7200 	add.w	r2, r2, #512	; 0x200
  400aba:	6013      	str	r3, [r2, #0]
  400abc:	4770      	bx	lr
	} else {
		if ( ul_clk < CHIP_FREQ_FWS_1 ) {
  400abe:	4b17      	ldr	r3, [pc, #92]	; (400b1c <system_init_flash+0x74>)
  400ac0:	4298      	cmp	r0, r3
  400ac2:	d806      	bhi.n	400ad2 <system_init_flash+0x2a>
			EFC0->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  400ac4:	4b16      	ldr	r3, [pc, #88]	; (400b20 <system_init_flash+0x78>)
  400ac6:	4a14      	ldr	r2, [pc, #80]	; (400b18 <system_init_flash+0x70>)
  400ac8:	6013      	str	r3, [r2, #0]
			EFC1->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  400aca:	f502 7200 	add.w	r2, r2, #512	; 0x200
  400ace:	6013      	str	r3, [r2, #0]
  400ad0:	4770      	bx	lr
		} else {
			if ( ul_clk < CHIP_FREQ_FWS_2 ) {
  400ad2:	4b14      	ldr	r3, [pc, #80]	; (400b24 <system_init_flash+0x7c>)
  400ad4:	4298      	cmp	r0, r3
  400ad6:	d806      	bhi.n	400ae6 <system_init_flash+0x3e>
				EFC0->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  400ad8:	4b13      	ldr	r3, [pc, #76]	; (400b28 <system_init_flash+0x80>)
  400ada:	4a0f      	ldr	r2, [pc, #60]	; (400b18 <system_init_flash+0x70>)
  400adc:	6013      	str	r3, [r2, #0]
				EFC1->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  400ade:	f502 7200 	add.w	r2, r2, #512	; 0x200
  400ae2:	6013      	str	r3, [r2, #0]
  400ae4:	4770      	bx	lr
			} else {
				if ( ul_clk < CHIP_FREQ_FWS_3 ) {
  400ae6:	4b11      	ldr	r3, [pc, #68]	; (400b2c <system_init_flash+0x84>)
  400ae8:	4298      	cmp	r0, r3
  400aea:	d806      	bhi.n	400afa <system_init_flash+0x52>
					EFC0->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  400aec:	4b10      	ldr	r3, [pc, #64]	; (400b30 <system_init_flash+0x88>)
  400aee:	4a0a      	ldr	r2, [pc, #40]	; (400b18 <system_init_flash+0x70>)
  400af0:	6013      	str	r3, [r2, #0]
					EFC1->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  400af2:	f502 7200 	add.w	r2, r2, #512	; 0x200
  400af6:	6013      	str	r3, [r2, #0]
  400af8:	4770      	bx	lr
				} else {
					if ( ul_clk < CHIP_FREQ_FWS_4 ) {
  400afa:	4b0e      	ldr	r3, [pc, #56]	; (400b34 <system_init_flash+0x8c>)
  400afc:	4298      	cmp	r0, r3
						EFC0->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  400afe:	bf94      	ite	ls
  400b00:	f04f 2304 	movls.w	r3, #67109888	; 0x4000400
						EFC1->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
					} else {
						EFC0->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  400b04:	4b0c      	ldrhi	r3, [pc, #48]	; (400b38 <system_init_flash+0x90>)
  400b06:	4a04      	ldr	r2, [pc, #16]	; (400b18 <system_init_flash+0x70>)
  400b08:	6013      	str	r3, [r2, #0]
						EFC1->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  400b0a:	f502 7200 	add.w	r2, r2, #512	; 0x200
  400b0e:	6013      	str	r3, [r2, #0]
  400b10:	4770      	bx	lr
  400b12:	bf00      	nop
  400b14:	01312cff 	.word	0x01312cff
  400b18:	400e0a00 	.word	0x400e0a00
  400b1c:	026259ff 	.word	0x026259ff
  400b20:	04000100 	.word	0x04000100
  400b24:	039386ff 	.word	0x039386ff
  400b28:	04000200 	.word	0x04000200
  400b2c:	04c4b3ff 	.word	0x04c4b3ff
  400b30:	04000300 	.word	0x04000300
  400b34:	05f5e0ff 	.word	0x05f5e0ff
  400b38:	04000500 	.word	0x04000500

00400b3c <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
  400b3c:	4b09      	ldr	r3, [pc, #36]	; (400b64 <_sbrk+0x28>)
  400b3e:	681b      	ldr	r3, [r3, #0]
  400b40:	b913      	cbnz	r3, 400b48 <_sbrk+0xc>
		heap = (unsigned char *)&_end;
  400b42:	4a09      	ldr	r2, [pc, #36]	; (400b68 <_sbrk+0x2c>)
  400b44:	4b07      	ldr	r3, [pc, #28]	; (400b64 <_sbrk+0x28>)
  400b46:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
  400b48:	4b06      	ldr	r3, [pc, #24]	; (400b64 <_sbrk+0x28>)
  400b4a:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
  400b4c:	181a      	adds	r2, r3, r0
  400b4e:	4907      	ldr	r1, [pc, #28]	; (400b6c <_sbrk+0x30>)
  400b50:	4291      	cmp	r1, r2
  400b52:	db04      	blt.n	400b5e <_sbrk+0x22>
		return (caddr_t) -1;	
	}

	heap += incr;
  400b54:	4610      	mov	r0, r2
  400b56:	4a03      	ldr	r2, [pc, #12]	; (400b64 <_sbrk+0x28>)
  400b58:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
  400b5a:	4618      	mov	r0, r3
  400b5c:	4770      	bx	lr
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;

	if (((int)prev_heap + incr) > ramend) {
		return (caddr_t) -1;	
  400b5e:	f04f 30ff 	mov.w	r0, #4294967295
	}

	heap += incr;

	return (caddr_t) prev_heap;
}
  400b62:	4770      	bx	lr
  400b64:	2000090c 	.word	0x2000090c
  400b68:	20003958 	.word	0x20003958
  400b6c:	20027ffc 	.word	0x20027ffc

00400b70 <_close>:
}

extern int _close(int file)
{
	return -1;
}
  400b70:	f04f 30ff 	mov.w	r0, #4294967295
  400b74:	4770      	bx	lr
  400b76:	bf00      	nop

00400b78 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
  400b78:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  400b7c:	604b      	str	r3, [r1, #4]

	return 0;
}
  400b7e:	2000      	movs	r0, #0
  400b80:	4770      	bx	lr
  400b82:	bf00      	nop

00400b84 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
  400b84:	2001      	movs	r0, #1
  400b86:	4770      	bx	lr

00400b88 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
  400b88:	2000      	movs	r0, #0
  400b8a:	4770      	bx	lr

00400b8c <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
  400b8c:	b5f0      	push	{r4, r5, r6, r7, lr}
  400b8e:	b083      	sub	sp, #12
  400b90:	4605      	mov	r5, r0
  400b92:	460c      	mov	r4, r1
	uint32_t val = 0;
  400b94:	2300      	movs	r3, #0
  400b96:	9301      	str	r3, [sp, #4]
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  400b98:	4b18      	ldr	r3, [pc, #96]	; (400bfc <usart_serial_getchar+0x70>)
  400b9a:	4298      	cmp	r0, r3
  400b9c:	d107      	bne.n	400bae <usart_serial_getchar+0x22>
		while (uart_read((Uart*)p_usart, data));
  400b9e:	461f      	mov	r7, r3
  400ba0:	4e17      	ldr	r6, [pc, #92]	; (400c00 <usart_serial_getchar+0x74>)
  400ba2:	4621      	mov	r1, r4
  400ba4:	4638      	mov	r0, r7
  400ba6:	47b0      	blx	r6
  400ba8:	2800      	cmp	r0, #0
  400baa:	d1fa      	bne.n	400ba2 <usart_serial_getchar+0x16>
  400bac:	e017      	b.n	400bde <usart_serial_getchar+0x52>
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  400bae:	4b15      	ldr	r3, [pc, #84]	; (400c04 <usart_serial_getchar+0x78>)
  400bb0:	4298      	cmp	r0, r3
  400bb2:	d107      	bne.n	400bc4 <usart_serial_getchar+0x38>
		while (uart_read((Uart*)p_usart, data));
  400bb4:	461e      	mov	r6, r3
  400bb6:	4d12      	ldr	r5, [pc, #72]	; (400c00 <usart_serial_getchar+0x74>)
  400bb8:	4621      	mov	r1, r4
  400bba:	4630      	mov	r0, r6
  400bbc:	47a8      	blx	r5
  400bbe:	2800      	cmp	r0, #0
  400bc0:	d1fa      	bne.n	400bb8 <usart_serial_getchar+0x2c>
  400bc2:	e018      	b.n	400bf6 <usart_serial_getchar+0x6a>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  400bc4:	4b10      	ldr	r3, [pc, #64]	; (400c08 <usart_serial_getchar+0x7c>)
  400bc6:	4298      	cmp	r0, r3
  400bc8:	d109      	bne.n	400bde <usart_serial_getchar+0x52>
		while (usart_read(p_usart, &val));
  400bca:	461e      	mov	r6, r3
  400bcc:	4d0f      	ldr	r5, [pc, #60]	; (400c0c <usart_serial_getchar+0x80>)
  400bce:	a901      	add	r1, sp, #4
  400bd0:	4630      	mov	r0, r6
  400bd2:	47a8      	blx	r5
  400bd4:	2800      	cmp	r0, #0
  400bd6:	d1fa      	bne.n	400bce <usart_serial_getchar+0x42>
		*data = (uint8_t)(val & 0xFF);
  400bd8:	9b01      	ldr	r3, [sp, #4]
  400bda:	7023      	strb	r3, [r4, #0]
  400bdc:	e00b      	b.n	400bf6 <usart_serial_getchar+0x6a>
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  400bde:	4b0c      	ldr	r3, [pc, #48]	; (400c10 <usart_serial_getchar+0x84>)
  400be0:	429d      	cmp	r5, r3
  400be2:	d108      	bne.n	400bf6 <usart_serial_getchar+0x6a>
		while (usart_read(p_usart, &val));
  400be4:	461e      	mov	r6, r3
  400be6:	4d09      	ldr	r5, [pc, #36]	; (400c0c <usart_serial_getchar+0x80>)
  400be8:	a901      	add	r1, sp, #4
  400bea:	4630      	mov	r0, r6
  400bec:	47a8      	blx	r5
  400bee:	2800      	cmp	r0, #0
  400bf0:	d1fa      	bne.n	400be8 <usart_serial_getchar+0x5c>
		*data = (uint8_t)(val & 0xFF);
  400bf2:	9b01      	ldr	r3, [sp, #4]
  400bf4:	7023      	strb	r3, [r4, #0]
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
  400bf6:	b003      	add	sp, #12
  400bf8:	bdf0      	pop	{r4, r5, r6, r7, pc}
  400bfa:	bf00      	nop
  400bfc:	400e0600 	.word	0x400e0600
  400c00:	00400229 	.word	0x00400229
  400c04:	400e0800 	.word	0x400e0800
  400c08:	40024000 	.word	0x40024000
  400c0c:	00400179 	.word	0x00400179
  400c10:	40028000 	.word	0x40028000

00400c14 <usart_serial_putchar>:
 *   \retval 1  The character was written.
 *   \retval 0  The function timed out before the USART transmitter became
 * ready to send.
 */
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
  400c14:	b570      	push	{r4, r5, r6, lr}
  400c16:	460c      	mov	r4, r1
		while (uart_write((Uart*)p_usart, c)!=0);
		return 1;
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  400c18:	4b18      	ldr	r3, [pc, #96]	; (400c7c <usart_serial_putchar+0x68>)
  400c1a:	4298      	cmp	r0, r3
  400c1c:	d108      	bne.n	400c30 <usart_serial_putchar+0x1c>
		while (uart_write((Uart*)p_usart, c)!=0);
  400c1e:	461e      	mov	r6, r3
  400c20:	4d17      	ldr	r5, [pc, #92]	; (400c80 <usart_serial_putchar+0x6c>)
  400c22:	4621      	mov	r1, r4
  400c24:	4630      	mov	r0, r6
  400c26:	47a8      	blx	r5
  400c28:	2800      	cmp	r0, #0
  400c2a:	d1fa      	bne.n	400c22 <usart_serial_putchar+0xe>
		return 1;
  400c2c:	2001      	movs	r0, #1
  400c2e:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  400c30:	4b14      	ldr	r3, [pc, #80]	; (400c84 <usart_serial_putchar+0x70>)
  400c32:	4298      	cmp	r0, r3
  400c34:	d108      	bne.n	400c48 <usart_serial_putchar+0x34>
		while (uart_write((Uart*)p_usart, c)!=0);
  400c36:	461e      	mov	r6, r3
  400c38:	4d11      	ldr	r5, [pc, #68]	; (400c80 <usart_serial_putchar+0x6c>)
  400c3a:	4621      	mov	r1, r4
  400c3c:	4630      	mov	r0, r6
  400c3e:	47a8      	blx	r5
  400c40:	2800      	cmp	r0, #0
  400c42:	d1fa      	bne.n	400c3a <usart_serial_putchar+0x26>
		return 1;
  400c44:	2001      	movs	r0, #1
  400c46:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  400c48:	4b0f      	ldr	r3, [pc, #60]	; (400c88 <usart_serial_putchar+0x74>)
  400c4a:	4298      	cmp	r0, r3
  400c4c:	d108      	bne.n	400c60 <usart_serial_putchar+0x4c>
		while (usart_write(p_usart, c)!=0);
  400c4e:	461e      	mov	r6, r3
  400c50:	4d0e      	ldr	r5, [pc, #56]	; (400c8c <usart_serial_putchar+0x78>)
  400c52:	4621      	mov	r1, r4
  400c54:	4630      	mov	r0, r6
  400c56:	47a8      	blx	r5
  400c58:	2800      	cmp	r0, #0
  400c5a:	d1fa      	bne.n	400c52 <usart_serial_putchar+0x3e>
		return 1;
  400c5c:	2001      	movs	r0, #1
  400c5e:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  400c60:	4b0b      	ldr	r3, [pc, #44]	; (400c90 <usart_serial_putchar+0x7c>)
  400c62:	4298      	cmp	r0, r3
  400c64:	d108      	bne.n	400c78 <usart_serial_putchar+0x64>
		while (usart_write(p_usart, c)!=0);
  400c66:	461e      	mov	r6, r3
  400c68:	4d08      	ldr	r5, [pc, #32]	; (400c8c <usart_serial_putchar+0x78>)
  400c6a:	4621      	mov	r1, r4
  400c6c:	4630      	mov	r0, r6
  400c6e:	47a8      	blx	r5
  400c70:	2800      	cmp	r0, #0
  400c72:	d1fa      	bne.n	400c6a <usart_serial_putchar+0x56>
		return 1;
  400c74:	2001      	movs	r0, #1
  400c76:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
	}
# endif
#endif /* ifdef USART */

	return 0;
  400c78:	2000      	movs	r0, #0
}
  400c7a:	bd70      	pop	{r4, r5, r6, pc}
  400c7c:	400e0600 	.word	0x400e0600
  400c80:	00400219 	.word	0x00400219
  400c84:	400e0800 	.word	0x400e0800
  400c88:	40024000 	.word	0x40024000
  400c8c:	00400165 	.word	0x00400165
  400c90:	40028000 	.word	0x40028000

00400c94 <inicializacao_UART>:
#define CONF_UART_PARITY       US_MR_PAR_NO
#define CONF_UART_STOP_BITS    US_MR_NBSTOP_1_BIT
#define	PINO_LED_AZUL	PIO_PA19
#define PINO_LED_VERDE	PIO_PA20

void inicializacao_UART (){
  400c94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400c98:	b084      	sub	sp, #16
static inline void usart_serial_init(usart_if p_usart,
		usart_serial_options_t *opt)
{
#if ((!SAM4L) && (!SAMG55))
	sam_uart_opt_t uart_settings;
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
  400c9a:	f8df 808c 	ldr.w	r8, [pc, #140]	; 400d28 <inicializacao_UART+0x94>
  400c9e:	f8cd 8004 	str.w	r8, [sp, #4]
	uart_settings.ul_baudrate = opt->baudrate;
  400ca2:	4c16      	ldr	r4, [pc, #88]	; (400cfc <inicializacao_UART+0x68>)
  400ca4:	6823      	ldr	r3, [r4, #0]
  400ca6:	9302      	str	r3, [sp, #8]
	uart_settings.ul_mode = opt->paritytype;
  400ca8:	68a3      	ldr	r3, [r4, #8]
  400caa:	9303      	str	r3, [sp, #12]
  400cac:	2008      	movs	r0, #8
  400cae:	4f14      	ldr	r7, [pc, #80]	; (400d00 <inicializacao_UART+0x6c>)
  400cb0:	47b8      	blx	r7
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
		sysclk_enable_peripheral_clock(ID_UART0);
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
  400cb2:	4d14      	ldr	r5, [pc, #80]	; (400d04 <inicializacao_UART+0x70>)
  400cb4:	a901      	add	r1, sp, #4
  400cb6:	4628      	mov	r0, r5
  400cb8:	4e13      	ldr	r6, [pc, #76]	; (400d08 <inicializacao_UART+0x74>)
  400cba:	47b0      	blx	r6
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
  400cbc:	4b13      	ldr	r3, [pc, #76]	; (400d0c <inicializacao_UART+0x78>)
  400cbe:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
  400cc0:	4a13      	ldr	r2, [pc, #76]	; (400d10 <inicializacao_UART+0x7c>)
  400cc2:	4b14      	ldr	r3, [pc, #80]	; (400d14 <inicializacao_UART+0x80>)
  400cc4:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
  400cc6:	4a14      	ldr	r2, [pc, #80]	; (400d18 <inicializacao_UART+0x84>)
  400cc8:	4b14      	ldr	r3, [pc, #80]	; (400d1c <inicializacao_UART+0x88>)
  400cca:	601a      	str	r2, [r3, #0]
static inline void usart_serial_init(usart_if p_usart,
		usart_serial_options_t *opt)
{
#if ((!SAM4L) && (!SAMG55))
	sam_uart_opt_t uart_settings;
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
  400ccc:	f8cd 8004 	str.w	r8, [sp, #4]
	uart_settings.ul_baudrate = opt->baudrate;
  400cd0:	6823      	ldr	r3, [r4, #0]
  400cd2:	9302      	str	r3, [sp, #8]
	uart_settings.ul_mode = opt->paritytype;
  400cd4:	68a3      	ldr	r3, [r4, #8]
  400cd6:	9303      	str	r3, [sp, #12]
  400cd8:	2008      	movs	r0, #8
  400cda:	47b8      	blx	r7
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
		sysclk_enable_peripheral_clock(ID_UART0);
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
  400cdc:	a901      	add	r1, sp, #4
  400cde:	4628      	mov	r0, r5
  400ce0:	47b0      	blx	r6
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
  400ce2:	4d0f      	ldr	r5, [pc, #60]	; (400d20 <inicializacao_UART+0x8c>)
  400ce4:	682b      	ldr	r3, [r5, #0]
  400ce6:	2100      	movs	r1, #0
  400ce8:	6898      	ldr	r0, [r3, #8]
  400cea:	4c0e      	ldr	r4, [pc, #56]	; (400d24 <inicializacao_UART+0x90>)
  400cec:	47a0      	blx	r4
	setbuf(stdin, NULL);
  400cee:	682b      	ldr	r3, [r5, #0]
  400cf0:	2100      	movs	r1, #0
  400cf2:	6858      	ldr	r0, [r3, #4]
  400cf4:	47a0      	blx	r4
		.paritytype = CONF_UART_PARITY,
		.stopbits = CONF_UART_STOP_BITS
	};
	usart_serial_init(CONF_UART, &usart_options);
	stdio_serial_init((Usart *)CONF_UART, &usart_options);
}
  400cf6:	b004      	add	sp, #16
  400cf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400cfc:	20000004 	.word	0x20000004
  400d00:	0040088d 	.word	0x0040088d
  400d04:	400e0600 	.word	0x400e0600
  400d08:	004001e1 	.word	0x004001e1
  400d0c:	2000094c 	.word	0x2000094c
  400d10:	00400c15 	.word	0x00400c15
  400d14:	20000948 	.word	0x20000948
  400d18:	00400b8d 	.word	0x00400b8d
  400d1c:	20000944 	.word	0x20000944
  400d20:	20000440 	.word	0x20000440
  400d24:	0040106d 	.word	0x0040106d
  400d28:	07270e00 	.word	0x07270e00

00400d2c <menu>:

void menu()
{
  400d2c:	b510      	push	{r4, lr}
	printf("\n\r");
  400d2e:	4806      	ldr	r0, [pc, #24]	; (400d48 <menu+0x1c>)
  400d30:	4b06      	ldr	r3, [pc, #24]	; (400d4c <menu+0x20>)
  400d32:	4798      	blx	r3
	puts("a: Acender LED azul\r");
  400d34:	4806      	ldr	r0, [pc, #24]	; (400d50 <menu+0x24>)
  400d36:	4c07      	ldr	r4, [pc, #28]	; (400d54 <menu+0x28>)
  400d38:	47a0      	blx	r4
	puts("s: Apagar LED azul\r");
  400d3a:	4807      	ldr	r0, [pc, #28]	; (400d58 <menu+0x2c>)
  400d3c:	47a0      	blx	r4
	puts("v: Acender LED verde\r");
  400d3e:	4807      	ldr	r0, [pc, #28]	; (400d5c <menu+0x30>)
  400d40:	47a0      	blx	r4
	puts("b: Apagar LED verde\r");
  400d42:	4807      	ldr	r0, [pc, #28]	; (400d60 <menu+0x34>)
  400d44:	47a0      	blx	r4
  400d46:	bd10      	pop	{r4, pc}
  400d48:	00404168 	.word	0x00404168
  400d4c:	00400efd 	.word	0x00400efd
  400d50:	0040416c 	.word	0x0040416c
  400d54:	00401029 	.word	0x00401029
  400d58:	00404184 	.word	0x00404184
  400d5c:	00404198 	.word	0x00404198
  400d60:	004041b0 	.word	0x004041b0

00400d64 <main>:
}

int main (void)
{
  400d64:	b5f0      	push	{r4, r5, r6, r7, lr}
  400d66:	b083      	sub	sp, #12
	sysclk_init();
  400d68:	4b41      	ldr	r3, [pc, #260]	; (400e70 <main+0x10c>)
  400d6a:	4798      	blx	r3
	board_init();
  400d6c:	4b41      	ldr	r3, [pc, #260]	; (400e74 <main+0x110>)
  400d6e:	4798      	blx	r3
	inicializacao_UART();
  400d70:	4b41      	ldr	r3, [pc, #260]	; (400e78 <main+0x114>)
  400d72:	4798      	blx	r3
		
	pio_set_output(PIOA, PINO_LED_AZUL, HIGH, DISABLE, ENABLE);	
  400d74:	4e41      	ldr	r6, [pc, #260]	; (400e7c <main+0x118>)
  400d76:	2401      	movs	r4, #1
  400d78:	9400      	str	r4, [sp, #0]
  400d7a:	2300      	movs	r3, #0
  400d7c:	4622      	mov	r2, r4
  400d7e:	f44f 2100 	mov.w	r1, #524288	; 0x80000
  400d82:	4630      	mov	r0, r6
  400d84:	4d3e      	ldr	r5, [pc, #248]	; (400e80 <main+0x11c>)
  400d86:	47a8      	blx	r5
	pio_set_output(PIOA, PINO_LED_VERDE, HIGH, DISABLE, ENABLE);
  400d88:	9400      	str	r4, [sp, #0]
  400d8a:	2300      	movs	r3, #0
  400d8c:	4622      	mov	r2, r4
  400d8e:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
  400d92:	4630      	mov	r0, r6
  400d94:	47a8      	blx	r5

	menu();
  400d96:	4b3b      	ldr	r3, [pc, #236]	; (400e84 <main+0x120>)
  400d98:	4798      	blx	r3

	while(1)
	{
		
		char key = getchar();
  400d9a:	4c3b      	ldr	r4, [pc, #236]	; (400e88 <main+0x124>)
  400d9c:	4d3b      	ldr	r5, [pc, #236]	; (400e8c <main+0x128>)
			case 'b':
				pio_set(PIOA, PINO_LED_VERDE);
				puts("LED verde agora esta APAGADO\r");
				break;
			case 'm':
				menu();
  400d9e:	4f39      	ldr	r7, [pc, #228]	; (400e84 <main+0x120>)
	menu();

	while(1)
	{
		
		char key = getchar();
  400da0:	6820      	ldr	r0, [r4, #0]
  400da2:	6842      	ldr	r2, [r0, #4]
  400da4:	6853      	ldr	r3, [r2, #4]
  400da6:	3b01      	subs	r3, #1
  400da8:	6053      	str	r3, [r2, #4]
  400daa:	2b00      	cmp	r3, #0
  400dac:	da03      	bge.n	400db6 <main+0x52>
  400dae:	6841      	ldr	r1, [r0, #4]
  400db0:	47a8      	blx	r5
  400db2:	b2c0      	uxtb	r0, r0
  400db4:	e004      	b.n	400dc0 <main+0x5c>
  400db6:	6842      	ldr	r2, [r0, #4]
  400db8:	6813      	ldr	r3, [r2, #0]
  400dba:	1c59      	adds	r1, r3, #1
  400dbc:	6011      	str	r1, [r2, #0]
  400dbe:	7818      	ldrb	r0, [r3, #0]
		switch (key){
  400dc0:	3861      	subs	r0, #97	; 0x61
  400dc2:	2815      	cmp	r0, #21
  400dc4:	d8ec      	bhi.n	400da0 <main+0x3c>
  400dc6:	a301      	add	r3, pc, #4	; (adr r3, 400dcc <main+0x68>)
  400dc8:	f853 f020 	ldr.w	pc, [r3, r0, lsl #2]
  400dcc:	00400e25 	.word	0x00400e25
  400dd0:	00400e5b 	.word	0x00400e5b
  400dd4:	00400da1 	.word	0x00400da1
  400dd8:	00400da1 	.word	0x00400da1
  400ddc:	00400da1 	.word	0x00400da1
  400de0:	00400da1 	.word	0x00400da1
  400de4:	00400da1 	.word	0x00400da1
  400de8:	00400da1 	.word	0x00400da1
  400dec:	00400da1 	.word	0x00400da1
  400df0:	00400da1 	.word	0x00400da1
  400df4:	00400da1 	.word	0x00400da1
  400df8:	00400da1 	.word	0x00400da1
  400dfc:	00400e6d 	.word	0x00400e6d
  400e00:	00400da1 	.word	0x00400da1
  400e04:	00400da1 	.word	0x00400da1
  400e08:	00400da1 	.word	0x00400da1
  400e0c:	00400da1 	.word	0x00400da1
  400e10:	00400da1 	.word	0x00400da1
  400e14:	00400e49 	.word	0x00400e49
  400e18:	00400da1 	.word	0x00400da1
  400e1c:	00400da1 	.word	0x00400da1
  400e20:	00400e37 	.word	0x00400e37
			case 'a':
				pio_clear(PIOA, PINO_LED_AZUL);
  400e24:	f44f 2100 	mov.w	r1, #524288	; 0x80000
  400e28:	4630      	mov	r0, r6
  400e2a:	4b19      	ldr	r3, [pc, #100]	; (400e90 <main+0x12c>)
  400e2c:	4798      	blx	r3
				puts("LED azul agora esta ACESO\r");
  400e2e:	4819      	ldr	r0, [pc, #100]	; (400e94 <main+0x130>)
  400e30:	4b19      	ldr	r3, [pc, #100]	; (400e98 <main+0x134>)
  400e32:	4798      	blx	r3
				break;
  400e34:	e7b4      	b.n	400da0 <main+0x3c>
			case 'v':
				pio_clear(PIOA, PINO_LED_VERDE);
  400e36:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
  400e3a:	4630      	mov	r0, r6
  400e3c:	4b14      	ldr	r3, [pc, #80]	; (400e90 <main+0x12c>)
  400e3e:	4798      	blx	r3
				puts("LED verde agora esta ACESO\r");
  400e40:	4816      	ldr	r0, [pc, #88]	; (400e9c <main+0x138>)
  400e42:	4b15      	ldr	r3, [pc, #84]	; (400e98 <main+0x134>)
  400e44:	4798      	blx	r3
				break;
  400e46:	e7ab      	b.n	400da0 <main+0x3c>
			case 's':
				pio_set(PIOA, PINO_LED_AZUL);
  400e48:	f44f 2100 	mov.w	r1, #524288	; 0x80000
  400e4c:	4630      	mov	r0, r6
  400e4e:	4b14      	ldr	r3, [pc, #80]	; (400ea0 <main+0x13c>)
  400e50:	4798      	blx	r3
				puts("LED azul agora esta APAGADO\r");
  400e52:	4814      	ldr	r0, [pc, #80]	; (400ea4 <main+0x140>)
  400e54:	4b10      	ldr	r3, [pc, #64]	; (400e98 <main+0x134>)
  400e56:	4798      	blx	r3
				break;
  400e58:	e7a2      	b.n	400da0 <main+0x3c>
			case 'b':
				pio_set(PIOA, PINO_LED_VERDE);
  400e5a:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
  400e5e:	4630      	mov	r0, r6
  400e60:	4b0f      	ldr	r3, [pc, #60]	; (400ea0 <main+0x13c>)
  400e62:	4798      	blx	r3
				puts("LED verde agora esta APAGADO\r");
  400e64:	4810      	ldr	r0, [pc, #64]	; (400ea8 <main+0x144>)
  400e66:	4b0c      	ldr	r3, [pc, #48]	; (400e98 <main+0x134>)
  400e68:	4798      	blx	r3
				break;
  400e6a:	e799      	b.n	400da0 <main+0x3c>
			case 'm':
				menu();
  400e6c:	47b8      	blx	r7
				break;
  400e6e:	e797      	b.n	400da0 <main+0x3c>
  400e70:	0040023d 	.word	0x0040023d
  400e74:	004002a1 	.word	0x004002a1
  400e78:	00400c95 	.word	0x00400c95
  400e7c:	400e0e00 	.word	0x400e0e00
  400e80:	004004b1 	.word	0x004004b1
  400e84:	00400d2d 	.word	0x00400d2d
  400e88:	20000440 	.word	0x20000440
  400e8c:	00401039 	.word	0x00401039
  400e90:	004003e9 	.word	0x004003e9
  400e94:	004041c8 	.word	0x004041c8
  400e98:	00401029 	.word	0x00401029
  400e9c:	004041e4 	.word	0x004041e4
  400ea0:	004003e5 	.word	0x004003e5
  400ea4:	00404200 	.word	0x00404200
  400ea8:	00404220 	.word	0x00404220

00400eac <__libc_init_array>:
  400eac:	b570      	push	{r4, r5, r6, lr}
  400eae:	4e0f      	ldr	r6, [pc, #60]	; (400eec <__libc_init_array+0x40>)
  400eb0:	4d0f      	ldr	r5, [pc, #60]	; (400ef0 <__libc_init_array+0x44>)
  400eb2:	1b76      	subs	r6, r6, r5
  400eb4:	10b6      	asrs	r6, r6, #2
  400eb6:	bf18      	it	ne
  400eb8:	2400      	movne	r4, #0
  400eba:	d005      	beq.n	400ec8 <__libc_init_array+0x1c>
  400ebc:	3401      	adds	r4, #1
  400ebe:	f855 3b04 	ldr.w	r3, [r5], #4
  400ec2:	4798      	blx	r3
  400ec4:	42a6      	cmp	r6, r4
  400ec6:	d1f9      	bne.n	400ebc <__libc_init_array+0x10>
  400ec8:	4e0a      	ldr	r6, [pc, #40]	; (400ef4 <__libc_init_array+0x48>)
  400eca:	4d0b      	ldr	r5, [pc, #44]	; (400ef8 <__libc_init_array+0x4c>)
  400ecc:	1b76      	subs	r6, r6, r5
  400ece:	f003 f9e5 	bl	40429c <_init>
  400ed2:	10b6      	asrs	r6, r6, #2
  400ed4:	bf18      	it	ne
  400ed6:	2400      	movne	r4, #0
  400ed8:	d006      	beq.n	400ee8 <__libc_init_array+0x3c>
  400eda:	3401      	adds	r4, #1
  400edc:	f855 3b04 	ldr.w	r3, [r5], #4
  400ee0:	4798      	blx	r3
  400ee2:	42a6      	cmp	r6, r4
  400ee4:	d1f9      	bne.n	400eda <__libc_init_array+0x2e>
  400ee6:	bd70      	pop	{r4, r5, r6, pc}
  400ee8:	bd70      	pop	{r4, r5, r6, pc}
  400eea:	bf00      	nop
  400eec:	004042a8 	.word	0x004042a8
  400ef0:	004042a8 	.word	0x004042a8
  400ef4:	004042b0 	.word	0x004042b0
  400ef8:	004042a8 	.word	0x004042a8

00400efc <iprintf>:
  400efc:	b40f      	push	{r0, r1, r2, r3}
  400efe:	b500      	push	{lr}
  400f00:	4907      	ldr	r1, [pc, #28]	; (400f20 <iprintf+0x24>)
  400f02:	b083      	sub	sp, #12
  400f04:	ab04      	add	r3, sp, #16
  400f06:	6808      	ldr	r0, [r1, #0]
  400f08:	f853 2b04 	ldr.w	r2, [r3], #4
  400f0c:	6881      	ldr	r1, [r0, #8]
  400f0e:	9301      	str	r3, [sp, #4]
  400f10:	f000 fa20 	bl	401354 <_vfiprintf_r>
  400f14:	b003      	add	sp, #12
  400f16:	f85d eb04 	ldr.w	lr, [sp], #4
  400f1a:	b004      	add	sp, #16
  400f1c:	4770      	bx	lr
  400f1e:	bf00      	nop
  400f20:	20000440 	.word	0x20000440

00400f24 <memset>:
  400f24:	b470      	push	{r4, r5, r6}
  400f26:	0784      	lsls	r4, r0, #30
  400f28:	d046      	beq.n	400fb8 <memset+0x94>
  400f2a:	1e54      	subs	r4, r2, #1
  400f2c:	2a00      	cmp	r2, #0
  400f2e:	d041      	beq.n	400fb4 <memset+0x90>
  400f30:	b2cd      	uxtb	r5, r1
  400f32:	4603      	mov	r3, r0
  400f34:	e002      	b.n	400f3c <memset+0x18>
  400f36:	1e62      	subs	r2, r4, #1
  400f38:	b3e4      	cbz	r4, 400fb4 <memset+0x90>
  400f3a:	4614      	mov	r4, r2
  400f3c:	f803 5b01 	strb.w	r5, [r3], #1
  400f40:	079a      	lsls	r2, r3, #30
  400f42:	d1f8      	bne.n	400f36 <memset+0x12>
  400f44:	2c03      	cmp	r4, #3
  400f46:	d92e      	bls.n	400fa6 <memset+0x82>
  400f48:	b2cd      	uxtb	r5, r1
  400f4a:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  400f4e:	2c0f      	cmp	r4, #15
  400f50:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  400f54:	d919      	bls.n	400f8a <memset+0x66>
  400f56:	f103 0210 	add.w	r2, r3, #16
  400f5a:	4626      	mov	r6, r4
  400f5c:	3e10      	subs	r6, #16
  400f5e:	2e0f      	cmp	r6, #15
  400f60:	f842 5c10 	str.w	r5, [r2, #-16]
  400f64:	f842 5c0c 	str.w	r5, [r2, #-12]
  400f68:	f842 5c08 	str.w	r5, [r2, #-8]
  400f6c:	f842 5c04 	str.w	r5, [r2, #-4]
  400f70:	f102 0210 	add.w	r2, r2, #16
  400f74:	d8f2      	bhi.n	400f5c <memset+0x38>
  400f76:	f1a4 0210 	sub.w	r2, r4, #16
  400f7a:	f022 020f 	bic.w	r2, r2, #15
  400f7e:	f004 040f 	and.w	r4, r4, #15
  400f82:	3210      	adds	r2, #16
  400f84:	2c03      	cmp	r4, #3
  400f86:	4413      	add	r3, r2
  400f88:	d90d      	bls.n	400fa6 <memset+0x82>
  400f8a:	461e      	mov	r6, r3
  400f8c:	4622      	mov	r2, r4
  400f8e:	3a04      	subs	r2, #4
  400f90:	2a03      	cmp	r2, #3
  400f92:	f846 5b04 	str.w	r5, [r6], #4
  400f96:	d8fa      	bhi.n	400f8e <memset+0x6a>
  400f98:	1f22      	subs	r2, r4, #4
  400f9a:	f022 0203 	bic.w	r2, r2, #3
  400f9e:	3204      	adds	r2, #4
  400fa0:	4413      	add	r3, r2
  400fa2:	f004 0403 	and.w	r4, r4, #3
  400fa6:	b12c      	cbz	r4, 400fb4 <memset+0x90>
  400fa8:	b2c9      	uxtb	r1, r1
  400faa:	441c      	add	r4, r3
  400fac:	f803 1b01 	strb.w	r1, [r3], #1
  400fb0:	42a3      	cmp	r3, r4
  400fb2:	d1fb      	bne.n	400fac <memset+0x88>
  400fb4:	bc70      	pop	{r4, r5, r6}
  400fb6:	4770      	bx	lr
  400fb8:	4614      	mov	r4, r2
  400fba:	4603      	mov	r3, r0
  400fbc:	e7c2      	b.n	400f44 <memset+0x20>
  400fbe:	bf00      	nop

00400fc0 <_puts_r>:
  400fc0:	b5f0      	push	{r4, r5, r6, r7, lr}
  400fc2:	4605      	mov	r5, r0
  400fc4:	b089      	sub	sp, #36	; 0x24
  400fc6:	4608      	mov	r0, r1
  400fc8:	460c      	mov	r4, r1
  400fca:	f000 f919 	bl	401200 <strlen>
  400fce:	6bab      	ldr	r3, [r5, #56]	; 0x38
  400fd0:	4f14      	ldr	r7, [pc, #80]	; (401024 <_puts_r+0x64>)
  400fd2:	9404      	str	r4, [sp, #16]
  400fd4:	2601      	movs	r6, #1
  400fd6:	1c44      	adds	r4, r0, #1
  400fd8:	a904      	add	r1, sp, #16
  400fda:	2202      	movs	r2, #2
  400fdc:	9403      	str	r4, [sp, #12]
  400fde:	9005      	str	r0, [sp, #20]
  400fe0:	68ac      	ldr	r4, [r5, #8]
  400fe2:	9706      	str	r7, [sp, #24]
  400fe4:	9607      	str	r6, [sp, #28]
  400fe6:	9101      	str	r1, [sp, #4]
  400fe8:	9202      	str	r2, [sp, #8]
  400fea:	b1b3      	cbz	r3, 40101a <_puts_r+0x5a>
  400fec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  400ff0:	049a      	lsls	r2, r3, #18
  400ff2:	d406      	bmi.n	401002 <_puts_r+0x42>
  400ff4:	6e62      	ldr	r2, [r4, #100]	; 0x64
  400ff6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  400ffa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  400ffe:	81a3      	strh	r3, [r4, #12]
  401000:	6662      	str	r2, [r4, #100]	; 0x64
  401002:	4621      	mov	r1, r4
  401004:	4628      	mov	r0, r5
  401006:	aa01      	add	r2, sp, #4
  401008:	f001 fc48 	bl	40289c <__sfvwrite_r>
  40100c:	2800      	cmp	r0, #0
  40100e:	bf14      	ite	ne
  401010:	f04f 30ff 	movne.w	r0, #4294967295
  401014:	200a      	moveq	r0, #10
  401016:	b009      	add	sp, #36	; 0x24
  401018:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40101a:	4628      	mov	r0, r5
  40101c:	f001 fa8c 	bl	402538 <__sinit>
  401020:	e7e4      	b.n	400fec <_puts_r+0x2c>
  401022:	bf00      	nop
  401024:	00404248 	.word	0x00404248

00401028 <puts>:
  401028:	4b02      	ldr	r3, [pc, #8]	; (401034 <puts+0xc>)
  40102a:	4601      	mov	r1, r0
  40102c:	6818      	ldr	r0, [r3, #0]
  40102e:	f7ff bfc7 	b.w	400fc0 <_puts_r>
  401032:	bf00      	nop
  401034:	20000440 	.word	0x20000440

00401038 <__srget_r>:
  401038:	b538      	push	{r3, r4, r5, lr}
  40103a:	460c      	mov	r4, r1
  40103c:	4605      	mov	r5, r0
  40103e:	b108      	cbz	r0, 401044 <__srget_r+0xc>
  401040:	6b83      	ldr	r3, [r0, #56]	; 0x38
  401042:	b163      	cbz	r3, 40105e <__srget_r+0x26>
  401044:	4628      	mov	r0, r5
  401046:	4621      	mov	r1, r4
  401048:	f002 fc86 	bl	403958 <__srefill_r>
  40104c:	b950      	cbnz	r0, 401064 <__srget_r+0x2c>
  40104e:	e894 000c 	ldmia.w	r4, {r2, r3}
  401052:	3b01      	subs	r3, #1
  401054:	1c51      	adds	r1, r2, #1
  401056:	e884 000a 	stmia.w	r4, {r1, r3}
  40105a:	7810      	ldrb	r0, [r2, #0]
  40105c:	bd38      	pop	{r3, r4, r5, pc}
  40105e:	f001 fa6b 	bl	402538 <__sinit>
  401062:	e7ef      	b.n	401044 <__srget_r+0xc>
  401064:	f04f 30ff 	mov.w	r0, #4294967295
  401068:	bd38      	pop	{r3, r4, r5, pc}
  40106a:	bf00      	nop

0040106c <setbuf>:
  40106c:	2900      	cmp	r1, #0
  40106e:	bf0c      	ite	eq
  401070:	2202      	moveq	r2, #2
  401072:	2200      	movne	r2, #0
  401074:	f44f 6380 	mov.w	r3, #1024	; 0x400
  401078:	f000 b800 	b.w	40107c <setvbuf>

0040107c <setvbuf>:
  40107c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  401080:	4c51      	ldr	r4, [pc, #324]	; (4011c8 <setvbuf+0x14c>)
  401082:	6825      	ldr	r5, [r4, #0]
  401084:	b083      	sub	sp, #12
  401086:	4604      	mov	r4, r0
  401088:	460f      	mov	r7, r1
  40108a:	4690      	mov	r8, r2
  40108c:	461e      	mov	r6, r3
  40108e:	b115      	cbz	r5, 401096 <setvbuf+0x1a>
  401090:	6bab      	ldr	r3, [r5, #56]	; 0x38
  401092:	2b00      	cmp	r3, #0
  401094:	d079      	beq.n	40118a <setvbuf+0x10e>
  401096:	f1b8 0f02 	cmp.w	r8, #2
  40109a:	d004      	beq.n	4010a6 <setvbuf+0x2a>
  40109c:	f1b8 0f01 	cmp.w	r8, #1
  4010a0:	d87f      	bhi.n	4011a2 <setvbuf+0x126>
  4010a2:	2e00      	cmp	r6, #0
  4010a4:	db7d      	blt.n	4011a2 <setvbuf+0x126>
  4010a6:	4621      	mov	r1, r4
  4010a8:	4628      	mov	r0, r5
  4010aa:	f001 f99f 	bl	4023ec <_fflush_r>
  4010ae:	6b21      	ldr	r1, [r4, #48]	; 0x30
  4010b0:	b141      	cbz	r1, 4010c4 <setvbuf+0x48>
  4010b2:	f104 0340 	add.w	r3, r4, #64	; 0x40
  4010b6:	4299      	cmp	r1, r3
  4010b8:	d002      	beq.n	4010c0 <setvbuf+0x44>
  4010ba:	4628      	mov	r0, r5
  4010bc:	f001 fb06 	bl	4026cc <_free_r>
  4010c0:	2300      	movs	r3, #0
  4010c2:	6323      	str	r3, [r4, #48]	; 0x30
  4010c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4010c8:	2200      	movs	r2, #0
  4010ca:	61a2      	str	r2, [r4, #24]
  4010cc:	6062      	str	r2, [r4, #4]
  4010ce:	061a      	lsls	r2, r3, #24
  4010d0:	d454      	bmi.n	40117c <setvbuf+0x100>
  4010d2:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
  4010d6:	f023 0303 	bic.w	r3, r3, #3
  4010da:	f1b8 0f02 	cmp.w	r8, #2
  4010de:	81a3      	strh	r3, [r4, #12]
  4010e0:	d039      	beq.n	401156 <setvbuf+0xda>
  4010e2:	ab01      	add	r3, sp, #4
  4010e4:	466a      	mov	r2, sp
  4010e6:	4621      	mov	r1, r4
  4010e8:	4628      	mov	r0, r5
  4010ea:	f001 fdb3 	bl	402c54 <__swhatbuf_r>
  4010ee:	89a3      	ldrh	r3, [r4, #12]
  4010f0:	4318      	orrs	r0, r3
  4010f2:	81a0      	strh	r0, [r4, #12]
  4010f4:	b326      	cbz	r6, 401140 <setvbuf+0xc4>
  4010f6:	b327      	cbz	r7, 401142 <setvbuf+0xc6>
  4010f8:	6bab      	ldr	r3, [r5, #56]	; 0x38
  4010fa:	2b00      	cmp	r3, #0
  4010fc:	d04d      	beq.n	40119a <setvbuf+0x11e>
  4010fe:	9b00      	ldr	r3, [sp, #0]
  401100:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
  401104:	6027      	str	r7, [r4, #0]
  401106:	429e      	cmp	r6, r3
  401108:	bf1c      	itt	ne
  40110a:	f440 6000 	orrne.w	r0, r0, #2048	; 0x800
  40110e:	81a0      	strhne	r0, [r4, #12]
  401110:	f1b8 0f01 	cmp.w	r8, #1
  401114:	bf08      	it	eq
  401116:	f040 0001 	orreq.w	r0, r0, #1
  40111a:	b283      	uxth	r3, r0
  40111c:	bf08      	it	eq
  40111e:	81a0      	strheq	r0, [r4, #12]
  401120:	f003 0008 	and.w	r0, r3, #8
  401124:	b280      	uxth	r0, r0
  401126:	6127      	str	r7, [r4, #16]
  401128:	6166      	str	r6, [r4, #20]
  40112a:	b318      	cbz	r0, 401174 <setvbuf+0xf8>
  40112c:	f013 0001 	ands.w	r0, r3, #1
  401130:	d02f      	beq.n	401192 <setvbuf+0x116>
  401132:	2000      	movs	r0, #0
  401134:	4276      	negs	r6, r6
  401136:	61a6      	str	r6, [r4, #24]
  401138:	60a0      	str	r0, [r4, #8]
  40113a:	b003      	add	sp, #12
  40113c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  401140:	9e00      	ldr	r6, [sp, #0]
  401142:	4630      	mov	r0, r6
  401144:	f001 fdfa 	bl	402d3c <malloc>
  401148:	4607      	mov	r7, r0
  40114a:	b368      	cbz	r0, 4011a8 <setvbuf+0x12c>
  40114c:	89a3      	ldrh	r3, [r4, #12]
  40114e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  401152:	81a3      	strh	r3, [r4, #12]
  401154:	e7d0      	b.n	4010f8 <setvbuf+0x7c>
  401156:	2000      	movs	r0, #0
  401158:	f104 0243 	add.w	r2, r4, #67	; 0x43
  40115c:	f043 0302 	orr.w	r3, r3, #2
  401160:	2500      	movs	r5, #0
  401162:	2101      	movs	r1, #1
  401164:	81a3      	strh	r3, [r4, #12]
  401166:	60a5      	str	r5, [r4, #8]
  401168:	6022      	str	r2, [r4, #0]
  40116a:	6122      	str	r2, [r4, #16]
  40116c:	6161      	str	r1, [r4, #20]
  40116e:	b003      	add	sp, #12
  401170:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  401174:	60a0      	str	r0, [r4, #8]
  401176:	b003      	add	sp, #12
  401178:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  40117c:	6921      	ldr	r1, [r4, #16]
  40117e:	4628      	mov	r0, r5
  401180:	f001 faa4 	bl	4026cc <_free_r>
  401184:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  401188:	e7a3      	b.n	4010d2 <setvbuf+0x56>
  40118a:	4628      	mov	r0, r5
  40118c:	f001 f9d4 	bl	402538 <__sinit>
  401190:	e781      	b.n	401096 <setvbuf+0x1a>
  401192:	60a6      	str	r6, [r4, #8]
  401194:	b003      	add	sp, #12
  401196:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  40119a:	4628      	mov	r0, r5
  40119c:	f001 f9cc 	bl	402538 <__sinit>
  4011a0:	e7ad      	b.n	4010fe <setvbuf+0x82>
  4011a2:	f04f 30ff 	mov.w	r0, #4294967295
  4011a6:	e7e2      	b.n	40116e <setvbuf+0xf2>
  4011a8:	f8dd 9000 	ldr.w	r9, [sp]
  4011ac:	45b1      	cmp	r9, r6
  4011ae:	d006      	beq.n	4011be <setvbuf+0x142>
  4011b0:	4648      	mov	r0, r9
  4011b2:	f001 fdc3 	bl	402d3c <malloc>
  4011b6:	4607      	mov	r7, r0
  4011b8:	b108      	cbz	r0, 4011be <setvbuf+0x142>
  4011ba:	464e      	mov	r6, r9
  4011bc:	e7c6      	b.n	40114c <setvbuf+0xd0>
  4011be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4011c2:	f04f 30ff 	mov.w	r0, #4294967295
  4011c6:	e7c7      	b.n	401158 <setvbuf+0xdc>
  4011c8:	20000440 	.word	0x20000440
	...

00401200 <strlen>:
  401200:	f890 f000 	pld	[r0]
  401204:	e96d 4502 	strd	r4, r5, [sp, #-8]!
  401208:	f020 0107 	bic.w	r1, r0, #7
  40120c:	f06f 0c00 	mvn.w	ip, #0
  401210:	f010 0407 	ands.w	r4, r0, #7
  401214:	f891 f020 	pld	[r1, #32]
  401218:	f040 8049 	bne.w	4012ae <strlen+0xae>
  40121c:	f04f 0400 	mov.w	r4, #0
  401220:	f06f 0007 	mvn.w	r0, #7
  401224:	e9d1 2300 	ldrd	r2, r3, [r1]
  401228:	f891 f040 	pld	[r1, #64]	; 0x40
  40122c:	f100 0008 	add.w	r0, r0, #8
  401230:	fa82 f24c 	uadd8	r2, r2, ip
  401234:	faa4 f28c 	sel	r2, r4, ip
  401238:	fa83 f34c 	uadd8	r3, r3, ip
  40123c:	faa2 f38c 	sel	r3, r2, ip
  401240:	bb4b      	cbnz	r3, 401296 <strlen+0x96>
  401242:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
  401246:	fa82 f24c 	uadd8	r2, r2, ip
  40124a:	f100 0008 	add.w	r0, r0, #8
  40124e:	faa4 f28c 	sel	r2, r4, ip
  401252:	fa83 f34c 	uadd8	r3, r3, ip
  401256:	faa2 f38c 	sel	r3, r2, ip
  40125a:	b9e3      	cbnz	r3, 401296 <strlen+0x96>
  40125c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
  401260:	fa82 f24c 	uadd8	r2, r2, ip
  401264:	f100 0008 	add.w	r0, r0, #8
  401268:	faa4 f28c 	sel	r2, r4, ip
  40126c:	fa83 f34c 	uadd8	r3, r3, ip
  401270:	faa2 f38c 	sel	r3, r2, ip
  401274:	b97b      	cbnz	r3, 401296 <strlen+0x96>
  401276:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
  40127a:	f101 0120 	add.w	r1, r1, #32
  40127e:	fa82 f24c 	uadd8	r2, r2, ip
  401282:	f100 0008 	add.w	r0, r0, #8
  401286:	faa4 f28c 	sel	r2, r4, ip
  40128a:	fa83 f34c 	uadd8	r3, r3, ip
  40128e:	faa2 f38c 	sel	r3, r2, ip
  401292:	2b00      	cmp	r3, #0
  401294:	d0c6      	beq.n	401224 <strlen+0x24>
  401296:	2a00      	cmp	r2, #0
  401298:	bf04      	itt	eq
  40129a:	3004      	addeq	r0, #4
  40129c:	461a      	moveq	r2, r3
  40129e:	ba12      	rev	r2, r2
  4012a0:	fab2 f282 	clz	r2, r2
  4012a4:	e8fd 4502 	ldrd	r4, r5, [sp], #8
  4012a8:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  4012ac:	4770      	bx	lr
  4012ae:	e9d1 2300 	ldrd	r2, r3, [r1]
  4012b2:	f004 0503 	and.w	r5, r4, #3
  4012b6:	f1c4 0000 	rsb	r0, r4, #0
  4012ba:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  4012be:	f014 0f04 	tst.w	r4, #4
  4012c2:	f891 f040 	pld	[r1, #64]	; 0x40
  4012c6:	fa0c f505 	lsl.w	r5, ip, r5
  4012ca:	ea62 0205 	orn	r2, r2, r5
  4012ce:	bf1c      	itt	ne
  4012d0:	ea63 0305 	ornne	r3, r3, r5
  4012d4:	4662      	movne	r2, ip
  4012d6:	f04f 0400 	mov.w	r4, #0
  4012da:	e7a9      	b.n	401230 <strlen+0x30>

004012dc <__sprint_r.part.0>:
  4012dc:	6e4b      	ldr	r3, [r1, #100]	; 0x64
  4012de:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4012e2:	049c      	lsls	r4, r3, #18
  4012e4:	4692      	mov	sl, r2
  4012e6:	d52c      	bpl.n	401342 <__sprint_r.part.0+0x66>
  4012e8:	6893      	ldr	r3, [r2, #8]
  4012ea:	6812      	ldr	r2, [r2, #0]
  4012ec:	b33b      	cbz	r3, 40133e <__sprint_r.part.0+0x62>
  4012ee:	460f      	mov	r7, r1
  4012f0:	4680      	mov	r8, r0
  4012f2:	f102 0908 	add.w	r9, r2, #8
  4012f6:	e919 0060 	ldmdb	r9, {r5, r6}
  4012fa:	08b6      	lsrs	r6, r6, #2
  4012fc:	d017      	beq.n	40132e <__sprint_r.part.0+0x52>
  4012fe:	3d04      	subs	r5, #4
  401300:	2400      	movs	r4, #0
  401302:	e001      	b.n	401308 <__sprint_r.part.0+0x2c>
  401304:	42a6      	cmp	r6, r4
  401306:	d010      	beq.n	40132a <__sprint_r.part.0+0x4e>
  401308:	463a      	mov	r2, r7
  40130a:	f855 1f04 	ldr.w	r1, [r5, #4]!
  40130e:	4640      	mov	r0, r8
  401310:	f001 f97c 	bl	40260c <_fputwc_r>
  401314:	1c43      	adds	r3, r0, #1
  401316:	f104 0401 	add.w	r4, r4, #1
  40131a:	d1f3      	bne.n	401304 <__sprint_r.part.0+0x28>
  40131c:	2300      	movs	r3, #0
  40131e:	f8ca 3008 	str.w	r3, [sl, #8]
  401322:	f8ca 3004 	str.w	r3, [sl, #4]
  401326:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40132a:	f8da 3008 	ldr.w	r3, [sl, #8]
  40132e:	eba3 0386 	sub.w	r3, r3, r6, lsl #2
  401332:	f8ca 3008 	str.w	r3, [sl, #8]
  401336:	f109 0908 	add.w	r9, r9, #8
  40133a:	2b00      	cmp	r3, #0
  40133c:	d1db      	bne.n	4012f6 <__sprint_r.part.0+0x1a>
  40133e:	2000      	movs	r0, #0
  401340:	e7ec      	b.n	40131c <__sprint_r.part.0+0x40>
  401342:	f001 faab 	bl	40289c <__sfvwrite_r>
  401346:	2300      	movs	r3, #0
  401348:	f8ca 3008 	str.w	r3, [sl, #8]
  40134c:	f8ca 3004 	str.w	r3, [sl, #4]
  401350:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00401354 <_vfiprintf_r>:
  401354:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401358:	b0ab      	sub	sp, #172	; 0xac
  40135a:	461c      	mov	r4, r3
  40135c:	9100      	str	r1, [sp, #0]
  40135e:	4690      	mov	r8, r2
  401360:	9304      	str	r3, [sp, #16]
  401362:	9005      	str	r0, [sp, #20]
  401364:	b118      	cbz	r0, 40136e <_vfiprintf_r+0x1a>
  401366:	6b83      	ldr	r3, [r0, #56]	; 0x38
  401368:	2b00      	cmp	r3, #0
  40136a:	f000 80de 	beq.w	40152a <_vfiprintf_r+0x1d6>
  40136e:	9800      	ldr	r0, [sp, #0]
  401370:	f9b0 100c 	ldrsh.w	r1, [r0, #12]
  401374:	b28a      	uxth	r2, r1
  401376:	0495      	lsls	r5, r2, #18
  401378:	d407      	bmi.n	40138a <_vfiprintf_r+0x36>
  40137a:	6e43      	ldr	r3, [r0, #100]	; 0x64
  40137c:	f441 5200 	orr.w	r2, r1, #8192	; 0x2000
  401380:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  401384:	8182      	strh	r2, [r0, #12]
  401386:	6643      	str	r3, [r0, #100]	; 0x64
  401388:	b292      	uxth	r2, r2
  40138a:	0711      	lsls	r1, r2, #28
  40138c:	f140 80b1 	bpl.w	4014f2 <_vfiprintf_r+0x19e>
  401390:	9b00      	ldr	r3, [sp, #0]
  401392:	691b      	ldr	r3, [r3, #16]
  401394:	2b00      	cmp	r3, #0
  401396:	f000 80ac 	beq.w	4014f2 <_vfiprintf_r+0x19e>
  40139a:	f002 021a 	and.w	r2, r2, #26
  40139e:	2a0a      	cmp	r2, #10
  4013a0:	f000 80b5 	beq.w	40150e <_vfiprintf_r+0x1ba>
  4013a4:	2300      	movs	r3, #0
  4013a6:	f10d 0b68 	add.w	fp, sp, #104	; 0x68
  4013aa:	9302      	str	r3, [sp, #8]
  4013ac:	930f      	str	r3, [sp, #60]	; 0x3c
  4013ae:	930e      	str	r3, [sp, #56]	; 0x38
  4013b0:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
  4013b4:	46da      	mov	sl, fp
  4013b6:	f898 3000 	ldrb.w	r3, [r8]
  4013ba:	4644      	mov	r4, r8
  4013bc:	b1fb      	cbz	r3, 4013fe <_vfiprintf_r+0xaa>
  4013be:	2b25      	cmp	r3, #37	; 0x25
  4013c0:	d102      	bne.n	4013c8 <_vfiprintf_r+0x74>
  4013c2:	e01c      	b.n	4013fe <_vfiprintf_r+0xaa>
  4013c4:	2b25      	cmp	r3, #37	; 0x25
  4013c6:	d003      	beq.n	4013d0 <_vfiprintf_r+0x7c>
  4013c8:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  4013cc:	2b00      	cmp	r3, #0
  4013ce:	d1f9      	bne.n	4013c4 <_vfiprintf_r+0x70>
  4013d0:	ebc8 0504 	rsb	r5, r8, r4
  4013d4:	b19d      	cbz	r5, 4013fe <_vfiprintf_r+0xaa>
  4013d6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  4013d8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  4013da:	f8ca 8000 	str.w	r8, [sl]
  4013de:	3301      	adds	r3, #1
  4013e0:	442a      	add	r2, r5
  4013e2:	2b07      	cmp	r3, #7
  4013e4:	f8ca 5004 	str.w	r5, [sl, #4]
  4013e8:	920f      	str	r2, [sp, #60]	; 0x3c
  4013ea:	930e      	str	r3, [sp, #56]	; 0x38
  4013ec:	dd7b      	ble.n	4014e6 <_vfiprintf_r+0x192>
  4013ee:	2a00      	cmp	r2, #0
  4013f0:	f040 8528 	bne.w	401e44 <_vfiprintf_r+0xaf0>
  4013f4:	9b02      	ldr	r3, [sp, #8]
  4013f6:	920e      	str	r2, [sp, #56]	; 0x38
  4013f8:	442b      	add	r3, r5
  4013fa:	46da      	mov	sl, fp
  4013fc:	9302      	str	r3, [sp, #8]
  4013fe:	7823      	ldrb	r3, [r4, #0]
  401400:	2b00      	cmp	r3, #0
  401402:	f000 843e 	beq.w	401c82 <_vfiprintf_r+0x92e>
  401406:	2100      	movs	r1, #0
  401408:	f04f 0300 	mov.w	r3, #0
  40140c:	f04f 32ff 	mov.w	r2, #4294967295
  401410:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  401414:	f104 0801 	add.w	r8, r4, #1
  401418:	7863      	ldrb	r3, [r4, #1]
  40141a:	9201      	str	r2, [sp, #4]
  40141c:	4608      	mov	r0, r1
  40141e:	460e      	mov	r6, r1
  401420:	460c      	mov	r4, r1
  401422:	f108 0801 	add.w	r8, r8, #1
  401426:	f1a3 0220 	sub.w	r2, r3, #32
  40142a:	2a58      	cmp	r2, #88	; 0x58
  40142c:	f200 8393 	bhi.w	401b56 <_vfiprintf_r+0x802>
  401430:	e8df f012 	tbh	[pc, r2, lsl #1]
  401434:	03910346 	.word	0x03910346
  401438:	034e0391 	.word	0x034e0391
  40143c:	03910391 	.word	0x03910391
  401440:	03910391 	.word	0x03910391
  401444:	03910391 	.word	0x03910391
  401448:	02670289 	.word	0x02670289
  40144c:	00800391 	.word	0x00800391
  401450:	0391026c 	.word	0x0391026c
  401454:	025901c6 	.word	0x025901c6
  401458:	02590259 	.word	0x02590259
  40145c:	02590259 	.word	0x02590259
  401460:	02590259 	.word	0x02590259
  401464:	02590259 	.word	0x02590259
  401468:	03910391 	.word	0x03910391
  40146c:	03910391 	.word	0x03910391
  401470:	03910391 	.word	0x03910391
  401474:	03910391 	.word	0x03910391
  401478:	03910391 	.word	0x03910391
  40147c:	039101cb 	.word	0x039101cb
  401480:	03910391 	.word	0x03910391
  401484:	03910391 	.word	0x03910391
  401488:	03910391 	.word	0x03910391
  40148c:	03910391 	.word	0x03910391
  401490:	02140391 	.word	0x02140391
  401494:	03910391 	.word	0x03910391
  401498:	03910391 	.word	0x03910391
  40149c:	02ee0391 	.word	0x02ee0391
  4014a0:	03910391 	.word	0x03910391
  4014a4:	03910311 	.word	0x03910311
  4014a8:	03910391 	.word	0x03910391
  4014ac:	03910391 	.word	0x03910391
  4014b0:	03910391 	.word	0x03910391
  4014b4:	03910391 	.word	0x03910391
  4014b8:	03340391 	.word	0x03340391
  4014bc:	0391038a 	.word	0x0391038a
  4014c0:	03910391 	.word	0x03910391
  4014c4:	038a0367 	.word	0x038a0367
  4014c8:	03910391 	.word	0x03910391
  4014cc:	0391036c 	.word	0x0391036c
  4014d0:	02950379 	.word	0x02950379
  4014d4:	02e90085 	.word	0x02e90085
  4014d8:	029b0391 	.word	0x029b0391
  4014dc:	02ba0391 	.word	0x02ba0391
  4014e0:	03910391 	.word	0x03910391
  4014e4:	0353      	.short	0x0353
  4014e6:	f10a 0a08 	add.w	sl, sl, #8
  4014ea:	9b02      	ldr	r3, [sp, #8]
  4014ec:	442b      	add	r3, r5
  4014ee:	9302      	str	r3, [sp, #8]
  4014f0:	e785      	b.n	4013fe <_vfiprintf_r+0xaa>
  4014f2:	9900      	ldr	r1, [sp, #0]
  4014f4:	9805      	ldr	r0, [sp, #20]
  4014f6:	f000 fe61 	bl	4021bc <__swsetup_r>
  4014fa:	2800      	cmp	r0, #0
  4014fc:	f040 8558 	bne.w	401fb0 <_vfiprintf_r+0xc5c>
  401500:	9b00      	ldr	r3, [sp, #0]
  401502:	899a      	ldrh	r2, [r3, #12]
  401504:	f002 021a 	and.w	r2, r2, #26
  401508:	2a0a      	cmp	r2, #10
  40150a:	f47f af4b 	bne.w	4013a4 <_vfiprintf_r+0x50>
  40150e:	9900      	ldr	r1, [sp, #0]
  401510:	f9b1 300e 	ldrsh.w	r3, [r1, #14]
  401514:	2b00      	cmp	r3, #0
  401516:	f6ff af45 	blt.w	4013a4 <_vfiprintf_r+0x50>
  40151a:	4623      	mov	r3, r4
  40151c:	4642      	mov	r2, r8
  40151e:	9805      	ldr	r0, [sp, #20]
  401520:	f000 fe16 	bl	402150 <__sbprintf>
  401524:	b02b      	add	sp, #172	; 0xac
  401526:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40152a:	f001 f805 	bl	402538 <__sinit>
  40152e:	e71e      	b.n	40136e <_vfiprintf_r+0x1a>
  401530:	4264      	negs	r4, r4
  401532:	9304      	str	r3, [sp, #16]
  401534:	f046 0604 	orr.w	r6, r6, #4
  401538:	f898 3000 	ldrb.w	r3, [r8]
  40153c:	e771      	b.n	401422 <_vfiprintf_r+0xce>
  40153e:	2130      	movs	r1, #48	; 0x30
  401540:	9804      	ldr	r0, [sp, #16]
  401542:	f88d 1030 	strb.w	r1, [sp, #48]	; 0x30
  401546:	9901      	ldr	r1, [sp, #4]
  401548:	9406      	str	r4, [sp, #24]
  40154a:	f04f 0300 	mov.w	r3, #0
  40154e:	2278      	movs	r2, #120	; 0x78
  401550:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  401554:	2900      	cmp	r1, #0
  401556:	4603      	mov	r3, r0
  401558:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
  40155c:	6804      	ldr	r4, [r0, #0]
  40155e:	f103 0304 	add.w	r3, r3, #4
  401562:	f04f 0500 	mov.w	r5, #0
  401566:	f046 0202 	orr.w	r2, r6, #2
  40156a:	f2c0 8525 	blt.w	401fb8 <_vfiprintf_r+0xc64>
  40156e:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  401572:	ea54 0205 	orrs.w	r2, r4, r5
  401576:	f046 0602 	orr.w	r6, r6, #2
  40157a:	9304      	str	r3, [sp, #16]
  40157c:	f040 84bf 	bne.w	401efe <_vfiprintf_r+0xbaa>
  401580:	48b3      	ldr	r0, [pc, #716]	; (401850 <_vfiprintf_r+0x4fc>)
  401582:	9b01      	ldr	r3, [sp, #4]
  401584:	2b00      	cmp	r3, #0
  401586:	f040 841c 	bne.w	401dc2 <_vfiprintf_r+0xa6e>
  40158a:	4699      	mov	r9, r3
  40158c:	2300      	movs	r3, #0
  40158e:	9301      	str	r3, [sp, #4]
  401590:	9303      	str	r3, [sp, #12]
  401592:	465f      	mov	r7, fp
  401594:	9b01      	ldr	r3, [sp, #4]
  401596:	9a03      	ldr	r2, [sp, #12]
  401598:	4293      	cmp	r3, r2
  40159a:	bfb8      	it	lt
  40159c:	4613      	movlt	r3, r2
  40159e:	461d      	mov	r5, r3
  4015a0:	f1b9 0f00 	cmp.w	r9, #0
  4015a4:	d000      	beq.n	4015a8 <_vfiprintf_r+0x254>
  4015a6:	3501      	adds	r5, #1
  4015a8:	f016 0302 	ands.w	r3, r6, #2
  4015ac:	9307      	str	r3, [sp, #28]
  4015ae:	bf18      	it	ne
  4015b0:	3502      	addne	r5, #2
  4015b2:	f016 0384 	ands.w	r3, r6, #132	; 0x84
  4015b6:	9308      	str	r3, [sp, #32]
  4015b8:	f040 82f1 	bne.w	401b9e <_vfiprintf_r+0x84a>
  4015bc:	9b06      	ldr	r3, [sp, #24]
  4015be:	1b5c      	subs	r4, r3, r5
  4015c0:	2c00      	cmp	r4, #0
  4015c2:	f340 82ec 	ble.w	401b9e <_vfiprintf_r+0x84a>
  4015c6:	2c10      	cmp	r4, #16
  4015c8:	f340 8556 	ble.w	402078 <_vfiprintf_r+0xd24>
  4015cc:	f8df 9284 	ldr.w	r9, [pc, #644]	; 401854 <_vfiprintf_r+0x500>
  4015d0:	f8dd e038 	ldr.w	lr, [sp, #56]	; 0x38
  4015d4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  4015d6:	46d4      	mov	ip, sl
  4015d8:	2310      	movs	r3, #16
  4015da:	46c2      	mov	sl, r8
  4015dc:	4670      	mov	r0, lr
  4015de:	46a8      	mov	r8, r5
  4015e0:	464d      	mov	r5, r9
  4015e2:	f8dd 9014 	ldr.w	r9, [sp, #20]
  4015e6:	e007      	b.n	4015f8 <_vfiprintf_r+0x2a4>
  4015e8:	f100 0e02 	add.w	lr, r0, #2
  4015ec:	f10c 0c08 	add.w	ip, ip, #8
  4015f0:	4608      	mov	r0, r1
  4015f2:	3c10      	subs	r4, #16
  4015f4:	2c10      	cmp	r4, #16
  4015f6:	dd13      	ble.n	401620 <_vfiprintf_r+0x2cc>
  4015f8:	1c41      	adds	r1, r0, #1
  4015fa:	3210      	adds	r2, #16
  4015fc:	2907      	cmp	r1, #7
  4015fe:	920f      	str	r2, [sp, #60]	; 0x3c
  401600:	f8cc 5000 	str.w	r5, [ip]
  401604:	f8cc 3004 	str.w	r3, [ip, #4]
  401608:	910e      	str	r1, [sp, #56]	; 0x38
  40160a:	dded      	ble.n	4015e8 <_vfiprintf_r+0x294>
  40160c:	2a00      	cmp	r2, #0
  40160e:	f040 82b7 	bne.w	401b80 <_vfiprintf_r+0x82c>
  401612:	3c10      	subs	r4, #16
  401614:	2c10      	cmp	r4, #16
  401616:	4610      	mov	r0, r2
  401618:	f04f 0e01 	mov.w	lr, #1
  40161c:	46dc      	mov	ip, fp
  40161e:	dceb      	bgt.n	4015f8 <_vfiprintf_r+0x2a4>
  401620:	46a9      	mov	r9, r5
  401622:	4670      	mov	r0, lr
  401624:	4645      	mov	r5, r8
  401626:	46d0      	mov	r8, sl
  401628:	46e2      	mov	sl, ip
  40162a:	4422      	add	r2, r4
  40162c:	2807      	cmp	r0, #7
  40162e:	920f      	str	r2, [sp, #60]	; 0x3c
  401630:	f8ca 9000 	str.w	r9, [sl]
  401634:	f8ca 4004 	str.w	r4, [sl, #4]
  401638:	900e      	str	r0, [sp, #56]	; 0x38
  40163a:	f300 8375 	bgt.w	401d28 <_vfiprintf_r+0x9d4>
  40163e:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
  401642:	f10a 0a08 	add.w	sl, sl, #8
  401646:	f100 0e01 	add.w	lr, r0, #1
  40164a:	2b00      	cmp	r3, #0
  40164c:	f040 82b0 	bne.w	401bb0 <_vfiprintf_r+0x85c>
  401650:	9b07      	ldr	r3, [sp, #28]
  401652:	2b00      	cmp	r3, #0
  401654:	f000 82c3 	beq.w	401bde <_vfiprintf_r+0x88a>
  401658:	3202      	adds	r2, #2
  40165a:	a90c      	add	r1, sp, #48	; 0x30
  40165c:	2302      	movs	r3, #2
  40165e:	f1be 0f07 	cmp.w	lr, #7
  401662:	920f      	str	r2, [sp, #60]	; 0x3c
  401664:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
  401668:	e88a 000a 	stmia.w	sl, {r1, r3}
  40166c:	f340 8378 	ble.w	401d60 <_vfiprintf_r+0xa0c>
  401670:	2a00      	cmp	r2, #0
  401672:	f040 840a 	bne.w	401e8a <_vfiprintf_r+0xb36>
  401676:	9b08      	ldr	r3, [sp, #32]
  401678:	2b80      	cmp	r3, #128	; 0x80
  40167a:	f04f 0e01 	mov.w	lr, #1
  40167e:	4610      	mov	r0, r2
  401680:	46da      	mov	sl, fp
  401682:	f040 82b0 	bne.w	401be6 <_vfiprintf_r+0x892>
  401686:	9b06      	ldr	r3, [sp, #24]
  401688:	1b5c      	subs	r4, r3, r5
  40168a:	2c00      	cmp	r4, #0
  40168c:	f340 82ab 	ble.w	401be6 <_vfiprintf_r+0x892>
  401690:	2c10      	cmp	r4, #16
  401692:	f8df 91c4 	ldr.w	r9, [pc, #452]	; 401858 <_vfiprintf_r+0x504>
  401696:	f340 850b 	ble.w	4020b0 <_vfiprintf_r+0xd5c>
  40169a:	46d6      	mov	lr, sl
  40169c:	2310      	movs	r3, #16
  40169e:	46c2      	mov	sl, r8
  4016a0:	46a8      	mov	r8, r5
  4016a2:	464d      	mov	r5, r9
  4016a4:	f8dd 9014 	ldr.w	r9, [sp, #20]
  4016a8:	e007      	b.n	4016ba <_vfiprintf_r+0x366>
  4016aa:	f100 0c02 	add.w	ip, r0, #2
  4016ae:	f10e 0e08 	add.w	lr, lr, #8
  4016b2:	4608      	mov	r0, r1
  4016b4:	3c10      	subs	r4, #16
  4016b6:	2c10      	cmp	r4, #16
  4016b8:	dd13      	ble.n	4016e2 <_vfiprintf_r+0x38e>
  4016ba:	1c41      	adds	r1, r0, #1
  4016bc:	3210      	adds	r2, #16
  4016be:	2907      	cmp	r1, #7
  4016c0:	920f      	str	r2, [sp, #60]	; 0x3c
  4016c2:	f8ce 5000 	str.w	r5, [lr]
  4016c6:	f8ce 3004 	str.w	r3, [lr, #4]
  4016ca:	910e      	str	r1, [sp, #56]	; 0x38
  4016cc:	dded      	ble.n	4016aa <_vfiprintf_r+0x356>
  4016ce:	2a00      	cmp	r2, #0
  4016d0:	f040 8315 	bne.w	401cfe <_vfiprintf_r+0x9aa>
  4016d4:	3c10      	subs	r4, #16
  4016d6:	2c10      	cmp	r4, #16
  4016d8:	f04f 0c01 	mov.w	ip, #1
  4016dc:	4610      	mov	r0, r2
  4016de:	46de      	mov	lr, fp
  4016e0:	dceb      	bgt.n	4016ba <_vfiprintf_r+0x366>
  4016e2:	46a9      	mov	r9, r5
  4016e4:	4645      	mov	r5, r8
  4016e6:	46d0      	mov	r8, sl
  4016e8:	46f2      	mov	sl, lr
  4016ea:	4422      	add	r2, r4
  4016ec:	f1bc 0f07 	cmp.w	ip, #7
  4016f0:	920f      	str	r2, [sp, #60]	; 0x3c
  4016f2:	f8ca 9000 	str.w	r9, [sl]
  4016f6:	f8ca 4004 	str.w	r4, [sl, #4]
  4016fa:	f8cd c038 	str.w	ip, [sp, #56]	; 0x38
  4016fe:	f300 83d2 	bgt.w	401ea6 <_vfiprintf_r+0xb52>
  401702:	9b01      	ldr	r3, [sp, #4]
  401704:	9903      	ldr	r1, [sp, #12]
  401706:	1a5c      	subs	r4, r3, r1
  401708:	2c00      	cmp	r4, #0
  40170a:	f10a 0a08 	add.w	sl, sl, #8
  40170e:	f10c 0e01 	add.w	lr, ip, #1
  401712:	4660      	mov	r0, ip
  401714:	f300 826d 	bgt.w	401bf2 <_vfiprintf_r+0x89e>
  401718:	9903      	ldr	r1, [sp, #12]
  40171a:	f8ca 7000 	str.w	r7, [sl]
  40171e:	440a      	add	r2, r1
  401720:	f1be 0f07 	cmp.w	lr, #7
  401724:	920f      	str	r2, [sp, #60]	; 0x3c
  401726:	f8ca 1004 	str.w	r1, [sl, #4]
  40172a:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
  40172e:	f340 82ce 	ble.w	401cce <_vfiprintf_r+0x97a>
  401732:	2a00      	cmp	r2, #0
  401734:	f040 833a 	bne.w	401dac <_vfiprintf_r+0xa58>
  401738:	0770      	lsls	r0, r6, #29
  40173a:	920e      	str	r2, [sp, #56]	; 0x38
  40173c:	d538      	bpl.n	4017b0 <_vfiprintf_r+0x45c>
  40173e:	9b06      	ldr	r3, [sp, #24]
  401740:	1b5c      	subs	r4, r3, r5
  401742:	2c00      	cmp	r4, #0
  401744:	dd34      	ble.n	4017b0 <_vfiprintf_r+0x45c>
  401746:	46da      	mov	sl, fp
  401748:	2c10      	cmp	r4, #16
  40174a:	f340 84ab 	ble.w	4020a4 <_vfiprintf_r+0xd50>
  40174e:	f8df 9104 	ldr.w	r9, [pc, #260]	; 401854 <_vfiprintf_r+0x500>
  401752:	990e      	ldr	r1, [sp, #56]	; 0x38
  401754:	464f      	mov	r7, r9
  401756:	2610      	movs	r6, #16
  401758:	f8dd 9014 	ldr.w	r9, [sp, #20]
  40175c:	e006      	b.n	40176c <_vfiprintf_r+0x418>
  40175e:	1c88      	adds	r0, r1, #2
  401760:	f10a 0a08 	add.w	sl, sl, #8
  401764:	4619      	mov	r1, r3
  401766:	3c10      	subs	r4, #16
  401768:	2c10      	cmp	r4, #16
  40176a:	dd13      	ble.n	401794 <_vfiprintf_r+0x440>
  40176c:	1c4b      	adds	r3, r1, #1
  40176e:	3210      	adds	r2, #16
  401770:	2b07      	cmp	r3, #7
  401772:	920f      	str	r2, [sp, #60]	; 0x3c
  401774:	f8ca 7000 	str.w	r7, [sl]
  401778:	f8ca 6004 	str.w	r6, [sl, #4]
  40177c:	930e      	str	r3, [sp, #56]	; 0x38
  40177e:	ddee      	ble.n	40175e <_vfiprintf_r+0x40a>
  401780:	2a00      	cmp	r2, #0
  401782:	f040 828e 	bne.w	401ca2 <_vfiprintf_r+0x94e>
  401786:	3c10      	subs	r4, #16
  401788:	2c10      	cmp	r4, #16
  40178a:	f04f 0001 	mov.w	r0, #1
  40178e:	4611      	mov	r1, r2
  401790:	46da      	mov	sl, fp
  401792:	dceb      	bgt.n	40176c <_vfiprintf_r+0x418>
  401794:	46b9      	mov	r9, r7
  401796:	4422      	add	r2, r4
  401798:	2807      	cmp	r0, #7
  40179a:	920f      	str	r2, [sp, #60]	; 0x3c
  40179c:	f8ca 9000 	str.w	r9, [sl]
  4017a0:	f8ca 4004 	str.w	r4, [sl, #4]
  4017a4:	900e      	str	r0, [sp, #56]	; 0x38
  4017a6:	f340 829b 	ble.w	401ce0 <_vfiprintf_r+0x98c>
  4017aa:	2a00      	cmp	r2, #0
  4017ac:	f040 8425 	bne.w	401ffa <_vfiprintf_r+0xca6>
  4017b0:	9b02      	ldr	r3, [sp, #8]
  4017b2:	9a06      	ldr	r2, [sp, #24]
  4017b4:	42aa      	cmp	r2, r5
  4017b6:	bfac      	ite	ge
  4017b8:	189b      	addge	r3, r3, r2
  4017ba:	195b      	addlt	r3, r3, r5
  4017bc:	9302      	str	r3, [sp, #8]
  4017be:	e299      	b.n	401cf4 <_vfiprintf_r+0x9a0>
  4017c0:	f046 0680 	orr.w	r6, r6, #128	; 0x80
  4017c4:	f898 3000 	ldrb.w	r3, [r8]
  4017c8:	e62b      	b.n	401422 <_vfiprintf_r+0xce>
  4017ca:	9406      	str	r4, [sp, #24]
  4017cc:	2900      	cmp	r1, #0
  4017ce:	f040 84af 	bne.w	402130 <_vfiprintf_r+0xddc>
  4017d2:	f046 0610 	orr.w	r6, r6, #16
  4017d6:	06b3      	lsls	r3, r6, #26
  4017d8:	f140 8312 	bpl.w	401e00 <_vfiprintf_r+0xaac>
  4017dc:	9904      	ldr	r1, [sp, #16]
  4017de:	3107      	adds	r1, #7
  4017e0:	f021 0107 	bic.w	r1, r1, #7
  4017e4:	e9d1 2300 	ldrd	r2, r3, [r1]
  4017e8:	3108      	adds	r1, #8
  4017ea:	9104      	str	r1, [sp, #16]
  4017ec:	4614      	mov	r4, r2
  4017ee:	461d      	mov	r5, r3
  4017f0:	2a00      	cmp	r2, #0
  4017f2:	f173 0300 	sbcs.w	r3, r3, #0
  4017f6:	f2c0 8386 	blt.w	401f06 <_vfiprintf_r+0xbb2>
  4017fa:	9b01      	ldr	r3, [sp, #4]
  4017fc:	f89d 902f 	ldrb.w	r9, [sp, #47]	; 0x2f
  401800:	2b00      	cmp	r3, #0
  401802:	f2c0 831a 	blt.w	401e3a <_vfiprintf_r+0xae6>
  401806:	ea54 0305 	orrs.w	r3, r4, r5
  40180a:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  40180e:	f000 80ed 	beq.w	4019ec <_vfiprintf_r+0x698>
  401812:	2d00      	cmp	r5, #0
  401814:	bf08      	it	eq
  401816:	2c0a      	cmpeq	r4, #10
  401818:	f0c0 80ed 	bcc.w	4019f6 <_vfiprintf_r+0x6a2>
  40181c:	465f      	mov	r7, fp
  40181e:	4620      	mov	r0, r4
  401820:	4629      	mov	r1, r5
  401822:	220a      	movs	r2, #10
  401824:	2300      	movs	r3, #0
  401826:	f002 fb13 	bl	403e50 <__aeabi_uldivmod>
  40182a:	3230      	adds	r2, #48	; 0x30
  40182c:	f807 2d01 	strb.w	r2, [r7, #-1]!
  401830:	4620      	mov	r0, r4
  401832:	4629      	mov	r1, r5
  401834:	2300      	movs	r3, #0
  401836:	220a      	movs	r2, #10
  401838:	f002 fb0a 	bl	403e50 <__aeabi_uldivmod>
  40183c:	4604      	mov	r4, r0
  40183e:	460d      	mov	r5, r1
  401840:	ea54 0305 	orrs.w	r3, r4, r5
  401844:	d1eb      	bne.n	40181e <_vfiprintf_r+0x4ca>
  401846:	ebc7 030b 	rsb	r3, r7, fp
  40184a:	9303      	str	r3, [sp, #12]
  40184c:	e6a2      	b.n	401594 <_vfiprintf_r+0x240>
  40184e:	bf00      	nop
  401850:	00404270 	.word	0x00404270
  401854:	0040428c 	.word	0x0040428c
  401858:	0040424c 	.word	0x0040424c
  40185c:	9406      	str	r4, [sp, #24]
  40185e:	2900      	cmp	r1, #0
  401860:	f040 8462 	bne.w	402128 <_vfiprintf_r+0xdd4>
  401864:	f046 0610 	orr.w	r6, r6, #16
  401868:	f016 0320 	ands.w	r3, r6, #32
  40186c:	f000 82ae 	beq.w	401dcc <_vfiprintf_r+0xa78>
  401870:	9b04      	ldr	r3, [sp, #16]
  401872:	3307      	adds	r3, #7
  401874:	f023 0307 	bic.w	r3, r3, #7
  401878:	f04f 0200 	mov.w	r2, #0
  40187c:	f88d 202f 	strb.w	r2, [sp, #47]	; 0x2f
  401880:	e9d3 4500 	ldrd	r4, r5, [r3]
  401884:	f103 0208 	add.w	r2, r3, #8
  401888:	9b01      	ldr	r3, [sp, #4]
  40188a:	9204      	str	r2, [sp, #16]
  40188c:	2b00      	cmp	r3, #0
  40188e:	f2c0 8174 	blt.w	401b7a <_vfiprintf_r+0x826>
  401892:	ea54 0305 	orrs.w	r3, r4, r5
  401896:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  40189a:	f040 816e 	bne.w	401b7a <_vfiprintf_r+0x826>
  40189e:	9b01      	ldr	r3, [sp, #4]
  4018a0:	2b00      	cmp	r3, #0
  4018a2:	f000 8430 	beq.w	402106 <_vfiprintf_r+0xdb2>
  4018a6:	f04f 0900 	mov.w	r9, #0
  4018aa:	2400      	movs	r4, #0
  4018ac:	2500      	movs	r5, #0
  4018ae:	465f      	mov	r7, fp
  4018b0:	08e2      	lsrs	r2, r4, #3
  4018b2:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
  4018b6:	08e9      	lsrs	r1, r5, #3
  4018b8:	f004 0307 	and.w	r3, r4, #7
  4018bc:	460d      	mov	r5, r1
  4018be:	4614      	mov	r4, r2
  4018c0:	3330      	adds	r3, #48	; 0x30
  4018c2:	ea54 0205 	orrs.w	r2, r4, r5
  4018c6:	f807 3d01 	strb.w	r3, [r7, #-1]!
  4018ca:	d1f1      	bne.n	4018b0 <_vfiprintf_r+0x55c>
  4018cc:	07f4      	lsls	r4, r6, #31
  4018ce:	d5ba      	bpl.n	401846 <_vfiprintf_r+0x4f2>
  4018d0:	2b30      	cmp	r3, #48	; 0x30
  4018d2:	d0b8      	beq.n	401846 <_vfiprintf_r+0x4f2>
  4018d4:	2230      	movs	r2, #48	; 0x30
  4018d6:	1e7b      	subs	r3, r7, #1
  4018d8:	f807 2c01 	strb.w	r2, [r7, #-1]
  4018dc:	ebc3 020b 	rsb	r2, r3, fp
  4018e0:	9203      	str	r2, [sp, #12]
  4018e2:	461f      	mov	r7, r3
  4018e4:	e656      	b.n	401594 <_vfiprintf_r+0x240>
  4018e6:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  4018ea:	2400      	movs	r4, #0
  4018ec:	f818 3b01 	ldrb.w	r3, [r8], #1
  4018f0:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  4018f4:	eb02 0444 	add.w	r4, r2, r4, lsl #1
  4018f8:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  4018fc:	2a09      	cmp	r2, #9
  4018fe:	d9f5      	bls.n	4018ec <_vfiprintf_r+0x598>
  401900:	e591      	b.n	401426 <_vfiprintf_r+0xd2>
  401902:	f898 3000 	ldrb.w	r3, [r8]
  401906:	2101      	movs	r1, #1
  401908:	202b      	movs	r0, #43	; 0x2b
  40190a:	e58a      	b.n	401422 <_vfiprintf_r+0xce>
  40190c:	f898 3000 	ldrb.w	r3, [r8]
  401910:	2b2a      	cmp	r3, #42	; 0x2a
  401912:	f108 0501 	add.w	r5, r8, #1
  401916:	f000 83dd 	beq.w	4020d4 <_vfiprintf_r+0xd80>
  40191a:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  40191e:	2a09      	cmp	r2, #9
  401920:	46a8      	mov	r8, r5
  401922:	bf98      	it	ls
  401924:	2500      	movls	r5, #0
  401926:	f200 83ce 	bhi.w	4020c6 <_vfiprintf_r+0xd72>
  40192a:	f818 3b01 	ldrb.w	r3, [r8], #1
  40192e:	eb05 0585 	add.w	r5, r5, r5, lsl #2
  401932:	eb02 0545 	add.w	r5, r2, r5, lsl #1
  401936:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  40193a:	2a09      	cmp	r2, #9
  40193c:	d9f5      	bls.n	40192a <_vfiprintf_r+0x5d6>
  40193e:	ea45 72e5 	orr.w	r2, r5, r5, asr #31
  401942:	9201      	str	r2, [sp, #4]
  401944:	e56f      	b.n	401426 <_vfiprintf_r+0xd2>
  401946:	9a04      	ldr	r2, [sp, #16]
  401948:	6814      	ldr	r4, [r2, #0]
  40194a:	4613      	mov	r3, r2
  40194c:	2c00      	cmp	r4, #0
  40194e:	f103 0304 	add.w	r3, r3, #4
  401952:	f6ff aded 	blt.w	401530 <_vfiprintf_r+0x1dc>
  401956:	9304      	str	r3, [sp, #16]
  401958:	f898 3000 	ldrb.w	r3, [r8]
  40195c:	e561      	b.n	401422 <_vfiprintf_r+0xce>
  40195e:	9406      	str	r4, [sp, #24]
  401960:	2900      	cmp	r1, #0
  401962:	d081      	beq.n	401868 <_vfiprintf_r+0x514>
  401964:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
  401968:	e77e      	b.n	401868 <_vfiprintf_r+0x514>
  40196a:	9a04      	ldr	r2, [sp, #16]
  40196c:	9406      	str	r4, [sp, #24]
  40196e:	6817      	ldr	r7, [r2, #0]
  401970:	f04f 0300 	mov.w	r3, #0
  401974:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  401978:	1d14      	adds	r4, r2, #4
  40197a:	9b01      	ldr	r3, [sp, #4]
  40197c:	2f00      	cmp	r7, #0
  40197e:	f000 8386 	beq.w	40208e <_vfiprintf_r+0xd3a>
  401982:	2b00      	cmp	r3, #0
  401984:	f2c0 835f 	blt.w	402046 <_vfiprintf_r+0xcf2>
  401988:	461a      	mov	r2, r3
  40198a:	2100      	movs	r1, #0
  40198c:	4638      	mov	r0, r7
  40198e:	f001 fc97 	bl	4032c0 <memchr>
  401992:	2800      	cmp	r0, #0
  401994:	f000 838f 	beq.w	4020b6 <_vfiprintf_r+0xd62>
  401998:	1bc3      	subs	r3, r0, r7
  40199a:	9303      	str	r3, [sp, #12]
  40199c:	2300      	movs	r3, #0
  40199e:	9404      	str	r4, [sp, #16]
  4019a0:	f89d 902f 	ldrb.w	r9, [sp, #47]	; 0x2f
  4019a4:	9301      	str	r3, [sp, #4]
  4019a6:	e5f5      	b.n	401594 <_vfiprintf_r+0x240>
  4019a8:	9406      	str	r4, [sp, #24]
  4019aa:	2900      	cmp	r1, #0
  4019ac:	f040 83b9 	bne.w	402122 <_vfiprintf_r+0xdce>
  4019b0:	f016 0920 	ands.w	r9, r6, #32
  4019b4:	d135      	bne.n	401a22 <_vfiprintf_r+0x6ce>
  4019b6:	f016 0310 	ands.w	r3, r6, #16
  4019ba:	d103      	bne.n	4019c4 <_vfiprintf_r+0x670>
  4019bc:	f016 0940 	ands.w	r9, r6, #64	; 0x40
  4019c0:	f040 832a 	bne.w	402018 <_vfiprintf_r+0xcc4>
  4019c4:	9a04      	ldr	r2, [sp, #16]
  4019c6:	4613      	mov	r3, r2
  4019c8:	6814      	ldr	r4, [r2, #0]
  4019ca:	9a01      	ldr	r2, [sp, #4]
  4019cc:	f88d 902f 	strb.w	r9, [sp, #47]	; 0x2f
  4019d0:	2a00      	cmp	r2, #0
  4019d2:	f103 0304 	add.w	r3, r3, #4
  4019d6:	f04f 0500 	mov.w	r5, #0
  4019da:	f2c0 8332 	blt.w	402042 <_vfiprintf_r+0xcee>
  4019de:	ea54 0205 	orrs.w	r2, r4, r5
  4019e2:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  4019e6:	9304      	str	r3, [sp, #16]
  4019e8:	f47f af13 	bne.w	401812 <_vfiprintf_r+0x4be>
  4019ec:	9b01      	ldr	r3, [sp, #4]
  4019ee:	2b00      	cmp	r3, #0
  4019f0:	f43f adcc 	beq.w	40158c <_vfiprintf_r+0x238>
  4019f4:	2400      	movs	r4, #0
  4019f6:	af2a      	add	r7, sp, #168	; 0xa8
  4019f8:	3430      	adds	r4, #48	; 0x30
  4019fa:	f807 4d41 	strb.w	r4, [r7, #-65]!
  4019fe:	ebc7 030b 	rsb	r3, r7, fp
  401a02:	9303      	str	r3, [sp, #12]
  401a04:	e5c6      	b.n	401594 <_vfiprintf_r+0x240>
  401a06:	f046 0620 	orr.w	r6, r6, #32
  401a0a:	f898 3000 	ldrb.w	r3, [r8]
  401a0e:	e508      	b.n	401422 <_vfiprintf_r+0xce>
  401a10:	9406      	str	r4, [sp, #24]
  401a12:	2900      	cmp	r1, #0
  401a14:	f040 836e 	bne.w	4020f4 <_vfiprintf_r+0xda0>
  401a18:	f046 0610 	orr.w	r6, r6, #16
  401a1c:	f016 0920 	ands.w	r9, r6, #32
  401a20:	d0c9      	beq.n	4019b6 <_vfiprintf_r+0x662>
  401a22:	9b04      	ldr	r3, [sp, #16]
  401a24:	3307      	adds	r3, #7
  401a26:	f023 0307 	bic.w	r3, r3, #7
  401a2a:	f04f 0200 	mov.w	r2, #0
  401a2e:	f88d 202f 	strb.w	r2, [sp, #47]	; 0x2f
  401a32:	e9d3 4500 	ldrd	r4, r5, [r3]
  401a36:	f103 0208 	add.w	r2, r3, #8
  401a3a:	9b01      	ldr	r3, [sp, #4]
  401a3c:	9204      	str	r2, [sp, #16]
  401a3e:	2b00      	cmp	r3, #0
  401a40:	f2c0 81f9 	blt.w	401e36 <_vfiprintf_r+0xae2>
  401a44:	ea54 0305 	orrs.w	r3, r4, r5
  401a48:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  401a4c:	f04f 0900 	mov.w	r9, #0
  401a50:	f47f aedf 	bne.w	401812 <_vfiprintf_r+0x4be>
  401a54:	e7ca      	b.n	4019ec <_vfiprintf_r+0x698>
  401a56:	9406      	str	r4, [sp, #24]
  401a58:	2900      	cmp	r1, #0
  401a5a:	f040 8351 	bne.w	402100 <_vfiprintf_r+0xdac>
  401a5e:	06b2      	lsls	r2, r6, #26
  401a60:	48ae      	ldr	r0, [pc, #696]	; (401d1c <_vfiprintf_r+0x9c8>)
  401a62:	d541      	bpl.n	401ae8 <_vfiprintf_r+0x794>
  401a64:	9a04      	ldr	r2, [sp, #16]
  401a66:	3207      	adds	r2, #7
  401a68:	f022 0207 	bic.w	r2, r2, #7
  401a6c:	e9d2 4500 	ldrd	r4, r5, [r2]
  401a70:	f102 0108 	add.w	r1, r2, #8
  401a74:	9104      	str	r1, [sp, #16]
  401a76:	f016 0901 	ands.w	r9, r6, #1
  401a7a:	f000 8177 	beq.w	401d6c <_vfiprintf_r+0xa18>
  401a7e:	ea54 0205 	orrs.w	r2, r4, r5
  401a82:	f040 8226 	bne.w	401ed2 <_vfiprintf_r+0xb7e>
  401a86:	f04f 0300 	mov.w	r3, #0
  401a8a:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  401a8e:	9b01      	ldr	r3, [sp, #4]
  401a90:	2b00      	cmp	r3, #0
  401a92:	f2c0 8196 	blt.w	401dc2 <_vfiprintf_r+0xa6e>
  401a96:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  401a9a:	e572      	b.n	401582 <_vfiprintf_r+0x22e>
  401a9c:	9a04      	ldr	r2, [sp, #16]
  401a9e:	9406      	str	r4, [sp, #24]
  401aa0:	6813      	ldr	r3, [r2, #0]
  401aa2:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
  401aa6:	4613      	mov	r3, r2
  401aa8:	f04f 0100 	mov.w	r1, #0
  401aac:	2501      	movs	r5, #1
  401aae:	3304      	adds	r3, #4
  401ab0:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
  401ab4:	9304      	str	r3, [sp, #16]
  401ab6:	9503      	str	r5, [sp, #12]
  401ab8:	af10      	add	r7, sp, #64	; 0x40
  401aba:	2300      	movs	r3, #0
  401abc:	9301      	str	r3, [sp, #4]
  401abe:	e573      	b.n	4015a8 <_vfiprintf_r+0x254>
  401ac0:	f898 3000 	ldrb.w	r3, [r8]
  401ac4:	2800      	cmp	r0, #0
  401ac6:	f47f acac 	bne.w	401422 <_vfiprintf_r+0xce>
  401aca:	2101      	movs	r1, #1
  401acc:	2020      	movs	r0, #32
  401ace:	e4a8      	b.n	401422 <_vfiprintf_r+0xce>
  401ad0:	f046 0601 	orr.w	r6, r6, #1
  401ad4:	f898 3000 	ldrb.w	r3, [r8]
  401ad8:	e4a3      	b.n	401422 <_vfiprintf_r+0xce>
  401ada:	9406      	str	r4, [sp, #24]
  401adc:	2900      	cmp	r1, #0
  401ade:	f040 830c 	bne.w	4020fa <_vfiprintf_r+0xda6>
  401ae2:	06b2      	lsls	r2, r6, #26
  401ae4:	488e      	ldr	r0, [pc, #568]	; (401d20 <_vfiprintf_r+0x9cc>)
  401ae6:	d4bd      	bmi.n	401a64 <_vfiprintf_r+0x710>
  401ae8:	9904      	ldr	r1, [sp, #16]
  401aea:	06f7      	lsls	r7, r6, #27
  401aec:	460a      	mov	r2, r1
  401aee:	f100 819d 	bmi.w	401e2c <_vfiprintf_r+0xad8>
  401af2:	0675      	lsls	r5, r6, #25
  401af4:	f140 819a 	bpl.w	401e2c <_vfiprintf_r+0xad8>
  401af8:	3204      	adds	r2, #4
  401afa:	880c      	ldrh	r4, [r1, #0]
  401afc:	9204      	str	r2, [sp, #16]
  401afe:	2500      	movs	r5, #0
  401b00:	e7b9      	b.n	401a76 <_vfiprintf_r+0x722>
  401b02:	f046 0640 	orr.w	r6, r6, #64	; 0x40
  401b06:	f898 3000 	ldrb.w	r3, [r8]
  401b0a:	e48a      	b.n	401422 <_vfiprintf_r+0xce>
  401b0c:	f898 3000 	ldrb.w	r3, [r8]
  401b10:	2b6c      	cmp	r3, #108	; 0x6c
  401b12:	bf03      	ittte	eq
  401b14:	f898 3001 	ldrbeq.w	r3, [r8, #1]
  401b18:	f046 0620 	orreq.w	r6, r6, #32
  401b1c:	f108 0801 	addeq.w	r8, r8, #1
  401b20:	f046 0610 	orrne.w	r6, r6, #16
  401b24:	e47d      	b.n	401422 <_vfiprintf_r+0xce>
  401b26:	2900      	cmp	r1, #0
  401b28:	f040 8309 	bne.w	40213e <_vfiprintf_r+0xdea>
  401b2c:	06b4      	lsls	r4, r6, #26
  401b2e:	f140 821c 	bpl.w	401f6a <_vfiprintf_r+0xc16>
  401b32:	9a04      	ldr	r2, [sp, #16]
  401b34:	9902      	ldr	r1, [sp, #8]
  401b36:	6813      	ldr	r3, [r2, #0]
  401b38:	17cd      	asrs	r5, r1, #31
  401b3a:	4608      	mov	r0, r1
  401b3c:	3204      	adds	r2, #4
  401b3e:	4629      	mov	r1, r5
  401b40:	9204      	str	r2, [sp, #16]
  401b42:	e9c3 0100 	strd	r0, r1, [r3]
  401b46:	e436      	b.n	4013b6 <_vfiprintf_r+0x62>
  401b48:	9406      	str	r4, [sp, #24]
  401b4a:	2900      	cmp	r1, #0
  401b4c:	f43f ae43 	beq.w	4017d6 <_vfiprintf_r+0x482>
  401b50:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
  401b54:	e63f      	b.n	4017d6 <_vfiprintf_r+0x482>
  401b56:	9406      	str	r4, [sp, #24]
  401b58:	2900      	cmp	r1, #0
  401b5a:	f040 82ed 	bne.w	402138 <_vfiprintf_r+0xde4>
  401b5e:	2b00      	cmp	r3, #0
  401b60:	f000 808f 	beq.w	401c82 <_vfiprintf_r+0x92e>
  401b64:	2501      	movs	r5, #1
  401b66:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
  401b6a:	f04f 0300 	mov.w	r3, #0
  401b6e:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  401b72:	9503      	str	r5, [sp, #12]
  401b74:	af10      	add	r7, sp, #64	; 0x40
  401b76:	e7a0      	b.n	401aba <_vfiprintf_r+0x766>
  401b78:	9304      	str	r3, [sp, #16]
  401b7a:	f04f 0900 	mov.w	r9, #0
  401b7e:	e696      	b.n	4018ae <_vfiprintf_r+0x55a>
  401b80:	aa0d      	add	r2, sp, #52	; 0x34
  401b82:	9900      	ldr	r1, [sp, #0]
  401b84:	9309      	str	r3, [sp, #36]	; 0x24
  401b86:	4648      	mov	r0, r9
  401b88:	f7ff fba8 	bl	4012dc <__sprint_r.part.0>
  401b8c:	2800      	cmp	r0, #0
  401b8e:	d17f      	bne.n	401c90 <_vfiprintf_r+0x93c>
  401b90:	980e      	ldr	r0, [sp, #56]	; 0x38
  401b92:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  401b94:	9b09      	ldr	r3, [sp, #36]	; 0x24
  401b96:	f100 0e01 	add.w	lr, r0, #1
  401b9a:	46dc      	mov	ip, fp
  401b9c:	e529      	b.n	4015f2 <_vfiprintf_r+0x29e>
  401b9e:	980e      	ldr	r0, [sp, #56]	; 0x38
  401ba0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  401ba2:	f100 0e01 	add.w	lr, r0, #1
  401ba6:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
  401baa:	2b00      	cmp	r3, #0
  401bac:	f43f ad50 	beq.w	401650 <_vfiprintf_r+0x2fc>
  401bb0:	3201      	adds	r2, #1
  401bb2:	f10d 012f 	add.w	r1, sp, #47	; 0x2f
  401bb6:	2301      	movs	r3, #1
  401bb8:	f1be 0f07 	cmp.w	lr, #7
  401bbc:	920f      	str	r2, [sp, #60]	; 0x3c
  401bbe:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
  401bc2:	e88a 000a 	stmia.w	sl, {r1, r3}
  401bc6:	f340 80bf 	ble.w	401d48 <_vfiprintf_r+0x9f4>
  401bca:	2a00      	cmp	r2, #0
  401bcc:	f040 814e 	bne.w	401e6c <_vfiprintf_r+0xb18>
  401bd0:	9907      	ldr	r1, [sp, #28]
  401bd2:	2900      	cmp	r1, #0
  401bd4:	f040 80be 	bne.w	401d54 <_vfiprintf_r+0xa00>
  401bd8:	469e      	mov	lr, r3
  401bda:	4610      	mov	r0, r2
  401bdc:	46da      	mov	sl, fp
  401bde:	9b08      	ldr	r3, [sp, #32]
  401be0:	2b80      	cmp	r3, #128	; 0x80
  401be2:	f43f ad50 	beq.w	401686 <_vfiprintf_r+0x332>
  401be6:	9b01      	ldr	r3, [sp, #4]
  401be8:	9903      	ldr	r1, [sp, #12]
  401bea:	1a5c      	subs	r4, r3, r1
  401bec:	2c00      	cmp	r4, #0
  401bee:	f77f ad93 	ble.w	401718 <_vfiprintf_r+0x3c4>
  401bf2:	2c10      	cmp	r4, #16
  401bf4:	f8df 912c 	ldr.w	r9, [pc, #300]	; 401d24 <_vfiprintf_r+0x9d0>
  401bf8:	dd25      	ble.n	401c46 <_vfiprintf_r+0x8f2>
  401bfa:	46d4      	mov	ip, sl
  401bfc:	2310      	movs	r3, #16
  401bfe:	46c2      	mov	sl, r8
  401c00:	46a8      	mov	r8, r5
  401c02:	464d      	mov	r5, r9
  401c04:	f8dd 9014 	ldr.w	r9, [sp, #20]
  401c08:	e007      	b.n	401c1a <_vfiprintf_r+0x8c6>
  401c0a:	f100 0e02 	add.w	lr, r0, #2
  401c0e:	f10c 0c08 	add.w	ip, ip, #8
  401c12:	4608      	mov	r0, r1
  401c14:	3c10      	subs	r4, #16
  401c16:	2c10      	cmp	r4, #16
  401c18:	dd11      	ble.n	401c3e <_vfiprintf_r+0x8ea>
  401c1a:	1c41      	adds	r1, r0, #1
  401c1c:	3210      	adds	r2, #16
  401c1e:	2907      	cmp	r1, #7
  401c20:	920f      	str	r2, [sp, #60]	; 0x3c
  401c22:	f8cc 5000 	str.w	r5, [ip]
  401c26:	f8cc 3004 	str.w	r3, [ip, #4]
  401c2a:	910e      	str	r1, [sp, #56]	; 0x38
  401c2c:	dded      	ble.n	401c0a <_vfiprintf_r+0x8b6>
  401c2e:	b9d2      	cbnz	r2, 401c66 <_vfiprintf_r+0x912>
  401c30:	3c10      	subs	r4, #16
  401c32:	2c10      	cmp	r4, #16
  401c34:	f04f 0e01 	mov.w	lr, #1
  401c38:	4610      	mov	r0, r2
  401c3a:	46dc      	mov	ip, fp
  401c3c:	dced      	bgt.n	401c1a <_vfiprintf_r+0x8c6>
  401c3e:	46a9      	mov	r9, r5
  401c40:	4645      	mov	r5, r8
  401c42:	46d0      	mov	r8, sl
  401c44:	46e2      	mov	sl, ip
  401c46:	4422      	add	r2, r4
  401c48:	f1be 0f07 	cmp.w	lr, #7
  401c4c:	920f      	str	r2, [sp, #60]	; 0x3c
  401c4e:	f8ca 9000 	str.w	r9, [sl]
  401c52:	f8ca 4004 	str.w	r4, [sl, #4]
  401c56:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
  401c5a:	dc2e      	bgt.n	401cba <_vfiprintf_r+0x966>
  401c5c:	f10a 0a08 	add.w	sl, sl, #8
  401c60:	f10e 0e01 	add.w	lr, lr, #1
  401c64:	e558      	b.n	401718 <_vfiprintf_r+0x3c4>
  401c66:	aa0d      	add	r2, sp, #52	; 0x34
  401c68:	9900      	ldr	r1, [sp, #0]
  401c6a:	9301      	str	r3, [sp, #4]
  401c6c:	4648      	mov	r0, r9
  401c6e:	f7ff fb35 	bl	4012dc <__sprint_r.part.0>
  401c72:	b968      	cbnz	r0, 401c90 <_vfiprintf_r+0x93c>
  401c74:	980e      	ldr	r0, [sp, #56]	; 0x38
  401c76:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  401c78:	9b01      	ldr	r3, [sp, #4]
  401c7a:	f100 0e01 	add.w	lr, r0, #1
  401c7e:	46dc      	mov	ip, fp
  401c80:	e7c8      	b.n	401c14 <_vfiprintf_r+0x8c0>
  401c82:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  401c84:	b123      	cbz	r3, 401c90 <_vfiprintf_r+0x93c>
  401c86:	9805      	ldr	r0, [sp, #20]
  401c88:	9900      	ldr	r1, [sp, #0]
  401c8a:	aa0d      	add	r2, sp, #52	; 0x34
  401c8c:	f7ff fb26 	bl	4012dc <__sprint_r.part.0>
  401c90:	9b00      	ldr	r3, [sp, #0]
  401c92:	899b      	ldrh	r3, [r3, #12]
  401c94:	065a      	lsls	r2, r3, #25
  401c96:	f100 818b 	bmi.w	401fb0 <_vfiprintf_r+0xc5c>
  401c9a:	9802      	ldr	r0, [sp, #8]
  401c9c:	b02b      	add	sp, #172	; 0xac
  401c9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401ca2:	aa0d      	add	r2, sp, #52	; 0x34
  401ca4:	9900      	ldr	r1, [sp, #0]
  401ca6:	4648      	mov	r0, r9
  401ca8:	f7ff fb18 	bl	4012dc <__sprint_r.part.0>
  401cac:	2800      	cmp	r0, #0
  401cae:	d1ef      	bne.n	401c90 <_vfiprintf_r+0x93c>
  401cb0:	990e      	ldr	r1, [sp, #56]	; 0x38
  401cb2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  401cb4:	1c48      	adds	r0, r1, #1
  401cb6:	46da      	mov	sl, fp
  401cb8:	e555      	b.n	401766 <_vfiprintf_r+0x412>
  401cba:	2a00      	cmp	r2, #0
  401cbc:	f040 80fb 	bne.w	401eb6 <_vfiprintf_r+0xb62>
  401cc0:	9a03      	ldr	r2, [sp, #12]
  401cc2:	921b      	str	r2, [sp, #108]	; 0x6c
  401cc4:	2301      	movs	r3, #1
  401cc6:	920f      	str	r2, [sp, #60]	; 0x3c
  401cc8:	971a      	str	r7, [sp, #104]	; 0x68
  401cca:	930e      	str	r3, [sp, #56]	; 0x38
  401ccc:	46da      	mov	sl, fp
  401cce:	f10a 0a08 	add.w	sl, sl, #8
  401cd2:	0771      	lsls	r1, r6, #29
  401cd4:	d504      	bpl.n	401ce0 <_vfiprintf_r+0x98c>
  401cd6:	9b06      	ldr	r3, [sp, #24]
  401cd8:	1b5c      	subs	r4, r3, r5
  401cda:	2c00      	cmp	r4, #0
  401cdc:	f73f ad34 	bgt.w	401748 <_vfiprintf_r+0x3f4>
  401ce0:	9b02      	ldr	r3, [sp, #8]
  401ce2:	9906      	ldr	r1, [sp, #24]
  401ce4:	42a9      	cmp	r1, r5
  401ce6:	bfac      	ite	ge
  401ce8:	185b      	addge	r3, r3, r1
  401cea:	195b      	addlt	r3, r3, r5
  401cec:	9302      	str	r3, [sp, #8]
  401cee:	2a00      	cmp	r2, #0
  401cf0:	f040 80b3 	bne.w	401e5a <_vfiprintf_r+0xb06>
  401cf4:	2300      	movs	r3, #0
  401cf6:	930e      	str	r3, [sp, #56]	; 0x38
  401cf8:	46da      	mov	sl, fp
  401cfa:	f7ff bb5c 	b.w	4013b6 <_vfiprintf_r+0x62>
  401cfe:	aa0d      	add	r2, sp, #52	; 0x34
  401d00:	9900      	ldr	r1, [sp, #0]
  401d02:	9307      	str	r3, [sp, #28]
  401d04:	4648      	mov	r0, r9
  401d06:	f7ff fae9 	bl	4012dc <__sprint_r.part.0>
  401d0a:	2800      	cmp	r0, #0
  401d0c:	d1c0      	bne.n	401c90 <_vfiprintf_r+0x93c>
  401d0e:	980e      	ldr	r0, [sp, #56]	; 0x38
  401d10:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  401d12:	9b07      	ldr	r3, [sp, #28]
  401d14:	f100 0c01 	add.w	ip, r0, #1
  401d18:	46de      	mov	lr, fp
  401d1a:	e4cb      	b.n	4016b4 <_vfiprintf_r+0x360>
  401d1c:	0040425c 	.word	0x0040425c
  401d20:	00404270 	.word	0x00404270
  401d24:	0040424c 	.word	0x0040424c
  401d28:	2a00      	cmp	r2, #0
  401d2a:	f040 8133 	bne.w	401f94 <_vfiprintf_r+0xc40>
  401d2e:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
  401d32:	2b00      	cmp	r3, #0
  401d34:	f000 80f5 	beq.w	401f22 <_vfiprintf_r+0xbce>
  401d38:	2301      	movs	r3, #1
  401d3a:	f10d 012f 	add.w	r1, sp, #47	; 0x2f
  401d3e:	461a      	mov	r2, r3
  401d40:	931b      	str	r3, [sp, #108]	; 0x6c
  401d42:	469e      	mov	lr, r3
  401d44:	911a      	str	r1, [sp, #104]	; 0x68
  401d46:	46da      	mov	sl, fp
  401d48:	4670      	mov	r0, lr
  401d4a:	f10a 0a08 	add.w	sl, sl, #8
  401d4e:	f10e 0e01 	add.w	lr, lr, #1
  401d52:	e47d      	b.n	401650 <_vfiprintf_r+0x2fc>
  401d54:	a90c      	add	r1, sp, #48	; 0x30
  401d56:	2202      	movs	r2, #2
  401d58:	469e      	mov	lr, r3
  401d5a:	911a      	str	r1, [sp, #104]	; 0x68
  401d5c:	921b      	str	r2, [sp, #108]	; 0x6c
  401d5e:	46da      	mov	sl, fp
  401d60:	4670      	mov	r0, lr
  401d62:	f10a 0a08 	add.w	sl, sl, #8
  401d66:	f10e 0e01 	add.w	lr, lr, #1
  401d6a:	e738      	b.n	401bde <_vfiprintf_r+0x88a>
  401d6c:	9b01      	ldr	r3, [sp, #4]
  401d6e:	f88d 902f 	strb.w	r9, [sp, #47]	; 0x2f
  401d72:	2b00      	cmp	r3, #0
  401d74:	f2c0 812a 	blt.w	401fcc <_vfiprintf_r+0xc78>
  401d78:	ea54 0305 	orrs.w	r3, r4, r5
  401d7c:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  401d80:	f43f abff 	beq.w	401582 <_vfiprintf_r+0x22e>
  401d84:	465f      	mov	r7, fp
  401d86:	0923      	lsrs	r3, r4, #4
  401d88:	f004 010f 	and.w	r1, r4, #15
  401d8c:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
  401d90:	092a      	lsrs	r2, r5, #4
  401d92:	461c      	mov	r4, r3
  401d94:	4615      	mov	r5, r2
  401d96:	5c43      	ldrb	r3, [r0, r1]
  401d98:	f807 3d01 	strb.w	r3, [r7, #-1]!
  401d9c:	ea54 0305 	orrs.w	r3, r4, r5
  401da0:	d1f1      	bne.n	401d86 <_vfiprintf_r+0xa32>
  401da2:	ebc7 030b 	rsb	r3, r7, fp
  401da6:	9303      	str	r3, [sp, #12]
  401da8:	f7ff bbf4 	b.w	401594 <_vfiprintf_r+0x240>
  401dac:	aa0d      	add	r2, sp, #52	; 0x34
  401dae:	9900      	ldr	r1, [sp, #0]
  401db0:	9805      	ldr	r0, [sp, #20]
  401db2:	f7ff fa93 	bl	4012dc <__sprint_r.part.0>
  401db6:	2800      	cmp	r0, #0
  401db8:	f47f af6a 	bne.w	401c90 <_vfiprintf_r+0x93c>
  401dbc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  401dbe:	46da      	mov	sl, fp
  401dc0:	e787      	b.n	401cd2 <_vfiprintf_r+0x97e>
  401dc2:	f04f 0900 	mov.w	r9, #0
  401dc6:	2400      	movs	r4, #0
  401dc8:	2500      	movs	r5, #0
  401dca:	e7db      	b.n	401d84 <_vfiprintf_r+0xa30>
  401dcc:	f016 0210 	ands.w	r2, r6, #16
  401dd0:	f000 80b2 	beq.w	401f38 <_vfiprintf_r+0xbe4>
  401dd4:	9904      	ldr	r1, [sp, #16]
  401dd6:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  401dda:	460a      	mov	r2, r1
  401ddc:	680c      	ldr	r4, [r1, #0]
  401dde:	9901      	ldr	r1, [sp, #4]
  401de0:	2900      	cmp	r1, #0
  401de2:	f102 0204 	add.w	r2, r2, #4
  401de6:	f04f 0500 	mov.w	r5, #0
  401dea:	f2c0 8159 	blt.w	4020a0 <_vfiprintf_r+0xd4c>
  401dee:	ea54 0105 	orrs.w	r1, r4, r5
  401df2:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  401df6:	9204      	str	r2, [sp, #16]
  401df8:	f43f ad51 	beq.w	40189e <_vfiprintf_r+0x54a>
  401dfc:	4699      	mov	r9, r3
  401dfe:	e556      	b.n	4018ae <_vfiprintf_r+0x55a>
  401e00:	06f7      	lsls	r7, r6, #27
  401e02:	d40a      	bmi.n	401e1a <_vfiprintf_r+0xac6>
  401e04:	0675      	lsls	r5, r6, #25
  401e06:	d508      	bpl.n	401e1a <_vfiprintf_r+0xac6>
  401e08:	9904      	ldr	r1, [sp, #16]
  401e0a:	f9b1 4000 	ldrsh.w	r4, [r1]
  401e0e:	3104      	adds	r1, #4
  401e10:	17e5      	asrs	r5, r4, #31
  401e12:	4622      	mov	r2, r4
  401e14:	462b      	mov	r3, r5
  401e16:	9104      	str	r1, [sp, #16]
  401e18:	e4ea      	b.n	4017f0 <_vfiprintf_r+0x49c>
  401e1a:	9a04      	ldr	r2, [sp, #16]
  401e1c:	6814      	ldr	r4, [r2, #0]
  401e1e:	4613      	mov	r3, r2
  401e20:	3304      	adds	r3, #4
  401e22:	17e5      	asrs	r5, r4, #31
  401e24:	9304      	str	r3, [sp, #16]
  401e26:	4622      	mov	r2, r4
  401e28:	462b      	mov	r3, r5
  401e2a:	e4e1      	b.n	4017f0 <_vfiprintf_r+0x49c>
  401e2c:	6814      	ldr	r4, [r2, #0]
  401e2e:	3204      	adds	r2, #4
  401e30:	9204      	str	r2, [sp, #16]
  401e32:	2500      	movs	r5, #0
  401e34:	e61f      	b.n	401a76 <_vfiprintf_r+0x722>
  401e36:	f04f 0900 	mov.w	r9, #0
  401e3a:	ea54 0305 	orrs.w	r3, r4, r5
  401e3e:	f47f ace8 	bne.w	401812 <_vfiprintf_r+0x4be>
  401e42:	e5d8      	b.n	4019f6 <_vfiprintf_r+0x6a2>
  401e44:	aa0d      	add	r2, sp, #52	; 0x34
  401e46:	9900      	ldr	r1, [sp, #0]
  401e48:	9805      	ldr	r0, [sp, #20]
  401e4a:	f7ff fa47 	bl	4012dc <__sprint_r.part.0>
  401e4e:	2800      	cmp	r0, #0
  401e50:	f47f af1e 	bne.w	401c90 <_vfiprintf_r+0x93c>
  401e54:	46da      	mov	sl, fp
  401e56:	f7ff bb48 	b.w	4014ea <_vfiprintf_r+0x196>
  401e5a:	aa0d      	add	r2, sp, #52	; 0x34
  401e5c:	9900      	ldr	r1, [sp, #0]
  401e5e:	9805      	ldr	r0, [sp, #20]
  401e60:	f7ff fa3c 	bl	4012dc <__sprint_r.part.0>
  401e64:	2800      	cmp	r0, #0
  401e66:	f43f af45 	beq.w	401cf4 <_vfiprintf_r+0x9a0>
  401e6a:	e711      	b.n	401c90 <_vfiprintf_r+0x93c>
  401e6c:	aa0d      	add	r2, sp, #52	; 0x34
  401e6e:	9900      	ldr	r1, [sp, #0]
  401e70:	9805      	ldr	r0, [sp, #20]
  401e72:	f7ff fa33 	bl	4012dc <__sprint_r.part.0>
  401e76:	2800      	cmp	r0, #0
  401e78:	f47f af0a 	bne.w	401c90 <_vfiprintf_r+0x93c>
  401e7c:	980e      	ldr	r0, [sp, #56]	; 0x38
  401e7e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  401e80:	f100 0e01 	add.w	lr, r0, #1
  401e84:	46da      	mov	sl, fp
  401e86:	f7ff bbe3 	b.w	401650 <_vfiprintf_r+0x2fc>
  401e8a:	aa0d      	add	r2, sp, #52	; 0x34
  401e8c:	9900      	ldr	r1, [sp, #0]
  401e8e:	9805      	ldr	r0, [sp, #20]
  401e90:	f7ff fa24 	bl	4012dc <__sprint_r.part.0>
  401e94:	2800      	cmp	r0, #0
  401e96:	f47f aefb 	bne.w	401c90 <_vfiprintf_r+0x93c>
  401e9a:	980e      	ldr	r0, [sp, #56]	; 0x38
  401e9c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  401e9e:	f100 0e01 	add.w	lr, r0, #1
  401ea2:	46da      	mov	sl, fp
  401ea4:	e69b      	b.n	401bde <_vfiprintf_r+0x88a>
  401ea6:	2a00      	cmp	r2, #0
  401ea8:	f040 80d8 	bne.w	40205c <_vfiprintf_r+0xd08>
  401eac:	f04f 0e01 	mov.w	lr, #1
  401eb0:	4610      	mov	r0, r2
  401eb2:	46da      	mov	sl, fp
  401eb4:	e697      	b.n	401be6 <_vfiprintf_r+0x892>
  401eb6:	aa0d      	add	r2, sp, #52	; 0x34
  401eb8:	9900      	ldr	r1, [sp, #0]
  401eba:	9805      	ldr	r0, [sp, #20]
  401ebc:	f7ff fa0e 	bl	4012dc <__sprint_r.part.0>
  401ec0:	2800      	cmp	r0, #0
  401ec2:	f47f aee5 	bne.w	401c90 <_vfiprintf_r+0x93c>
  401ec6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  401ec8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  401eca:	f103 0e01 	add.w	lr, r3, #1
  401ece:	46da      	mov	sl, fp
  401ed0:	e422      	b.n	401718 <_vfiprintf_r+0x3c4>
  401ed2:	2230      	movs	r2, #48	; 0x30
  401ed4:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
  401ed8:	9a01      	ldr	r2, [sp, #4]
  401eda:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
  401ede:	2a00      	cmp	r2, #0
  401ee0:	f04f 0300 	mov.w	r3, #0
  401ee4:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  401ee8:	f046 0302 	orr.w	r3, r6, #2
  401eec:	f2c0 80cb 	blt.w	402086 <_vfiprintf_r+0xd32>
  401ef0:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  401ef4:	f046 0602 	orr.w	r6, r6, #2
  401ef8:	f04f 0900 	mov.w	r9, #0
  401efc:	e742      	b.n	401d84 <_vfiprintf_r+0xa30>
  401efe:	f04f 0900 	mov.w	r9, #0
  401f02:	4890      	ldr	r0, [pc, #576]	; (402144 <_vfiprintf_r+0xdf0>)
  401f04:	e73e      	b.n	401d84 <_vfiprintf_r+0xa30>
  401f06:	9b01      	ldr	r3, [sp, #4]
  401f08:	4264      	negs	r4, r4
  401f0a:	f04f 092d 	mov.w	r9, #45	; 0x2d
  401f0e:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
  401f12:	2b00      	cmp	r3, #0
  401f14:	f88d 902f 	strb.w	r9, [sp, #47]	; 0x2f
  401f18:	f6ff ac7b 	blt.w	401812 <_vfiprintf_r+0x4be>
  401f1c:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  401f20:	e477      	b.n	401812 <_vfiprintf_r+0x4be>
  401f22:	9b07      	ldr	r3, [sp, #28]
  401f24:	2b00      	cmp	r3, #0
  401f26:	d072      	beq.n	40200e <_vfiprintf_r+0xcba>
  401f28:	ab0c      	add	r3, sp, #48	; 0x30
  401f2a:	2202      	movs	r2, #2
  401f2c:	931a      	str	r3, [sp, #104]	; 0x68
  401f2e:	921b      	str	r2, [sp, #108]	; 0x6c
  401f30:	f04f 0e01 	mov.w	lr, #1
  401f34:	46da      	mov	sl, fp
  401f36:	e713      	b.n	401d60 <_vfiprintf_r+0xa0c>
  401f38:	f016 0940 	ands.w	r9, r6, #64	; 0x40
  401f3c:	d048      	beq.n	401fd0 <_vfiprintf_r+0xc7c>
  401f3e:	9904      	ldr	r1, [sp, #16]
  401f40:	f88d 202f 	strb.w	r2, [sp, #47]	; 0x2f
  401f44:	460b      	mov	r3, r1
  401f46:	880c      	ldrh	r4, [r1, #0]
  401f48:	9901      	ldr	r1, [sp, #4]
  401f4a:	2900      	cmp	r1, #0
  401f4c:	f103 0304 	add.w	r3, r3, #4
  401f50:	f04f 0500 	mov.w	r5, #0
  401f54:	f6ff ae10 	blt.w	401b78 <_vfiprintf_r+0x824>
  401f58:	ea54 0105 	orrs.w	r1, r4, r5
  401f5c:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  401f60:	9304      	str	r3, [sp, #16]
  401f62:	f43f ac9c 	beq.w	40189e <_vfiprintf_r+0x54a>
  401f66:	4691      	mov	r9, r2
  401f68:	e4a1      	b.n	4018ae <_vfiprintf_r+0x55a>
  401f6a:	06f0      	lsls	r0, r6, #27
  401f6c:	d40a      	bmi.n	401f84 <_vfiprintf_r+0xc30>
  401f6e:	0671      	lsls	r1, r6, #25
  401f70:	d508      	bpl.n	401f84 <_vfiprintf_r+0xc30>
  401f72:	9a04      	ldr	r2, [sp, #16]
  401f74:	6813      	ldr	r3, [r2, #0]
  401f76:	3204      	adds	r2, #4
  401f78:	9204      	str	r2, [sp, #16]
  401f7a:	f8bd 2008 	ldrh.w	r2, [sp, #8]
  401f7e:	801a      	strh	r2, [r3, #0]
  401f80:	f7ff ba19 	b.w	4013b6 <_vfiprintf_r+0x62>
  401f84:	9a04      	ldr	r2, [sp, #16]
  401f86:	6813      	ldr	r3, [r2, #0]
  401f88:	3204      	adds	r2, #4
  401f8a:	9204      	str	r2, [sp, #16]
  401f8c:	9a02      	ldr	r2, [sp, #8]
  401f8e:	601a      	str	r2, [r3, #0]
  401f90:	f7ff ba11 	b.w	4013b6 <_vfiprintf_r+0x62>
  401f94:	aa0d      	add	r2, sp, #52	; 0x34
  401f96:	9900      	ldr	r1, [sp, #0]
  401f98:	9805      	ldr	r0, [sp, #20]
  401f9a:	f7ff f99f 	bl	4012dc <__sprint_r.part.0>
  401f9e:	2800      	cmp	r0, #0
  401fa0:	f47f ae76 	bne.w	401c90 <_vfiprintf_r+0x93c>
  401fa4:	980e      	ldr	r0, [sp, #56]	; 0x38
  401fa6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  401fa8:	f100 0e01 	add.w	lr, r0, #1
  401fac:	46da      	mov	sl, fp
  401fae:	e5fa      	b.n	401ba6 <_vfiprintf_r+0x852>
  401fb0:	f04f 30ff 	mov.w	r0, #4294967295
  401fb4:	f7ff bab6 	b.w	401524 <_vfiprintf_r+0x1d0>
  401fb8:	4862      	ldr	r0, [pc, #392]	; (402144 <_vfiprintf_r+0xdf0>)
  401fba:	4616      	mov	r6, r2
  401fbc:	ea54 0205 	orrs.w	r2, r4, r5
  401fc0:	9304      	str	r3, [sp, #16]
  401fc2:	f04f 0900 	mov.w	r9, #0
  401fc6:	f47f aedd 	bne.w	401d84 <_vfiprintf_r+0xa30>
  401fca:	e6fc      	b.n	401dc6 <_vfiprintf_r+0xa72>
  401fcc:	9b04      	ldr	r3, [sp, #16]
  401fce:	e7f5      	b.n	401fbc <_vfiprintf_r+0xc68>
  401fd0:	9a04      	ldr	r2, [sp, #16]
  401fd2:	f88d 902f 	strb.w	r9, [sp, #47]	; 0x2f
  401fd6:	4613      	mov	r3, r2
  401fd8:	6814      	ldr	r4, [r2, #0]
  401fda:	9a01      	ldr	r2, [sp, #4]
  401fdc:	2a00      	cmp	r2, #0
  401fde:	f103 0304 	add.w	r3, r3, #4
  401fe2:	f04f 0500 	mov.w	r5, #0
  401fe6:	f6ff adc7 	blt.w	401b78 <_vfiprintf_r+0x824>
  401fea:	ea54 0205 	orrs.w	r2, r4, r5
  401fee:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  401ff2:	9304      	str	r3, [sp, #16]
  401ff4:	f47f ac5b 	bne.w	4018ae <_vfiprintf_r+0x55a>
  401ff8:	e451      	b.n	40189e <_vfiprintf_r+0x54a>
  401ffa:	aa0d      	add	r2, sp, #52	; 0x34
  401ffc:	9900      	ldr	r1, [sp, #0]
  401ffe:	9805      	ldr	r0, [sp, #20]
  402000:	f7ff f96c 	bl	4012dc <__sprint_r.part.0>
  402004:	2800      	cmp	r0, #0
  402006:	f47f ae43 	bne.w	401c90 <_vfiprintf_r+0x93c>
  40200a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40200c:	e668      	b.n	401ce0 <_vfiprintf_r+0x98c>
  40200e:	4610      	mov	r0, r2
  402010:	f04f 0e01 	mov.w	lr, #1
  402014:	46da      	mov	sl, fp
  402016:	e5e6      	b.n	401be6 <_vfiprintf_r+0x892>
  402018:	9904      	ldr	r1, [sp, #16]
  40201a:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  40201e:	460a      	mov	r2, r1
  402020:	880c      	ldrh	r4, [r1, #0]
  402022:	9901      	ldr	r1, [sp, #4]
  402024:	2900      	cmp	r1, #0
  402026:	f102 0204 	add.w	r2, r2, #4
  40202a:	f04f 0500 	mov.w	r5, #0
  40202e:	db4e      	blt.n	4020ce <_vfiprintf_r+0xd7a>
  402030:	ea54 0105 	orrs.w	r1, r4, r5
  402034:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  402038:	9204      	str	r2, [sp, #16]
  40203a:	4699      	mov	r9, r3
  40203c:	f47f abe9 	bne.w	401812 <_vfiprintf_r+0x4be>
  402040:	e4d4      	b.n	4019ec <_vfiprintf_r+0x698>
  402042:	9304      	str	r3, [sp, #16]
  402044:	e6f9      	b.n	401e3a <_vfiprintf_r+0xae6>
  402046:	4638      	mov	r0, r7
  402048:	9404      	str	r4, [sp, #16]
  40204a:	f7ff f8d9 	bl	401200 <strlen>
  40204e:	2300      	movs	r3, #0
  402050:	9003      	str	r0, [sp, #12]
  402052:	f89d 902f 	ldrb.w	r9, [sp, #47]	; 0x2f
  402056:	9301      	str	r3, [sp, #4]
  402058:	f7ff ba9c 	b.w	401594 <_vfiprintf_r+0x240>
  40205c:	aa0d      	add	r2, sp, #52	; 0x34
  40205e:	9900      	ldr	r1, [sp, #0]
  402060:	9805      	ldr	r0, [sp, #20]
  402062:	f7ff f93b 	bl	4012dc <__sprint_r.part.0>
  402066:	2800      	cmp	r0, #0
  402068:	f47f ae12 	bne.w	401c90 <_vfiprintf_r+0x93c>
  40206c:	980e      	ldr	r0, [sp, #56]	; 0x38
  40206e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  402070:	f100 0e01 	add.w	lr, r0, #1
  402074:	46da      	mov	sl, fp
  402076:	e5b6      	b.n	401be6 <_vfiprintf_r+0x892>
  402078:	980e      	ldr	r0, [sp, #56]	; 0x38
  40207a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40207c:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 40214c <_vfiprintf_r+0xdf8>
  402080:	3001      	adds	r0, #1
  402082:	f7ff bad2 	b.w	40162a <_vfiprintf_r+0x2d6>
  402086:	461e      	mov	r6, r3
  402088:	f04f 0900 	mov.w	r9, #0
  40208c:	e67a      	b.n	401d84 <_vfiprintf_r+0xa30>
  40208e:	2b06      	cmp	r3, #6
  402090:	bf28      	it	cs
  402092:	2306      	movcs	r3, #6
  402094:	9303      	str	r3, [sp, #12]
  402096:	9404      	str	r4, [sp, #16]
  402098:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
  40209c:	4f2a      	ldr	r7, [pc, #168]	; (402148 <_vfiprintf_r+0xdf4>)
  40209e:	e50c      	b.n	401aba <_vfiprintf_r+0x766>
  4020a0:	9204      	str	r2, [sp, #16]
  4020a2:	e56a      	b.n	401b7a <_vfiprintf_r+0x826>
  4020a4:	980e      	ldr	r0, [sp, #56]	; 0x38
  4020a6:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 40214c <_vfiprintf_r+0xdf8>
  4020aa:	3001      	adds	r0, #1
  4020ac:	f7ff bb73 	b.w	401796 <_vfiprintf_r+0x442>
  4020b0:	46f4      	mov	ip, lr
  4020b2:	f7ff bb1a 	b.w	4016ea <_vfiprintf_r+0x396>
  4020b6:	9b01      	ldr	r3, [sp, #4]
  4020b8:	f89d 902f 	ldrb.w	r9, [sp, #47]	; 0x2f
  4020bc:	9303      	str	r3, [sp, #12]
  4020be:	9404      	str	r4, [sp, #16]
  4020c0:	9001      	str	r0, [sp, #4]
  4020c2:	f7ff ba67 	b.w	401594 <_vfiprintf_r+0x240>
  4020c6:	2200      	movs	r2, #0
  4020c8:	9201      	str	r2, [sp, #4]
  4020ca:	f7ff b9ac 	b.w	401426 <_vfiprintf_r+0xd2>
  4020ce:	9204      	str	r2, [sp, #16]
  4020d0:	4699      	mov	r9, r3
  4020d2:	e6b2      	b.n	401e3a <_vfiprintf_r+0xae6>
  4020d4:	9a04      	ldr	r2, [sp, #16]
  4020d6:	6813      	ldr	r3, [r2, #0]
  4020d8:	9301      	str	r3, [sp, #4]
  4020da:	3204      	adds	r2, #4
  4020dc:	2b00      	cmp	r3, #0
  4020de:	9204      	str	r2, [sp, #16]
  4020e0:	f898 3001 	ldrb.w	r3, [r8, #1]
  4020e4:	46a8      	mov	r8, r5
  4020e6:	f6bf a99c 	bge.w	401422 <_vfiprintf_r+0xce>
  4020ea:	f04f 32ff 	mov.w	r2, #4294967295
  4020ee:	9201      	str	r2, [sp, #4]
  4020f0:	f7ff b997 	b.w	401422 <_vfiprintf_r+0xce>
  4020f4:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
  4020f8:	e48e      	b.n	401a18 <_vfiprintf_r+0x6c4>
  4020fa:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
  4020fe:	e4f0      	b.n	401ae2 <_vfiprintf_r+0x78e>
  402100:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
  402104:	e4ab      	b.n	401a5e <_vfiprintf_r+0x70a>
  402106:	4699      	mov	r9, r3
  402108:	07f3      	lsls	r3, r6, #31
  40210a:	d505      	bpl.n	402118 <_vfiprintf_r+0xdc4>
  40210c:	af2a      	add	r7, sp, #168	; 0xa8
  40210e:	2330      	movs	r3, #48	; 0x30
  402110:	f807 3d41 	strb.w	r3, [r7, #-65]!
  402114:	f7ff bb97 	b.w	401846 <_vfiprintf_r+0x4f2>
  402118:	9b01      	ldr	r3, [sp, #4]
  40211a:	9303      	str	r3, [sp, #12]
  40211c:	465f      	mov	r7, fp
  40211e:	f7ff ba39 	b.w	401594 <_vfiprintf_r+0x240>
  402122:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
  402126:	e443      	b.n	4019b0 <_vfiprintf_r+0x65c>
  402128:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
  40212c:	f7ff bb9a 	b.w	401864 <_vfiprintf_r+0x510>
  402130:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
  402134:	f7ff bb4d 	b.w	4017d2 <_vfiprintf_r+0x47e>
  402138:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
  40213c:	e50f      	b.n	401b5e <_vfiprintf_r+0x80a>
  40213e:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
  402142:	e4f3      	b.n	401b2c <_vfiprintf_r+0x7d8>
  402144:	00404270 	.word	0x00404270
  402148:	00404284 	.word	0x00404284
  40214c:	0040428c 	.word	0x0040428c

00402150 <__sbprintf>:
  402150:	b5f0      	push	{r4, r5, r6, r7, lr}
  402152:	460c      	mov	r4, r1
  402154:	f2ad 4d6c 	subw	sp, sp, #1132	; 0x46c
  402158:	8989      	ldrh	r1, [r1, #12]
  40215a:	6e66      	ldr	r6, [r4, #100]	; 0x64
  40215c:	89e5      	ldrh	r5, [r4, #14]
  40215e:	9619      	str	r6, [sp, #100]	; 0x64
  402160:	f021 0102 	bic.w	r1, r1, #2
  402164:	6a66      	ldr	r6, [r4, #36]	; 0x24
  402166:	f8ad 500e 	strh.w	r5, [sp, #14]
  40216a:	2500      	movs	r5, #0
  40216c:	69e7      	ldr	r7, [r4, #28]
  40216e:	f8ad 100c 	strh.w	r1, [sp, #12]
  402172:	9609      	str	r6, [sp, #36]	; 0x24
  402174:	9506      	str	r5, [sp, #24]
  402176:	ae1a      	add	r6, sp, #104	; 0x68
  402178:	f44f 6580 	mov.w	r5, #1024	; 0x400
  40217c:	4669      	mov	r1, sp
  40217e:	9600      	str	r6, [sp, #0]
  402180:	9604      	str	r6, [sp, #16]
  402182:	9502      	str	r5, [sp, #8]
  402184:	9505      	str	r5, [sp, #20]
  402186:	9707      	str	r7, [sp, #28]
  402188:	4606      	mov	r6, r0
  40218a:	f7ff f8e3 	bl	401354 <_vfiprintf_r>
  40218e:	1e05      	subs	r5, r0, #0
  402190:	db07      	blt.n	4021a2 <__sbprintf+0x52>
  402192:	4630      	mov	r0, r6
  402194:	4669      	mov	r1, sp
  402196:	f000 f929 	bl	4023ec <_fflush_r>
  40219a:	2800      	cmp	r0, #0
  40219c:	bf18      	it	ne
  40219e:	f04f 35ff 	movne.w	r5, #4294967295
  4021a2:	f8bd 300c 	ldrh.w	r3, [sp, #12]
  4021a6:	065b      	lsls	r3, r3, #25
  4021a8:	d503      	bpl.n	4021b2 <__sbprintf+0x62>
  4021aa:	89a3      	ldrh	r3, [r4, #12]
  4021ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4021b0:	81a3      	strh	r3, [r4, #12]
  4021b2:	4628      	mov	r0, r5
  4021b4:	f20d 4d6c 	addw	sp, sp, #1132	; 0x46c
  4021b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4021ba:	bf00      	nop

004021bc <__swsetup_r>:
  4021bc:	b538      	push	{r3, r4, r5, lr}
  4021be:	4b30      	ldr	r3, [pc, #192]	; (402280 <__swsetup_r+0xc4>)
  4021c0:	681b      	ldr	r3, [r3, #0]
  4021c2:	4605      	mov	r5, r0
  4021c4:	460c      	mov	r4, r1
  4021c6:	b113      	cbz	r3, 4021ce <__swsetup_r+0x12>
  4021c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  4021ca:	2a00      	cmp	r2, #0
  4021cc:	d038      	beq.n	402240 <__swsetup_r+0x84>
  4021ce:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  4021d2:	b293      	uxth	r3, r2
  4021d4:	0718      	lsls	r0, r3, #28
  4021d6:	d50c      	bpl.n	4021f2 <__swsetup_r+0x36>
  4021d8:	6920      	ldr	r0, [r4, #16]
  4021da:	b1a8      	cbz	r0, 402208 <__swsetup_r+0x4c>
  4021dc:	f013 0201 	ands.w	r2, r3, #1
  4021e0:	d01e      	beq.n	402220 <__swsetup_r+0x64>
  4021e2:	6963      	ldr	r3, [r4, #20]
  4021e4:	2200      	movs	r2, #0
  4021e6:	425b      	negs	r3, r3
  4021e8:	61a3      	str	r3, [r4, #24]
  4021ea:	60a2      	str	r2, [r4, #8]
  4021ec:	b1f0      	cbz	r0, 40222c <__swsetup_r+0x70>
  4021ee:	2000      	movs	r0, #0
  4021f0:	bd38      	pop	{r3, r4, r5, pc}
  4021f2:	06d9      	lsls	r1, r3, #27
  4021f4:	d53c      	bpl.n	402270 <__swsetup_r+0xb4>
  4021f6:	0758      	lsls	r0, r3, #29
  4021f8:	d426      	bmi.n	402248 <__swsetup_r+0x8c>
  4021fa:	6920      	ldr	r0, [r4, #16]
  4021fc:	f042 0308 	orr.w	r3, r2, #8
  402200:	81a3      	strh	r3, [r4, #12]
  402202:	b29b      	uxth	r3, r3
  402204:	2800      	cmp	r0, #0
  402206:	d1e9      	bne.n	4021dc <__swsetup_r+0x20>
  402208:	f403 7220 	and.w	r2, r3, #640	; 0x280
  40220c:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  402210:	d0e4      	beq.n	4021dc <__swsetup_r+0x20>
  402212:	4628      	mov	r0, r5
  402214:	4621      	mov	r1, r4
  402216:	f000 fd4d 	bl	402cb4 <__smakebuf_r>
  40221a:	89a3      	ldrh	r3, [r4, #12]
  40221c:	6920      	ldr	r0, [r4, #16]
  40221e:	e7dd      	b.n	4021dc <__swsetup_r+0x20>
  402220:	0799      	lsls	r1, r3, #30
  402222:	bf58      	it	pl
  402224:	6962      	ldrpl	r2, [r4, #20]
  402226:	60a2      	str	r2, [r4, #8]
  402228:	2800      	cmp	r0, #0
  40222a:	d1e0      	bne.n	4021ee <__swsetup_r+0x32>
  40222c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  402230:	061a      	lsls	r2, r3, #24
  402232:	d5dd      	bpl.n	4021f0 <__swsetup_r+0x34>
  402234:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  402238:	81a3      	strh	r3, [r4, #12]
  40223a:	f04f 30ff 	mov.w	r0, #4294967295
  40223e:	bd38      	pop	{r3, r4, r5, pc}
  402240:	4618      	mov	r0, r3
  402242:	f000 f979 	bl	402538 <__sinit>
  402246:	e7c2      	b.n	4021ce <__swsetup_r+0x12>
  402248:	6b21      	ldr	r1, [r4, #48]	; 0x30
  40224a:	b151      	cbz	r1, 402262 <__swsetup_r+0xa6>
  40224c:	f104 0340 	add.w	r3, r4, #64	; 0x40
  402250:	4299      	cmp	r1, r3
  402252:	d004      	beq.n	40225e <__swsetup_r+0xa2>
  402254:	4628      	mov	r0, r5
  402256:	f000 fa39 	bl	4026cc <_free_r>
  40225a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40225e:	2300      	movs	r3, #0
  402260:	6323      	str	r3, [r4, #48]	; 0x30
  402262:	2300      	movs	r3, #0
  402264:	6920      	ldr	r0, [r4, #16]
  402266:	6063      	str	r3, [r4, #4]
  402268:	f022 0224 	bic.w	r2, r2, #36	; 0x24
  40226c:	6020      	str	r0, [r4, #0]
  40226e:	e7c5      	b.n	4021fc <__swsetup_r+0x40>
  402270:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  402274:	2309      	movs	r3, #9
  402276:	602b      	str	r3, [r5, #0]
  402278:	f04f 30ff 	mov.w	r0, #4294967295
  40227c:	81a2      	strh	r2, [r4, #12]
  40227e:	bd38      	pop	{r3, r4, r5, pc}
  402280:	20000440 	.word	0x20000440

00402284 <register_fini>:
  402284:	4b02      	ldr	r3, [pc, #8]	; (402290 <register_fini+0xc>)
  402286:	b113      	cbz	r3, 40228e <register_fini+0xa>
  402288:	4802      	ldr	r0, [pc, #8]	; (402294 <register_fini+0x10>)
  40228a:	f000 b805 	b.w	402298 <atexit>
  40228e:	4770      	bx	lr
  402290:	00000000 	.word	0x00000000
  402294:	0040254d 	.word	0x0040254d

00402298 <atexit>:
  402298:	2300      	movs	r3, #0
  40229a:	4601      	mov	r1, r0
  40229c:	461a      	mov	r2, r3
  40229e:	4618      	mov	r0, r3
  4022a0:	f001 bcde 	b.w	403c60 <__register_exitproc>

004022a4 <__sflush_r>:
  4022a4:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
  4022a8:	b29a      	uxth	r2, r3
  4022aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4022ae:	460d      	mov	r5, r1
  4022b0:	0711      	lsls	r1, r2, #28
  4022b2:	4680      	mov	r8, r0
  4022b4:	d43c      	bmi.n	402330 <__sflush_r+0x8c>
  4022b6:	686a      	ldr	r2, [r5, #4]
  4022b8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  4022bc:	2a00      	cmp	r2, #0
  4022be:	81ab      	strh	r3, [r5, #12]
  4022c0:	dd73      	ble.n	4023aa <__sflush_r+0x106>
  4022c2:	6aac      	ldr	r4, [r5, #40]	; 0x28
  4022c4:	2c00      	cmp	r4, #0
  4022c6:	d04b      	beq.n	402360 <__sflush_r+0xbc>
  4022c8:	b29b      	uxth	r3, r3
  4022ca:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
  4022ce:	2100      	movs	r1, #0
  4022d0:	b292      	uxth	r2, r2
  4022d2:	f8d8 6000 	ldr.w	r6, [r8]
  4022d6:	f8c8 1000 	str.w	r1, [r8]
  4022da:	2a00      	cmp	r2, #0
  4022dc:	d069      	beq.n	4023b2 <__sflush_r+0x10e>
  4022de:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  4022e0:	075f      	lsls	r7, r3, #29
  4022e2:	d505      	bpl.n	4022f0 <__sflush_r+0x4c>
  4022e4:	6869      	ldr	r1, [r5, #4]
  4022e6:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  4022e8:	1a52      	subs	r2, r2, r1
  4022ea:	b10b      	cbz	r3, 4022f0 <__sflush_r+0x4c>
  4022ec:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  4022ee:	1ad2      	subs	r2, r2, r3
  4022f0:	2300      	movs	r3, #0
  4022f2:	69e9      	ldr	r1, [r5, #28]
  4022f4:	4640      	mov	r0, r8
  4022f6:	47a0      	blx	r4
  4022f8:	1c44      	adds	r4, r0, #1
  4022fa:	d03c      	beq.n	402376 <__sflush_r+0xd2>
  4022fc:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
  402300:	692a      	ldr	r2, [r5, #16]
  402302:	602a      	str	r2, [r5, #0]
  402304:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  402308:	2200      	movs	r2, #0
  40230a:	81ab      	strh	r3, [r5, #12]
  40230c:	04db      	lsls	r3, r3, #19
  40230e:	606a      	str	r2, [r5, #4]
  402310:	d449      	bmi.n	4023a6 <__sflush_r+0x102>
  402312:	6b29      	ldr	r1, [r5, #48]	; 0x30
  402314:	f8c8 6000 	str.w	r6, [r8]
  402318:	b311      	cbz	r1, 402360 <__sflush_r+0xbc>
  40231a:	f105 0340 	add.w	r3, r5, #64	; 0x40
  40231e:	4299      	cmp	r1, r3
  402320:	d002      	beq.n	402328 <__sflush_r+0x84>
  402322:	4640      	mov	r0, r8
  402324:	f000 f9d2 	bl	4026cc <_free_r>
  402328:	2000      	movs	r0, #0
  40232a:	6328      	str	r0, [r5, #48]	; 0x30
  40232c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  402330:	692e      	ldr	r6, [r5, #16]
  402332:	b1ae      	cbz	r6, 402360 <__sflush_r+0xbc>
  402334:	682c      	ldr	r4, [r5, #0]
  402336:	602e      	str	r6, [r5, #0]
  402338:	0790      	lsls	r0, r2, #30
  40233a:	bf0c      	ite	eq
  40233c:	696b      	ldreq	r3, [r5, #20]
  40233e:	2300      	movne	r3, #0
  402340:	1ba4      	subs	r4, r4, r6
  402342:	60ab      	str	r3, [r5, #8]
  402344:	e00a      	b.n	40235c <__sflush_r+0xb8>
  402346:	4623      	mov	r3, r4
  402348:	4632      	mov	r2, r6
  40234a:	6a6f      	ldr	r7, [r5, #36]	; 0x24
  40234c:	69e9      	ldr	r1, [r5, #28]
  40234e:	4640      	mov	r0, r8
  402350:	47b8      	blx	r7
  402352:	2800      	cmp	r0, #0
  402354:	eba4 0400 	sub.w	r4, r4, r0
  402358:	4406      	add	r6, r0
  40235a:	dd04      	ble.n	402366 <__sflush_r+0xc2>
  40235c:	2c00      	cmp	r4, #0
  40235e:	dcf2      	bgt.n	402346 <__sflush_r+0xa2>
  402360:	2000      	movs	r0, #0
  402362:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  402366:	89ab      	ldrh	r3, [r5, #12]
  402368:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40236c:	81ab      	strh	r3, [r5, #12]
  40236e:	f04f 30ff 	mov.w	r0, #4294967295
  402372:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  402376:	f8d8 2000 	ldr.w	r2, [r8]
  40237a:	2a1d      	cmp	r2, #29
  40237c:	d8f3      	bhi.n	402366 <__sflush_r+0xc2>
  40237e:	4b1a      	ldr	r3, [pc, #104]	; (4023e8 <__sflush_r+0x144>)
  402380:	40d3      	lsrs	r3, r2
  402382:	f003 0301 	and.w	r3, r3, #1
  402386:	f083 0401 	eor.w	r4, r3, #1
  40238a:	2b00      	cmp	r3, #0
  40238c:	d0eb      	beq.n	402366 <__sflush_r+0xc2>
  40238e:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
  402392:	6929      	ldr	r1, [r5, #16]
  402394:	6029      	str	r1, [r5, #0]
  402396:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  40239a:	04d9      	lsls	r1, r3, #19
  40239c:	606c      	str	r4, [r5, #4]
  40239e:	81ab      	strh	r3, [r5, #12]
  4023a0:	d5b7      	bpl.n	402312 <__sflush_r+0x6e>
  4023a2:	2a00      	cmp	r2, #0
  4023a4:	d1b5      	bne.n	402312 <__sflush_r+0x6e>
  4023a6:	6528      	str	r0, [r5, #80]	; 0x50
  4023a8:	e7b3      	b.n	402312 <__sflush_r+0x6e>
  4023aa:	6bea      	ldr	r2, [r5, #60]	; 0x3c
  4023ac:	2a00      	cmp	r2, #0
  4023ae:	dc88      	bgt.n	4022c2 <__sflush_r+0x1e>
  4023b0:	e7d6      	b.n	402360 <__sflush_r+0xbc>
  4023b2:	2301      	movs	r3, #1
  4023b4:	69e9      	ldr	r1, [r5, #28]
  4023b6:	4640      	mov	r0, r8
  4023b8:	47a0      	blx	r4
  4023ba:	1c43      	adds	r3, r0, #1
  4023bc:	4602      	mov	r2, r0
  4023be:	d002      	beq.n	4023c6 <__sflush_r+0x122>
  4023c0:	89ab      	ldrh	r3, [r5, #12]
  4023c2:	6aac      	ldr	r4, [r5, #40]	; 0x28
  4023c4:	e78c      	b.n	4022e0 <__sflush_r+0x3c>
  4023c6:	f8d8 3000 	ldr.w	r3, [r8]
  4023ca:	2b00      	cmp	r3, #0
  4023cc:	d0f8      	beq.n	4023c0 <__sflush_r+0x11c>
  4023ce:	2b1d      	cmp	r3, #29
  4023d0:	d001      	beq.n	4023d6 <__sflush_r+0x132>
  4023d2:	2b16      	cmp	r3, #22
  4023d4:	d102      	bne.n	4023dc <__sflush_r+0x138>
  4023d6:	f8c8 6000 	str.w	r6, [r8]
  4023da:	e7c1      	b.n	402360 <__sflush_r+0xbc>
  4023dc:	89ab      	ldrh	r3, [r5, #12]
  4023de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4023e2:	81ab      	strh	r3, [r5, #12]
  4023e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4023e8:	20400001 	.word	0x20400001

004023ec <_fflush_r>:
  4023ec:	b510      	push	{r4, lr}
  4023ee:	4604      	mov	r4, r0
  4023f0:	b082      	sub	sp, #8
  4023f2:	b108      	cbz	r0, 4023f8 <_fflush_r+0xc>
  4023f4:	6b83      	ldr	r3, [r0, #56]	; 0x38
  4023f6:	b153      	cbz	r3, 40240e <_fflush_r+0x22>
  4023f8:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
  4023fc:	b908      	cbnz	r0, 402402 <_fflush_r+0x16>
  4023fe:	b002      	add	sp, #8
  402400:	bd10      	pop	{r4, pc}
  402402:	4620      	mov	r0, r4
  402404:	b002      	add	sp, #8
  402406:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  40240a:	f7ff bf4b 	b.w	4022a4 <__sflush_r>
  40240e:	9101      	str	r1, [sp, #4]
  402410:	f000 f892 	bl	402538 <__sinit>
  402414:	9901      	ldr	r1, [sp, #4]
  402416:	e7ef      	b.n	4023f8 <_fflush_r+0xc>

00402418 <fflush>:
  402418:	b120      	cbz	r0, 402424 <fflush+0xc>
  40241a:	4b05      	ldr	r3, [pc, #20]	; (402430 <fflush+0x18>)
  40241c:	4601      	mov	r1, r0
  40241e:	6818      	ldr	r0, [r3, #0]
  402420:	f7ff bfe4 	b.w	4023ec <_fflush_r>
  402424:	4b03      	ldr	r3, [pc, #12]	; (402434 <fflush+0x1c>)
  402426:	4904      	ldr	r1, [pc, #16]	; (402438 <fflush+0x20>)
  402428:	6818      	ldr	r0, [r3, #0]
  40242a:	f000 bbdf 	b.w	402bec <_fwalk_reent>
  40242e:	bf00      	nop
  402430:	20000440 	.word	0x20000440
  402434:	00404244 	.word	0x00404244
  402438:	004023ed 	.word	0x004023ed

0040243c <_cleanup_r>:
  40243c:	4901      	ldr	r1, [pc, #4]	; (402444 <_cleanup_r+0x8>)
  40243e:	f000 bbd5 	b.w	402bec <_fwalk_reent>
  402442:	bf00      	nop
  402444:	00403d29 	.word	0x00403d29

00402448 <__sinit.part.1>:
  402448:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40244c:	4b35      	ldr	r3, [pc, #212]	; (402524 <__sinit.part.1+0xdc>)
  40244e:	6845      	ldr	r5, [r0, #4]
  402450:	63c3      	str	r3, [r0, #60]	; 0x3c
  402452:	2400      	movs	r4, #0
  402454:	4607      	mov	r7, r0
  402456:	f500 723b 	add.w	r2, r0, #748	; 0x2ec
  40245a:	2304      	movs	r3, #4
  40245c:	2103      	movs	r1, #3
  40245e:	f8c0 12e4 	str.w	r1, [r0, #740]	; 0x2e4
  402462:	f8c0 22e8 	str.w	r2, [r0, #744]	; 0x2e8
  402466:	f8c0 42e0 	str.w	r4, [r0, #736]	; 0x2e0
  40246a:	b083      	sub	sp, #12
  40246c:	602c      	str	r4, [r5, #0]
  40246e:	606c      	str	r4, [r5, #4]
  402470:	60ac      	str	r4, [r5, #8]
  402472:	666c      	str	r4, [r5, #100]	; 0x64
  402474:	81ec      	strh	r4, [r5, #14]
  402476:	612c      	str	r4, [r5, #16]
  402478:	616c      	str	r4, [r5, #20]
  40247a:	61ac      	str	r4, [r5, #24]
  40247c:	81ab      	strh	r3, [r5, #12]
  40247e:	4621      	mov	r1, r4
  402480:	f105 005c 	add.w	r0, r5, #92	; 0x5c
  402484:	2208      	movs	r2, #8
  402486:	f7fe fd4d 	bl	400f24 <memset>
  40248a:	68be      	ldr	r6, [r7, #8]
  40248c:	f8df b098 	ldr.w	fp, [pc, #152]	; 402528 <__sinit.part.1+0xe0>
  402490:	f8df a098 	ldr.w	sl, [pc, #152]	; 40252c <__sinit.part.1+0xe4>
  402494:	f8df 9098 	ldr.w	r9, [pc, #152]	; 402530 <__sinit.part.1+0xe8>
  402498:	f8df 8098 	ldr.w	r8, [pc, #152]	; 402534 <__sinit.part.1+0xec>
  40249c:	f8c5 b020 	str.w	fp, [r5, #32]
  4024a0:	2301      	movs	r3, #1
  4024a2:	2209      	movs	r2, #9
  4024a4:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
  4024a8:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
  4024ac:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
  4024b0:	61ed      	str	r5, [r5, #28]
  4024b2:	4621      	mov	r1, r4
  4024b4:	81f3      	strh	r3, [r6, #14]
  4024b6:	81b2      	strh	r2, [r6, #12]
  4024b8:	f106 005c 	add.w	r0, r6, #92	; 0x5c
  4024bc:	6034      	str	r4, [r6, #0]
  4024be:	6074      	str	r4, [r6, #4]
  4024c0:	60b4      	str	r4, [r6, #8]
  4024c2:	6674      	str	r4, [r6, #100]	; 0x64
  4024c4:	6134      	str	r4, [r6, #16]
  4024c6:	6174      	str	r4, [r6, #20]
  4024c8:	61b4      	str	r4, [r6, #24]
  4024ca:	2208      	movs	r2, #8
  4024cc:	9301      	str	r3, [sp, #4]
  4024ce:	f7fe fd29 	bl	400f24 <memset>
  4024d2:	68fd      	ldr	r5, [r7, #12]
  4024d4:	61f6      	str	r6, [r6, #28]
  4024d6:	2012      	movs	r0, #18
  4024d8:	2202      	movs	r2, #2
  4024da:	f8c6 b020 	str.w	fp, [r6, #32]
  4024de:	f8c6 a024 	str.w	sl, [r6, #36]	; 0x24
  4024e2:	f8c6 9028 	str.w	r9, [r6, #40]	; 0x28
  4024e6:	f8c6 802c 	str.w	r8, [r6, #44]	; 0x2c
  4024ea:	4621      	mov	r1, r4
  4024ec:	81a8      	strh	r0, [r5, #12]
  4024ee:	81ea      	strh	r2, [r5, #14]
  4024f0:	602c      	str	r4, [r5, #0]
  4024f2:	606c      	str	r4, [r5, #4]
  4024f4:	60ac      	str	r4, [r5, #8]
  4024f6:	666c      	str	r4, [r5, #100]	; 0x64
  4024f8:	612c      	str	r4, [r5, #16]
  4024fa:	616c      	str	r4, [r5, #20]
  4024fc:	61ac      	str	r4, [r5, #24]
  4024fe:	f105 005c 	add.w	r0, r5, #92	; 0x5c
  402502:	2208      	movs	r2, #8
  402504:	f7fe fd0e 	bl	400f24 <memset>
  402508:	9b01      	ldr	r3, [sp, #4]
  40250a:	61ed      	str	r5, [r5, #28]
  40250c:	f8c5 b020 	str.w	fp, [r5, #32]
  402510:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
  402514:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
  402518:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
  40251c:	63bb      	str	r3, [r7, #56]	; 0x38
  40251e:	b003      	add	sp, #12
  402520:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402524:	0040243d 	.word	0x0040243d
  402528:	00403a91 	.word	0x00403a91
  40252c:	00403ab5 	.word	0x00403ab5
  402530:	00403af1 	.word	0x00403af1
  402534:	00403b11 	.word	0x00403b11

00402538 <__sinit>:
  402538:	6b83      	ldr	r3, [r0, #56]	; 0x38
  40253a:	b103      	cbz	r3, 40253e <__sinit+0x6>
  40253c:	4770      	bx	lr
  40253e:	f7ff bf83 	b.w	402448 <__sinit.part.1>
  402542:	bf00      	nop

00402544 <__sfp_lock_acquire>:
  402544:	4770      	bx	lr
  402546:	bf00      	nop

00402548 <__sfp_lock_release>:
  402548:	4770      	bx	lr
  40254a:	bf00      	nop

0040254c <__libc_fini_array>:
  40254c:	b538      	push	{r3, r4, r5, lr}
  40254e:	4d07      	ldr	r5, [pc, #28]	; (40256c <__libc_fini_array+0x20>)
  402550:	4c07      	ldr	r4, [pc, #28]	; (402570 <__libc_fini_array+0x24>)
  402552:	1b2c      	subs	r4, r5, r4
  402554:	10a4      	asrs	r4, r4, #2
  402556:	d005      	beq.n	402564 <__libc_fini_array+0x18>
  402558:	3c01      	subs	r4, #1
  40255a:	f855 3d04 	ldr.w	r3, [r5, #-4]!
  40255e:	4798      	blx	r3
  402560:	2c00      	cmp	r4, #0
  402562:	d1f9      	bne.n	402558 <__libc_fini_array+0xc>
  402564:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  402568:	f001 bea2 	b.w	4042b0 <_fini>
  40256c:	004042c0 	.word	0x004042c0
  402570:	004042bc 	.word	0x004042bc

00402574 <__fputwc>:
  402574:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  402578:	b082      	sub	sp, #8
  40257a:	4680      	mov	r8, r0
  40257c:	4689      	mov	r9, r1
  40257e:	4614      	mov	r4, r2
  402580:	f000 fb62 	bl	402c48 <__locale_mb_cur_max>
  402584:	2801      	cmp	r0, #1
  402586:	d033      	beq.n	4025f0 <__fputwc+0x7c>
  402588:	f104 035c 	add.w	r3, r4, #92	; 0x5c
  40258c:	464a      	mov	r2, r9
  40258e:	a901      	add	r1, sp, #4
  402590:	4640      	mov	r0, r8
  402592:	f001 fb17 	bl	403bc4 <_wcrtomb_r>
  402596:	f1b0 3fff 	cmp.w	r0, #4294967295
  40259a:	4682      	mov	sl, r0
  40259c:	d021      	beq.n	4025e2 <__fputwc+0x6e>
  40259e:	b388      	cbz	r0, 402604 <__fputwc+0x90>
  4025a0:	f89d 6004 	ldrb.w	r6, [sp, #4]
  4025a4:	2500      	movs	r5, #0
  4025a6:	e008      	b.n	4025ba <__fputwc+0x46>
  4025a8:	6823      	ldr	r3, [r4, #0]
  4025aa:	1c5a      	adds	r2, r3, #1
  4025ac:	6022      	str	r2, [r4, #0]
  4025ae:	701e      	strb	r6, [r3, #0]
  4025b0:	3501      	adds	r5, #1
  4025b2:	4555      	cmp	r5, sl
  4025b4:	d226      	bcs.n	402604 <__fputwc+0x90>
  4025b6:	ab01      	add	r3, sp, #4
  4025b8:	5d5e      	ldrb	r6, [r3, r5]
  4025ba:	68a3      	ldr	r3, [r4, #8]
  4025bc:	3b01      	subs	r3, #1
  4025be:	2b00      	cmp	r3, #0
  4025c0:	60a3      	str	r3, [r4, #8]
  4025c2:	daf1      	bge.n	4025a8 <__fputwc+0x34>
  4025c4:	69a7      	ldr	r7, [r4, #24]
  4025c6:	42bb      	cmp	r3, r7
  4025c8:	4631      	mov	r1, r6
  4025ca:	4622      	mov	r2, r4
  4025cc:	4640      	mov	r0, r8
  4025ce:	db01      	blt.n	4025d4 <__fputwc+0x60>
  4025d0:	2e0a      	cmp	r6, #10
  4025d2:	d1e9      	bne.n	4025a8 <__fputwc+0x34>
  4025d4:	f001 faa0 	bl	403b18 <__swbuf_r>
  4025d8:	1c43      	adds	r3, r0, #1
  4025da:	d1e9      	bne.n	4025b0 <__fputwc+0x3c>
  4025dc:	b002      	add	sp, #8
  4025de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4025e2:	89a3      	ldrh	r3, [r4, #12]
  4025e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4025e8:	81a3      	strh	r3, [r4, #12]
  4025ea:	b002      	add	sp, #8
  4025ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4025f0:	f109 33ff 	add.w	r3, r9, #4294967295
  4025f4:	2bfe      	cmp	r3, #254	; 0xfe
  4025f6:	d8c7      	bhi.n	402588 <__fputwc+0x14>
  4025f8:	fa5f f689 	uxtb.w	r6, r9
  4025fc:	4682      	mov	sl, r0
  4025fe:	f88d 6004 	strb.w	r6, [sp, #4]
  402602:	e7cf      	b.n	4025a4 <__fputwc+0x30>
  402604:	4648      	mov	r0, r9
  402606:	b002      	add	sp, #8
  402608:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0040260c <_fputwc_r>:
  40260c:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
  402610:	f413 5f00 	tst.w	r3, #8192	; 0x2000
  402614:	d10a      	bne.n	40262c <_fputwc_r+0x20>
  402616:	b410      	push	{r4}
  402618:	6e54      	ldr	r4, [r2, #100]	; 0x64
  40261a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  40261e:	f444 5400 	orr.w	r4, r4, #8192	; 0x2000
  402622:	6654      	str	r4, [r2, #100]	; 0x64
  402624:	8193      	strh	r3, [r2, #12]
  402626:	bc10      	pop	{r4}
  402628:	f7ff bfa4 	b.w	402574 <__fputwc>
  40262c:	f7ff bfa2 	b.w	402574 <__fputwc>

00402630 <_malloc_trim_r>:
  402630:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  402632:	4f23      	ldr	r7, [pc, #140]	; (4026c0 <_malloc_trim_r+0x90>)
  402634:	460c      	mov	r4, r1
  402636:	4606      	mov	r6, r0
  402638:	f000 ff90 	bl	40355c <__malloc_lock>
  40263c:	68bb      	ldr	r3, [r7, #8]
  40263e:	685d      	ldr	r5, [r3, #4]
  402640:	f025 0503 	bic.w	r5, r5, #3
  402644:	1b29      	subs	r1, r5, r4
  402646:	f601 71ef 	addw	r1, r1, #4079	; 0xfef
  40264a:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  40264e:	f021 010f 	bic.w	r1, r1, #15
  402652:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  402656:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  40265a:	db07      	blt.n	40266c <_malloc_trim_r+0x3c>
  40265c:	2100      	movs	r1, #0
  40265e:	4630      	mov	r0, r6
  402660:	f001 fa04 	bl	403a6c <_sbrk_r>
  402664:	68bb      	ldr	r3, [r7, #8]
  402666:	442b      	add	r3, r5
  402668:	4298      	cmp	r0, r3
  40266a:	d004      	beq.n	402676 <_malloc_trim_r+0x46>
  40266c:	4630      	mov	r0, r6
  40266e:	f000 ff77 	bl	403560 <__malloc_unlock>
  402672:	2000      	movs	r0, #0
  402674:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  402676:	4261      	negs	r1, r4
  402678:	4630      	mov	r0, r6
  40267a:	f001 f9f7 	bl	403a6c <_sbrk_r>
  40267e:	3001      	adds	r0, #1
  402680:	d00d      	beq.n	40269e <_malloc_trim_r+0x6e>
  402682:	4b10      	ldr	r3, [pc, #64]	; (4026c4 <_malloc_trim_r+0x94>)
  402684:	68ba      	ldr	r2, [r7, #8]
  402686:	6819      	ldr	r1, [r3, #0]
  402688:	1b2d      	subs	r5, r5, r4
  40268a:	f045 0501 	orr.w	r5, r5, #1
  40268e:	4630      	mov	r0, r6
  402690:	1b09      	subs	r1, r1, r4
  402692:	6055      	str	r5, [r2, #4]
  402694:	6019      	str	r1, [r3, #0]
  402696:	f000 ff63 	bl	403560 <__malloc_unlock>
  40269a:	2001      	movs	r0, #1
  40269c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40269e:	2100      	movs	r1, #0
  4026a0:	4630      	mov	r0, r6
  4026a2:	f001 f9e3 	bl	403a6c <_sbrk_r>
  4026a6:	68ba      	ldr	r2, [r7, #8]
  4026a8:	1a83      	subs	r3, r0, r2
  4026aa:	2b0f      	cmp	r3, #15
  4026ac:	ddde      	ble.n	40266c <_malloc_trim_r+0x3c>
  4026ae:	4c06      	ldr	r4, [pc, #24]	; (4026c8 <_malloc_trim_r+0x98>)
  4026b0:	4904      	ldr	r1, [pc, #16]	; (4026c4 <_malloc_trim_r+0x94>)
  4026b2:	6824      	ldr	r4, [r4, #0]
  4026b4:	f043 0301 	orr.w	r3, r3, #1
  4026b8:	1b00      	subs	r0, r0, r4
  4026ba:	6053      	str	r3, [r2, #4]
  4026bc:	6008      	str	r0, [r1, #0]
  4026be:	e7d5      	b.n	40266c <_malloc_trim_r+0x3c>
  4026c0:	20000468 	.word	0x20000468
  4026c4:	2000091c 	.word	0x2000091c
  4026c8:	20000874 	.word	0x20000874

004026cc <_free_r>:
  4026cc:	2900      	cmp	r1, #0
  4026ce:	d045      	beq.n	40275c <_free_r+0x90>
  4026d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4026d4:	460d      	mov	r5, r1
  4026d6:	4680      	mov	r8, r0
  4026d8:	f000 ff40 	bl	40355c <__malloc_lock>
  4026dc:	f855 7c04 	ldr.w	r7, [r5, #-4]
  4026e0:	496a      	ldr	r1, [pc, #424]	; (40288c <_free_r+0x1c0>)
  4026e2:	f027 0301 	bic.w	r3, r7, #1
  4026e6:	f1a5 0408 	sub.w	r4, r5, #8
  4026ea:	18e2      	adds	r2, r4, r3
  4026ec:	688e      	ldr	r6, [r1, #8]
  4026ee:	6850      	ldr	r0, [r2, #4]
  4026f0:	42b2      	cmp	r2, r6
  4026f2:	f020 0003 	bic.w	r0, r0, #3
  4026f6:	d062      	beq.n	4027be <_free_r+0xf2>
  4026f8:	07fe      	lsls	r6, r7, #31
  4026fa:	6050      	str	r0, [r2, #4]
  4026fc:	d40b      	bmi.n	402716 <_free_r+0x4a>
  4026fe:	f855 7c08 	ldr.w	r7, [r5, #-8]
  402702:	1be4      	subs	r4, r4, r7
  402704:	f101 0e08 	add.w	lr, r1, #8
  402708:	68a5      	ldr	r5, [r4, #8]
  40270a:	4575      	cmp	r5, lr
  40270c:	443b      	add	r3, r7
  40270e:	d06f      	beq.n	4027f0 <_free_r+0x124>
  402710:	68e7      	ldr	r7, [r4, #12]
  402712:	60ef      	str	r7, [r5, #12]
  402714:	60bd      	str	r5, [r7, #8]
  402716:	1815      	adds	r5, r2, r0
  402718:	686d      	ldr	r5, [r5, #4]
  40271a:	07ed      	lsls	r5, r5, #31
  40271c:	d542      	bpl.n	4027a4 <_free_r+0xd8>
  40271e:	f043 0201 	orr.w	r2, r3, #1
  402722:	6062      	str	r2, [r4, #4]
  402724:	50e3      	str	r3, [r4, r3]
  402726:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  40272a:	d218      	bcs.n	40275e <_free_r+0x92>
  40272c:	08db      	lsrs	r3, r3, #3
  40272e:	1c5a      	adds	r2, r3, #1
  402730:	684d      	ldr	r5, [r1, #4]
  402732:	f851 7032 	ldr.w	r7, [r1, r2, lsl #3]
  402736:	60a7      	str	r7, [r4, #8]
  402738:	2001      	movs	r0, #1
  40273a:	109b      	asrs	r3, r3, #2
  40273c:	fa00 f303 	lsl.w	r3, r0, r3
  402740:	eb01 00c2 	add.w	r0, r1, r2, lsl #3
  402744:	431d      	orrs	r5, r3
  402746:	3808      	subs	r0, #8
  402748:	60e0      	str	r0, [r4, #12]
  40274a:	604d      	str	r5, [r1, #4]
  40274c:	f841 4032 	str.w	r4, [r1, r2, lsl #3]
  402750:	60fc      	str	r4, [r7, #12]
  402752:	4640      	mov	r0, r8
  402754:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  402758:	f000 bf02 	b.w	403560 <__malloc_unlock>
  40275c:	4770      	bx	lr
  40275e:	0a5a      	lsrs	r2, r3, #9
  402760:	2a04      	cmp	r2, #4
  402762:	d853      	bhi.n	40280c <_free_r+0x140>
  402764:	099a      	lsrs	r2, r3, #6
  402766:	f102 0739 	add.w	r7, r2, #57	; 0x39
  40276a:	007f      	lsls	r7, r7, #1
  40276c:	f102 0538 	add.w	r5, r2, #56	; 0x38
  402770:	eb01 0087 	add.w	r0, r1, r7, lsl #2
  402774:	f851 2027 	ldr.w	r2, [r1, r7, lsl #2]
  402778:	4944      	ldr	r1, [pc, #272]	; (40288c <_free_r+0x1c0>)
  40277a:	3808      	subs	r0, #8
  40277c:	4290      	cmp	r0, r2
  40277e:	d04d      	beq.n	40281c <_free_r+0x150>
  402780:	6851      	ldr	r1, [r2, #4]
  402782:	f021 0103 	bic.w	r1, r1, #3
  402786:	428b      	cmp	r3, r1
  402788:	d202      	bcs.n	402790 <_free_r+0xc4>
  40278a:	6892      	ldr	r2, [r2, #8]
  40278c:	4290      	cmp	r0, r2
  40278e:	d1f7      	bne.n	402780 <_free_r+0xb4>
  402790:	68d0      	ldr	r0, [r2, #12]
  402792:	60e0      	str	r0, [r4, #12]
  402794:	60a2      	str	r2, [r4, #8]
  402796:	6084      	str	r4, [r0, #8]
  402798:	60d4      	str	r4, [r2, #12]
  40279a:	4640      	mov	r0, r8
  40279c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  4027a0:	f000 bede 	b.w	403560 <__malloc_unlock>
  4027a4:	6895      	ldr	r5, [r2, #8]
  4027a6:	4f3a      	ldr	r7, [pc, #232]	; (402890 <_free_r+0x1c4>)
  4027a8:	42bd      	cmp	r5, r7
  4027aa:	4403      	add	r3, r0
  4027ac:	d03f      	beq.n	40282e <_free_r+0x162>
  4027ae:	68d0      	ldr	r0, [r2, #12]
  4027b0:	60e8      	str	r0, [r5, #12]
  4027b2:	f043 0201 	orr.w	r2, r3, #1
  4027b6:	6085      	str	r5, [r0, #8]
  4027b8:	6062      	str	r2, [r4, #4]
  4027ba:	50e3      	str	r3, [r4, r3]
  4027bc:	e7b3      	b.n	402726 <_free_r+0x5a>
  4027be:	07ff      	lsls	r7, r7, #31
  4027c0:	4403      	add	r3, r0
  4027c2:	d407      	bmi.n	4027d4 <_free_r+0x108>
  4027c4:	f855 2c08 	ldr.w	r2, [r5, #-8]
  4027c8:	1aa4      	subs	r4, r4, r2
  4027ca:	4413      	add	r3, r2
  4027cc:	68a0      	ldr	r0, [r4, #8]
  4027ce:	68e2      	ldr	r2, [r4, #12]
  4027d0:	60c2      	str	r2, [r0, #12]
  4027d2:	6090      	str	r0, [r2, #8]
  4027d4:	4a2f      	ldr	r2, [pc, #188]	; (402894 <_free_r+0x1c8>)
  4027d6:	6812      	ldr	r2, [r2, #0]
  4027d8:	f043 0001 	orr.w	r0, r3, #1
  4027dc:	4293      	cmp	r3, r2
  4027de:	6060      	str	r0, [r4, #4]
  4027e0:	608c      	str	r4, [r1, #8]
  4027e2:	d3b6      	bcc.n	402752 <_free_r+0x86>
  4027e4:	4b2c      	ldr	r3, [pc, #176]	; (402898 <_free_r+0x1cc>)
  4027e6:	4640      	mov	r0, r8
  4027e8:	6819      	ldr	r1, [r3, #0]
  4027ea:	f7ff ff21 	bl	402630 <_malloc_trim_r>
  4027ee:	e7b0      	b.n	402752 <_free_r+0x86>
  4027f0:	1811      	adds	r1, r2, r0
  4027f2:	6849      	ldr	r1, [r1, #4]
  4027f4:	07c9      	lsls	r1, r1, #31
  4027f6:	d444      	bmi.n	402882 <_free_r+0x1b6>
  4027f8:	6891      	ldr	r1, [r2, #8]
  4027fa:	68d2      	ldr	r2, [r2, #12]
  4027fc:	60ca      	str	r2, [r1, #12]
  4027fe:	4403      	add	r3, r0
  402800:	f043 0001 	orr.w	r0, r3, #1
  402804:	6091      	str	r1, [r2, #8]
  402806:	6060      	str	r0, [r4, #4]
  402808:	50e3      	str	r3, [r4, r3]
  40280a:	e7a2      	b.n	402752 <_free_r+0x86>
  40280c:	2a14      	cmp	r2, #20
  40280e:	d817      	bhi.n	402840 <_free_r+0x174>
  402810:	f102 075c 	add.w	r7, r2, #92	; 0x5c
  402814:	007f      	lsls	r7, r7, #1
  402816:	f102 055b 	add.w	r5, r2, #91	; 0x5b
  40281a:	e7a9      	b.n	402770 <_free_r+0xa4>
  40281c:	10aa      	asrs	r2, r5, #2
  40281e:	684b      	ldr	r3, [r1, #4]
  402820:	2501      	movs	r5, #1
  402822:	fa05 f202 	lsl.w	r2, r5, r2
  402826:	4313      	orrs	r3, r2
  402828:	604b      	str	r3, [r1, #4]
  40282a:	4602      	mov	r2, r0
  40282c:	e7b1      	b.n	402792 <_free_r+0xc6>
  40282e:	f043 0201 	orr.w	r2, r3, #1
  402832:	614c      	str	r4, [r1, #20]
  402834:	610c      	str	r4, [r1, #16]
  402836:	60e5      	str	r5, [r4, #12]
  402838:	60a5      	str	r5, [r4, #8]
  40283a:	6062      	str	r2, [r4, #4]
  40283c:	50e3      	str	r3, [r4, r3]
  40283e:	e788      	b.n	402752 <_free_r+0x86>
  402840:	2a54      	cmp	r2, #84	; 0x54
  402842:	d806      	bhi.n	402852 <_free_r+0x186>
  402844:	0b1a      	lsrs	r2, r3, #12
  402846:	f102 076f 	add.w	r7, r2, #111	; 0x6f
  40284a:	007f      	lsls	r7, r7, #1
  40284c:	f102 056e 	add.w	r5, r2, #110	; 0x6e
  402850:	e78e      	b.n	402770 <_free_r+0xa4>
  402852:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  402856:	d806      	bhi.n	402866 <_free_r+0x19a>
  402858:	0bda      	lsrs	r2, r3, #15
  40285a:	f102 0778 	add.w	r7, r2, #120	; 0x78
  40285e:	007f      	lsls	r7, r7, #1
  402860:	f102 0577 	add.w	r5, r2, #119	; 0x77
  402864:	e784      	b.n	402770 <_free_r+0xa4>
  402866:	f240 5054 	movw	r0, #1364	; 0x554
  40286a:	4282      	cmp	r2, r0
  40286c:	d806      	bhi.n	40287c <_free_r+0x1b0>
  40286e:	0c9a      	lsrs	r2, r3, #18
  402870:	f102 077d 	add.w	r7, r2, #125	; 0x7d
  402874:	007f      	lsls	r7, r7, #1
  402876:	f102 057c 	add.w	r5, r2, #124	; 0x7c
  40287a:	e779      	b.n	402770 <_free_r+0xa4>
  40287c:	27fe      	movs	r7, #254	; 0xfe
  40287e:	257e      	movs	r5, #126	; 0x7e
  402880:	e776      	b.n	402770 <_free_r+0xa4>
  402882:	f043 0201 	orr.w	r2, r3, #1
  402886:	6062      	str	r2, [r4, #4]
  402888:	50e3      	str	r3, [r4, r3]
  40288a:	e762      	b.n	402752 <_free_r+0x86>
  40288c:	20000468 	.word	0x20000468
  402890:	20000470 	.word	0x20000470
  402894:	20000870 	.word	0x20000870
  402898:	20000918 	.word	0x20000918

0040289c <__sfvwrite_r>:
  40289c:	6893      	ldr	r3, [r2, #8]
  40289e:	2b00      	cmp	r3, #0
  4028a0:	d076      	beq.n	402990 <__sfvwrite_r+0xf4>
  4028a2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4028a6:	898b      	ldrh	r3, [r1, #12]
  4028a8:	b085      	sub	sp, #20
  4028aa:	460c      	mov	r4, r1
  4028ac:	0719      	lsls	r1, r3, #28
  4028ae:	9001      	str	r0, [sp, #4]
  4028b0:	4616      	mov	r6, r2
  4028b2:	d529      	bpl.n	402908 <__sfvwrite_r+0x6c>
  4028b4:	6922      	ldr	r2, [r4, #16]
  4028b6:	b33a      	cbz	r2, 402908 <__sfvwrite_r+0x6c>
  4028b8:	f003 0802 	and.w	r8, r3, #2
  4028bc:	fa1f f088 	uxth.w	r0, r8
  4028c0:	6835      	ldr	r5, [r6, #0]
  4028c2:	2800      	cmp	r0, #0
  4028c4:	d02f      	beq.n	402926 <__sfvwrite_r+0x8a>
  4028c6:	f04f 0900 	mov.w	r9, #0
  4028ca:	4fb4      	ldr	r7, [pc, #720]	; (402b9c <__sfvwrite_r+0x300>)
  4028cc:	46c8      	mov	r8, r9
  4028ce:	46b2      	mov	sl, r6
  4028d0:	45b8      	cmp	r8, r7
  4028d2:	4643      	mov	r3, r8
  4028d4:	464a      	mov	r2, r9
  4028d6:	bf28      	it	cs
  4028d8:	463b      	movcs	r3, r7
  4028da:	9801      	ldr	r0, [sp, #4]
  4028dc:	f1b8 0f00 	cmp.w	r8, #0
  4028e0:	d050      	beq.n	402984 <__sfvwrite_r+0xe8>
  4028e2:	69e1      	ldr	r1, [r4, #28]
  4028e4:	6a66      	ldr	r6, [r4, #36]	; 0x24
  4028e6:	47b0      	blx	r6
  4028e8:	2800      	cmp	r0, #0
  4028ea:	dd71      	ble.n	4029d0 <__sfvwrite_r+0x134>
  4028ec:	f8da 3008 	ldr.w	r3, [sl, #8]
  4028f0:	1a1b      	subs	r3, r3, r0
  4028f2:	4481      	add	r9, r0
  4028f4:	ebc0 0808 	rsb	r8, r0, r8
  4028f8:	f8ca 3008 	str.w	r3, [sl, #8]
  4028fc:	2b00      	cmp	r3, #0
  4028fe:	d1e7      	bne.n	4028d0 <__sfvwrite_r+0x34>
  402900:	2000      	movs	r0, #0
  402902:	b005      	add	sp, #20
  402904:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402908:	4621      	mov	r1, r4
  40290a:	9801      	ldr	r0, [sp, #4]
  40290c:	f7ff fc56 	bl	4021bc <__swsetup_r>
  402910:	2800      	cmp	r0, #0
  402912:	f040 813a 	bne.w	402b8a <__sfvwrite_r+0x2ee>
  402916:	89a3      	ldrh	r3, [r4, #12]
  402918:	6835      	ldr	r5, [r6, #0]
  40291a:	f003 0802 	and.w	r8, r3, #2
  40291e:	fa1f f088 	uxth.w	r0, r8
  402922:	2800      	cmp	r0, #0
  402924:	d1cf      	bne.n	4028c6 <__sfvwrite_r+0x2a>
  402926:	f013 0901 	ands.w	r9, r3, #1
  40292a:	d15b      	bne.n	4029e4 <__sfvwrite_r+0x148>
  40292c:	464f      	mov	r7, r9
  40292e:	9602      	str	r6, [sp, #8]
  402930:	b31f      	cbz	r7, 40297a <__sfvwrite_r+0xde>
  402932:	059a      	lsls	r2, r3, #22
  402934:	f8d4 8008 	ldr.w	r8, [r4, #8]
  402938:	d52c      	bpl.n	402994 <__sfvwrite_r+0xf8>
  40293a:	4547      	cmp	r7, r8
  40293c:	46c2      	mov	sl, r8
  40293e:	f0c0 80a4 	bcc.w	402a8a <__sfvwrite_r+0x1ee>
  402942:	f413 6f90 	tst.w	r3, #1152	; 0x480
  402946:	f040 80b1 	bne.w	402aac <__sfvwrite_r+0x210>
  40294a:	6820      	ldr	r0, [r4, #0]
  40294c:	4652      	mov	r2, sl
  40294e:	4649      	mov	r1, r9
  402950:	f000 fda0 	bl	403494 <memmove>
  402954:	68a0      	ldr	r0, [r4, #8]
  402956:	6823      	ldr	r3, [r4, #0]
  402958:	ebc8 0000 	rsb	r0, r8, r0
  40295c:	4453      	add	r3, sl
  40295e:	60a0      	str	r0, [r4, #8]
  402960:	6023      	str	r3, [r4, #0]
  402962:	4638      	mov	r0, r7
  402964:	9a02      	ldr	r2, [sp, #8]
  402966:	6893      	ldr	r3, [r2, #8]
  402968:	1a1b      	subs	r3, r3, r0
  40296a:	4481      	add	r9, r0
  40296c:	1a3f      	subs	r7, r7, r0
  40296e:	6093      	str	r3, [r2, #8]
  402970:	2b00      	cmp	r3, #0
  402972:	d0c5      	beq.n	402900 <__sfvwrite_r+0x64>
  402974:	89a3      	ldrh	r3, [r4, #12]
  402976:	2f00      	cmp	r7, #0
  402978:	d1db      	bne.n	402932 <__sfvwrite_r+0x96>
  40297a:	f8d5 9000 	ldr.w	r9, [r5]
  40297e:	686f      	ldr	r7, [r5, #4]
  402980:	3508      	adds	r5, #8
  402982:	e7d5      	b.n	402930 <__sfvwrite_r+0x94>
  402984:	f8d5 9000 	ldr.w	r9, [r5]
  402988:	f8d5 8004 	ldr.w	r8, [r5, #4]
  40298c:	3508      	adds	r5, #8
  40298e:	e79f      	b.n	4028d0 <__sfvwrite_r+0x34>
  402990:	2000      	movs	r0, #0
  402992:	4770      	bx	lr
  402994:	6820      	ldr	r0, [r4, #0]
  402996:	6923      	ldr	r3, [r4, #16]
  402998:	4298      	cmp	r0, r3
  40299a:	d803      	bhi.n	4029a4 <__sfvwrite_r+0x108>
  40299c:	6961      	ldr	r1, [r4, #20]
  40299e:	428f      	cmp	r7, r1
  4029a0:	f080 80b7 	bcs.w	402b12 <__sfvwrite_r+0x276>
  4029a4:	45b8      	cmp	r8, r7
  4029a6:	bf28      	it	cs
  4029a8:	46b8      	movcs	r8, r7
  4029aa:	4642      	mov	r2, r8
  4029ac:	4649      	mov	r1, r9
  4029ae:	f000 fd71 	bl	403494 <memmove>
  4029b2:	68a3      	ldr	r3, [r4, #8]
  4029b4:	6822      	ldr	r2, [r4, #0]
  4029b6:	ebc8 0303 	rsb	r3, r8, r3
  4029ba:	4442      	add	r2, r8
  4029bc:	60a3      	str	r3, [r4, #8]
  4029be:	6022      	str	r2, [r4, #0]
  4029c0:	2b00      	cmp	r3, #0
  4029c2:	d149      	bne.n	402a58 <__sfvwrite_r+0x1bc>
  4029c4:	4621      	mov	r1, r4
  4029c6:	9801      	ldr	r0, [sp, #4]
  4029c8:	f7ff fd10 	bl	4023ec <_fflush_r>
  4029cc:	2800      	cmp	r0, #0
  4029ce:	d043      	beq.n	402a58 <__sfvwrite_r+0x1bc>
  4029d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4029d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4029d8:	f04f 30ff 	mov.w	r0, #4294967295
  4029dc:	81a3      	strh	r3, [r4, #12]
  4029de:	b005      	add	sp, #20
  4029e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4029e4:	4680      	mov	r8, r0
  4029e6:	9002      	str	r0, [sp, #8]
  4029e8:	4682      	mov	sl, r0
  4029ea:	4681      	mov	r9, r0
  4029ec:	f1b9 0f00 	cmp.w	r9, #0
  4029f0:	d02a      	beq.n	402a48 <__sfvwrite_r+0x1ac>
  4029f2:	9b02      	ldr	r3, [sp, #8]
  4029f4:	2b00      	cmp	r3, #0
  4029f6:	d04c      	beq.n	402a92 <__sfvwrite_r+0x1f6>
  4029f8:	6820      	ldr	r0, [r4, #0]
  4029fa:	6923      	ldr	r3, [r4, #16]
  4029fc:	6962      	ldr	r2, [r4, #20]
  4029fe:	45c8      	cmp	r8, r9
  402a00:	46c3      	mov	fp, r8
  402a02:	bf28      	it	cs
  402a04:	46cb      	movcs	fp, r9
  402a06:	4298      	cmp	r0, r3
  402a08:	465f      	mov	r7, fp
  402a0a:	d904      	bls.n	402a16 <__sfvwrite_r+0x17a>
  402a0c:	68a3      	ldr	r3, [r4, #8]
  402a0e:	4413      	add	r3, r2
  402a10:	459b      	cmp	fp, r3
  402a12:	f300 8090 	bgt.w	402b36 <__sfvwrite_r+0x29a>
  402a16:	4593      	cmp	fp, r2
  402a18:	db20      	blt.n	402a5c <__sfvwrite_r+0x1c0>
  402a1a:	4613      	mov	r3, r2
  402a1c:	6a67      	ldr	r7, [r4, #36]	; 0x24
  402a1e:	69e1      	ldr	r1, [r4, #28]
  402a20:	9801      	ldr	r0, [sp, #4]
  402a22:	4652      	mov	r2, sl
  402a24:	47b8      	blx	r7
  402a26:	1e07      	subs	r7, r0, #0
  402a28:	ddd2      	ble.n	4029d0 <__sfvwrite_r+0x134>
  402a2a:	ebb8 0807 	subs.w	r8, r8, r7
  402a2e:	d023      	beq.n	402a78 <__sfvwrite_r+0x1dc>
  402a30:	68b3      	ldr	r3, [r6, #8]
  402a32:	1bdb      	subs	r3, r3, r7
  402a34:	44ba      	add	sl, r7
  402a36:	ebc7 0909 	rsb	r9, r7, r9
  402a3a:	60b3      	str	r3, [r6, #8]
  402a3c:	2b00      	cmp	r3, #0
  402a3e:	f43f af5f 	beq.w	402900 <__sfvwrite_r+0x64>
  402a42:	f1b9 0f00 	cmp.w	r9, #0
  402a46:	d1d4      	bne.n	4029f2 <__sfvwrite_r+0x156>
  402a48:	2300      	movs	r3, #0
  402a4a:	f8d5 a000 	ldr.w	sl, [r5]
  402a4e:	f8d5 9004 	ldr.w	r9, [r5, #4]
  402a52:	9302      	str	r3, [sp, #8]
  402a54:	3508      	adds	r5, #8
  402a56:	e7c9      	b.n	4029ec <__sfvwrite_r+0x150>
  402a58:	4640      	mov	r0, r8
  402a5a:	e783      	b.n	402964 <__sfvwrite_r+0xc8>
  402a5c:	465a      	mov	r2, fp
  402a5e:	4651      	mov	r1, sl
  402a60:	f000 fd18 	bl	403494 <memmove>
  402a64:	68a2      	ldr	r2, [r4, #8]
  402a66:	6823      	ldr	r3, [r4, #0]
  402a68:	ebcb 0202 	rsb	r2, fp, r2
  402a6c:	445b      	add	r3, fp
  402a6e:	ebb8 0807 	subs.w	r8, r8, r7
  402a72:	60a2      	str	r2, [r4, #8]
  402a74:	6023      	str	r3, [r4, #0]
  402a76:	d1db      	bne.n	402a30 <__sfvwrite_r+0x194>
  402a78:	4621      	mov	r1, r4
  402a7a:	9801      	ldr	r0, [sp, #4]
  402a7c:	f7ff fcb6 	bl	4023ec <_fflush_r>
  402a80:	2800      	cmp	r0, #0
  402a82:	d1a5      	bne.n	4029d0 <__sfvwrite_r+0x134>
  402a84:	f8cd 8008 	str.w	r8, [sp, #8]
  402a88:	e7d2      	b.n	402a30 <__sfvwrite_r+0x194>
  402a8a:	6820      	ldr	r0, [r4, #0]
  402a8c:	46b8      	mov	r8, r7
  402a8e:	46ba      	mov	sl, r7
  402a90:	e75c      	b.n	40294c <__sfvwrite_r+0xb0>
  402a92:	464a      	mov	r2, r9
  402a94:	210a      	movs	r1, #10
  402a96:	4650      	mov	r0, sl
  402a98:	f000 fc12 	bl	4032c0 <memchr>
  402a9c:	2800      	cmp	r0, #0
  402a9e:	d06f      	beq.n	402b80 <__sfvwrite_r+0x2e4>
  402aa0:	3001      	adds	r0, #1
  402aa2:	2301      	movs	r3, #1
  402aa4:	ebca 0800 	rsb	r8, sl, r0
  402aa8:	9302      	str	r3, [sp, #8]
  402aaa:	e7a5      	b.n	4029f8 <__sfvwrite_r+0x15c>
  402aac:	6962      	ldr	r2, [r4, #20]
  402aae:	6820      	ldr	r0, [r4, #0]
  402ab0:	6921      	ldr	r1, [r4, #16]
  402ab2:	eb02 0842 	add.w	r8, r2, r2, lsl #1
  402ab6:	ebc1 0a00 	rsb	sl, r1, r0
  402aba:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
  402abe:	f10a 0001 	add.w	r0, sl, #1
  402ac2:	ea4f 0868 	mov.w	r8, r8, asr #1
  402ac6:	4438      	add	r0, r7
  402ac8:	4540      	cmp	r0, r8
  402aca:	4642      	mov	r2, r8
  402acc:	bf84      	itt	hi
  402ace:	4680      	movhi	r8, r0
  402ad0:	4642      	movhi	r2, r8
  402ad2:	055b      	lsls	r3, r3, #21
  402ad4:	d542      	bpl.n	402b5c <__sfvwrite_r+0x2c0>
  402ad6:	4611      	mov	r1, r2
  402ad8:	9801      	ldr	r0, [sp, #4]
  402ada:	f000 f937 	bl	402d4c <_malloc_r>
  402ade:	4683      	mov	fp, r0
  402ae0:	2800      	cmp	r0, #0
  402ae2:	d055      	beq.n	402b90 <__sfvwrite_r+0x2f4>
  402ae4:	4652      	mov	r2, sl
  402ae6:	6921      	ldr	r1, [r4, #16]
  402ae8:	f000 fc3a 	bl	403360 <memcpy>
  402aec:	89a3      	ldrh	r3, [r4, #12]
  402aee:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
  402af2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  402af6:	81a3      	strh	r3, [r4, #12]
  402af8:	ebca 0308 	rsb	r3, sl, r8
  402afc:	eb0b 000a 	add.w	r0, fp, sl
  402b00:	f8c4 8014 	str.w	r8, [r4, #20]
  402b04:	f8c4 b010 	str.w	fp, [r4, #16]
  402b08:	6020      	str	r0, [r4, #0]
  402b0a:	60a3      	str	r3, [r4, #8]
  402b0c:	46b8      	mov	r8, r7
  402b0e:	46ba      	mov	sl, r7
  402b10:	e71c      	b.n	40294c <__sfvwrite_r+0xb0>
  402b12:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
  402b16:	42bb      	cmp	r3, r7
  402b18:	bf28      	it	cs
  402b1a:	463b      	movcs	r3, r7
  402b1c:	464a      	mov	r2, r9
  402b1e:	fb93 f3f1 	sdiv	r3, r3, r1
  402b22:	9801      	ldr	r0, [sp, #4]
  402b24:	6a66      	ldr	r6, [r4, #36]	; 0x24
  402b26:	fb01 f303 	mul.w	r3, r1, r3
  402b2a:	69e1      	ldr	r1, [r4, #28]
  402b2c:	47b0      	blx	r6
  402b2e:	2800      	cmp	r0, #0
  402b30:	f73f af18 	bgt.w	402964 <__sfvwrite_r+0xc8>
  402b34:	e74c      	b.n	4029d0 <__sfvwrite_r+0x134>
  402b36:	461a      	mov	r2, r3
  402b38:	4651      	mov	r1, sl
  402b3a:	9303      	str	r3, [sp, #12]
  402b3c:	f000 fcaa 	bl	403494 <memmove>
  402b40:	6822      	ldr	r2, [r4, #0]
  402b42:	9b03      	ldr	r3, [sp, #12]
  402b44:	9801      	ldr	r0, [sp, #4]
  402b46:	441a      	add	r2, r3
  402b48:	6022      	str	r2, [r4, #0]
  402b4a:	4621      	mov	r1, r4
  402b4c:	f7ff fc4e 	bl	4023ec <_fflush_r>
  402b50:	9b03      	ldr	r3, [sp, #12]
  402b52:	2800      	cmp	r0, #0
  402b54:	f47f af3c 	bne.w	4029d0 <__sfvwrite_r+0x134>
  402b58:	461f      	mov	r7, r3
  402b5a:	e766      	b.n	402a2a <__sfvwrite_r+0x18e>
  402b5c:	9801      	ldr	r0, [sp, #4]
  402b5e:	f000 fd01 	bl	403564 <_realloc_r>
  402b62:	4683      	mov	fp, r0
  402b64:	2800      	cmp	r0, #0
  402b66:	d1c7      	bne.n	402af8 <__sfvwrite_r+0x25c>
  402b68:	9d01      	ldr	r5, [sp, #4]
  402b6a:	6921      	ldr	r1, [r4, #16]
  402b6c:	4628      	mov	r0, r5
  402b6e:	f7ff fdad 	bl	4026cc <_free_r>
  402b72:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  402b76:	220c      	movs	r2, #12
  402b78:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  402b7c:	602a      	str	r2, [r5, #0]
  402b7e:	e729      	b.n	4029d4 <__sfvwrite_r+0x138>
  402b80:	2301      	movs	r3, #1
  402b82:	f109 0801 	add.w	r8, r9, #1
  402b86:	9302      	str	r3, [sp, #8]
  402b88:	e736      	b.n	4029f8 <__sfvwrite_r+0x15c>
  402b8a:	f04f 30ff 	mov.w	r0, #4294967295
  402b8e:	e6b8      	b.n	402902 <__sfvwrite_r+0x66>
  402b90:	9a01      	ldr	r2, [sp, #4]
  402b92:	230c      	movs	r3, #12
  402b94:	6013      	str	r3, [r2, #0]
  402b96:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  402b9a:	e71b      	b.n	4029d4 <__sfvwrite_r+0x138>
  402b9c:	7ffffc00 	.word	0x7ffffc00

00402ba0 <_fwalk>:
  402ba0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  402ba4:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
  402ba8:	d01b      	beq.n	402be2 <_fwalk+0x42>
  402baa:	4688      	mov	r8, r1
  402bac:	2600      	movs	r6, #0
  402bae:	687d      	ldr	r5, [r7, #4]
  402bb0:	68bc      	ldr	r4, [r7, #8]
  402bb2:	3d01      	subs	r5, #1
  402bb4:	d40f      	bmi.n	402bd6 <_fwalk+0x36>
  402bb6:	89a3      	ldrh	r3, [r4, #12]
  402bb8:	2b01      	cmp	r3, #1
  402bba:	f105 35ff 	add.w	r5, r5, #4294967295
  402bbe:	d906      	bls.n	402bce <_fwalk+0x2e>
  402bc0:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
  402bc4:	3301      	adds	r3, #1
  402bc6:	4620      	mov	r0, r4
  402bc8:	d001      	beq.n	402bce <_fwalk+0x2e>
  402bca:	47c0      	blx	r8
  402bcc:	4306      	orrs	r6, r0
  402bce:	1c6b      	adds	r3, r5, #1
  402bd0:	f104 0468 	add.w	r4, r4, #104	; 0x68
  402bd4:	d1ef      	bne.n	402bb6 <_fwalk+0x16>
  402bd6:	683f      	ldr	r7, [r7, #0]
  402bd8:	2f00      	cmp	r7, #0
  402bda:	d1e8      	bne.n	402bae <_fwalk+0xe>
  402bdc:	4630      	mov	r0, r6
  402bde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  402be2:	463e      	mov	r6, r7
  402be4:	4630      	mov	r0, r6
  402be6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  402bea:	bf00      	nop

00402bec <_fwalk_reent>:
  402bec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  402bf0:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
  402bf4:	d01f      	beq.n	402c36 <_fwalk_reent+0x4a>
  402bf6:	4688      	mov	r8, r1
  402bf8:	4606      	mov	r6, r0
  402bfa:	f04f 0900 	mov.w	r9, #0
  402bfe:	687d      	ldr	r5, [r7, #4]
  402c00:	68bc      	ldr	r4, [r7, #8]
  402c02:	3d01      	subs	r5, #1
  402c04:	d411      	bmi.n	402c2a <_fwalk_reent+0x3e>
  402c06:	89a3      	ldrh	r3, [r4, #12]
  402c08:	2b01      	cmp	r3, #1
  402c0a:	f105 35ff 	add.w	r5, r5, #4294967295
  402c0e:	d908      	bls.n	402c22 <_fwalk_reent+0x36>
  402c10:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
  402c14:	3301      	adds	r3, #1
  402c16:	4621      	mov	r1, r4
  402c18:	4630      	mov	r0, r6
  402c1a:	d002      	beq.n	402c22 <_fwalk_reent+0x36>
  402c1c:	47c0      	blx	r8
  402c1e:	ea49 0900 	orr.w	r9, r9, r0
  402c22:	1c6b      	adds	r3, r5, #1
  402c24:	f104 0468 	add.w	r4, r4, #104	; 0x68
  402c28:	d1ed      	bne.n	402c06 <_fwalk_reent+0x1a>
  402c2a:	683f      	ldr	r7, [r7, #0]
  402c2c:	2f00      	cmp	r7, #0
  402c2e:	d1e6      	bne.n	402bfe <_fwalk_reent+0x12>
  402c30:	4648      	mov	r0, r9
  402c32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  402c36:	46b9      	mov	r9, r7
  402c38:	4648      	mov	r0, r9
  402c3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  402c3e:	bf00      	nop

00402c40 <__locale_charset>:
  402c40:	4800      	ldr	r0, [pc, #0]	; (402c44 <__locale_charset+0x4>)
  402c42:	4770      	bx	lr
  402c44:	20000444 	.word	0x20000444

00402c48 <__locale_mb_cur_max>:
  402c48:	4b01      	ldr	r3, [pc, #4]	; (402c50 <__locale_mb_cur_max+0x8>)
  402c4a:	6818      	ldr	r0, [r3, #0]
  402c4c:	4770      	bx	lr
  402c4e:	bf00      	nop
  402c50:	20000464 	.word	0x20000464

00402c54 <__swhatbuf_r>:
  402c54:	b570      	push	{r4, r5, r6, lr}
  402c56:	460d      	mov	r5, r1
  402c58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  402c5c:	2900      	cmp	r1, #0
  402c5e:	b090      	sub	sp, #64	; 0x40
  402c60:	4614      	mov	r4, r2
  402c62:	461e      	mov	r6, r3
  402c64:	db14      	blt.n	402c90 <__swhatbuf_r+0x3c>
  402c66:	aa01      	add	r2, sp, #4
  402c68:	f001 f8a0 	bl	403dac <_fstat_r>
  402c6c:	2800      	cmp	r0, #0
  402c6e:	db0f      	blt.n	402c90 <__swhatbuf_r+0x3c>
  402c70:	9a02      	ldr	r2, [sp, #8]
  402c72:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
  402c76:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
  402c7a:	fab2 f282 	clz	r2, r2
  402c7e:	0952      	lsrs	r2, r2, #5
  402c80:	f44f 6380 	mov.w	r3, #1024	; 0x400
  402c84:	f44f 6000 	mov.w	r0, #2048	; 0x800
  402c88:	6032      	str	r2, [r6, #0]
  402c8a:	6023      	str	r3, [r4, #0]
  402c8c:	b010      	add	sp, #64	; 0x40
  402c8e:	bd70      	pop	{r4, r5, r6, pc}
  402c90:	89a8      	ldrh	r0, [r5, #12]
  402c92:	f000 0080 	and.w	r0, r0, #128	; 0x80
  402c96:	b282      	uxth	r2, r0
  402c98:	2000      	movs	r0, #0
  402c9a:	6030      	str	r0, [r6, #0]
  402c9c:	b11a      	cbz	r2, 402ca6 <__swhatbuf_r+0x52>
  402c9e:	2340      	movs	r3, #64	; 0x40
  402ca0:	6023      	str	r3, [r4, #0]
  402ca2:	b010      	add	sp, #64	; 0x40
  402ca4:	bd70      	pop	{r4, r5, r6, pc}
  402ca6:	f44f 6380 	mov.w	r3, #1024	; 0x400
  402caa:	4610      	mov	r0, r2
  402cac:	6023      	str	r3, [r4, #0]
  402cae:	b010      	add	sp, #64	; 0x40
  402cb0:	bd70      	pop	{r4, r5, r6, pc}
  402cb2:	bf00      	nop

00402cb4 <__smakebuf_r>:
  402cb4:	898a      	ldrh	r2, [r1, #12]
  402cb6:	0792      	lsls	r2, r2, #30
  402cb8:	460b      	mov	r3, r1
  402cba:	d506      	bpl.n	402cca <__smakebuf_r+0x16>
  402cbc:	f101 0243 	add.w	r2, r1, #67	; 0x43
  402cc0:	2101      	movs	r1, #1
  402cc2:	601a      	str	r2, [r3, #0]
  402cc4:	611a      	str	r2, [r3, #16]
  402cc6:	6159      	str	r1, [r3, #20]
  402cc8:	4770      	bx	lr
  402cca:	b5f0      	push	{r4, r5, r6, r7, lr}
  402ccc:	b083      	sub	sp, #12
  402cce:	ab01      	add	r3, sp, #4
  402cd0:	466a      	mov	r2, sp
  402cd2:	460c      	mov	r4, r1
  402cd4:	4605      	mov	r5, r0
  402cd6:	f7ff ffbd 	bl	402c54 <__swhatbuf_r>
  402cda:	9900      	ldr	r1, [sp, #0]
  402cdc:	4606      	mov	r6, r0
  402cde:	4628      	mov	r0, r5
  402ce0:	f000 f834 	bl	402d4c <_malloc_r>
  402ce4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  402ce8:	b1d0      	cbz	r0, 402d20 <__smakebuf_r+0x6c>
  402cea:	9a01      	ldr	r2, [sp, #4]
  402cec:	4f12      	ldr	r7, [pc, #72]	; (402d38 <__smakebuf_r+0x84>)
  402cee:	9900      	ldr	r1, [sp, #0]
  402cf0:	63ef      	str	r7, [r5, #60]	; 0x3c
  402cf2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  402cf6:	81a3      	strh	r3, [r4, #12]
  402cf8:	6020      	str	r0, [r4, #0]
  402cfa:	6120      	str	r0, [r4, #16]
  402cfc:	6161      	str	r1, [r4, #20]
  402cfe:	b91a      	cbnz	r2, 402d08 <__smakebuf_r+0x54>
  402d00:	4333      	orrs	r3, r6
  402d02:	81a3      	strh	r3, [r4, #12]
  402d04:	b003      	add	sp, #12
  402d06:	bdf0      	pop	{r4, r5, r6, r7, pc}
  402d08:	4628      	mov	r0, r5
  402d0a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  402d0e:	f001 f861 	bl	403dd4 <_isatty_r>
  402d12:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  402d16:	2800      	cmp	r0, #0
  402d18:	d0f2      	beq.n	402d00 <__smakebuf_r+0x4c>
  402d1a:	f043 0301 	orr.w	r3, r3, #1
  402d1e:	e7ef      	b.n	402d00 <__smakebuf_r+0x4c>
  402d20:	059a      	lsls	r2, r3, #22
  402d22:	d4ef      	bmi.n	402d04 <__smakebuf_r+0x50>
  402d24:	f104 0243 	add.w	r2, r4, #67	; 0x43
  402d28:	f043 0302 	orr.w	r3, r3, #2
  402d2c:	2101      	movs	r1, #1
  402d2e:	81a3      	strh	r3, [r4, #12]
  402d30:	6022      	str	r2, [r4, #0]
  402d32:	6122      	str	r2, [r4, #16]
  402d34:	6161      	str	r1, [r4, #20]
  402d36:	e7e5      	b.n	402d04 <__smakebuf_r+0x50>
  402d38:	0040243d 	.word	0x0040243d

00402d3c <malloc>:
  402d3c:	4b02      	ldr	r3, [pc, #8]	; (402d48 <malloc+0xc>)
  402d3e:	4601      	mov	r1, r0
  402d40:	6818      	ldr	r0, [r3, #0]
  402d42:	f000 b803 	b.w	402d4c <_malloc_r>
  402d46:	bf00      	nop
  402d48:	20000440 	.word	0x20000440

00402d4c <_malloc_r>:
  402d4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402d50:	f101 050b 	add.w	r5, r1, #11
  402d54:	2d16      	cmp	r5, #22
  402d56:	b083      	sub	sp, #12
  402d58:	4606      	mov	r6, r0
  402d5a:	f240 809f 	bls.w	402e9c <_malloc_r+0x150>
  402d5e:	f035 0507 	bics.w	r5, r5, #7
  402d62:	f100 80bf 	bmi.w	402ee4 <_malloc_r+0x198>
  402d66:	42a9      	cmp	r1, r5
  402d68:	f200 80bc 	bhi.w	402ee4 <_malloc_r+0x198>
  402d6c:	f000 fbf6 	bl	40355c <__malloc_lock>
  402d70:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
  402d74:	f0c0 829c 	bcc.w	4032b0 <_malloc_r+0x564>
  402d78:	0a6b      	lsrs	r3, r5, #9
  402d7a:	f000 80ba 	beq.w	402ef2 <_malloc_r+0x1a6>
  402d7e:	2b04      	cmp	r3, #4
  402d80:	f200 8183 	bhi.w	40308a <_malloc_r+0x33e>
  402d84:	09a8      	lsrs	r0, r5, #6
  402d86:	f100 0e39 	add.w	lr, r0, #57	; 0x39
  402d8a:	ea4f 034e 	mov.w	r3, lr, lsl #1
  402d8e:	3038      	adds	r0, #56	; 0x38
  402d90:	4fc4      	ldr	r7, [pc, #784]	; (4030a4 <_malloc_r+0x358>)
  402d92:	eb07 0383 	add.w	r3, r7, r3, lsl #2
  402d96:	f1a3 0108 	sub.w	r1, r3, #8
  402d9a:	685c      	ldr	r4, [r3, #4]
  402d9c:	42a1      	cmp	r1, r4
  402d9e:	d107      	bne.n	402db0 <_malloc_r+0x64>
  402da0:	e0ac      	b.n	402efc <_malloc_r+0x1b0>
  402da2:	2a00      	cmp	r2, #0
  402da4:	f280 80ac 	bge.w	402f00 <_malloc_r+0x1b4>
  402da8:	68e4      	ldr	r4, [r4, #12]
  402daa:	42a1      	cmp	r1, r4
  402dac:	f000 80a6 	beq.w	402efc <_malloc_r+0x1b0>
  402db0:	6863      	ldr	r3, [r4, #4]
  402db2:	f023 0303 	bic.w	r3, r3, #3
  402db6:	1b5a      	subs	r2, r3, r5
  402db8:	2a0f      	cmp	r2, #15
  402dba:	ddf2      	ble.n	402da2 <_malloc_r+0x56>
  402dbc:	49b9      	ldr	r1, [pc, #740]	; (4030a4 <_malloc_r+0x358>)
  402dbe:	693c      	ldr	r4, [r7, #16]
  402dc0:	f101 0e08 	add.w	lr, r1, #8
  402dc4:	4574      	cmp	r4, lr
  402dc6:	f000 81b3 	beq.w	403130 <_malloc_r+0x3e4>
  402dca:	6863      	ldr	r3, [r4, #4]
  402dcc:	f023 0303 	bic.w	r3, r3, #3
  402dd0:	1b5a      	subs	r2, r3, r5
  402dd2:	2a0f      	cmp	r2, #15
  402dd4:	f300 8199 	bgt.w	40310a <_malloc_r+0x3be>
  402dd8:	2a00      	cmp	r2, #0
  402dda:	f8c1 e014 	str.w	lr, [r1, #20]
  402dde:	f8c1 e010 	str.w	lr, [r1, #16]
  402de2:	f280 809e 	bge.w	402f22 <_malloc_r+0x1d6>
  402de6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  402dea:	f080 8167 	bcs.w	4030bc <_malloc_r+0x370>
  402dee:	08db      	lsrs	r3, r3, #3
  402df0:	f103 0c01 	add.w	ip, r3, #1
  402df4:	2201      	movs	r2, #1
  402df6:	109b      	asrs	r3, r3, #2
  402df8:	fa02 f303 	lsl.w	r3, r2, r3
  402dfc:	684a      	ldr	r2, [r1, #4]
  402dfe:	f851 803c 	ldr.w	r8, [r1, ip, lsl #3]
  402e02:	f8c4 8008 	str.w	r8, [r4, #8]
  402e06:	eb01 09cc 	add.w	r9, r1, ip, lsl #3
  402e0a:	431a      	orrs	r2, r3
  402e0c:	f1a9 0308 	sub.w	r3, r9, #8
  402e10:	60e3      	str	r3, [r4, #12]
  402e12:	604a      	str	r2, [r1, #4]
  402e14:	f841 403c 	str.w	r4, [r1, ip, lsl #3]
  402e18:	f8c8 400c 	str.w	r4, [r8, #12]
  402e1c:	1083      	asrs	r3, r0, #2
  402e1e:	2401      	movs	r4, #1
  402e20:	409c      	lsls	r4, r3
  402e22:	4294      	cmp	r4, r2
  402e24:	f200 808a 	bhi.w	402f3c <_malloc_r+0x1f0>
  402e28:	4214      	tst	r4, r2
  402e2a:	d106      	bne.n	402e3a <_malloc_r+0xee>
  402e2c:	f020 0003 	bic.w	r0, r0, #3
  402e30:	0064      	lsls	r4, r4, #1
  402e32:	4214      	tst	r4, r2
  402e34:	f100 0004 	add.w	r0, r0, #4
  402e38:	d0fa      	beq.n	402e30 <_malloc_r+0xe4>
  402e3a:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
  402e3e:	46cc      	mov	ip, r9
  402e40:	4680      	mov	r8, r0
  402e42:	f8dc 100c 	ldr.w	r1, [ip, #12]
  402e46:	458c      	cmp	ip, r1
  402e48:	d107      	bne.n	402e5a <_malloc_r+0x10e>
  402e4a:	e173      	b.n	403134 <_malloc_r+0x3e8>
  402e4c:	2a00      	cmp	r2, #0
  402e4e:	f280 8181 	bge.w	403154 <_malloc_r+0x408>
  402e52:	68c9      	ldr	r1, [r1, #12]
  402e54:	458c      	cmp	ip, r1
  402e56:	f000 816d 	beq.w	403134 <_malloc_r+0x3e8>
  402e5a:	684b      	ldr	r3, [r1, #4]
  402e5c:	f023 0303 	bic.w	r3, r3, #3
  402e60:	1b5a      	subs	r2, r3, r5
  402e62:	2a0f      	cmp	r2, #15
  402e64:	ddf2      	ble.n	402e4c <_malloc_r+0x100>
  402e66:	460c      	mov	r4, r1
  402e68:	f8d1 c00c 	ldr.w	ip, [r1, #12]
  402e6c:	f854 8f08 	ldr.w	r8, [r4, #8]!
  402e70:	194b      	adds	r3, r1, r5
  402e72:	f045 0501 	orr.w	r5, r5, #1
  402e76:	604d      	str	r5, [r1, #4]
  402e78:	f042 0101 	orr.w	r1, r2, #1
  402e7c:	f8c8 c00c 	str.w	ip, [r8, #12]
  402e80:	4630      	mov	r0, r6
  402e82:	f8cc 8008 	str.w	r8, [ip, #8]
  402e86:	617b      	str	r3, [r7, #20]
  402e88:	613b      	str	r3, [r7, #16]
  402e8a:	f8c3 e00c 	str.w	lr, [r3, #12]
  402e8e:	f8c3 e008 	str.w	lr, [r3, #8]
  402e92:	6059      	str	r1, [r3, #4]
  402e94:	509a      	str	r2, [r3, r2]
  402e96:	f000 fb63 	bl	403560 <__malloc_unlock>
  402e9a:	e01f      	b.n	402edc <_malloc_r+0x190>
  402e9c:	2910      	cmp	r1, #16
  402e9e:	d821      	bhi.n	402ee4 <_malloc_r+0x198>
  402ea0:	f000 fb5c 	bl	40355c <__malloc_lock>
  402ea4:	2510      	movs	r5, #16
  402ea6:	2306      	movs	r3, #6
  402ea8:	2002      	movs	r0, #2
  402eaa:	4f7e      	ldr	r7, [pc, #504]	; (4030a4 <_malloc_r+0x358>)
  402eac:	eb07 0383 	add.w	r3, r7, r3, lsl #2
  402eb0:	f1a3 0208 	sub.w	r2, r3, #8
  402eb4:	685c      	ldr	r4, [r3, #4]
  402eb6:	4294      	cmp	r4, r2
  402eb8:	f000 8145 	beq.w	403146 <_malloc_r+0x3fa>
  402ebc:	6863      	ldr	r3, [r4, #4]
  402ebe:	68e1      	ldr	r1, [r4, #12]
  402ec0:	68a5      	ldr	r5, [r4, #8]
  402ec2:	f023 0303 	bic.w	r3, r3, #3
  402ec6:	4423      	add	r3, r4
  402ec8:	4630      	mov	r0, r6
  402eca:	685a      	ldr	r2, [r3, #4]
  402ecc:	60e9      	str	r1, [r5, #12]
  402ece:	f042 0201 	orr.w	r2, r2, #1
  402ed2:	608d      	str	r5, [r1, #8]
  402ed4:	605a      	str	r2, [r3, #4]
  402ed6:	f000 fb43 	bl	403560 <__malloc_unlock>
  402eda:	3408      	adds	r4, #8
  402edc:	4620      	mov	r0, r4
  402ede:	b003      	add	sp, #12
  402ee0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402ee4:	2400      	movs	r4, #0
  402ee6:	230c      	movs	r3, #12
  402ee8:	4620      	mov	r0, r4
  402eea:	6033      	str	r3, [r6, #0]
  402eec:	b003      	add	sp, #12
  402eee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402ef2:	2380      	movs	r3, #128	; 0x80
  402ef4:	f04f 0e40 	mov.w	lr, #64	; 0x40
  402ef8:	203f      	movs	r0, #63	; 0x3f
  402efa:	e749      	b.n	402d90 <_malloc_r+0x44>
  402efc:	4670      	mov	r0, lr
  402efe:	e75d      	b.n	402dbc <_malloc_r+0x70>
  402f00:	4423      	add	r3, r4
  402f02:	68e1      	ldr	r1, [r4, #12]
  402f04:	685a      	ldr	r2, [r3, #4]
  402f06:	68a5      	ldr	r5, [r4, #8]
  402f08:	f042 0201 	orr.w	r2, r2, #1
  402f0c:	60e9      	str	r1, [r5, #12]
  402f0e:	4630      	mov	r0, r6
  402f10:	608d      	str	r5, [r1, #8]
  402f12:	605a      	str	r2, [r3, #4]
  402f14:	f000 fb24 	bl	403560 <__malloc_unlock>
  402f18:	3408      	adds	r4, #8
  402f1a:	4620      	mov	r0, r4
  402f1c:	b003      	add	sp, #12
  402f1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402f22:	4423      	add	r3, r4
  402f24:	4630      	mov	r0, r6
  402f26:	685a      	ldr	r2, [r3, #4]
  402f28:	f042 0201 	orr.w	r2, r2, #1
  402f2c:	605a      	str	r2, [r3, #4]
  402f2e:	f000 fb17 	bl	403560 <__malloc_unlock>
  402f32:	3408      	adds	r4, #8
  402f34:	4620      	mov	r0, r4
  402f36:	b003      	add	sp, #12
  402f38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402f3c:	68bc      	ldr	r4, [r7, #8]
  402f3e:	6863      	ldr	r3, [r4, #4]
  402f40:	f023 0803 	bic.w	r8, r3, #3
  402f44:	45a8      	cmp	r8, r5
  402f46:	d304      	bcc.n	402f52 <_malloc_r+0x206>
  402f48:	ebc5 0308 	rsb	r3, r5, r8
  402f4c:	2b0f      	cmp	r3, #15
  402f4e:	f300 808c 	bgt.w	40306a <_malloc_r+0x31e>
  402f52:	4b55      	ldr	r3, [pc, #340]	; (4030a8 <_malloc_r+0x35c>)
  402f54:	f8df 9160 	ldr.w	r9, [pc, #352]	; 4030b8 <_malloc_r+0x36c>
  402f58:	681a      	ldr	r2, [r3, #0]
  402f5a:	f8d9 3000 	ldr.w	r3, [r9]
  402f5e:	3301      	adds	r3, #1
  402f60:	442a      	add	r2, r5
  402f62:	eb04 0a08 	add.w	sl, r4, r8
  402f66:	f000 8160 	beq.w	40322a <_malloc_r+0x4de>
  402f6a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
  402f6e:	320f      	adds	r2, #15
  402f70:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
  402f74:	f022 020f 	bic.w	r2, r2, #15
  402f78:	4611      	mov	r1, r2
  402f7a:	4630      	mov	r0, r6
  402f7c:	9201      	str	r2, [sp, #4]
  402f7e:	f000 fd75 	bl	403a6c <_sbrk_r>
  402f82:	f1b0 3fff 	cmp.w	r0, #4294967295
  402f86:	4683      	mov	fp, r0
  402f88:	9a01      	ldr	r2, [sp, #4]
  402f8a:	f000 8158 	beq.w	40323e <_malloc_r+0x4f2>
  402f8e:	4582      	cmp	sl, r0
  402f90:	f200 80fc 	bhi.w	40318c <_malloc_r+0x440>
  402f94:	4b45      	ldr	r3, [pc, #276]	; (4030ac <_malloc_r+0x360>)
  402f96:	6819      	ldr	r1, [r3, #0]
  402f98:	45da      	cmp	sl, fp
  402f9a:	4411      	add	r1, r2
  402f9c:	6019      	str	r1, [r3, #0]
  402f9e:	f000 8153 	beq.w	403248 <_malloc_r+0x4fc>
  402fa2:	f8d9 0000 	ldr.w	r0, [r9]
  402fa6:	f8df e110 	ldr.w	lr, [pc, #272]	; 4030b8 <_malloc_r+0x36c>
  402faa:	3001      	adds	r0, #1
  402fac:	bf1b      	ittet	ne
  402fae:	ebca 0a0b 	rsbne	sl, sl, fp
  402fb2:	4451      	addne	r1, sl
  402fb4:	f8ce b000 	streq.w	fp, [lr]
  402fb8:	6019      	strne	r1, [r3, #0]
  402fba:	f01b 0107 	ands.w	r1, fp, #7
  402fbe:	f000 8117 	beq.w	4031f0 <_malloc_r+0x4a4>
  402fc2:	f1c1 0008 	rsb	r0, r1, #8
  402fc6:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  402fca:	4483      	add	fp, r0
  402fcc:	3108      	adds	r1, #8
  402fce:	445a      	add	r2, fp
  402fd0:	f3c2 020b 	ubfx	r2, r2, #0, #12
  402fd4:	ebc2 0901 	rsb	r9, r2, r1
  402fd8:	4649      	mov	r1, r9
  402fda:	4630      	mov	r0, r6
  402fdc:	9301      	str	r3, [sp, #4]
  402fde:	f000 fd45 	bl	403a6c <_sbrk_r>
  402fe2:	1c43      	adds	r3, r0, #1
  402fe4:	9b01      	ldr	r3, [sp, #4]
  402fe6:	f000 813f 	beq.w	403268 <_malloc_r+0x51c>
  402fea:	ebcb 0200 	rsb	r2, fp, r0
  402fee:	444a      	add	r2, r9
  402ff0:	f042 0201 	orr.w	r2, r2, #1
  402ff4:	6819      	ldr	r1, [r3, #0]
  402ff6:	f8c7 b008 	str.w	fp, [r7, #8]
  402ffa:	4449      	add	r1, r9
  402ffc:	42bc      	cmp	r4, r7
  402ffe:	f8cb 2004 	str.w	r2, [fp, #4]
  403002:	6019      	str	r1, [r3, #0]
  403004:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 4030ac <_malloc_r+0x360>
  403008:	d016      	beq.n	403038 <_malloc_r+0x2ec>
  40300a:	f1b8 0f0f 	cmp.w	r8, #15
  40300e:	f240 80fd 	bls.w	40320c <_malloc_r+0x4c0>
  403012:	6862      	ldr	r2, [r4, #4]
  403014:	f1a8 030c 	sub.w	r3, r8, #12
  403018:	f023 0307 	bic.w	r3, r3, #7
  40301c:	18e0      	adds	r0, r4, r3
  40301e:	f002 0201 	and.w	r2, r2, #1
  403022:	f04f 0e05 	mov.w	lr, #5
  403026:	431a      	orrs	r2, r3
  403028:	2b0f      	cmp	r3, #15
  40302a:	6062      	str	r2, [r4, #4]
  40302c:	f8c0 e004 	str.w	lr, [r0, #4]
  403030:	f8c0 e008 	str.w	lr, [r0, #8]
  403034:	f200 811c 	bhi.w	403270 <_malloc_r+0x524>
  403038:	4b1d      	ldr	r3, [pc, #116]	; (4030b0 <_malloc_r+0x364>)
  40303a:	68bc      	ldr	r4, [r7, #8]
  40303c:	681a      	ldr	r2, [r3, #0]
  40303e:	4291      	cmp	r1, r2
  403040:	bf88      	it	hi
  403042:	6019      	strhi	r1, [r3, #0]
  403044:	4b1b      	ldr	r3, [pc, #108]	; (4030b4 <_malloc_r+0x368>)
  403046:	681a      	ldr	r2, [r3, #0]
  403048:	4291      	cmp	r1, r2
  40304a:	6862      	ldr	r2, [r4, #4]
  40304c:	bf88      	it	hi
  40304e:	6019      	strhi	r1, [r3, #0]
  403050:	f022 0203 	bic.w	r2, r2, #3
  403054:	4295      	cmp	r5, r2
  403056:	eba2 0305 	sub.w	r3, r2, r5
  40305a:	d801      	bhi.n	403060 <_malloc_r+0x314>
  40305c:	2b0f      	cmp	r3, #15
  40305e:	dc04      	bgt.n	40306a <_malloc_r+0x31e>
  403060:	4630      	mov	r0, r6
  403062:	f000 fa7d 	bl	403560 <__malloc_unlock>
  403066:	2400      	movs	r4, #0
  403068:	e738      	b.n	402edc <_malloc_r+0x190>
  40306a:	1962      	adds	r2, r4, r5
  40306c:	f043 0301 	orr.w	r3, r3, #1
  403070:	f045 0501 	orr.w	r5, r5, #1
  403074:	6065      	str	r5, [r4, #4]
  403076:	4630      	mov	r0, r6
  403078:	60ba      	str	r2, [r7, #8]
  40307a:	6053      	str	r3, [r2, #4]
  40307c:	f000 fa70 	bl	403560 <__malloc_unlock>
  403080:	3408      	adds	r4, #8
  403082:	4620      	mov	r0, r4
  403084:	b003      	add	sp, #12
  403086:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40308a:	2b14      	cmp	r3, #20
  40308c:	d971      	bls.n	403172 <_malloc_r+0x426>
  40308e:	2b54      	cmp	r3, #84	; 0x54
  403090:	f200 80a4 	bhi.w	4031dc <_malloc_r+0x490>
  403094:	0b28      	lsrs	r0, r5, #12
  403096:	f100 0e6f 	add.w	lr, r0, #111	; 0x6f
  40309a:	ea4f 034e 	mov.w	r3, lr, lsl #1
  40309e:	306e      	adds	r0, #110	; 0x6e
  4030a0:	e676      	b.n	402d90 <_malloc_r+0x44>
  4030a2:	bf00      	nop
  4030a4:	20000468 	.word	0x20000468
  4030a8:	20000918 	.word	0x20000918
  4030ac:	2000091c 	.word	0x2000091c
  4030b0:	20000914 	.word	0x20000914
  4030b4:	20000910 	.word	0x20000910
  4030b8:	20000874 	.word	0x20000874
  4030bc:	0a5a      	lsrs	r2, r3, #9
  4030be:	2a04      	cmp	r2, #4
  4030c0:	d95e      	bls.n	403180 <_malloc_r+0x434>
  4030c2:	2a14      	cmp	r2, #20
  4030c4:	f200 80b3 	bhi.w	40322e <_malloc_r+0x4e2>
  4030c8:	f102 015c 	add.w	r1, r2, #92	; 0x5c
  4030cc:	0049      	lsls	r1, r1, #1
  4030ce:	325b      	adds	r2, #91	; 0x5b
  4030d0:	eb07 0c81 	add.w	ip, r7, r1, lsl #2
  4030d4:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
  4030d8:	f8df 81dc 	ldr.w	r8, [pc, #476]	; 4032b8 <_malloc_r+0x56c>
  4030dc:	f1ac 0c08 	sub.w	ip, ip, #8
  4030e0:	458c      	cmp	ip, r1
  4030e2:	f000 8088 	beq.w	4031f6 <_malloc_r+0x4aa>
  4030e6:	684a      	ldr	r2, [r1, #4]
  4030e8:	f022 0203 	bic.w	r2, r2, #3
  4030ec:	4293      	cmp	r3, r2
  4030ee:	d202      	bcs.n	4030f6 <_malloc_r+0x3aa>
  4030f0:	6889      	ldr	r1, [r1, #8]
  4030f2:	458c      	cmp	ip, r1
  4030f4:	d1f7      	bne.n	4030e6 <_malloc_r+0x39a>
  4030f6:	f8d1 c00c 	ldr.w	ip, [r1, #12]
  4030fa:	687a      	ldr	r2, [r7, #4]
  4030fc:	f8c4 c00c 	str.w	ip, [r4, #12]
  403100:	60a1      	str	r1, [r4, #8]
  403102:	f8cc 4008 	str.w	r4, [ip, #8]
  403106:	60cc      	str	r4, [r1, #12]
  403108:	e688      	b.n	402e1c <_malloc_r+0xd0>
  40310a:	1963      	adds	r3, r4, r5
  40310c:	f042 0701 	orr.w	r7, r2, #1
  403110:	f045 0501 	orr.w	r5, r5, #1
  403114:	6065      	str	r5, [r4, #4]
  403116:	4630      	mov	r0, r6
  403118:	614b      	str	r3, [r1, #20]
  40311a:	610b      	str	r3, [r1, #16]
  40311c:	f8c3 e00c 	str.w	lr, [r3, #12]
  403120:	f8c3 e008 	str.w	lr, [r3, #8]
  403124:	605f      	str	r7, [r3, #4]
  403126:	509a      	str	r2, [r3, r2]
  403128:	3408      	adds	r4, #8
  40312a:	f000 fa19 	bl	403560 <__malloc_unlock>
  40312e:	e6d5      	b.n	402edc <_malloc_r+0x190>
  403130:	684a      	ldr	r2, [r1, #4]
  403132:	e673      	b.n	402e1c <_malloc_r+0xd0>
  403134:	f108 0801 	add.w	r8, r8, #1
  403138:	f018 0f03 	tst.w	r8, #3
  40313c:	f10c 0c08 	add.w	ip, ip, #8
  403140:	f47f ae7f 	bne.w	402e42 <_malloc_r+0xf6>
  403144:	e030      	b.n	4031a8 <_malloc_r+0x45c>
  403146:	68dc      	ldr	r4, [r3, #12]
  403148:	42a3      	cmp	r3, r4
  40314a:	bf08      	it	eq
  40314c:	3002      	addeq	r0, #2
  40314e:	f43f ae35 	beq.w	402dbc <_malloc_r+0x70>
  403152:	e6b3      	b.n	402ebc <_malloc_r+0x170>
  403154:	440b      	add	r3, r1
  403156:	460c      	mov	r4, r1
  403158:	685a      	ldr	r2, [r3, #4]
  40315a:	68c9      	ldr	r1, [r1, #12]
  40315c:	f854 5f08 	ldr.w	r5, [r4, #8]!
  403160:	f042 0201 	orr.w	r2, r2, #1
  403164:	605a      	str	r2, [r3, #4]
  403166:	4630      	mov	r0, r6
  403168:	60e9      	str	r1, [r5, #12]
  40316a:	608d      	str	r5, [r1, #8]
  40316c:	f000 f9f8 	bl	403560 <__malloc_unlock>
  403170:	e6b4      	b.n	402edc <_malloc_r+0x190>
  403172:	f103 0e5c 	add.w	lr, r3, #92	; 0x5c
  403176:	f103 005b 	add.w	r0, r3, #91	; 0x5b
  40317a:	ea4f 034e 	mov.w	r3, lr, lsl #1
  40317e:	e607      	b.n	402d90 <_malloc_r+0x44>
  403180:	099a      	lsrs	r2, r3, #6
  403182:	f102 0139 	add.w	r1, r2, #57	; 0x39
  403186:	0049      	lsls	r1, r1, #1
  403188:	3238      	adds	r2, #56	; 0x38
  40318a:	e7a1      	b.n	4030d0 <_malloc_r+0x384>
  40318c:	42bc      	cmp	r4, r7
  40318e:	4b4a      	ldr	r3, [pc, #296]	; (4032b8 <_malloc_r+0x56c>)
  403190:	f43f af00 	beq.w	402f94 <_malloc_r+0x248>
  403194:	689c      	ldr	r4, [r3, #8]
  403196:	6862      	ldr	r2, [r4, #4]
  403198:	f022 0203 	bic.w	r2, r2, #3
  40319c:	e75a      	b.n	403054 <_malloc_r+0x308>
  40319e:	f859 3908 	ldr.w	r3, [r9], #-8
  4031a2:	4599      	cmp	r9, r3
  4031a4:	f040 8082 	bne.w	4032ac <_malloc_r+0x560>
  4031a8:	f010 0f03 	tst.w	r0, #3
  4031ac:	f100 30ff 	add.w	r0, r0, #4294967295
  4031b0:	d1f5      	bne.n	40319e <_malloc_r+0x452>
  4031b2:	687b      	ldr	r3, [r7, #4]
  4031b4:	ea23 0304 	bic.w	r3, r3, r4
  4031b8:	607b      	str	r3, [r7, #4]
  4031ba:	0064      	lsls	r4, r4, #1
  4031bc:	429c      	cmp	r4, r3
  4031be:	f63f aebd 	bhi.w	402f3c <_malloc_r+0x1f0>
  4031c2:	2c00      	cmp	r4, #0
  4031c4:	f43f aeba 	beq.w	402f3c <_malloc_r+0x1f0>
  4031c8:	421c      	tst	r4, r3
  4031ca:	4640      	mov	r0, r8
  4031cc:	f47f ae35 	bne.w	402e3a <_malloc_r+0xee>
  4031d0:	0064      	lsls	r4, r4, #1
  4031d2:	421c      	tst	r4, r3
  4031d4:	f100 0004 	add.w	r0, r0, #4
  4031d8:	d0fa      	beq.n	4031d0 <_malloc_r+0x484>
  4031da:	e62e      	b.n	402e3a <_malloc_r+0xee>
  4031dc:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  4031e0:	d818      	bhi.n	403214 <_malloc_r+0x4c8>
  4031e2:	0be8      	lsrs	r0, r5, #15
  4031e4:	f100 0e78 	add.w	lr, r0, #120	; 0x78
  4031e8:	ea4f 034e 	mov.w	r3, lr, lsl #1
  4031ec:	3077      	adds	r0, #119	; 0x77
  4031ee:	e5cf      	b.n	402d90 <_malloc_r+0x44>
  4031f0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  4031f4:	e6eb      	b.n	402fce <_malloc_r+0x282>
  4031f6:	2101      	movs	r1, #1
  4031f8:	f8d8 3004 	ldr.w	r3, [r8, #4]
  4031fc:	1092      	asrs	r2, r2, #2
  4031fe:	fa01 f202 	lsl.w	r2, r1, r2
  403202:	431a      	orrs	r2, r3
  403204:	f8c8 2004 	str.w	r2, [r8, #4]
  403208:	4661      	mov	r1, ip
  40320a:	e777      	b.n	4030fc <_malloc_r+0x3b0>
  40320c:	2301      	movs	r3, #1
  40320e:	f8cb 3004 	str.w	r3, [fp, #4]
  403212:	e725      	b.n	403060 <_malloc_r+0x314>
  403214:	f240 5254 	movw	r2, #1364	; 0x554
  403218:	4293      	cmp	r3, r2
  40321a:	d820      	bhi.n	40325e <_malloc_r+0x512>
  40321c:	0ca8      	lsrs	r0, r5, #18
  40321e:	f100 0e7d 	add.w	lr, r0, #125	; 0x7d
  403222:	ea4f 034e 	mov.w	r3, lr, lsl #1
  403226:	307c      	adds	r0, #124	; 0x7c
  403228:	e5b2      	b.n	402d90 <_malloc_r+0x44>
  40322a:	3210      	adds	r2, #16
  40322c:	e6a4      	b.n	402f78 <_malloc_r+0x22c>
  40322e:	2a54      	cmp	r2, #84	; 0x54
  403230:	d826      	bhi.n	403280 <_malloc_r+0x534>
  403232:	0b1a      	lsrs	r2, r3, #12
  403234:	f102 016f 	add.w	r1, r2, #111	; 0x6f
  403238:	0049      	lsls	r1, r1, #1
  40323a:	326e      	adds	r2, #110	; 0x6e
  40323c:	e748      	b.n	4030d0 <_malloc_r+0x384>
  40323e:	68bc      	ldr	r4, [r7, #8]
  403240:	6862      	ldr	r2, [r4, #4]
  403242:	f022 0203 	bic.w	r2, r2, #3
  403246:	e705      	b.n	403054 <_malloc_r+0x308>
  403248:	f3ca 000b 	ubfx	r0, sl, #0, #12
  40324c:	2800      	cmp	r0, #0
  40324e:	f47f aea8 	bne.w	402fa2 <_malloc_r+0x256>
  403252:	4442      	add	r2, r8
  403254:	68bb      	ldr	r3, [r7, #8]
  403256:	f042 0201 	orr.w	r2, r2, #1
  40325a:	605a      	str	r2, [r3, #4]
  40325c:	e6ec      	b.n	403038 <_malloc_r+0x2ec>
  40325e:	23fe      	movs	r3, #254	; 0xfe
  403260:	f04f 0e7f 	mov.w	lr, #127	; 0x7f
  403264:	207e      	movs	r0, #126	; 0x7e
  403266:	e593      	b.n	402d90 <_malloc_r+0x44>
  403268:	2201      	movs	r2, #1
  40326a:	f04f 0900 	mov.w	r9, #0
  40326e:	e6c1      	b.n	402ff4 <_malloc_r+0x2a8>
  403270:	f104 0108 	add.w	r1, r4, #8
  403274:	4630      	mov	r0, r6
  403276:	f7ff fa29 	bl	4026cc <_free_r>
  40327a:	f8d9 1000 	ldr.w	r1, [r9]
  40327e:	e6db      	b.n	403038 <_malloc_r+0x2ec>
  403280:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  403284:	d805      	bhi.n	403292 <_malloc_r+0x546>
  403286:	0bda      	lsrs	r2, r3, #15
  403288:	f102 0178 	add.w	r1, r2, #120	; 0x78
  40328c:	0049      	lsls	r1, r1, #1
  40328e:	3277      	adds	r2, #119	; 0x77
  403290:	e71e      	b.n	4030d0 <_malloc_r+0x384>
  403292:	f240 5154 	movw	r1, #1364	; 0x554
  403296:	428a      	cmp	r2, r1
  403298:	d805      	bhi.n	4032a6 <_malloc_r+0x55a>
  40329a:	0c9a      	lsrs	r2, r3, #18
  40329c:	f102 017d 	add.w	r1, r2, #125	; 0x7d
  4032a0:	0049      	lsls	r1, r1, #1
  4032a2:	327c      	adds	r2, #124	; 0x7c
  4032a4:	e714      	b.n	4030d0 <_malloc_r+0x384>
  4032a6:	21fe      	movs	r1, #254	; 0xfe
  4032a8:	227e      	movs	r2, #126	; 0x7e
  4032aa:	e711      	b.n	4030d0 <_malloc_r+0x384>
  4032ac:	687b      	ldr	r3, [r7, #4]
  4032ae:	e784      	b.n	4031ba <_malloc_r+0x46e>
  4032b0:	08e8      	lsrs	r0, r5, #3
  4032b2:	1c43      	adds	r3, r0, #1
  4032b4:	005b      	lsls	r3, r3, #1
  4032b6:	e5f8      	b.n	402eaa <_malloc_r+0x15e>
  4032b8:	20000468 	.word	0x20000468
  4032bc:	00000000 	.word	0x00000000

004032c0 <memchr>:
  4032c0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  4032c4:	2a10      	cmp	r2, #16
  4032c6:	db2b      	blt.n	403320 <memchr+0x60>
  4032c8:	f010 0f07 	tst.w	r0, #7
  4032cc:	d008      	beq.n	4032e0 <memchr+0x20>
  4032ce:	f810 3b01 	ldrb.w	r3, [r0], #1
  4032d2:	3a01      	subs	r2, #1
  4032d4:	428b      	cmp	r3, r1
  4032d6:	d02d      	beq.n	403334 <memchr+0x74>
  4032d8:	f010 0f07 	tst.w	r0, #7
  4032dc:	b342      	cbz	r2, 403330 <memchr+0x70>
  4032de:	d1f6      	bne.n	4032ce <memchr+0xe>
  4032e0:	b4f0      	push	{r4, r5, r6, r7}
  4032e2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  4032e6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  4032ea:	f022 0407 	bic.w	r4, r2, #7
  4032ee:	f07f 0700 	mvns.w	r7, #0
  4032f2:	2300      	movs	r3, #0
  4032f4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  4032f8:	3c08      	subs	r4, #8
  4032fa:	ea85 0501 	eor.w	r5, r5, r1
  4032fe:	ea86 0601 	eor.w	r6, r6, r1
  403302:	fa85 f547 	uadd8	r5, r5, r7
  403306:	faa3 f587 	sel	r5, r3, r7
  40330a:	fa86 f647 	uadd8	r6, r6, r7
  40330e:	faa5 f687 	sel	r6, r5, r7
  403312:	b98e      	cbnz	r6, 403338 <memchr+0x78>
  403314:	d1ee      	bne.n	4032f4 <memchr+0x34>
  403316:	bcf0      	pop	{r4, r5, r6, r7}
  403318:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  40331c:	f002 0207 	and.w	r2, r2, #7
  403320:	b132      	cbz	r2, 403330 <memchr+0x70>
  403322:	f810 3b01 	ldrb.w	r3, [r0], #1
  403326:	3a01      	subs	r2, #1
  403328:	ea83 0301 	eor.w	r3, r3, r1
  40332c:	b113      	cbz	r3, 403334 <memchr+0x74>
  40332e:	d1f8      	bne.n	403322 <memchr+0x62>
  403330:	2000      	movs	r0, #0
  403332:	4770      	bx	lr
  403334:	3801      	subs	r0, #1
  403336:	4770      	bx	lr
  403338:	2d00      	cmp	r5, #0
  40333a:	bf06      	itte	eq
  40333c:	4635      	moveq	r5, r6
  40333e:	3803      	subeq	r0, #3
  403340:	3807      	subne	r0, #7
  403342:	f015 0f01 	tst.w	r5, #1
  403346:	d107      	bne.n	403358 <memchr+0x98>
  403348:	3001      	adds	r0, #1
  40334a:	f415 7f80 	tst.w	r5, #256	; 0x100
  40334e:	bf02      	ittt	eq
  403350:	3001      	addeq	r0, #1
  403352:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  403356:	3001      	addeq	r0, #1
  403358:	bcf0      	pop	{r4, r5, r6, r7}
  40335a:	3801      	subs	r0, #1
  40335c:	4770      	bx	lr
  40335e:	bf00      	nop

00403360 <memcpy>:
  403360:	4684      	mov	ip, r0
  403362:	ea41 0300 	orr.w	r3, r1, r0
  403366:	f013 0303 	ands.w	r3, r3, #3
  40336a:	d16d      	bne.n	403448 <memcpy+0xe8>
  40336c:	3a40      	subs	r2, #64	; 0x40
  40336e:	d341      	bcc.n	4033f4 <memcpy+0x94>
  403370:	f851 3b04 	ldr.w	r3, [r1], #4
  403374:	f840 3b04 	str.w	r3, [r0], #4
  403378:	f851 3b04 	ldr.w	r3, [r1], #4
  40337c:	f840 3b04 	str.w	r3, [r0], #4
  403380:	f851 3b04 	ldr.w	r3, [r1], #4
  403384:	f840 3b04 	str.w	r3, [r0], #4
  403388:	f851 3b04 	ldr.w	r3, [r1], #4
  40338c:	f840 3b04 	str.w	r3, [r0], #4
  403390:	f851 3b04 	ldr.w	r3, [r1], #4
  403394:	f840 3b04 	str.w	r3, [r0], #4
  403398:	f851 3b04 	ldr.w	r3, [r1], #4
  40339c:	f840 3b04 	str.w	r3, [r0], #4
  4033a0:	f851 3b04 	ldr.w	r3, [r1], #4
  4033a4:	f840 3b04 	str.w	r3, [r0], #4
  4033a8:	f851 3b04 	ldr.w	r3, [r1], #4
  4033ac:	f840 3b04 	str.w	r3, [r0], #4
  4033b0:	f851 3b04 	ldr.w	r3, [r1], #4
  4033b4:	f840 3b04 	str.w	r3, [r0], #4
  4033b8:	f851 3b04 	ldr.w	r3, [r1], #4
  4033bc:	f840 3b04 	str.w	r3, [r0], #4
  4033c0:	f851 3b04 	ldr.w	r3, [r1], #4
  4033c4:	f840 3b04 	str.w	r3, [r0], #4
  4033c8:	f851 3b04 	ldr.w	r3, [r1], #4
  4033cc:	f840 3b04 	str.w	r3, [r0], #4
  4033d0:	f851 3b04 	ldr.w	r3, [r1], #4
  4033d4:	f840 3b04 	str.w	r3, [r0], #4
  4033d8:	f851 3b04 	ldr.w	r3, [r1], #4
  4033dc:	f840 3b04 	str.w	r3, [r0], #4
  4033e0:	f851 3b04 	ldr.w	r3, [r1], #4
  4033e4:	f840 3b04 	str.w	r3, [r0], #4
  4033e8:	f851 3b04 	ldr.w	r3, [r1], #4
  4033ec:	f840 3b04 	str.w	r3, [r0], #4
  4033f0:	3a40      	subs	r2, #64	; 0x40
  4033f2:	d2bd      	bcs.n	403370 <memcpy+0x10>
  4033f4:	3230      	adds	r2, #48	; 0x30
  4033f6:	d311      	bcc.n	40341c <memcpy+0xbc>
  4033f8:	f851 3b04 	ldr.w	r3, [r1], #4
  4033fc:	f840 3b04 	str.w	r3, [r0], #4
  403400:	f851 3b04 	ldr.w	r3, [r1], #4
  403404:	f840 3b04 	str.w	r3, [r0], #4
  403408:	f851 3b04 	ldr.w	r3, [r1], #4
  40340c:	f840 3b04 	str.w	r3, [r0], #4
  403410:	f851 3b04 	ldr.w	r3, [r1], #4
  403414:	f840 3b04 	str.w	r3, [r0], #4
  403418:	3a10      	subs	r2, #16
  40341a:	d2ed      	bcs.n	4033f8 <memcpy+0x98>
  40341c:	320c      	adds	r2, #12
  40341e:	d305      	bcc.n	40342c <memcpy+0xcc>
  403420:	f851 3b04 	ldr.w	r3, [r1], #4
  403424:	f840 3b04 	str.w	r3, [r0], #4
  403428:	3a04      	subs	r2, #4
  40342a:	d2f9      	bcs.n	403420 <memcpy+0xc0>
  40342c:	3204      	adds	r2, #4
  40342e:	d008      	beq.n	403442 <memcpy+0xe2>
  403430:	07d2      	lsls	r2, r2, #31
  403432:	bf1c      	itt	ne
  403434:	f811 3b01 	ldrbne.w	r3, [r1], #1
  403438:	f800 3b01 	strbne.w	r3, [r0], #1
  40343c:	d301      	bcc.n	403442 <memcpy+0xe2>
  40343e:	880b      	ldrh	r3, [r1, #0]
  403440:	8003      	strh	r3, [r0, #0]
  403442:	4660      	mov	r0, ip
  403444:	4770      	bx	lr
  403446:	bf00      	nop
  403448:	2a08      	cmp	r2, #8
  40344a:	d313      	bcc.n	403474 <memcpy+0x114>
  40344c:	078b      	lsls	r3, r1, #30
  40344e:	d08d      	beq.n	40336c <memcpy+0xc>
  403450:	f010 0303 	ands.w	r3, r0, #3
  403454:	d08a      	beq.n	40336c <memcpy+0xc>
  403456:	f1c3 0304 	rsb	r3, r3, #4
  40345a:	1ad2      	subs	r2, r2, r3
  40345c:	07db      	lsls	r3, r3, #31
  40345e:	bf1c      	itt	ne
  403460:	f811 3b01 	ldrbne.w	r3, [r1], #1
  403464:	f800 3b01 	strbne.w	r3, [r0], #1
  403468:	d380      	bcc.n	40336c <memcpy+0xc>
  40346a:	f831 3b02 	ldrh.w	r3, [r1], #2
  40346e:	f820 3b02 	strh.w	r3, [r0], #2
  403472:	e77b      	b.n	40336c <memcpy+0xc>
  403474:	3a04      	subs	r2, #4
  403476:	d3d9      	bcc.n	40342c <memcpy+0xcc>
  403478:	3a01      	subs	r2, #1
  40347a:	f811 3b01 	ldrb.w	r3, [r1], #1
  40347e:	f800 3b01 	strb.w	r3, [r0], #1
  403482:	d2f9      	bcs.n	403478 <memcpy+0x118>
  403484:	780b      	ldrb	r3, [r1, #0]
  403486:	7003      	strb	r3, [r0, #0]
  403488:	784b      	ldrb	r3, [r1, #1]
  40348a:	7043      	strb	r3, [r0, #1]
  40348c:	788b      	ldrb	r3, [r1, #2]
  40348e:	7083      	strb	r3, [r0, #2]
  403490:	4660      	mov	r0, ip
  403492:	4770      	bx	lr

00403494 <memmove>:
  403494:	4288      	cmp	r0, r1
  403496:	b5f0      	push	{r4, r5, r6, r7, lr}
  403498:	d90d      	bls.n	4034b6 <memmove+0x22>
  40349a:	188b      	adds	r3, r1, r2
  40349c:	4298      	cmp	r0, r3
  40349e:	d20a      	bcs.n	4034b6 <memmove+0x22>
  4034a0:	1881      	adds	r1, r0, r2
  4034a2:	2a00      	cmp	r2, #0
  4034a4:	d051      	beq.n	40354a <memmove+0xb6>
  4034a6:	1a9a      	subs	r2, r3, r2
  4034a8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  4034ac:	f801 4d01 	strb.w	r4, [r1, #-1]!
  4034b0:	4293      	cmp	r3, r2
  4034b2:	d1f9      	bne.n	4034a8 <memmove+0x14>
  4034b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4034b6:	2a0f      	cmp	r2, #15
  4034b8:	d948      	bls.n	40354c <memmove+0xb8>
  4034ba:	ea41 0300 	orr.w	r3, r1, r0
  4034be:	079b      	lsls	r3, r3, #30
  4034c0:	d146      	bne.n	403550 <memmove+0xbc>
  4034c2:	f100 0410 	add.w	r4, r0, #16
  4034c6:	f101 0310 	add.w	r3, r1, #16
  4034ca:	4615      	mov	r5, r2
  4034cc:	f853 6c10 	ldr.w	r6, [r3, #-16]
  4034d0:	f844 6c10 	str.w	r6, [r4, #-16]
  4034d4:	f853 6c0c 	ldr.w	r6, [r3, #-12]
  4034d8:	f844 6c0c 	str.w	r6, [r4, #-12]
  4034dc:	f853 6c08 	ldr.w	r6, [r3, #-8]
  4034e0:	f844 6c08 	str.w	r6, [r4, #-8]
  4034e4:	3d10      	subs	r5, #16
  4034e6:	f853 6c04 	ldr.w	r6, [r3, #-4]
  4034ea:	f844 6c04 	str.w	r6, [r4, #-4]
  4034ee:	2d0f      	cmp	r5, #15
  4034f0:	f103 0310 	add.w	r3, r3, #16
  4034f4:	f104 0410 	add.w	r4, r4, #16
  4034f8:	d8e8      	bhi.n	4034cc <memmove+0x38>
  4034fa:	f1a2 0310 	sub.w	r3, r2, #16
  4034fe:	f023 030f 	bic.w	r3, r3, #15
  403502:	f002 0e0f 	and.w	lr, r2, #15
  403506:	3310      	adds	r3, #16
  403508:	f1be 0f03 	cmp.w	lr, #3
  40350c:	4419      	add	r1, r3
  40350e:	4403      	add	r3, r0
  403510:	d921      	bls.n	403556 <memmove+0xc2>
  403512:	1f1e      	subs	r6, r3, #4
  403514:	460d      	mov	r5, r1
  403516:	4674      	mov	r4, lr
  403518:	3c04      	subs	r4, #4
  40351a:	f855 7b04 	ldr.w	r7, [r5], #4
  40351e:	f846 7f04 	str.w	r7, [r6, #4]!
  403522:	2c03      	cmp	r4, #3
  403524:	d8f8      	bhi.n	403518 <memmove+0x84>
  403526:	f1ae 0404 	sub.w	r4, lr, #4
  40352a:	f024 0403 	bic.w	r4, r4, #3
  40352e:	3404      	adds	r4, #4
  403530:	4423      	add	r3, r4
  403532:	4421      	add	r1, r4
  403534:	f002 0203 	and.w	r2, r2, #3
  403538:	b162      	cbz	r2, 403554 <memmove+0xc0>
  40353a:	3b01      	subs	r3, #1
  40353c:	440a      	add	r2, r1
  40353e:	f811 4b01 	ldrb.w	r4, [r1], #1
  403542:	f803 4f01 	strb.w	r4, [r3, #1]!
  403546:	428a      	cmp	r2, r1
  403548:	d1f9      	bne.n	40353e <memmove+0xaa>
  40354a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40354c:	4603      	mov	r3, r0
  40354e:	e7f3      	b.n	403538 <memmove+0xa4>
  403550:	4603      	mov	r3, r0
  403552:	e7f2      	b.n	40353a <memmove+0xa6>
  403554:	bdf0      	pop	{r4, r5, r6, r7, pc}
  403556:	4672      	mov	r2, lr
  403558:	e7ee      	b.n	403538 <memmove+0xa4>
  40355a:	bf00      	nop

0040355c <__malloc_lock>:
  40355c:	4770      	bx	lr
  40355e:	bf00      	nop

00403560 <__malloc_unlock>:
  403560:	4770      	bx	lr
  403562:	bf00      	nop

00403564 <_realloc_r>:
  403564:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403568:	4617      	mov	r7, r2
  40356a:	b083      	sub	sp, #12
  40356c:	2900      	cmp	r1, #0
  40356e:	f000 80c1 	beq.w	4036f4 <_realloc_r+0x190>
  403572:	460e      	mov	r6, r1
  403574:	4681      	mov	r9, r0
  403576:	f107 050b 	add.w	r5, r7, #11
  40357a:	f7ff ffef 	bl	40355c <__malloc_lock>
  40357e:	f856 ec04 	ldr.w	lr, [r6, #-4]
  403582:	2d16      	cmp	r5, #22
  403584:	f02e 0403 	bic.w	r4, lr, #3
  403588:	f1a6 0808 	sub.w	r8, r6, #8
  40358c:	d840      	bhi.n	403610 <_realloc_r+0xac>
  40358e:	2210      	movs	r2, #16
  403590:	4615      	mov	r5, r2
  403592:	42af      	cmp	r7, r5
  403594:	d841      	bhi.n	40361a <_realloc_r+0xb6>
  403596:	4294      	cmp	r4, r2
  403598:	da75      	bge.n	403686 <_realloc_r+0x122>
  40359a:	4bc9      	ldr	r3, [pc, #804]	; (4038c0 <_realloc_r+0x35c>)
  40359c:	6899      	ldr	r1, [r3, #8]
  40359e:	eb08 0004 	add.w	r0, r8, r4
  4035a2:	4288      	cmp	r0, r1
  4035a4:	6841      	ldr	r1, [r0, #4]
  4035a6:	f000 80d9 	beq.w	40375c <_realloc_r+0x1f8>
  4035aa:	f021 0301 	bic.w	r3, r1, #1
  4035ae:	4403      	add	r3, r0
  4035b0:	685b      	ldr	r3, [r3, #4]
  4035b2:	07db      	lsls	r3, r3, #31
  4035b4:	d57d      	bpl.n	4036b2 <_realloc_r+0x14e>
  4035b6:	f01e 0f01 	tst.w	lr, #1
  4035ba:	d035      	beq.n	403628 <_realloc_r+0xc4>
  4035bc:	4639      	mov	r1, r7
  4035be:	4648      	mov	r0, r9
  4035c0:	f7ff fbc4 	bl	402d4c <_malloc_r>
  4035c4:	4607      	mov	r7, r0
  4035c6:	b1e0      	cbz	r0, 403602 <_realloc_r+0x9e>
  4035c8:	f856 3c04 	ldr.w	r3, [r6, #-4]
  4035cc:	f023 0301 	bic.w	r3, r3, #1
  4035d0:	4443      	add	r3, r8
  4035d2:	f1a0 0208 	sub.w	r2, r0, #8
  4035d6:	429a      	cmp	r2, r3
  4035d8:	f000 8144 	beq.w	403864 <_realloc_r+0x300>
  4035dc:	1f22      	subs	r2, r4, #4
  4035de:	2a24      	cmp	r2, #36	; 0x24
  4035e0:	f200 8131 	bhi.w	403846 <_realloc_r+0x2e2>
  4035e4:	2a13      	cmp	r2, #19
  4035e6:	f200 8104 	bhi.w	4037f2 <_realloc_r+0x28e>
  4035ea:	4603      	mov	r3, r0
  4035ec:	4632      	mov	r2, r6
  4035ee:	6811      	ldr	r1, [r2, #0]
  4035f0:	6019      	str	r1, [r3, #0]
  4035f2:	6851      	ldr	r1, [r2, #4]
  4035f4:	6059      	str	r1, [r3, #4]
  4035f6:	6892      	ldr	r2, [r2, #8]
  4035f8:	609a      	str	r2, [r3, #8]
  4035fa:	4631      	mov	r1, r6
  4035fc:	4648      	mov	r0, r9
  4035fe:	f7ff f865 	bl	4026cc <_free_r>
  403602:	4648      	mov	r0, r9
  403604:	f7ff ffac 	bl	403560 <__malloc_unlock>
  403608:	4638      	mov	r0, r7
  40360a:	b003      	add	sp, #12
  40360c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403610:	f025 0507 	bic.w	r5, r5, #7
  403614:	2d00      	cmp	r5, #0
  403616:	462a      	mov	r2, r5
  403618:	dabb      	bge.n	403592 <_realloc_r+0x2e>
  40361a:	230c      	movs	r3, #12
  40361c:	2000      	movs	r0, #0
  40361e:	f8c9 3000 	str.w	r3, [r9]
  403622:	b003      	add	sp, #12
  403624:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403628:	f856 3c08 	ldr.w	r3, [r6, #-8]
  40362c:	ebc3 0a08 	rsb	sl, r3, r8
  403630:	f8da 3004 	ldr.w	r3, [sl, #4]
  403634:	f023 0c03 	bic.w	ip, r3, #3
  403638:	eb04 030c 	add.w	r3, r4, ip
  40363c:	4293      	cmp	r3, r2
  40363e:	dbbd      	blt.n	4035bc <_realloc_r+0x58>
  403640:	4657      	mov	r7, sl
  403642:	f8da 100c 	ldr.w	r1, [sl, #12]
  403646:	f857 0f08 	ldr.w	r0, [r7, #8]!
  40364a:	1f22      	subs	r2, r4, #4
  40364c:	2a24      	cmp	r2, #36	; 0x24
  40364e:	60c1      	str	r1, [r0, #12]
  403650:	6088      	str	r0, [r1, #8]
  403652:	f200 8117 	bhi.w	403884 <_realloc_r+0x320>
  403656:	2a13      	cmp	r2, #19
  403658:	f240 8112 	bls.w	403880 <_realloc_r+0x31c>
  40365c:	6831      	ldr	r1, [r6, #0]
  40365e:	f8ca 1008 	str.w	r1, [sl, #8]
  403662:	6871      	ldr	r1, [r6, #4]
  403664:	f8ca 100c 	str.w	r1, [sl, #12]
  403668:	2a1b      	cmp	r2, #27
  40366a:	f200 812b 	bhi.w	4038c4 <_realloc_r+0x360>
  40366e:	3608      	adds	r6, #8
  403670:	f10a 0210 	add.w	r2, sl, #16
  403674:	6831      	ldr	r1, [r6, #0]
  403676:	6011      	str	r1, [r2, #0]
  403678:	6871      	ldr	r1, [r6, #4]
  40367a:	6051      	str	r1, [r2, #4]
  40367c:	68b1      	ldr	r1, [r6, #8]
  40367e:	6091      	str	r1, [r2, #8]
  403680:	463e      	mov	r6, r7
  403682:	461c      	mov	r4, r3
  403684:	46d0      	mov	r8, sl
  403686:	1b63      	subs	r3, r4, r5
  403688:	2b0f      	cmp	r3, #15
  40368a:	d81d      	bhi.n	4036c8 <_realloc_r+0x164>
  40368c:	f8d8 3004 	ldr.w	r3, [r8, #4]
  403690:	f003 0301 	and.w	r3, r3, #1
  403694:	4323      	orrs	r3, r4
  403696:	4444      	add	r4, r8
  403698:	f8c8 3004 	str.w	r3, [r8, #4]
  40369c:	6863      	ldr	r3, [r4, #4]
  40369e:	f043 0301 	orr.w	r3, r3, #1
  4036a2:	6063      	str	r3, [r4, #4]
  4036a4:	4648      	mov	r0, r9
  4036a6:	f7ff ff5b 	bl	403560 <__malloc_unlock>
  4036aa:	4630      	mov	r0, r6
  4036ac:	b003      	add	sp, #12
  4036ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4036b2:	f021 0103 	bic.w	r1, r1, #3
  4036b6:	4421      	add	r1, r4
  4036b8:	4291      	cmp	r1, r2
  4036ba:	db21      	blt.n	403700 <_realloc_r+0x19c>
  4036bc:	68c3      	ldr	r3, [r0, #12]
  4036be:	6882      	ldr	r2, [r0, #8]
  4036c0:	460c      	mov	r4, r1
  4036c2:	60d3      	str	r3, [r2, #12]
  4036c4:	609a      	str	r2, [r3, #8]
  4036c6:	e7de      	b.n	403686 <_realloc_r+0x122>
  4036c8:	f8d8 2004 	ldr.w	r2, [r8, #4]
  4036cc:	eb08 0105 	add.w	r1, r8, r5
  4036d0:	f002 0201 	and.w	r2, r2, #1
  4036d4:	4315      	orrs	r5, r2
  4036d6:	f043 0201 	orr.w	r2, r3, #1
  4036da:	440b      	add	r3, r1
  4036dc:	f8c8 5004 	str.w	r5, [r8, #4]
  4036e0:	604a      	str	r2, [r1, #4]
  4036e2:	685a      	ldr	r2, [r3, #4]
  4036e4:	f042 0201 	orr.w	r2, r2, #1
  4036e8:	3108      	adds	r1, #8
  4036ea:	605a      	str	r2, [r3, #4]
  4036ec:	4648      	mov	r0, r9
  4036ee:	f7fe ffed 	bl	4026cc <_free_r>
  4036f2:	e7d7      	b.n	4036a4 <_realloc_r+0x140>
  4036f4:	4611      	mov	r1, r2
  4036f6:	b003      	add	sp, #12
  4036f8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4036fc:	f7ff bb26 	b.w	402d4c <_malloc_r>
  403700:	f01e 0f01 	tst.w	lr, #1
  403704:	f47f af5a 	bne.w	4035bc <_realloc_r+0x58>
  403708:	f856 3c08 	ldr.w	r3, [r6, #-8]
  40370c:	ebc3 0a08 	rsb	sl, r3, r8
  403710:	f8da 3004 	ldr.w	r3, [sl, #4]
  403714:	f023 0c03 	bic.w	ip, r3, #3
  403718:	eb01 0e0c 	add.w	lr, r1, ip
  40371c:	4596      	cmp	lr, r2
  40371e:	db8b      	blt.n	403638 <_realloc_r+0xd4>
  403720:	68c3      	ldr	r3, [r0, #12]
  403722:	6882      	ldr	r2, [r0, #8]
  403724:	4657      	mov	r7, sl
  403726:	60d3      	str	r3, [r2, #12]
  403728:	609a      	str	r2, [r3, #8]
  40372a:	f857 1f08 	ldr.w	r1, [r7, #8]!
  40372e:	f8da 300c 	ldr.w	r3, [sl, #12]
  403732:	60cb      	str	r3, [r1, #12]
  403734:	1f22      	subs	r2, r4, #4
  403736:	2a24      	cmp	r2, #36	; 0x24
  403738:	6099      	str	r1, [r3, #8]
  40373a:	f200 8099 	bhi.w	403870 <_realloc_r+0x30c>
  40373e:	2a13      	cmp	r2, #19
  403740:	d962      	bls.n	403808 <_realloc_r+0x2a4>
  403742:	6833      	ldr	r3, [r6, #0]
  403744:	f8ca 3008 	str.w	r3, [sl, #8]
  403748:	6873      	ldr	r3, [r6, #4]
  40374a:	f8ca 300c 	str.w	r3, [sl, #12]
  40374e:	2a1b      	cmp	r2, #27
  403750:	f200 80a0 	bhi.w	403894 <_realloc_r+0x330>
  403754:	3608      	adds	r6, #8
  403756:	f10a 0310 	add.w	r3, sl, #16
  40375a:	e056      	b.n	40380a <_realloc_r+0x2a6>
  40375c:	f021 0b03 	bic.w	fp, r1, #3
  403760:	44a3      	add	fp, r4
  403762:	f105 0010 	add.w	r0, r5, #16
  403766:	4583      	cmp	fp, r0
  403768:	da59      	bge.n	40381e <_realloc_r+0x2ba>
  40376a:	f01e 0f01 	tst.w	lr, #1
  40376e:	f47f af25 	bne.w	4035bc <_realloc_r+0x58>
  403772:	f856 1c08 	ldr.w	r1, [r6, #-8]
  403776:	ebc1 0a08 	rsb	sl, r1, r8
  40377a:	f8da 1004 	ldr.w	r1, [sl, #4]
  40377e:	f021 0c03 	bic.w	ip, r1, #3
  403782:	44e3      	add	fp, ip
  403784:	4558      	cmp	r0, fp
  403786:	f73f af57 	bgt.w	403638 <_realloc_r+0xd4>
  40378a:	4657      	mov	r7, sl
  40378c:	f8da 100c 	ldr.w	r1, [sl, #12]
  403790:	f857 0f08 	ldr.w	r0, [r7, #8]!
  403794:	1f22      	subs	r2, r4, #4
  403796:	2a24      	cmp	r2, #36	; 0x24
  403798:	60c1      	str	r1, [r0, #12]
  40379a:	6088      	str	r0, [r1, #8]
  40379c:	f200 80b4 	bhi.w	403908 <_realloc_r+0x3a4>
  4037a0:	2a13      	cmp	r2, #19
  4037a2:	f240 80a5 	bls.w	4038f0 <_realloc_r+0x38c>
  4037a6:	6831      	ldr	r1, [r6, #0]
  4037a8:	f8ca 1008 	str.w	r1, [sl, #8]
  4037ac:	6871      	ldr	r1, [r6, #4]
  4037ae:	f8ca 100c 	str.w	r1, [sl, #12]
  4037b2:	2a1b      	cmp	r2, #27
  4037b4:	f200 80af 	bhi.w	403916 <_realloc_r+0x3b2>
  4037b8:	3608      	adds	r6, #8
  4037ba:	f10a 0210 	add.w	r2, sl, #16
  4037be:	6831      	ldr	r1, [r6, #0]
  4037c0:	6011      	str	r1, [r2, #0]
  4037c2:	6871      	ldr	r1, [r6, #4]
  4037c4:	6051      	str	r1, [r2, #4]
  4037c6:	68b1      	ldr	r1, [r6, #8]
  4037c8:	6091      	str	r1, [r2, #8]
  4037ca:	eb0a 0105 	add.w	r1, sl, r5
  4037ce:	ebc5 020b 	rsb	r2, r5, fp
  4037d2:	f042 0201 	orr.w	r2, r2, #1
  4037d6:	6099      	str	r1, [r3, #8]
  4037d8:	604a      	str	r2, [r1, #4]
  4037da:	f8da 3004 	ldr.w	r3, [sl, #4]
  4037de:	f003 0301 	and.w	r3, r3, #1
  4037e2:	431d      	orrs	r5, r3
  4037e4:	4648      	mov	r0, r9
  4037e6:	f8ca 5004 	str.w	r5, [sl, #4]
  4037ea:	f7ff feb9 	bl	403560 <__malloc_unlock>
  4037ee:	4638      	mov	r0, r7
  4037f0:	e75c      	b.n	4036ac <_realloc_r+0x148>
  4037f2:	6833      	ldr	r3, [r6, #0]
  4037f4:	6003      	str	r3, [r0, #0]
  4037f6:	6873      	ldr	r3, [r6, #4]
  4037f8:	6043      	str	r3, [r0, #4]
  4037fa:	2a1b      	cmp	r2, #27
  4037fc:	d827      	bhi.n	40384e <_realloc_r+0x2ea>
  4037fe:	f100 0308 	add.w	r3, r0, #8
  403802:	f106 0208 	add.w	r2, r6, #8
  403806:	e6f2      	b.n	4035ee <_realloc_r+0x8a>
  403808:	463b      	mov	r3, r7
  40380a:	6832      	ldr	r2, [r6, #0]
  40380c:	601a      	str	r2, [r3, #0]
  40380e:	6872      	ldr	r2, [r6, #4]
  403810:	605a      	str	r2, [r3, #4]
  403812:	68b2      	ldr	r2, [r6, #8]
  403814:	609a      	str	r2, [r3, #8]
  403816:	463e      	mov	r6, r7
  403818:	4674      	mov	r4, lr
  40381a:	46d0      	mov	r8, sl
  40381c:	e733      	b.n	403686 <_realloc_r+0x122>
  40381e:	eb08 0105 	add.w	r1, r8, r5
  403822:	ebc5 0b0b 	rsb	fp, r5, fp
  403826:	f04b 0201 	orr.w	r2, fp, #1
  40382a:	6099      	str	r1, [r3, #8]
  40382c:	604a      	str	r2, [r1, #4]
  40382e:	f856 3c04 	ldr.w	r3, [r6, #-4]
  403832:	f003 0301 	and.w	r3, r3, #1
  403836:	431d      	orrs	r5, r3
  403838:	4648      	mov	r0, r9
  40383a:	f846 5c04 	str.w	r5, [r6, #-4]
  40383e:	f7ff fe8f 	bl	403560 <__malloc_unlock>
  403842:	4630      	mov	r0, r6
  403844:	e732      	b.n	4036ac <_realloc_r+0x148>
  403846:	4631      	mov	r1, r6
  403848:	f7ff fe24 	bl	403494 <memmove>
  40384c:	e6d5      	b.n	4035fa <_realloc_r+0x96>
  40384e:	68b3      	ldr	r3, [r6, #8]
  403850:	6083      	str	r3, [r0, #8]
  403852:	68f3      	ldr	r3, [r6, #12]
  403854:	60c3      	str	r3, [r0, #12]
  403856:	2a24      	cmp	r2, #36	; 0x24
  403858:	d028      	beq.n	4038ac <_realloc_r+0x348>
  40385a:	f100 0310 	add.w	r3, r0, #16
  40385e:	f106 0210 	add.w	r2, r6, #16
  403862:	e6c4      	b.n	4035ee <_realloc_r+0x8a>
  403864:	f850 3c04 	ldr.w	r3, [r0, #-4]
  403868:	f023 0303 	bic.w	r3, r3, #3
  40386c:	441c      	add	r4, r3
  40386e:	e70a      	b.n	403686 <_realloc_r+0x122>
  403870:	4631      	mov	r1, r6
  403872:	4638      	mov	r0, r7
  403874:	4674      	mov	r4, lr
  403876:	46d0      	mov	r8, sl
  403878:	f7ff fe0c 	bl	403494 <memmove>
  40387c:	463e      	mov	r6, r7
  40387e:	e702      	b.n	403686 <_realloc_r+0x122>
  403880:	463a      	mov	r2, r7
  403882:	e6f7      	b.n	403674 <_realloc_r+0x110>
  403884:	4631      	mov	r1, r6
  403886:	4638      	mov	r0, r7
  403888:	461c      	mov	r4, r3
  40388a:	46d0      	mov	r8, sl
  40388c:	f7ff fe02 	bl	403494 <memmove>
  403890:	463e      	mov	r6, r7
  403892:	e6f8      	b.n	403686 <_realloc_r+0x122>
  403894:	68b3      	ldr	r3, [r6, #8]
  403896:	f8ca 3010 	str.w	r3, [sl, #16]
  40389a:	68f3      	ldr	r3, [r6, #12]
  40389c:	f8ca 3014 	str.w	r3, [sl, #20]
  4038a0:	2a24      	cmp	r2, #36	; 0x24
  4038a2:	d01b      	beq.n	4038dc <_realloc_r+0x378>
  4038a4:	3610      	adds	r6, #16
  4038a6:	f10a 0318 	add.w	r3, sl, #24
  4038aa:	e7ae      	b.n	40380a <_realloc_r+0x2a6>
  4038ac:	6933      	ldr	r3, [r6, #16]
  4038ae:	6103      	str	r3, [r0, #16]
  4038b0:	6973      	ldr	r3, [r6, #20]
  4038b2:	6143      	str	r3, [r0, #20]
  4038b4:	f106 0218 	add.w	r2, r6, #24
  4038b8:	f100 0318 	add.w	r3, r0, #24
  4038bc:	e697      	b.n	4035ee <_realloc_r+0x8a>
  4038be:	bf00      	nop
  4038c0:	20000468 	.word	0x20000468
  4038c4:	68b1      	ldr	r1, [r6, #8]
  4038c6:	f8ca 1010 	str.w	r1, [sl, #16]
  4038ca:	68f1      	ldr	r1, [r6, #12]
  4038cc:	f8ca 1014 	str.w	r1, [sl, #20]
  4038d0:	2a24      	cmp	r2, #36	; 0x24
  4038d2:	d00f      	beq.n	4038f4 <_realloc_r+0x390>
  4038d4:	3610      	adds	r6, #16
  4038d6:	f10a 0218 	add.w	r2, sl, #24
  4038da:	e6cb      	b.n	403674 <_realloc_r+0x110>
  4038dc:	6933      	ldr	r3, [r6, #16]
  4038de:	f8ca 3018 	str.w	r3, [sl, #24]
  4038e2:	6973      	ldr	r3, [r6, #20]
  4038e4:	f8ca 301c 	str.w	r3, [sl, #28]
  4038e8:	3618      	adds	r6, #24
  4038ea:	f10a 0320 	add.w	r3, sl, #32
  4038ee:	e78c      	b.n	40380a <_realloc_r+0x2a6>
  4038f0:	463a      	mov	r2, r7
  4038f2:	e764      	b.n	4037be <_realloc_r+0x25a>
  4038f4:	6932      	ldr	r2, [r6, #16]
  4038f6:	f8ca 2018 	str.w	r2, [sl, #24]
  4038fa:	6972      	ldr	r2, [r6, #20]
  4038fc:	f8ca 201c 	str.w	r2, [sl, #28]
  403900:	3618      	adds	r6, #24
  403902:	f10a 0220 	add.w	r2, sl, #32
  403906:	e6b5      	b.n	403674 <_realloc_r+0x110>
  403908:	4631      	mov	r1, r6
  40390a:	4638      	mov	r0, r7
  40390c:	9301      	str	r3, [sp, #4]
  40390e:	f7ff fdc1 	bl	403494 <memmove>
  403912:	9b01      	ldr	r3, [sp, #4]
  403914:	e759      	b.n	4037ca <_realloc_r+0x266>
  403916:	68b1      	ldr	r1, [r6, #8]
  403918:	f8ca 1010 	str.w	r1, [sl, #16]
  40391c:	68f1      	ldr	r1, [r6, #12]
  40391e:	f8ca 1014 	str.w	r1, [sl, #20]
  403922:	2a24      	cmp	r2, #36	; 0x24
  403924:	d003      	beq.n	40392e <_realloc_r+0x3ca>
  403926:	3610      	adds	r6, #16
  403928:	f10a 0218 	add.w	r2, sl, #24
  40392c:	e747      	b.n	4037be <_realloc_r+0x25a>
  40392e:	6932      	ldr	r2, [r6, #16]
  403930:	f8ca 2018 	str.w	r2, [sl, #24]
  403934:	6972      	ldr	r2, [r6, #20]
  403936:	f8ca 201c 	str.w	r2, [sl, #28]
  40393a:	3618      	adds	r6, #24
  40393c:	f10a 0220 	add.w	r2, sl, #32
  403940:	e73d      	b.n	4037be <_realloc_r+0x25a>
  403942:	bf00      	nop

00403944 <lflush>:
  403944:	8983      	ldrh	r3, [r0, #12]
  403946:	f003 0309 	and.w	r3, r3, #9
  40394a:	2b09      	cmp	r3, #9
  40394c:	d001      	beq.n	403952 <lflush+0xe>
  40394e:	2000      	movs	r0, #0
  403950:	4770      	bx	lr
  403952:	f7fe bd61 	b.w	402418 <fflush>
  403956:	bf00      	nop

00403958 <__srefill_r>:
  403958:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40395a:	460c      	mov	r4, r1
  40395c:	4605      	mov	r5, r0
  40395e:	b110      	cbz	r0, 403966 <__srefill_r+0xe>
  403960:	6b83      	ldr	r3, [r0, #56]	; 0x38
  403962:	2b00      	cmp	r3, #0
  403964:	d045      	beq.n	4039f2 <__srefill_r+0x9a>
  403966:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40396a:	b29a      	uxth	r2, r3
  40396c:	0497      	lsls	r7, r2, #18
  40396e:	d407      	bmi.n	403980 <__srefill_r+0x28>
  403970:	6e62      	ldr	r2, [r4, #100]	; 0x64
  403972:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  403976:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  40397a:	6662      	str	r2, [r4, #100]	; 0x64
  40397c:	81a3      	strh	r3, [r4, #12]
  40397e:	b29a      	uxth	r2, r3
  403980:	2100      	movs	r1, #0
  403982:	0696      	lsls	r6, r2, #26
  403984:	6061      	str	r1, [r4, #4]
  403986:	d431      	bmi.n	4039ec <__srefill_r+0x94>
  403988:	0750      	lsls	r0, r2, #29
  40398a:	d522      	bpl.n	4039d2 <__srefill_r+0x7a>
  40398c:	6b21      	ldr	r1, [r4, #48]	; 0x30
  40398e:	b161      	cbz	r1, 4039aa <__srefill_r+0x52>
  403990:	f104 0340 	add.w	r3, r4, #64	; 0x40
  403994:	4299      	cmp	r1, r3
  403996:	d002      	beq.n	40399e <__srefill_r+0x46>
  403998:	4628      	mov	r0, r5
  40399a:	f7fe fe97 	bl	4026cc <_free_r>
  40399e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  4039a0:	6063      	str	r3, [r4, #4]
  4039a2:	2000      	movs	r0, #0
  4039a4:	6320      	str	r0, [r4, #48]	; 0x30
  4039a6:	2b00      	cmp	r3, #0
  4039a8:	d13f      	bne.n	403a2a <__srefill_r+0xd2>
  4039aa:	6923      	ldr	r3, [r4, #16]
  4039ac:	2b00      	cmp	r3, #0
  4039ae:	d04c      	beq.n	403a4a <__srefill_r+0xf2>
  4039b0:	f9b4 700c 	ldrsh.w	r7, [r4, #12]
  4039b4:	b2be      	uxth	r6, r7
  4039b6:	07b3      	lsls	r3, r6, #30
  4039b8:	d11e      	bne.n	4039f8 <__srefill_r+0xa0>
  4039ba:	6922      	ldr	r2, [r4, #16]
  4039bc:	6022      	str	r2, [r4, #0]
  4039be:	4628      	mov	r0, r5
  4039c0:	6963      	ldr	r3, [r4, #20]
  4039c2:	6a25      	ldr	r5, [r4, #32]
  4039c4:	69e1      	ldr	r1, [r4, #28]
  4039c6:	47a8      	blx	r5
  4039c8:	2800      	cmp	r0, #0
  4039ca:	6060      	str	r0, [r4, #4]
  4039cc:	dd09      	ble.n	4039e2 <__srefill_r+0x8a>
  4039ce:	2000      	movs	r0, #0
  4039d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4039d2:	06d1      	lsls	r1, r2, #27
  4039d4:	d53e      	bpl.n	403a54 <__srefill_r+0xfc>
  4039d6:	0712      	lsls	r2, r2, #28
  4039d8:	d42a      	bmi.n	403a30 <__srefill_r+0xd8>
  4039da:	f043 0304 	orr.w	r3, r3, #4
  4039de:	81a3      	strh	r3, [r4, #12]
  4039e0:	e7e3      	b.n	4039aa <__srefill_r+0x52>
  4039e2:	89a3      	ldrh	r3, [r4, #12]
  4039e4:	d119      	bne.n	403a1a <__srefill_r+0xc2>
  4039e6:	f043 0320 	orr.w	r3, r3, #32
  4039ea:	81a3      	strh	r3, [r4, #12]
  4039ec:	f04f 30ff 	mov.w	r0, #4294967295
  4039f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4039f2:	f7fe fda1 	bl	402538 <__sinit>
  4039f6:	e7b6      	b.n	403966 <__srefill_r+0xe>
  4039f8:	4b1a      	ldr	r3, [pc, #104]	; (403a64 <__srefill_r+0x10c>)
  4039fa:	491b      	ldr	r1, [pc, #108]	; (403a68 <__srefill_r+0x110>)
  4039fc:	6818      	ldr	r0, [r3, #0]
  4039fe:	2301      	movs	r3, #1
  403a00:	81a3      	strh	r3, [r4, #12]
  403a02:	f006 0609 	and.w	r6, r6, #9
  403a06:	f7ff f8cb 	bl	402ba0 <_fwalk>
  403a0a:	2e09      	cmp	r6, #9
  403a0c:	81a7      	strh	r7, [r4, #12]
  403a0e:	d1d4      	bne.n	4039ba <__srefill_r+0x62>
  403a10:	4621      	mov	r1, r4
  403a12:	4628      	mov	r0, r5
  403a14:	f7fe fc46 	bl	4022a4 <__sflush_r>
  403a18:	e7cf      	b.n	4039ba <__srefill_r+0x62>
  403a1a:	2200      	movs	r2, #0
  403a1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  403a20:	81a3      	strh	r3, [r4, #12]
  403a22:	6062      	str	r2, [r4, #4]
  403a24:	f04f 30ff 	mov.w	r0, #4294967295
  403a28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  403a2a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  403a2c:	6023      	str	r3, [r4, #0]
  403a2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  403a30:	4621      	mov	r1, r4
  403a32:	4628      	mov	r0, r5
  403a34:	f7fe fcda 	bl	4023ec <_fflush_r>
  403a38:	2800      	cmp	r0, #0
  403a3a:	d1d7      	bne.n	4039ec <__srefill_r+0x94>
  403a3c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  403a40:	60a0      	str	r0, [r4, #8]
  403a42:	61a0      	str	r0, [r4, #24]
  403a44:	f023 0308 	bic.w	r3, r3, #8
  403a48:	e7c7      	b.n	4039da <__srefill_r+0x82>
  403a4a:	4621      	mov	r1, r4
  403a4c:	4628      	mov	r0, r5
  403a4e:	f7ff f931 	bl	402cb4 <__smakebuf_r>
  403a52:	e7ad      	b.n	4039b0 <__srefill_r+0x58>
  403a54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  403a58:	2209      	movs	r2, #9
  403a5a:	602a      	str	r2, [r5, #0]
  403a5c:	f04f 30ff 	mov.w	r0, #4294967295
  403a60:	81a3      	strh	r3, [r4, #12]
  403a62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  403a64:	00404244 	.word	0x00404244
  403a68:	00403945 	.word	0x00403945

00403a6c <_sbrk_r>:
  403a6c:	b538      	push	{r3, r4, r5, lr}
  403a6e:	4c07      	ldr	r4, [pc, #28]	; (403a8c <_sbrk_r+0x20>)
  403a70:	2300      	movs	r3, #0
  403a72:	4605      	mov	r5, r0
  403a74:	4608      	mov	r0, r1
  403a76:	6023      	str	r3, [r4, #0]
  403a78:	f7fd f860 	bl	400b3c <_sbrk>
  403a7c:	1c43      	adds	r3, r0, #1
  403a7e:	d000      	beq.n	403a82 <_sbrk_r+0x16>
  403a80:	bd38      	pop	{r3, r4, r5, pc}
  403a82:	6823      	ldr	r3, [r4, #0]
  403a84:	2b00      	cmp	r3, #0
  403a86:	d0fb      	beq.n	403a80 <_sbrk_r+0x14>
  403a88:	602b      	str	r3, [r5, #0]
  403a8a:	bd38      	pop	{r3, r4, r5, pc}
  403a8c:	20000954 	.word	0x20000954

00403a90 <__sread>:
  403a90:	b510      	push	{r4, lr}
  403a92:	460c      	mov	r4, r1
  403a94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  403a98:	f000 f9c4 	bl	403e24 <_read_r>
  403a9c:	2800      	cmp	r0, #0
  403a9e:	db03      	blt.n	403aa8 <__sread+0x18>
  403aa0:	6d23      	ldr	r3, [r4, #80]	; 0x50
  403aa2:	4403      	add	r3, r0
  403aa4:	6523      	str	r3, [r4, #80]	; 0x50
  403aa6:	bd10      	pop	{r4, pc}
  403aa8:	89a3      	ldrh	r3, [r4, #12]
  403aaa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  403aae:	81a3      	strh	r3, [r4, #12]
  403ab0:	bd10      	pop	{r4, pc}
  403ab2:	bf00      	nop

00403ab4 <__swrite>:
  403ab4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  403ab8:	4616      	mov	r6, r2
  403aba:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
  403abe:	461f      	mov	r7, r3
  403ac0:	05d3      	lsls	r3, r2, #23
  403ac2:	460c      	mov	r4, r1
  403ac4:	4605      	mov	r5, r0
  403ac6:	d507      	bpl.n	403ad8 <__swrite+0x24>
  403ac8:	2200      	movs	r2, #0
  403aca:	2302      	movs	r3, #2
  403acc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  403ad0:	f000 f992 	bl	403df8 <_lseek_r>
  403ad4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  403ad8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  403adc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  403ae0:	81a2      	strh	r2, [r4, #12]
  403ae2:	463b      	mov	r3, r7
  403ae4:	4632      	mov	r2, r6
  403ae6:	4628      	mov	r0, r5
  403ae8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  403aec:	f000 b8a2 	b.w	403c34 <_write_r>

00403af0 <__sseek>:
  403af0:	b510      	push	{r4, lr}
  403af2:	460c      	mov	r4, r1
  403af4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  403af8:	f000 f97e 	bl	403df8 <_lseek_r>
  403afc:	89a3      	ldrh	r3, [r4, #12]
  403afe:	1c42      	adds	r2, r0, #1
  403b00:	bf0e      	itee	eq
  403b02:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  403b06:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  403b0a:	6520      	strne	r0, [r4, #80]	; 0x50
  403b0c:	81a3      	strh	r3, [r4, #12]
  403b0e:	bd10      	pop	{r4, pc}

00403b10 <__sclose>:
  403b10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  403b14:	f000 b8f6 	b.w	403d04 <_close_r>

00403b18 <__swbuf_r>:
  403b18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  403b1a:	460e      	mov	r6, r1
  403b1c:	4614      	mov	r4, r2
  403b1e:	4607      	mov	r7, r0
  403b20:	b110      	cbz	r0, 403b28 <__swbuf_r+0x10>
  403b22:	6b83      	ldr	r3, [r0, #56]	; 0x38
  403b24:	2b00      	cmp	r3, #0
  403b26:	d04a      	beq.n	403bbe <__swbuf_r+0xa6>
  403b28:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  403b2c:	69a3      	ldr	r3, [r4, #24]
  403b2e:	60a3      	str	r3, [r4, #8]
  403b30:	b291      	uxth	r1, r2
  403b32:	0708      	lsls	r0, r1, #28
  403b34:	d538      	bpl.n	403ba8 <__swbuf_r+0x90>
  403b36:	6923      	ldr	r3, [r4, #16]
  403b38:	2b00      	cmp	r3, #0
  403b3a:	d035      	beq.n	403ba8 <__swbuf_r+0x90>
  403b3c:	0489      	lsls	r1, r1, #18
  403b3e:	b2f5      	uxtb	r5, r6
  403b40:	d515      	bpl.n	403b6e <__swbuf_r+0x56>
  403b42:	6822      	ldr	r2, [r4, #0]
  403b44:	6961      	ldr	r1, [r4, #20]
  403b46:	1ad3      	subs	r3, r2, r3
  403b48:	428b      	cmp	r3, r1
  403b4a:	da1c      	bge.n	403b86 <__swbuf_r+0x6e>
  403b4c:	3301      	adds	r3, #1
  403b4e:	68a1      	ldr	r1, [r4, #8]
  403b50:	1c50      	adds	r0, r2, #1
  403b52:	3901      	subs	r1, #1
  403b54:	60a1      	str	r1, [r4, #8]
  403b56:	6020      	str	r0, [r4, #0]
  403b58:	7016      	strb	r6, [r2, #0]
  403b5a:	6962      	ldr	r2, [r4, #20]
  403b5c:	429a      	cmp	r2, r3
  403b5e:	d01a      	beq.n	403b96 <__swbuf_r+0x7e>
  403b60:	89a3      	ldrh	r3, [r4, #12]
  403b62:	07db      	lsls	r3, r3, #31
  403b64:	d501      	bpl.n	403b6a <__swbuf_r+0x52>
  403b66:	2d0a      	cmp	r5, #10
  403b68:	d015      	beq.n	403b96 <__swbuf_r+0x7e>
  403b6a:	4628      	mov	r0, r5
  403b6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  403b6e:	6e61      	ldr	r1, [r4, #100]	; 0x64
  403b70:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  403b74:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  403b78:	81a2      	strh	r2, [r4, #12]
  403b7a:	6822      	ldr	r2, [r4, #0]
  403b7c:	6661      	str	r1, [r4, #100]	; 0x64
  403b7e:	6961      	ldr	r1, [r4, #20]
  403b80:	1ad3      	subs	r3, r2, r3
  403b82:	428b      	cmp	r3, r1
  403b84:	dbe2      	blt.n	403b4c <__swbuf_r+0x34>
  403b86:	4621      	mov	r1, r4
  403b88:	4638      	mov	r0, r7
  403b8a:	f7fe fc2f 	bl	4023ec <_fflush_r>
  403b8e:	b940      	cbnz	r0, 403ba2 <__swbuf_r+0x8a>
  403b90:	6822      	ldr	r2, [r4, #0]
  403b92:	2301      	movs	r3, #1
  403b94:	e7db      	b.n	403b4e <__swbuf_r+0x36>
  403b96:	4621      	mov	r1, r4
  403b98:	4638      	mov	r0, r7
  403b9a:	f7fe fc27 	bl	4023ec <_fflush_r>
  403b9e:	2800      	cmp	r0, #0
  403ba0:	d0e3      	beq.n	403b6a <__swbuf_r+0x52>
  403ba2:	f04f 30ff 	mov.w	r0, #4294967295
  403ba6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  403ba8:	4621      	mov	r1, r4
  403baa:	4638      	mov	r0, r7
  403bac:	f7fe fb06 	bl	4021bc <__swsetup_r>
  403bb0:	2800      	cmp	r0, #0
  403bb2:	d1f6      	bne.n	403ba2 <__swbuf_r+0x8a>
  403bb4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  403bb8:	6923      	ldr	r3, [r4, #16]
  403bba:	b291      	uxth	r1, r2
  403bbc:	e7be      	b.n	403b3c <__swbuf_r+0x24>
  403bbe:	f7fe fcbb 	bl	402538 <__sinit>
  403bc2:	e7b1      	b.n	403b28 <__swbuf_r+0x10>

00403bc4 <_wcrtomb_r>:
  403bc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  403bc8:	4605      	mov	r5, r0
  403bca:	b086      	sub	sp, #24
  403bcc:	461e      	mov	r6, r3
  403bce:	460c      	mov	r4, r1
  403bd0:	b1a1      	cbz	r1, 403bfc <_wcrtomb_r+0x38>
  403bd2:	4b10      	ldr	r3, [pc, #64]	; (403c14 <_wcrtomb_r+0x50>)
  403bd4:	4617      	mov	r7, r2
  403bd6:	f8d3 8000 	ldr.w	r8, [r3]
  403bda:	f7ff f831 	bl	402c40 <__locale_charset>
  403bde:	9600      	str	r6, [sp, #0]
  403be0:	4603      	mov	r3, r0
  403be2:	463a      	mov	r2, r7
  403be4:	4621      	mov	r1, r4
  403be6:	4628      	mov	r0, r5
  403be8:	47c0      	blx	r8
  403bea:	1c43      	adds	r3, r0, #1
  403bec:	d103      	bne.n	403bf6 <_wcrtomb_r+0x32>
  403bee:	2200      	movs	r2, #0
  403bf0:	238a      	movs	r3, #138	; 0x8a
  403bf2:	6032      	str	r2, [r6, #0]
  403bf4:	602b      	str	r3, [r5, #0]
  403bf6:	b006      	add	sp, #24
  403bf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  403bfc:	4b05      	ldr	r3, [pc, #20]	; (403c14 <_wcrtomb_r+0x50>)
  403bfe:	681f      	ldr	r7, [r3, #0]
  403c00:	f7ff f81e 	bl	402c40 <__locale_charset>
  403c04:	9600      	str	r6, [sp, #0]
  403c06:	4603      	mov	r3, r0
  403c08:	4622      	mov	r2, r4
  403c0a:	a903      	add	r1, sp, #12
  403c0c:	4628      	mov	r0, r5
  403c0e:	47b8      	blx	r7
  403c10:	e7eb      	b.n	403bea <_wcrtomb_r+0x26>
  403c12:	bf00      	nop
  403c14:	20000878 	.word	0x20000878

00403c18 <__ascii_wctomb>:
  403c18:	b121      	cbz	r1, 403c24 <__ascii_wctomb+0xc>
  403c1a:	2aff      	cmp	r2, #255	; 0xff
  403c1c:	d804      	bhi.n	403c28 <__ascii_wctomb+0x10>
  403c1e:	700a      	strb	r2, [r1, #0]
  403c20:	2001      	movs	r0, #1
  403c22:	4770      	bx	lr
  403c24:	4608      	mov	r0, r1
  403c26:	4770      	bx	lr
  403c28:	238a      	movs	r3, #138	; 0x8a
  403c2a:	6003      	str	r3, [r0, #0]
  403c2c:	f04f 30ff 	mov.w	r0, #4294967295
  403c30:	4770      	bx	lr
  403c32:	bf00      	nop

00403c34 <_write_r>:
  403c34:	b570      	push	{r4, r5, r6, lr}
  403c36:	460d      	mov	r5, r1
  403c38:	4c08      	ldr	r4, [pc, #32]	; (403c5c <_write_r+0x28>)
  403c3a:	4611      	mov	r1, r2
  403c3c:	4606      	mov	r6, r0
  403c3e:	461a      	mov	r2, r3
  403c40:	4628      	mov	r0, r5
  403c42:	2300      	movs	r3, #0
  403c44:	6023      	str	r3, [r4, #0]
  403c46:	f7fc faa3 	bl	400190 <_write>
  403c4a:	1c43      	adds	r3, r0, #1
  403c4c:	d000      	beq.n	403c50 <_write_r+0x1c>
  403c4e:	bd70      	pop	{r4, r5, r6, pc}
  403c50:	6823      	ldr	r3, [r4, #0]
  403c52:	2b00      	cmp	r3, #0
  403c54:	d0fb      	beq.n	403c4e <_write_r+0x1a>
  403c56:	6033      	str	r3, [r6, #0]
  403c58:	bd70      	pop	{r4, r5, r6, pc}
  403c5a:	bf00      	nop
  403c5c:	20000954 	.word	0x20000954

00403c60 <__register_exitproc>:
  403c60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  403c64:	4c25      	ldr	r4, [pc, #148]	; (403cfc <__register_exitproc+0x9c>)
  403c66:	6825      	ldr	r5, [r4, #0]
  403c68:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
  403c6c:	4606      	mov	r6, r0
  403c6e:	4688      	mov	r8, r1
  403c70:	4692      	mov	sl, r2
  403c72:	4699      	mov	r9, r3
  403c74:	b3c4      	cbz	r4, 403ce8 <__register_exitproc+0x88>
  403c76:	6860      	ldr	r0, [r4, #4]
  403c78:	281f      	cmp	r0, #31
  403c7a:	dc17      	bgt.n	403cac <__register_exitproc+0x4c>
  403c7c:	1c43      	adds	r3, r0, #1
  403c7e:	b176      	cbz	r6, 403c9e <__register_exitproc+0x3e>
  403c80:	eb04 0580 	add.w	r5, r4, r0, lsl #2
  403c84:	2201      	movs	r2, #1
  403c86:	f8c5 a088 	str.w	sl, [r5, #136]	; 0x88
  403c8a:	f8d4 1188 	ldr.w	r1, [r4, #392]	; 0x188
  403c8e:	4082      	lsls	r2, r0
  403c90:	4311      	orrs	r1, r2
  403c92:	2e02      	cmp	r6, #2
  403c94:	f8c4 1188 	str.w	r1, [r4, #392]	; 0x188
  403c98:	f8c5 9108 	str.w	r9, [r5, #264]	; 0x108
  403c9c:	d01e      	beq.n	403cdc <__register_exitproc+0x7c>
  403c9e:	3002      	adds	r0, #2
  403ca0:	6063      	str	r3, [r4, #4]
  403ca2:	f844 8020 	str.w	r8, [r4, r0, lsl #2]
  403ca6:	2000      	movs	r0, #0
  403ca8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  403cac:	4b14      	ldr	r3, [pc, #80]	; (403d00 <__register_exitproc+0xa0>)
  403cae:	b303      	cbz	r3, 403cf2 <__register_exitproc+0x92>
  403cb0:	f44f 70c8 	mov.w	r0, #400	; 0x190
  403cb4:	f7ff f842 	bl	402d3c <malloc>
  403cb8:	4604      	mov	r4, r0
  403cba:	b1d0      	cbz	r0, 403cf2 <__register_exitproc+0x92>
  403cbc:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
  403cc0:	2700      	movs	r7, #0
  403cc2:	e880 0088 	stmia.w	r0, {r3, r7}
  403cc6:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  403cca:	4638      	mov	r0, r7
  403ccc:	2301      	movs	r3, #1
  403cce:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
  403cd2:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
  403cd6:	2e00      	cmp	r6, #0
  403cd8:	d0e1      	beq.n	403c9e <__register_exitproc+0x3e>
  403cda:	e7d1      	b.n	403c80 <__register_exitproc+0x20>
  403cdc:	f8d4 118c 	ldr.w	r1, [r4, #396]	; 0x18c
  403ce0:	430a      	orrs	r2, r1
  403ce2:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
  403ce6:	e7da      	b.n	403c9e <__register_exitproc+0x3e>
  403ce8:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
  403cec:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  403cf0:	e7c1      	b.n	403c76 <__register_exitproc+0x16>
  403cf2:	f04f 30ff 	mov.w	r0, #4294967295
  403cf6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  403cfa:	bf00      	nop
  403cfc:	00404244 	.word	0x00404244
  403d00:	00402d3d 	.word	0x00402d3d

00403d04 <_close_r>:
  403d04:	b538      	push	{r3, r4, r5, lr}
  403d06:	4c07      	ldr	r4, [pc, #28]	; (403d24 <_close_r+0x20>)
  403d08:	2300      	movs	r3, #0
  403d0a:	4605      	mov	r5, r0
  403d0c:	4608      	mov	r0, r1
  403d0e:	6023      	str	r3, [r4, #0]
  403d10:	f7fc ff2e 	bl	400b70 <_close>
  403d14:	1c43      	adds	r3, r0, #1
  403d16:	d000      	beq.n	403d1a <_close_r+0x16>
  403d18:	bd38      	pop	{r3, r4, r5, pc}
  403d1a:	6823      	ldr	r3, [r4, #0]
  403d1c:	2b00      	cmp	r3, #0
  403d1e:	d0fb      	beq.n	403d18 <_close_r+0x14>
  403d20:	602b      	str	r3, [r5, #0]
  403d22:	bd38      	pop	{r3, r4, r5, pc}
  403d24:	20000954 	.word	0x20000954

00403d28 <_fclose_r>:
  403d28:	2900      	cmp	r1, #0
  403d2a:	d03d      	beq.n	403da8 <_fclose_r+0x80>
  403d2c:	b570      	push	{r4, r5, r6, lr}
  403d2e:	4605      	mov	r5, r0
  403d30:	460c      	mov	r4, r1
  403d32:	b108      	cbz	r0, 403d38 <_fclose_r+0x10>
  403d34:	6b83      	ldr	r3, [r0, #56]	; 0x38
  403d36:	b37b      	cbz	r3, 403d98 <_fclose_r+0x70>
  403d38:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  403d3c:	b90b      	cbnz	r3, 403d42 <_fclose_r+0x1a>
  403d3e:	2000      	movs	r0, #0
  403d40:	bd70      	pop	{r4, r5, r6, pc}
  403d42:	4621      	mov	r1, r4
  403d44:	4628      	mov	r0, r5
  403d46:	f7fe faad 	bl	4022a4 <__sflush_r>
  403d4a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  403d4c:	4606      	mov	r6, r0
  403d4e:	b133      	cbz	r3, 403d5e <_fclose_r+0x36>
  403d50:	69e1      	ldr	r1, [r4, #28]
  403d52:	4628      	mov	r0, r5
  403d54:	4798      	blx	r3
  403d56:	2800      	cmp	r0, #0
  403d58:	bfb8      	it	lt
  403d5a:	f04f 36ff 	movlt.w	r6, #4294967295
  403d5e:	89a3      	ldrh	r3, [r4, #12]
  403d60:	061b      	lsls	r3, r3, #24
  403d62:	d41c      	bmi.n	403d9e <_fclose_r+0x76>
  403d64:	6b21      	ldr	r1, [r4, #48]	; 0x30
  403d66:	b141      	cbz	r1, 403d7a <_fclose_r+0x52>
  403d68:	f104 0340 	add.w	r3, r4, #64	; 0x40
  403d6c:	4299      	cmp	r1, r3
  403d6e:	d002      	beq.n	403d76 <_fclose_r+0x4e>
  403d70:	4628      	mov	r0, r5
  403d72:	f7fe fcab 	bl	4026cc <_free_r>
  403d76:	2300      	movs	r3, #0
  403d78:	6323      	str	r3, [r4, #48]	; 0x30
  403d7a:	6c61      	ldr	r1, [r4, #68]	; 0x44
  403d7c:	b121      	cbz	r1, 403d88 <_fclose_r+0x60>
  403d7e:	4628      	mov	r0, r5
  403d80:	f7fe fca4 	bl	4026cc <_free_r>
  403d84:	2300      	movs	r3, #0
  403d86:	6463      	str	r3, [r4, #68]	; 0x44
  403d88:	f7fe fbdc 	bl	402544 <__sfp_lock_acquire>
  403d8c:	2300      	movs	r3, #0
  403d8e:	81a3      	strh	r3, [r4, #12]
  403d90:	f7fe fbda 	bl	402548 <__sfp_lock_release>
  403d94:	4630      	mov	r0, r6
  403d96:	bd70      	pop	{r4, r5, r6, pc}
  403d98:	f7fe fbce 	bl	402538 <__sinit>
  403d9c:	e7cc      	b.n	403d38 <_fclose_r+0x10>
  403d9e:	6921      	ldr	r1, [r4, #16]
  403da0:	4628      	mov	r0, r5
  403da2:	f7fe fc93 	bl	4026cc <_free_r>
  403da6:	e7dd      	b.n	403d64 <_fclose_r+0x3c>
  403da8:	2000      	movs	r0, #0
  403daa:	4770      	bx	lr

00403dac <_fstat_r>:
  403dac:	b538      	push	{r3, r4, r5, lr}
  403dae:	460b      	mov	r3, r1
  403db0:	4c07      	ldr	r4, [pc, #28]	; (403dd0 <_fstat_r+0x24>)
  403db2:	4605      	mov	r5, r0
  403db4:	4611      	mov	r1, r2
  403db6:	4618      	mov	r0, r3
  403db8:	2300      	movs	r3, #0
  403dba:	6023      	str	r3, [r4, #0]
  403dbc:	f7fc fedc 	bl	400b78 <_fstat>
  403dc0:	1c43      	adds	r3, r0, #1
  403dc2:	d000      	beq.n	403dc6 <_fstat_r+0x1a>
  403dc4:	bd38      	pop	{r3, r4, r5, pc}
  403dc6:	6823      	ldr	r3, [r4, #0]
  403dc8:	2b00      	cmp	r3, #0
  403dca:	d0fb      	beq.n	403dc4 <_fstat_r+0x18>
  403dcc:	602b      	str	r3, [r5, #0]
  403dce:	bd38      	pop	{r3, r4, r5, pc}
  403dd0:	20000954 	.word	0x20000954

00403dd4 <_isatty_r>:
  403dd4:	b538      	push	{r3, r4, r5, lr}
  403dd6:	4c07      	ldr	r4, [pc, #28]	; (403df4 <_isatty_r+0x20>)
  403dd8:	2300      	movs	r3, #0
  403dda:	4605      	mov	r5, r0
  403ddc:	4608      	mov	r0, r1
  403dde:	6023      	str	r3, [r4, #0]
  403de0:	f7fc fed0 	bl	400b84 <_isatty>
  403de4:	1c43      	adds	r3, r0, #1
  403de6:	d000      	beq.n	403dea <_isatty_r+0x16>
  403de8:	bd38      	pop	{r3, r4, r5, pc}
  403dea:	6823      	ldr	r3, [r4, #0]
  403dec:	2b00      	cmp	r3, #0
  403dee:	d0fb      	beq.n	403de8 <_isatty_r+0x14>
  403df0:	602b      	str	r3, [r5, #0]
  403df2:	bd38      	pop	{r3, r4, r5, pc}
  403df4:	20000954 	.word	0x20000954

00403df8 <_lseek_r>:
  403df8:	b570      	push	{r4, r5, r6, lr}
  403dfa:	460d      	mov	r5, r1
  403dfc:	4c08      	ldr	r4, [pc, #32]	; (403e20 <_lseek_r+0x28>)
  403dfe:	4611      	mov	r1, r2
  403e00:	4606      	mov	r6, r0
  403e02:	461a      	mov	r2, r3
  403e04:	4628      	mov	r0, r5
  403e06:	2300      	movs	r3, #0
  403e08:	6023      	str	r3, [r4, #0]
  403e0a:	f7fc febd 	bl	400b88 <_lseek>
  403e0e:	1c43      	adds	r3, r0, #1
  403e10:	d000      	beq.n	403e14 <_lseek_r+0x1c>
  403e12:	bd70      	pop	{r4, r5, r6, pc}
  403e14:	6823      	ldr	r3, [r4, #0]
  403e16:	2b00      	cmp	r3, #0
  403e18:	d0fb      	beq.n	403e12 <_lseek_r+0x1a>
  403e1a:	6033      	str	r3, [r6, #0]
  403e1c:	bd70      	pop	{r4, r5, r6, pc}
  403e1e:	bf00      	nop
  403e20:	20000954 	.word	0x20000954

00403e24 <_read_r>:
  403e24:	b570      	push	{r4, r5, r6, lr}
  403e26:	460d      	mov	r5, r1
  403e28:	4c08      	ldr	r4, [pc, #32]	; (403e4c <_read_r+0x28>)
  403e2a:	4611      	mov	r1, r2
  403e2c:	4606      	mov	r6, r0
  403e2e:	461a      	mov	r2, r3
  403e30:	4628      	mov	r0, r5
  403e32:	2300      	movs	r3, #0
  403e34:	6023      	str	r3, [r4, #0]
  403e36:	f7fc f977 	bl	400128 <_read>
  403e3a:	1c43      	adds	r3, r0, #1
  403e3c:	d000      	beq.n	403e40 <_read_r+0x1c>
  403e3e:	bd70      	pop	{r4, r5, r6, pc}
  403e40:	6823      	ldr	r3, [r4, #0]
  403e42:	2b00      	cmp	r3, #0
  403e44:	d0fb      	beq.n	403e3e <_read_r+0x1a>
  403e46:	6033      	str	r3, [r6, #0]
  403e48:	bd70      	pop	{r4, r5, r6, pc}
  403e4a:	bf00      	nop
  403e4c:	20000954 	.word	0x20000954

00403e50 <__aeabi_uldivmod>:
  403e50:	b953      	cbnz	r3, 403e68 <__aeabi_uldivmod+0x18>
  403e52:	b94a      	cbnz	r2, 403e68 <__aeabi_uldivmod+0x18>
  403e54:	2900      	cmp	r1, #0
  403e56:	bf08      	it	eq
  403e58:	2800      	cmpeq	r0, #0
  403e5a:	bf1c      	itt	ne
  403e5c:	f04f 31ff 	movne.w	r1, #4294967295
  403e60:	f04f 30ff 	movne.w	r0, #4294967295
  403e64:	f000 b97e 	b.w	404164 <__aeabi_idiv0>
  403e68:	f1ad 0c08 	sub.w	ip, sp, #8
  403e6c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  403e70:	f000 f806 	bl	403e80 <__udivmoddi4>
  403e74:	f8dd e004 	ldr.w	lr, [sp, #4]
  403e78:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  403e7c:	b004      	add	sp, #16
  403e7e:	4770      	bx	lr

00403e80 <__udivmoddi4>:
  403e80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  403e84:	468c      	mov	ip, r1
  403e86:	460e      	mov	r6, r1
  403e88:	4604      	mov	r4, r0
  403e8a:	9d08      	ldr	r5, [sp, #32]
  403e8c:	2b00      	cmp	r3, #0
  403e8e:	d150      	bne.n	403f32 <__udivmoddi4+0xb2>
  403e90:	428a      	cmp	r2, r1
  403e92:	4617      	mov	r7, r2
  403e94:	d96c      	bls.n	403f70 <__udivmoddi4+0xf0>
  403e96:	fab2 fe82 	clz	lr, r2
  403e9a:	f1be 0f00 	cmp.w	lr, #0
  403e9e:	d00b      	beq.n	403eb8 <__udivmoddi4+0x38>
  403ea0:	f1ce 0420 	rsb	r4, lr, #32
  403ea4:	fa20 f404 	lsr.w	r4, r0, r4
  403ea8:	fa01 f60e 	lsl.w	r6, r1, lr
  403eac:	ea44 0c06 	orr.w	ip, r4, r6
  403eb0:	fa02 f70e 	lsl.w	r7, r2, lr
  403eb4:	fa00 f40e 	lsl.w	r4, r0, lr
  403eb8:	ea4f 4917 	mov.w	r9, r7, lsr #16
  403ebc:	0c22      	lsrs	r2, r4, #16
  403ebe:	fbbc f0f9 	udiv	r0, ip, r9
  403ec2:	fa1f f887 	uxth.w	r8, r7
  403ec6:	fb09 c610 	mls	r6, r9, r0, ip
  403eca:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
  403ece:	fb00 f308 	mul.w	r3, r0, r8
  403ed2:	42b3      	cmp	r3, r6
  403ed4:	d909      	bls.n	403eea <__udivmoddi4+0x6a>
  403ed6:	19f6      	adds	r6, r6, r7
  403ed8:	f100 32ff 	add.w	r2, r0, #4294967295
  403edc:	f080 8122 	bcs.w	404124 <__udivmoddi4+0x2a4>
  403ee0:	42b3      	cmp	r3, r6
  403ee2:	f240 811f 	bls.w	404124 <__udivmoddi4+0x2a4>
  403ee6:	3802      	subs	r0, #2
  403ee8:	443e      	add	r6, r7
  403eea:	1af6      	subs	r6, r6, r3
  403eec:	b2a2      	uxth	r2, r4
  403eee:	fbb6 f3f9 	udiv	r3, r6, r9
  403ef2:	fb09 6613 	mls	r6, r9, r3, r6
  403ef6:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
  403efa:	fb03 f808 	mul.w	r8, r3, r8
  403efe:	45a0      	cmp	r8, r4
  403f00:	d909      	bls.n	403f16 <__udivmoddi4+0x96>
  403f02:	19e4      	adds	r4, r4, r7
  403f04:	f103 32ff 	add.w	r2, r3, #4294967295
  403f08:	f080 810a 	bcs.w	404120 <__udivmoddi4+0x2a0>
  403f0c:	45a0      	cmp	r8, r4
  403f0e:	f240 8107 	bls.w	404120 <__udivmoddi4+0x2a0>
  403f12:	3b02      	subs	r3, #2
  403f14:	443c      	add	r4, r7
  403f16:	ebc8 0404 	rsb	r4, r8, r4
  403f1a:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
  403f1e:	2100      	movs	r1, #0
  403f20:	2d00      	cmp	r5, #0
  403f22:	d062      	beq.n	403fea <__udivmoddi4+0x16a>
  403f24:	fa24 f40e 	lsr.w	r4, r4, lr
  403f28:	2300      	movs	r3, #0
  403f2a:	602c      	str	r4, [r5, #0]
  403f2c:	606b      	str	r3, [r5, #4]
  403f2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  403f32:	428b      	cmp	r3, r1
  403f34:	d907      	bls.n	403f46 <__udivmoddi4+0xc6>
  403f36:	2d00      	cmp	r5, #0
  403f38:	d055      	beq.n	403fe6 <__udivmoddi4+0x166>
  403f3a:	2100      	movs	r1, #0
  403f3c:	e885 0041 	stmia.w	r5, {r0, r6}
  403f40:	4608      	mov	r0, r1
  403f42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  403f46:	fab3 f183 	clz	r1, r3
  403f4a:	2900      	cmp	r1, #0
  403f4c:	f040 8090 	bne.w	404070 <__udivmoddi4+0x1f0>
  403f50:	42b3      	cmp	r3, r6
  403f52:	d302      	bcc.n	403f5a <__udivmoddi4+0xda>
  403f54:	4282      	cmp	r2, r0
  403f56:	f200 80f8 	bhi.w	40414a <__udivmoddi4+0x2ca>
  403f5a:	1a84      	subs	r4, r0, r2
  403f5c:	eb66 0603 	sbc.w	r6, r6, r3
  403f60:	2001      	movs	r0, #1
  403f62:	46b4      	mov	ip, r6
  403f64:	2d00      	cmp	r5, #0
  403f66:	d040      	beq.n	403fea <__udivmoddi4+0x16a>
  403f68:	e885 1010 	stmia.w	r5, {r4, ip}
  403f6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  403f70:	b912      	cbnz	r2, 403f78 <__udivmoddi4+0xf8>
  403f72:	2701      	movs	r7, #1
  403f74:	fbb7 f7f2 	udiv	r7, r7, r2
  403f78:	fab7 fe87 	clz	lr, r7
  403f7c:	f1be 0f00 	cmp.w	lr, #0
  403f80:	d135      	bne.n	403fee <__udivmoddi4+0x16e>
  403f82:	1bf3      	subs	r3, r6, r7
  403f84:	ea4f 4817 	mov.w	r8, r7, lsr #16
  403f88:	fa1f fc87 	uxth.w	ip, r7
  403f8c:	2101      	movs	r1, #1
  403f8e:	fbb3 f0f8 	udiv	r0, r3, r8
  403f92:	0c22      	lsrs	r2, r4, #16
  403f94:	fb08 3610 	mls	r6, r8, r0, r3
  403f98:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
  403f9c:	fb0c f300 	mul.w	r3, ip, r0
  403fa0:	42b3      	cmp	r3, r6
  403fa2:	d907      	bls.n	403fb4 <__udivmoddi4+0x134>
  403fa4:	19f6      	adds	r6, r6, r7
  403fa6:	f100 32ff 	add.w	r2, r0, #4294967295
  403faa:	d202      	bcs.n	403fb2 <__udivmoddi4+0x132>
  403fac:	42b3      	cmp	r3, r6
  403fae:	f200 80ce 	bhi.w	40414e <__udivmoddi4+0x2ce>
  403fb2:	4610      	mov	r0, r2
  403fb4:	1af6      	subs	r6, r6, r3
  403fb6:	b2a2      	uxth	r2, r4
  403fb8:	fbb6 f3f8 	udiv	r3, r6, r8
  403fbc:	fb08 6613 	mls	r6, r8, r3, r6
  403fc0:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
  403fc4:	fb0c fc03 	mul.w	ip, ip, r3
  403fc8:	45a4      	cmp	ip, r4
  403fca:	d907      	bls.n	403fdc <__udivmoddi4+0x15c>
  403fcc:	19e4      	adds	r4, r4, r7
  403fce:	f103 32ff 	add.w	r2, r3, #4294967295
  403fd2:	d202      	bcs.n	403fda <__udivmoddi4+0x15a>
  403fd4:	45a4      	cmp	ip, r4
  403fd6:	f200 80b5 	bhi.w	404144 <__udivmoddi4+0x2c4>
  403fda:	4613      	mov	r3, r2
  403fdc:	ebcc 0404 	rsb	r4, ip, r4
  403fe0:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
  403fe4:	e79c      	b.n	403f20 <__udivmoddi4+0xa0>
  403fe6:	4629      	mov	r1, r5
  403fe8:	4628      	mov	r0, r5
  403fea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  403fee:	f1ce 0120 	rsb	r1, lr, #32
  403ff2:	fa06 f30e 	lsl.w	r3, r6, lr
  403ff6:	fa07 f70e 	lsl.w	r7, r7, lr
  403ffa:	fa20 f901 	lsr.w	r9, r0, r1
  403ffe:	ea4f 4817 	mov.w	r8, r7, lsr #16
  404002:	40ce      	lsrs	r6, r1
  404004:	ea49 0903 	orr.w	r9, r9, r3
  404008:	fbb6 faf8 	udiv	sl, r6, r8
  40400c:	ea4f 4419 	mov.w	r4, r9, lsr #16
  404010:	fb08 661a 	mls	r6, r8, sl, r6
  404014:	fa1f fc87 	uxth.w	ip, r7
  404018:	ea44 4306 	orr.w	r3, r4, r6, lsl #16
  40401c:	fb0a f20c 	mul.w	r2, sl, ip
  404020:	429a      	cmp	r2, r3
  404022:	fa00 f40e 	lsl.w	r4, r0, lr
  404026:	d90a      	bls.n	40403e <__udivmoddi4+0x1be>
  404028:	19db      	adds	r3, r3, r7
  40402a:	f10a 31ff 	add.w	r1, sl, #4294967295
  40402e:	f080 8087 	bcs.w	404140 <__udivmoddi4+0x2c0>
  404032:	429a      	cmp	r2, r3
  404034:	f240 8084 	bls.w	404140 <__udivmoddi4+0x2c0>
  404038:	f1aa 0a02 	sub.w	sl, sl, #2
  40403c:	443b      	add	r3, r7
  40403e:	1a9b      	subs	r3, r3, r2
  404040:	fa1f f989 	uxth.w	r9, r9
  404044:	fbb3 f1f8 	udiv	r1, r3, r8
  404048:	fb08 3311 	mls	r3, r8, r1, r3
  40404c:	ea49 4303 	orr.w	r3, r9, r3, lsl #16
  404050:	fb01 f60c 	mul.w	r6, r1, ip
  404054:	429e      	cmp	r6, r3
  404056:	d907      	bls.n	404068 <__udivmoddi4+0x1e8>
  404058:	19db      	adds	r3, r3, r7
  40405a:	f101 32ff 	add.w	r2, r1, #4294967295
  40405e:	d26b      	bcs.n	404138 <__udivmoddi4+0x2b8>
  404060:	429e      	cmp	r6, r3
  404062:	d969      	bls.n	404138 <__udivmoddi4+0x2b8>
  404064:	3902      	subs	r1, #2
  404066:	443b      	add	r3, r7
  404068:	1b9b      	subs	r3, r3, r6
  40406a:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
  40406e:	e78e      	b.n	403f8e <__udivmoddi4+0x10e>
  404070:	f1c1 0e20 	rsb	lr, r1, #32
  404074:	fa22 f40e 	lsr.w	r4, r2, lr
  404078:	408b      	lsls	r3, r1
  40407a:	4323      	orrs	r3, r4
  40407c:	fa20 f70e 	lsr.w	r7, r0, lr
  404080:	fa06 f401 	lsl.w	r4, r6, r1
  404084:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  404088:	fa26 f60e 	lsr.w	r6, r6, lr
  40408c:	433c      	orrs	r4, r7
  40408e:	fbb6 f9fc 	udiv	r9, r6, ip
  404092:	0c27      	lsrs	r7, r4, #16
  404094:	fb0c 6619 	mls	r6, ip, r9, r6
  404098:	fa1f f883 	uxth.w	r8, r3
  40409c:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
  4040a0:	fb09 f708 	mul.w	r7, r9, r8
  4040a4:	42b7      	cmp	r7, r6
  4040a6:	fa02 f201 	lsl.w	r2, r2, r1
  4040aa:	fa00 fa01 	lsl.w	sl, r0, r1
  4040ae:	d908      	bls.n	4040c2 <__udivmoddi4+0x242>
  4040b0:	18f6      	adds	r6, r6, r3
  4040b2:	f109 30ff 	add.w	r0, r9, #4294967295
  4040b6:	d241      	bcs.n	40413c <__udivmoddi4+0x2bc>
  4040b8:	42b7      	cmp	r7, r6
  4040ba:	d93f      	bls.n	40413c <__udivmoddi4+0x2bc>
  4040bc:	f1a9 0902 	sub.w	r9, r9, #2
  4040c0:	441e      	add	r6, r3
  4040c2:	1bf6      	subs	r6, r6, r7
  4040c4:	b2a0      	uxth	r0, r4
  4040c6:	fbb6 f4fc 	udiv	r4, r6, ip
  4040ca:	fb0c 6614 	mls	r6, ip, r4, r6
  4040ce:	ea40 4706 	orr.w	r7, r0, r6, lsl #16
  4040d2:	fb04 f808 	mul.w	r8, r4, r8
  4040d6:	45b8      	cmp	r8, r7
  4040d8:	d907      	bls.n	4040ea <__udivmoddi4+0x26a>
  4040da:	18ff      	adds	r7, r7, r3
  4040dc:	f104 30ff 	add.w	r0, r4, #4294967295
  4040e0:	d228      	bcs.n	404134 <__udivmoddi4+0x2b4>
  4040e2:	45b8      	cmp	r8, r7
  4040e4:	d926      	bls.n	404134 <__udivmoddi4+0x2b4>
  4040e6:	3c02      	subs	r4, #2
  4040e8:	441f      	add	r7, r3
  4040ea:	ea44 4009 	orr.w	r0, r4, r9, lsl #16
  4040ee:	ebc8 0707 	rsb	r7, r8, r7
  4040f2:	fba0 8902 	umull	r8, r9, r0, r2
  4040f6:	454f      	cmp	r7, r9
  4040f8:	4644      	mov	r4, r8
  4040fa:	464e      	mov	r6, r9
  4040fc:	d314      	bcc.n	404128 <__udivmoddi4+0x2a8>
  4040fe:	d029      	beq.n	404154 <__udivmoddi4+0x2d4>
  404100:	b365      	cbz	r5, 40415c <__udivmoddi4+0x2dc>
  404102:	ebba 0304 	subs.w	r3, sl, r4
  404106:	eb67 0706 	sbc.w	r7, r7, r6
  40410a:	fa07 fe0e 	lsl.w	lr, r7, lr
  40410e:	40cb      	lsrs	r3, r1
  404110:	40cf      	lsrs	r7, r1
  404112:	ea4e 0303 	orr.w	r3, lr, r3
  404116:	e885 0088 	stmia.w	r5, {r3, r7}
  40411a:	2100      	movs	r1, #0
  40411c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  404120:	4613      	mov	r3, r2
  404122:	e6f8      	b.n	403f16 <__udivmoddi4+0x96>
  404124:	4610      	mov	r0, r2
  404126:	e6e0      	b.n	403eea <__udivmoddi4+0x6a>
  404128:	ebb8 0402 	subs.w	r4, r8, r2
  40412c:	eb69 0603 	sbc.w	r6, r9, r3
  404130:	3801      	subs	r0, #1
  404132:	e7e5      	b.n	404100 <__udivmoddi4+0x280>
  404134:	4604      	mov	r4, r0
  404136:	e7d8      	b.n	4040ea <__udivmoddi4+0x26a>
  404138:	4611      	mov	r1, r2
  40413a:	e795      	b.n	404068 <__udivmoddi4+0x1e8>
  40413c:	4681      	mov	r9, r0
  40413e:	e7c0      	b.n	4040c2 <__udivmoddi4+0x242>
  404140:	468a      	mov	sl, r1
  404142:	e77c      	b.n	40403e <__udivmoddi4+0x1be>
  404144:	3b02      	subs	r3, #2
  404146:	443c      	add	r4, r7
  404148:	e748      	b.n	403fdc <__udivmoddi4+0x15c>
  40414a:	4608      	mov	r0, r1
  40414c:	e70a      	b.n	403f64 <__udivmoddi4+0xe4>
  40414e:	3802      	subs	r0, #2
  404150:	443e      	add	r6, r7
  404152:	e72f      	b.n	403fb4 <__udivmoddi4+0x134>
  404154:	45c2      	cmp	sl, r8
  404156:	d3e7      	bcc.n	404128 <__udivmoddi4+0x2a8>
  404158:	463e      	mov	r6, r7
  40415a:	e7d1      	b.n	404100 <__udivmoddi4+0x280>
  40415c:	4629      	mov	r1, r5
  40415e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  404162:	bf00      	nop

00404164 <__aeabi_idiv0>:
  404164:	4770      	bx	lr
  404166:	bf00      	nop
  404168:	00000d0a 	.word	0x00000d0a
  40416c:	41203a61 	.word	0x41203a61
  404170:	646e6563 	.word	0x646e6563
  404174:	4c207265 	.word	0x4c207265
  404178:	61204445 	.word	0x61204445
  40417c:	0d6c757a 	.word	0x0d6c757a
  404180:	00000000 	.word	0x00000000
  404184:	41203a73 	.word	0x41203a73
  404188:	61676170 	.word	0x61676170
  40418c:	454c2072 	.word	0x454c2072
  404190:	7a612044 	.word	0x7a612044
  404194:	000d6c75 	.word	0x000d6c75
  404198:	41203a76 	.word	0x41203a76
  40419c:	646e6563 	.word	0x646e6563
  4041a0:	4c207265 	.word	0x4c207265
  4041a4:	76204445 	.word	0x76204445
  4041a8:	65647265 	.word	0x65647265
  4041ac:	0000000d 	.word	0x0000000d
  4041b0:	41203a62 	.word	0x41203a62
  4041b4:	61676170 	.word	0x61676170
  4041b8:	454c2072 	.word	0x454c2072
  4041bc:	65762044 	.word	0x65762044
  4041c0:	0d656472 	.word	0x0d656472
  4041c4:	00000000 	.word	0x00000000
  4041c8:	2044454c 	.word	0x2044454c
  4041cc:	6c757a61 	.word	0x6c757a61
  4041d0:	6f676120 	.word	0x6f676120
  4041d4:	65206172 	.word	0x65206172
  4041d8:	20617473 	.word	0x20617473
  4041dc:	53454341 	.word	0x53454341
  4041e0:	00000d4f 	.word	0x00000d4f
  4041e4:	2044454c 	.word	0x2044454c
  4041e8:	64726576 	.word	0x64726576
  4041ec:	67612065 	.word	0x67612065
  4041f0:	2061726f 	.word	0x2061726f
  4041f4:	61747365 	.word	0x61747365
  4041f8:	45434120 	.word	0x45434120
  4041fc:	000d4f53 	.word	0x000d4f53
  404200:	2044454c 	.word	0x2044454c
  404204:	6c757a61 	.word	0x6c757a61
  404208:	6f676120 	.word	0x6f676120
  40420c:	65206172 	.word	0x65206172
  404210:	20617473 	.word	0x20617473
  404214:	47415041 	.word	0x47415041
  404218:	0d4f4441 	.word	0x0d4f4441
  40421c:	00000000 	.word	0x00000000
  404220:	2044454c 	.word	0x2044454c
  404224:	64726576 	.word	0x64726576
  404228:	67612065 	.word	0x67612065
  40422c:	2061726f 	.word	0x2061726f
  404230:	61747365 	.word	0x61747365
  404234:	41504120 	.word	0x41504120
  404238:	4f444147 	.word	0x4f444147
  40423c:	0000000d 	.word	0x0000000d
  404240:	00000043 	.word	0x00000043

00404244 <_global_impure_ptr>:
  404244:	20000018 0000000a                       ... ....

0040424c <zeroes.6993>:
  40424c:	30303030 30303030 30303030 30303030     0000000000000000
  40425c:	33323130 37363534 42413938 46454443     0123456789ABCDEF
  40426c:	00000000 33323130 37363534 62613938     ....0123456789ab
  40427c:	66656463 00000000 6c756e28 0000296c     cdef....(null)..

0040428c <blanks.6992>:
  40428c:	20202020 20202020 20202020 20202020                     

0040429c <_init>:
  40429c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40429e:	bf00      	nop
  4042a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
  4042a2:	bc08      	pop	{r3}
  4042a4:	469e      	mov	lr, r3
  4042a6:	4770      	bx	lr

004042a8 <__init_array_start>:
  4042a8:	00402285 	.word	0x00402285

004042ac <__frame_dummy_init_array_entry>:
  4042ac:	004000f1                                ..@.

004042b0 <_fini>:
  4042b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4042b2:	bf00      	nop
  4042b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
  4042b6:	bc08      	pop	{r3}
  4042b8:	469e      	mov	lr, r3
  4042ba:	4770      	bx	lr

004042bc <__fini_array_start>:
  4042bc:	004000cd 	.word	0x004000cd
