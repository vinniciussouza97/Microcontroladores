
Interrupt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000d10  00400000  00400000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000430  20000000  00400d10  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000098  20000430  00401140  00020430  2**2
                  ALLOC
  3 .stack        00003000  200004c8  004011d8  00020430  2**0
                  ALLOC
  4 .ARM.attributes 0000002a  00000000  00000000  00020430  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  0002045a  2**0
                  CONTENTS, READONLY
  6 .debug_info   000063cc  00000000  00000000  000204b3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001069  00000000  00000000  0002687f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00002530  00000000  00000000  000278e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000004e0  00000000  00000000  00029e18  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000460  00000000  00000000  0002a2f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0001183c  00000000  00000000  0002a758  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   000060c7  00000000  00000000  0003bf94  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000510cc  00000000  00000000  0004205b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00000b4c  00000000  00000000  00093128  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <_sfixed>:
  400000:	200034c8 	.word	0x200034c8
  400004:	00400889 	.word	0x00400889
  400008:	00400885 	.word	0x00400885
  40000c:	00400885 	.word	0x00400885
  400010:	00400885 	.word	0x00400885
  400014:	00400885 	.word	0x00400885
  400018:	00400885 	.word	0x00400885
	...
  40002c:	00400885 	.word	0x00400885
  400030:	00400885 	.word	0x00400885
  400034:	00000000 	.word	0x00000000
  400038:	00400885 	.word	0x00400885
  40003c:	00400885 	.word	0x00400885
  400040:	00400885 	.word	0x00400885
  400044:	00400885 	.word	0x00400885
  400048:	00400885 	.word	0x00400885
  40004c:	00400885 	.word	0x00400885
  400050:	00400885 	.word	0x00400885
  400054:	00400885 	.word	0x00400885
  400058:	00400885 	.word	0x00400885
  40005c:	00400885 	.word	0x00400885
  400060:	00400885 	.word	0x00400885
  400064:	00400885 	.word	0x00400885
  400068:	00000000 	.word	0x00000000
  40006c:	00400709 	.word	0x00400709
  400070:	0040071d 	.word	0x0040071d
  400074:	00400731 	.word	0x00400731
  400078:	00400885 	.word	0x00400885
  40007c:	00400885 	.word	0x00400885
	...
  400088:	00400885 	.word	0x00400885
  40008c:	00400885 	.word	0x00400885
  400090:	00400885 	.word	0x00400885
  400094:	00400885 	.word	0x00400885
  400098:	00400885 	.word	0x00400885
  40009c:	00400885 	.word	0x00400885
  4000a0:	00400885 	.word	0x00400885
  4000a4:	00400885 	.word	0x00400885
  4000a8:	00400885 	.word	0x00400885
  4000ac:	00400885 	.word	0x00400885
  4000b0:	00400885 	.word	0x00400885
  4000b4:	00400885 	.word	0x00400885
  4000b8:	00400885 	.word	0x00400885
  4000bc:	00400885 	.word	0x00400885
  4000c0:	00400885 	.word	0x00400885
  4000c4:	00400885 	.word	0x00400885
  4000c8:	00400885 	.word	0x00400885

004000cc <__do_global_dtors_aux>:
  4000cc:	b510      	push	{r4, lr}
  4000ce:	4c05      	ldr	r4, [pc, #20]	; (4000e4 <__do_global_dtors_aux+0x18>)
  4000d0:	7823      	ldrb	r3, [r4, #0]
  4000d2:	b933      	cbnz	r3, 4000e2 <__do_global_dtors_aux+0x16>
  4000d4:	4b04      	ldr	r3, [pc, #16]	; (4000e8 <__do_global_dtors_aux+0x1c>)
  4000d6:	b113      	cbz	r3, 4000de <__do_global_dtors_aux+0x12>
  4000d8:	4804      	ldr	r0, [pc, #16]	; (4000ec <__do_global_dtors_aux+0x20>)
  4000da:	f3af 8000 	nop.w
  4000de:	2301      	movs	r3, #1
  4000e0:	7023      	strb	r3, [r4, #0]
  4000e2:	bd10      	pop	{r4, pc}
  4000e4:	20000430 	.word	0x20000430
  4000e8:	00000000 	.word	0x00000000
  4000ec:	00400d10 	.word	0x00400d10

004000f0 <frame_dummy>:
  4000f0:	4b08      	ldr	r3, [pc, #32]	; (400114 <frame_dummy+0x24>)
  4000f2:	b510      	push	{r4, lr}
  4000f4:	b11b      	cbz	r3, 4000fe <frame_dummy+0xe>
  4000f6:	4908      	ldr	r1, [pc, #32]	; (400118 <frame_dummy+0x28>)
  4000f8:	4808      	ldr	r0, [pc, #32]	; (40011c <frame_dummy+0x2c>)
  4000fa:	f3af 8000 	nop.w
  4000fe:	4808      	ldr	r0, [pc, #32]	; (400120 <frame_dummy+0x30>)
  400100:	6803      	ldr	r3, [r0, #0]
  400102:	b903      	cbnz	r3, 400106 <frame_dummy+0x16>
  400104:	bd10      	pop	{r4, pc}
  400106:	4b07      	ldr	r3, [pc, #28]	; (400124 <frame_dummy+0x34>)
  400108:	2b00      	cmp	r3, #0
  40010a:	d0fb      	beq.n	400104 <frame_dummy+0x14>
  40010c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  400110:	4718      	bx	r3
  400112:	bf00      	nop
  400114:	00000000 	.word	0x00000000
  400118:	20000434 	.word	0x20000434
  40011c:	00400d10 	.word	0x00400d10
  400120:	00400d10 	.word	0x00400d10
  400124:	00000000 	.word	0x00000000

00400128 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  400128:	b510      	push	{r4, lr}
	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  40012a:	480e      	ldr	r0, [pc, #56]	; (400164 <sysclk_init+0x3c>)
  40012c:	4b0e      	ldr	r3, [pc, #56]	; (400168 <sysclk_init+0x40>)
  40012e:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  400130:	213e      	movs	r1, #62	; 0x3e
  400132:	2000      	movs	r0, #0
  400134:	4b0d      	ldr	r3, [pc, #52]	; (40016c <sysclk_init+0x44>)
  400136:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  400138:	4c0d      	ldr	r4, [pc, #52]	; (400170 <sysclk_init+0x48>)
  40013a:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  40013c:	2800      	cmp	r0, #0
  40013e:	d0fc      	beq.n	40013a <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  400140:	4b0c      	ldr	r3, [pc, #48]	; (400174 <sysclk_init+0x4c>)
  400142:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  400144:	4a0c      	ldr	r2, [pc, #48]	; (400178 <sysclk_init+0x50>)
  400146:	4b0d      	ldr	r3, [pc, #52]	; (40017c <sysclk_init+0x54>)
  400148:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
  40014a:	4c0d      	ldr	r4, [pc, #52]	; (400180 <sysclk_init+0x58>)
  40014c:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  40014e:	2800      	cmp	r0, #0
  400150:	d0fc      	beq.n	40014c <sysclk_init+0x24>

		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  400152:	2010      	movs	r0, #16
  400154:	4b0b      	ldr	r3, [pc, #44]	; (400184 <sysclk_init+0x5c>)
  400156:	4798      	blx	r3
		pmc_switch_mck_to_pllbck(CONFIG_SYSCLK_PRES);
	}
#endif

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  400158:	4b0b      	ldr	r3, [pc, #44]	; (400188 <sysclk_init+0x60>)
  40015a:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  40015c:	4801      	ldr	r0, [pc, #4]	; (400164 <sysclk_init+0x3c>)
  40015e:	4b02      	ldr	r3, [pc, #8]	; (400168 <sysclk_init+0x40>)
  400160:	4798      	blx	r3
  400162:	bd10      	pop	{r4, pc}
  400164:	07270e00 	.word	0x07270e00
  400168:	00400a4d 	.word	0x00400a4d
  40016c:	004007ad 	.word	0x004007ad
  400170:	00400801 	.word	0x00400801
  400174:	00400811 	.word	0x00400811
  400178:	20133f01 	.word	0x20133f01
  40017c:	400e0400 	.word	0x400e0400
  400180:	00400821 	.word	0x00400821
  400184:	00400745 	.word	0x00400745
  400188:	00400939 	.word	0x00400939

0040018c <board_init>:
#include "conf_board.h"
#include "gpio.h"
#include "ioport.h"

void board_init(void)
{
  40018c:	b538      	push	{r3, r4, r5, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  40018e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  400192:	4b46      	ldr	r3, [pc, #280]	; (4002ac <board_init+0x120>)
  400194:	605a      	str	r2, [r3, #4]
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  400196:	200b      	movs	r0, #11
  400198:	4c45      	ldr	r4, [pc, #276]	; (4002b0 <board_init+0x124>)
  40019a:	47a0      	blx	r4
  40019c:	200c      	movs	r0, #12
  40019e:	47a0      	blx	r4
  4001a0:	200d      	movs	r0, #13
  4001a2:	47a0      	blx	r4
	 * Here IOPORT must be initialized for others to use before setting up IO.
	 */
	ioport_init();

	/* Configure LED pins */
	gpio_configure_pin(LED0_GPIO, LED0_FLAGS);
  4001a4:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  4001a8:	2013      	movs	r0, #19
  4001aa:	4c42      	ldr	r4, [pc, #264]	; (4002b4 <board_init+0x128>)
  4001ac:	47a0      	blx	r4
	gpio_configure_pin(LED1_GPIO, LED1_FLAGS);
  4001ae:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  4001b2:	2014      	movs	r0, #20
  4001b4:	47a0      	blx	r4

	/* Configure Push Button pins */
	gpio_configure_pin(GPIO_PUSH_BUTTON_1, GPIO_PUSH_BUTTON_1_FLAGS);
  4001b6:	4940      	ldr	r1, [pc, #256]	; (4002b8 <board_init+0x12c>)
  4001b8:	2023      	movs	r0, #35	; 0x23
  4001ba:	47a0      	blx	r4
	gpio_configure_pin(GPIO_PUSH_BUTTON_2, GPIO_PUSH_BUTTON_2_FLAGS);
  4001bc:	493f      	ldr	r1, [pc, #252]	; (4002bc <board_init+0x130>)
  4001be:	204c      	movs	r0, #76	; 0x4c
  4001c0:	47a0      	blx	r4

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	gpio_configure_group(PINS_UART0_PIO, PINS_UART0, PINS_UART0_FLAGS);
  4001c2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  4001c6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
  4001ca:	483d      	ldr	r0, [pc, #244]	; (4002c0 <board_init+0x134>)
  4001cc:	4b3d      	ldr	r3, [pc, #244]	; (4002c4 <board_init+0x138>)
  4001ce:	4798      	blx	r3
#endif

	/* Configure ADC example pins */
#ifdef CONF_BOARD_ADC
	/* TC TIOA configuration */
	gpio_configure_pin(PIN_TC0_TIOA0,PIN_TC0_TIOA0_FLAGS);
  4001d0:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  4001d4:	2000      	movs	r0, #0
  4001d6:	47a0      	blx	r4

	/* ADC Trigger configuration */
	gpio_configure_pin(PINS_ADC_TRIG, PINS_ADC_TRIG_FLAG);
  4001d8:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  4001dc:	2008      	movs	r0, #8
  4001de:	47a0      	blx	r4

	/* PWMH0 configuration */
	gpio_configure_pin(PIN_PWMC_PWMH0_TRIG, PIN_PWMC_PWMH0_TRIG_FLAG);
  4001e0:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  4001e4:	2052      	movs	r0, #82	; 0x52
  4001e6:	47a0      	blx	r4
	gpio_configure_pin(TWI1_CLK_GPIO, TWI1_CLK_FLAGS);
#endif

	/* Configure SPI pins */
#ifdef CONF_BOARD_SPI
	gpio_configure_pin(SPI_MISO_GPIO, SPI_MISO_FLAGS);
  4001e8:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4001ec:	200c      	movs	r0, #12
  4001ee:	47a0      	blx	r4
	gpio_configure_pin(SPI_MOSI_GPIO, SPI_MOSI_FLAGS);
  4001f0:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4001f4:	200d      	movs	r0, #13
  4001f6:	47a0      	blx	r4
	gpio_configure_pin(SPI_SPCK_GPIO, SPI_SPCK_FLAGS);
  4001f8:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4001fc:	200e      	movs	r0, #14
  4001fe:	47a0      	blx	r4
	 * Hence a different PIN should be selected using the CONF_BOARD_SPI_NPCS_GPIO and
	 * CONF_BOARD_SPI_NPCS_FLAGS macros.
	 */

#  ifdef CONF_BOARD_SPI_NPCS0
	gpio_configure_pin(SPI_NPCS0_GPIO, SPI_NPCS0_FLAGS);
  400200:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400204:	200b      	movs	r0, #11
  400206:	47a0      	blx	r4
#  endif
#endif /* CONF_BOARD_SPI */

#ifdef CONF_BOARD_USART_RXD
	/* Configure USART RXD pin */
	gpio_configure_pin(PIN_USART1_RXD_IDX, PIN_USART1_RXD_FLAGS);
  400208:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  40020c:	2015      	movs	r0, #21
  40020e:	47a0      	blx	r4
#endif

#ifdef CONF_BOARD_USART_TXD
	/* Configure USART TXD pin */
	gpio_configure_pin(PIN_USART1_TXD_IDX, PIN_USART1_TXD_FLAGS);
  400210:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400214:	2016      	movs	r0, #22
  400216:	47a0      	blx	r4
	gpio_configure_pin(PIN_USART1_SCK_IDX, PIN_USART1_SCK_FLAGS);
#endif

#ifdef CONF_BOARD_ADM3312_EN
	/* Configure ADM33312 enable pin */
	gpio_configure_pin(PIN_USART1_EN_IDX, PIN_USART1_EN_FLAGS);
  400218:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
  40021c:	2017      	movs	r0, #23
  40021e:	47a0      	blx	r4
	gpio_set_pin_low(PIN_USART1_EN_IDX);
  400220:	2017      	movs	r0, #23
  400222:	4b29      	ldr	r3, [pc, #164]	; (4002c8 <board_init+0x13c>)
  400224:	4798      	blx	r3
	gpio_set_pin_low(PIN_RE_IDX);
#endif

#if defined(CONF_BOARD_ILI9325) || defined(CONF_BOARD_ILI93XX)
	/* Configure LCD EBI pins */
	gpio_configure_pin(PIN_EBI_DATA_BUS_D0, PIN_EBI_DATA_BUS_FLAGS);
  400226:	4d29      	ldr	r5, [pc, #164]	; (4002cc <board_init+0x140>)
  400228:	4629      	mov	r1, r5
  40022a:	2040      	movs	r0, #64	; 0x40
  40022c:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_DATA_BUS_D1, PIN_EBI_DATA_BUS_FLAGS);
  40022e:	4629      	mov	r1, r5
  400230:	2041      	movs	r0, #65	; 0x41
  400232:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_DATA_BUS_D2, PIN_EBI_DATA_BUS_FLAGS);
  400234:	4629      	mov	r1, r5
  400236:	2042      	movs	r0, #66	; 0x42
  400238:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_DATA_BUS_D3, PIN_EBI_DATA_BUS_FLAGS);
  40023a:	4629      	mov	r1, r5
  40023c:	2043      	movs	r0, #67	; 0x43
  40023e:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_DATA_BUS_D4, PIN_EBI_DATA_BUS_FLAGS);
  400240:	4629      	mov	r1, r5
  400242:	2044      	movs	r0, #68	; 0x44
  400244:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_DATA_BUS_D5, PIN_EBI_DATA_BUS_FLAGS);
  400246:	4629      	mov	r1, r5
  400248:	2045      	movs	r0, #69	; 0x45
  40024a:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_DATA_BUS_D6, PIN_EBI_DATA_BUS_FLAGS);
  40024c:	4629      	mov	r1, r5
  40024e:	2046      	movs	r0, #70	; 0x46
  400250:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_DATA_BUS_D7, PIN_EBI_DATA_BUS_FLAGS);
  400252:	4629      	mov	r1, r5
  400254:	2047      	movs	r0, #71	; 0x47
  400256:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_NRD, PIN_EBI_NRD_FLAGS);
  400258:	4629      	mov	r1, r5
  40025a:	204b      	movs	r0, #75	; 0x4b
  40025c:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_NWE, PIN_EBI_NWE_FLAGS);
  40025e:	4629      	mov	r1, r5
  400260:	2048      	movs	r0, #72	; 0x48
  400262:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_NCS1, PIN_EBI_NCS1_FLAGS);
  400264:	4629      	mov	r1, r5
  400266:	204f      	movs	r0, #79	; 0x4f
  400268:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_LCD_RS, PIN_EBI_LCD_RS_FLAGS);
  40026a:	4629      	mov	r1, r5
  40026c:	2053      	movs	r0, #83	; 0x53
  40026e:	47a0      	blx	r4
#endif

#ifdef CONF_BOARD_AAT3155
	/* Configure Backlight control pin */
	gpio_configure_pin(BOARD_AAT31XX_SET_GPIO, BOARD_AAT31XX_SET_FLAGS);
  400270:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
  400274:	204d      	movs	r0, #77	; 0x4d
  400276:	47a0      	blx	r4
#endif

#ifdef CONF_BOARD_ADS7843
	/* Configure Touchscreen SPI pins */
	gpio_configure_pin(BOARD_ADS7843_IRQ_GPIO,BOARD_ADS7843_IRQ_FLAGS);
  400278:	f105 5500 	add.w	r5, r5, #536870912	; 0x20000000
  40027c:	4629      	mov	r1, r5
  40027e:	2010      	movs	r0, #16
  400280:	47a0      	blx	r4
	gpio_configure_pin(BOARD_ADS7843_BUSY_GPIO, BOARD_ADS7843_BUSY_FLAGS);
  400282:	4629      	mov	r1, r5
  400284:	2011      	movs	r0, #17
  400286:	47a0      	blx	r4
	gpio_configure_pin(SPI_MISO_GPIO, SPI_MISO_FLAGS);
  400288:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  40028c:	200c      	movs	r0, #12
  40028e:	47a0      	blx	r4
	gpio_configure_pin(SPI_MOSI_GPIO, SPI_MOSI_FLAGS);
  400290:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400294:	200d      	movs	r0, #13
  400296:	47a0      	blx	r4
	gpio_configure_pin(SPI_SPCK_GPIO, SPI_SPCK_FLAGS);
  400298:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  40029c:	200e      	movs	r0, #14
  40029e:	47a0      	blx	r4
	gpio_configure_pin(SPI_NPCS0_GPIO, SPI_NPCS0_FLAGS);
  4002a0:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4002a4:	200b      	movs	r0, #11
  4002a6:	47a0      	blx	r4
  4002a8:	bd38      	pop	{r3, r4, r5, pc}
  4002aa:	bf00      	nop
  4002ac:	400e1450 	.word	0x400e1450
  4002b0:	00400831 	.word	0x00400831
  4002b4:	00400435 	.word	0x00400435
  4002b8:	28000079 	.word	0x28000079
  4002bc:	28000059 	.word	0x28000059
  4002c0:	400e0e00 	.word	0x400e0e00
  4002c4:	00400559 	.word	0x00400559
  4002c8:	00400419 	.word	0x00400419
  4002cc:	08000001 	.word	0x08000001

004002d0 <pio_set>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_SODR = ul_mask;
  4002d0:	6301      	str	r1, [r0, #48]	; 0x30
  4002d2:	4770      	bx	lr

004002d4 <pio_clear>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_clear(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_CODR = ul_mask;
  4002d4:	6341      	str	r1, [r0, #52]	; 0x34
  4002d6:	4770      	bx	lr

004002d8 <pio_get>:
uint32_t pio_get(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask)
{
	uint32_t ul_reg;

	if ((ul_type == PIO_OUTPUT_0) || (ul_type == PIO_OUTPUT_1)) {
  4002d8:	f021 6100 	bic.w	r1, r1, #134217728	; 0x8000000
  4002dc:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
		ul_reg = p_pio->PIO_ODSR;
  4002e0:	bf0c      	ite	eq
  4002e2:	6b83      	ldreq	r3, [r0, #56]	; 0x38
	} else {
		ul_reg = p_pio->PIO_PDSR;
  4002e4:	6bc3      	ldrne	r3, [r0, #60]	; 0x3c
  4002e6:	4213      	tst	r3, r2
	if ((ul_reg & ul_mask) == 0) {
		return 0;
	} else {
		return 1;
	}
}
  4002e8:	bf14      	ite	ne
  4002ea:	2001      	movne	r0, #1
  4002ec:	2000      	moveq	r0, #0
  4002ee:	4770      	bx	lr

004002f0 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  4002f0:	6442      	str	r2, [r0, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  4002f2:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  4002f6:	d02f      	beq.n	400358 <pio_set_peripheral+0x68>
  4002f8:	d807      	bhi.n	40030a <pio_set_peripheral+0x1a>
  4002fa:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  4002fe:	d014      	beq.n	40032a <pio_set_peripheral+0x3a>
  400300:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  400304:	d01e      	beq.n	400344 <pio_set_peripheral+0x54>
  400306:	b939      	cbnz	r1, 400318 <pio_set_peripheral+0x28>
  400308:	4770      	bx	lr
  40030a:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  40030e:	d036      	beq.n	40037e <pio_set_peripheral+0x8e>
  400310:	d804      	bhi.n	40031c <pio_set_peripheral+0x2c>
  400312:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  400316:	d029      	beq.n	40036c <pio_set_peripheral+0x7c>
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  400318:	6042      	str	r2, [r0, #4]
  40031a:	4770      	bx	lr

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  40031c:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  400320:	d02d      	beq.n	40037e <pio_set_peripheral+0x8e>
  400322:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  400326:	d02a      	beq.n	40037e <pio_set_peripheral+0x8e>
  400328:	e7f6      	b.n	400318 <pio_set_peripheral+0x28>
 * \param ul_type PIO type.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set_peripheral(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask)
{
  40032a:	b410      	push	{r4}
	p_pio->PIO_IDR = ul_mask;

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABCDSR[0];
  40032c:	6f04      	ldr	r4, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  40032e:	6f01      	ldr	r1, [r0, #112]	; 0x70
  400330:	43d3      	mvns	r3, r2
  400332:	4021      	ands	r1, r4
  400334:	4019      	ands	r1, r3
  400336:	6701      	str	r1, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  400338:	6f44      	ldr	r4, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  40033a:	6f41      	ldr	r1, [r0, #116]	; 0x74
  40033c:	4021      	ands	r1, r4
  40033e:	400b      	ands	r3, r1
  400340:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  400342:	e01a      	b.n	40037a <pio_set_peripheral+0x8a>
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  400344:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  400346:	4313      	orrs	r3, r2
  400348:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  40034a:	6f41      	ldr	r1, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  40034c:	6f43      	ldr	r3, [r0, #116]	; 0x74
  40034e:	400b      	ands	r3, r1
  400350:	ea23 0302 	bic.w	r3, r3, r2
  400354:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  400356:	e7df      	b.n	400318 <pio_set_peripheral+0x28>
#if (!SAMG)
	case PIO_PERIPH_C:
		ul_sr = p_pio->PIO_ABCDSR[0];
  400358:	6f01      	ldr	r1, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  40035a:	6f03      	ldr	r3, [r0, #112]	; 0x70
  40035c:	400b      	ands	r3, r1
  40035e:	ea23 0302 	bic.w	r3, r3, r2
  400362:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  400364:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  400366:	4313      	orrs	r3, r2
  400368:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  40036a:	e7d5      	b.n	400318 <pio_set_peripheral+0x28>
	case PIO_PERIPH_D:
		ul_sr = p_pio->PIO_ABCDSR[0];
  40036c:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  40036e:	4313      	orrs	r3, r2
  400370:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  400372:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  400374:	4313      	orrs	r3, r2
  400376:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  400378:	e7ce      	b.n	400318 <pio_set_peripheral+0x28>
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  40037a:	6042      	str	r2, [r0, #4]
}
  40037c:	bc10      	pop	{r4}
  40037e:	4770      	bx	lr

00400380 <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  400380:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  400382:	f012 0f01 	tst.w	r2, #1
		p_pio->PIO_PUER = ul_mask;
  400386:	bf14      	ite	ne
  400388:	6641      	strne	r1, [r0, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  40038a:	6601      	streq	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  40038c:	f012 0f0a 	tst.w	r2, #10
		p_pio->PIO_IFER = ul_mask;
  400390:	bf14      	ite	ne
  400392:	6201      	strne	r1, [r0, #32]
	} else {
		p_pio->PIO_IFDR = ul_mask;
  400394:	6241      	streq	r1, [r0, #36]	; 0x24
	}

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
  400396:	f012 0f02 	tst.w	r2, #2
  40039a:	d002      	beq.n	4003a2 <pio_set_input+0x22>
		p_pio->PIO_IFSCDR = ul_mask;
  40039c:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
  4003a0:	e004      	b.n	4003ac <pio_set_input+0x2c>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
  4003a2:	f012 0f08 	tst.w	r2, #8
			p_pio->PIO_IFSCER = ul_mask;
  4003a6:	bf18      	it	ne
  4003a8:	f8c0 1084 	strne.w	r1, [r0, #132]	; 0x84
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
  4003ac:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
  4003ae:	6001      	str	r1, [r0, #0]
  4003b0:	4770      	bx	lr
  4003b2:	bf00      	nop

004003b4 <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
  4003b4:	b410      	push	{r4}
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  4003b6:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  4003b8:	9c01      	ldr	r4, [sp, #4]
  4003ba:	b10c      	cbz	r4, 4003c0 <pio_set_output+0xc>
		p_pio->PIO_PUER = ul_mask;
  4003bc:	6641      	str	r1, [r0, #100]	; 0x64
  4003be:	e000      	b.n	4003c2 <pio_set_output+0xe>
	} else {
		p_pio->PIO_PUDR = ul_mask;
  4003c0:	6601      	str	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
  4003c2:	b10b      	cbz	r3, 4003c8 <pio_set_output+0x14>
		p_pio->PIO_MDER = ul_mask;
  4003c4:	6501      	str	r1, [r0, #80]	; 0x50
  4003c6:	e000      	b.n	4003ca <pio_set_output+0x16>
	} else {
		p_pio->PIO_MDDR = ul_mask;
  4003c8:	6541      	str	r1, [r0, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
  4003ca:	b10a      	cbz	r2, 4003d0 <pio_set_output+0x1c>
		p_pio->PIO_SODR = ul_mask;
  4003cc:	6301      	str	r1, [r0, #48]	; 0x30
  4003ce:	e000      	b.n	4003d2 <pio_set_output+0x1e>
	} else {
		p_pio->PIO_CODR = ul_mask;
  4003d0:	6341      	str	r1, [r0, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
  4003d2:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
  4003d4:	6001      	str	r1, [r0, #0]
}
  4003d6:	bc10      	pop	{r4}
  4003d8:	4770      	bx	lr
  4003da:	bf00      	nop

004003dc <pio_configure_interrupt>:
 */
void pio_configure_interrupt(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_attr)
{
	/* Configure additional interrupt mode registers. */
	if (ul_attr & PIO_IT_AIME) {
  4003dc:	f012 0f10 	tst.w	r2, #16
  4003e0:	d010      	beq.n	400404 <pio_configure_interrupt+0x28>
		/* Enable additional interrupt mode. */
		p_pio->PIO_AIMER = ul_mask;
  4003e2:	f8c0 10b0 	str.w	r1, [r0, #176]	; 0xb0

		/* If bit field of the selected pin is 1, set as
		   Rising Edge/High level detection event. */
		if (ul_attr & PIO_IT_RE_OR_HL) {
  4003e6:	f012 0f20 	tst.w	r2, #32
			/* Rising Edge or High Level */
			p_pio->PIO_REHLSR = ul_mask;
  4003ea:	bf14      	ite	ne
  4003ec:	f8c0 10d4 	strne.w	r1, [r0, #212]	; 0xd4
		} else {
			/* Falling Edge or Low Level */
			p_pio->PIO_FELLSR = ul_mask;
  4003f0:	f8c0 10d0 	streq.w	r1, [r0, #208]	; 0xd0
		}

		/* If bit field of the selected pin is 1, set as
		   edge detection source. */
		if (ul_attr & PIO_IT_EDGE) {
  4003f4:	f012 0f40 	tst.w	r2, #64	; 0x40
			/* Edge select */
			p_pio->PIO_ESR = ul_mask;
  4003f8:	bf14      	ite	ne
  4003fa:	f8c0 10c0 	strne.w	r1, [r0, #192]	; 0xc0
		} else {
			/* Level select */
			p_pio->PIO_LSR = ul_mask;
  4003fe:	f8c0 10c4 	streq.w	r1, [r0, #196]	; 0xc4
  400402:	4770      	bx	lr
		}
	} else {
		/* Disable additional interrupt mode. */
		p_pio->PIO_AIMDR = ul_mask;
  400404:	f8c0 10b4 	str.w	r1, [r0, #180]	; 0xb4
  400408:	4770      	bx	lr
  40040a:	bf00      	nop

0040040c <pio_enable_interrupt>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_enable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IER = ul_mask;
  40040c:	6401      	str	r1, [r0, #64]	; 0x40
  40040e:	4770      	bx	lr

00400410 <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  400410:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  400412:	4770      	bx	lr

00400414 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  400414:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  400416:	4770      	bx	lr

00400418 <pio_set_pin_low>:
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  400418:	0943      	lsrs	r3, r0, #5
  40041a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  40041e:	f203 7307 	addw	r3, r3, #1799	; 0x707
  400422:	025b      	lsls	r3, r3, #9
void pio_set_pin_low(uint32_t ul_pin)
{
	Pio *p_pio = pio_get_pin_group(ul_pin);

	/* Value to be driven on the I/O line: 0. */
	p_pio->PIO_CODR = 1 << (ul_pin & 0x1F);
  400424:	f000 001f 	and.w	r0, r0, #31
  400428:	2201      	movs	r2, #1
  40042a:	fa02 f000 	lsl.w	r0, r2, r0
  40042e:	6358      	str	r0, [r3, #52]	; 0x34
  400430:	4770      	bx	lr
  400432:	bf00      	nop

00400434 <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
  400434:	b570      	push	{r4, r5, r6, lr}
  400436:	b082      	sub	sp, #8
  400438:	460d      	mov	r5, r1
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  40043a:	0943      	lsrs	r3, r0, #5
  40043c:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  400440:	f203 7307 	addw	r3, r3, #1799	; 0x707
  400444:	025c      	lsls	r4, r3, #9
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
	Pio *p_pio = pio_get_pin_group(ul_pin);

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
  400446:	f001 43f0 	and.w	r3, r1, #2013265920	; 0x78000000
  40044a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  40044e:	d047      	beq.n	4004e0 <pio_configure_pin+0xac>
  400450:	d809      	bhi.n	400466 <pio_configure_pin+0x32>
  400452:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  400456:	d021      	beq.n	40049c <pio_configure_pin+0x68>
  400458:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  40045c:	d02f      	beq.n	4004be <pio_configure_pin+0x8a>
  40045e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  400462:	d16f      	bne.n	400544 <pio_configure_pin+0x110>
  400464:	e009      	b.n	40047a <pio_configure_pin+0x46>
  400466:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  40046a:	d055      	beq.n	400518 <pio_configure_pin+0xe4>
  40046c:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  400470:	d052      	beq.n	400518 <pio_configure_pin+0xe4>
  400472:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  400476:	d044      	beq.n	400502 <pio_configure_pin+0xce>
  400478:	e064      	b.n	400544 <pio_configure_pin+0x110>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
  40047a:	f000 001f 	and.w	r0, r0, #31
  40047e:	2601      	movs	r6, #1
  400480:	4086      	lsls	r6, r0
  400482:	4632      	mov	r2, r6
  400484:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400488:	4620      	mov	r0, r4
  40048a:	4b30      	ldr	r3, [pc, #192]	; (40054c <pio_configure_pin+0x118>)
  40048c:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  40048e:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  400492:	bf14      	ite	ne
  400494:	6666      	strne	r6, [r4, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  400496:	6626      	streq	r6, [r4, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  400498:	2001      	movs	r0, #1
  40049a:	e054      	b.n	400546 <pio_configure_pin+0x112>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
  40049c:	f000 001f 	and.w	r0, r0, #31
  4004a0:	2601      	movs	r6, #1
  4004a2:	4086      	lsls	r6, r0
  4004a4:	4632      	mov	r2, r6
  4004a6:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  4004aa:	4620      	mov	r0, r4
  4004ac:	4b27      	ldr	r3, [pc, #156]	; (40054c <pio_configure_pin+0x118>)
  4004ae:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  4004b0:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  4004b4:	bf14      	ite	ne
  4004b6:	6666      	strne	r6, [r4, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  4004b8:	6626      	streq	r6, [r4, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  4004ba:	2001      	movs	r0, #1
  4004bc:	e043      	b.n	400546 <pio_configure_pin+0x112>
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	case PIO_TYPE_PIO_PERIPH_C:
		pio_set_peripheral(p_pio, PIO_PERIPH_C, (1 << (ul_pin & 0x1F)));
  4004be:	f000 001f 	and.w	r0, r0, #31
  4004c2:	2601      	movs	r6, #1
  4004c4:	4086      	lsls	r6, r0
  4004c6:	4632      	mov	r2, r6
  4004c8:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  4004cc:	4620      	mov	r0, r4
  4004ce:	4b1f      	ldr	r3, [pc, #124]	; (40054c <pio_configure_pin+0x118>)
  4004d0:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  4004d2:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  4004d6:	bf14      	ite	ne
  4004d8:	6666      	strne	r6, [r4, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  4004da:	6626      	streq	r6, [r4, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  4004dc:	2001      	movs	r0, #1
  4004de:	e032      	b.n	400546 <pio_configure_pin+0x112>
		pio_set_peripheral(p_pio, PIO_PERIPH_C, (1 << (ul_pin & 0x1F)));
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_D:
		pio_set_peripheral(p_pio, PIO_PERIPH_D, (1 << (ul_pin & 0x1F)));
  4004e0:	f000 001f 	and.w	r0, r0, #31
  4004e4:	2601      	movs	r6, #1
  4004e6:	4086      	lsls	r6, r0
  4004e8:	4632      	mov	r2, r6
  4004ea:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  4004ee:	4620      	mov	r0, r4
  4004f0:	4b16      	ldr	r3, [pc, #88]	; (40054c <pio_configure_pin+0x118>)
  4004f2:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  4004f4:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  4004f8:	bf14      	ite	ne
  4004fa:	6666      	strne	r6, [r4, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  4004fc:	6626      	streq	r6, [r4, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  4004fe:	2001      	movs	r0, #1
  400500:	e021      	b.n	400546 <pio_configure_pin+0x112>
				(ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
  400502:	f000 011f 	and.w	r1, r0, #31
  400506:	2601      	movs	r6, #1
  400508:	462a      	mov	r2, r5
  40050a:	fa06 f101 	lsl.w	r1, r6, r1
  40050e:	4620      	mov	r0, r4
  400510:	4b0f      	ldr	r3, [pc, #60]	; (400550 <pio_configure_pin+0x11c>)
  400512:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
  400514:	4630      	mov	r0, r6
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;
  400516:	e016      	b.n	400546 <pio_configure_pin+0x112>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  400518:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
  40051c:	f000 011f 	and.w	r1, r0, #31
  400520:	2601      	movs	r6, #1
  400522:	ea05 0306 	and.w	r3, r5, r6
  400526:	9300      	str	r3, [sp, #0]
  400528:	f3c5 0380 	ubfx	r3, r5, #2, #1
  40052c:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
  400530:	bf14      	ite	ne
  400532:	2200      	movne	r2, #0
  400534:	2201      	moveq	r2, #1
  400536:	fa06 f101 	lsl.w	r1, r6, r1
  40053a:	4620      	mov	r0, r4
  40053c:	4c05      	ldr	r4, [pc, #20]	; (400554 <pio_configure_pin+0x120>)
  40053e:	47a0      	blx	r4

	default:
		return 0;
	}

	return 1;
  400540:	4630      	mov	r0, r6
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
  400542:	e000      	b.n	400546 <pio_configure_pin+0x112>

	default:
		return 0;
  400544:	2000      	movs	r0, #0
	}

	return 1;
}
  400546:	b002      	add	sp, #8
  400548:	bd70      	pop	{r4, r5, r6, pc}
  40054a:	bf00      	nop
  40054c:	004002f1 	.word	0x004002f1
  400550:	00400381 	.word	0x00400381
  400554:	004003b5 	.word	0x004003b5

00400558 <pio_configure_pin_group>:
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin_group(Pio *p_pio,
		uint32_t ul_mask, const uint32_t ul_flags)
{
  400558:	b570      	push	{r4, r5, r6, lr}
  40055a:	b082      	sub	sp, #8
  40055c:	4605      	mov	r5, r0
  40055e:	460e      	mov	r6, r1
  400560:	4614      	mov	r4, r2
	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
  400562:	f002 43f0 	and.w	r3, r2, #2013265920	; 0x78000000
  400566:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  40056a:	d038      	beq.n	4005de <pio_configure_pin_group+0x86>
  40056c:	d809      	bhi.n	400582 <pio_configure_pin_group+0x2a>
  40056e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  400572:	d01c      	beq.n	4005ae <pio_configure_pin_group+0x56>
  400574:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  400578:	d025      	beq.n	4005c6 <pio_configure_pin_group+0x6e>
  40057a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  40057e:	d150      	bne.n	400622 <pio_configure_pin_group+0xca>
  400580:	e009      	b.n	400596 <pio_configure_pin_group+0x3e>
  400582:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  400586:	d03a      	beq.n	4005fe <pio_configure_pin_group+0xa6>
  400588:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  40058c:	d037      	beq.n	4005fe <pio_configure_pin_group+0xa6>
  40058e:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  400592:	d030      	beq.n	4005f6 <pio_configure_pin_group+0x9e>
  400594:	e045      	b.n	400622 <pio_configure_pin_group+0xca>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
  400596:	460a      	mov	r2, r1
  400598:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  40059c:	4b22      	ldr	r3, [pc, #136]	; (400628 <pio_configure_pin_group+0xd0>)
  40059e:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  4005a0:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
  4005a4:	bf14      	ite	ne
  4005a6:	666e      	strne	r6, [r5, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  4005a8:	662e      	streq	r6, [r5, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  4005aa:	2001      	movs	r0, #1
  4005ac:	e03a      	b.n	400624 <pio_configure_pin_group+0xcc>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
  4005ae:	460a      	mov	r2, r1
  4005b0:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  4005b4:	4b1c      	ldr	r3, [pc, #112]	; (400628 <pio_configure_pin_group+0xd0>)
  4005b6:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  4005b8:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
  4005bc:	bf14      	ite	ne
  4005be:	666e      	strne	r6, [r5, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  4005c0:	662e      	streq	r6, [r5, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  4005c2:	2001      	movs	r0, #1
  4005c4:	e02e      	b.n	400624 <pio_configure_pin_group+0xcc>
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	case PIO_TYPE_PIO_PERIPH_C:
		pio_set_peripheral(p_pio, PIO_PERIPH_C, ul_mask);
  4005c6:	460a      	mov	r2, r1
  4005c8:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  4005cc:	4b16      	ldr	r3, [pc, #88]	; (400628 <pio_configure_pin_group+0xd0>)
  4005ce:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  4005d0:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
  4005d4:	bf14      	ite	ne
  4005d6:	666e      	strne	r6, [r5, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  4005d8:	662e      	streq	r6, [r5, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  4005da:	2001      	movs	r0, #1
  4005dc:	e022      	b.n	400624 <pio_configure_pin_group+0xcc>
	case PIO_TYPE_PIO_PERIPH_C:
		pio_set_peripheral(p_pio, PIO_PERIPH_C, ul_mask);
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_D:
		pio_set_peripheral(p_pio, PIO_PERIPH_D, ul_mask);
  4005de:	460a      	mov	r2, r1
  4005e0:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  4005e4:	4b10      	ldr	r3, [pc, #64]	; (400628 <pio_configure_pin_group+0xd0>)
  4005e6:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  4005e8:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
  4005ec:	bf14      	ite	ne
  4005ee:	666e      	strne	r6, [r5, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  4005f0:	662e      	streq	r6, [r5, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  4005f2:	2001      	movs	r0, #1
  4005f4:	e016      	b.n	400624 <pio_configure_pin_group+0xcc>
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
  4005f6:	4b0d      	ldr	r3, [pc, #52]	; (40062c <pio_configure_pin_group+0xd4>)
  4005f8:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
  4005fa:	2001      	movs	r0, #1
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;
  4005fc:	e012      	b.n	400624 <pio_configure_pin_group+0xcc>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
  4005fe:	f004 5260 	and.w	r2, r4, #939524096	; 0x38000000
  400602:	f004 0301 	and.w	r3, r4, #1
  400606:	9300      	str	r3, [sp, #0]
  400608:	f3c4 0380 	ubfx	r3, r4, #2, #1
  40060c:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
  400610:	bf14      	ite	ne
  400612:	2200      	movne	r2, #0
  400614:	2201      	moveq	r2, #1
  400616:	4631      	mov	r1, r6
  400618:	4628      	mov	r0, r5
  40061a:	4c05      	ldr	r4, [pc, #20]	; (400630 <pio_configure_pin_group+0xd8>)
  40061c:	47a0      	blx	r4

	default:
		return 0;
	}

	return 1;
  40061e:	2001      	movs	r0, #1
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
  400620:	e000      	b.n	400624 <pio_configure_pin_group+0xcc>

	default:
		return 0;
  400622:	2000      	movs	r0, #0
	}

	return 1;
}
  400624:	b002      	add	sp, #8
  400626:	bd70      	pop	{r4, r5, r6, pc}
  400628:	004002f1 	.word	0x004002f1
  40062c:	00400381 	.word	0x00400381
  400630:	004003b5 	.word	0x004003b5

00400634 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  400634:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  400638:	4681      	mov	r9, r0
  40063a:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  40063c:	4b12      	ldr	r3, [pc, #72]	; (400688 <pio_handler_process+0x54>)
  40063e:	4798      	blx	r3
  400640:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  400642:	4648      	mov	r0, r9
  400644:	4b11      	ldr	r3, [pc, #68]	; (40068c <pio_handler_process+0x58>)
  400646:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
  400648:	4005      	ands	r5, r0
  40064a:	d013      	beq.n	400674 <pio_handler_process+0x40>
  40064c:	4c10      	ldr	r4, [pc, #64]	; (400690 <pio_handler_process+0x5c>)
  40064e:	f104 0660 	add.w	r6, r4, #96	; 0x60
		/* Find triggering source */
		i = 0;
		while (status != 0) {
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
  400652:	6823      	ldr	r3, [r4, #0]
  400654:	4543      	cmp	r3, r8
  400656:	d108      	bne.n	40066a <pio_handler_process+0x36>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  400658:	6861      	ldr	r1, [r4, #4]
  40065a:	4229      	tst	r1, r5
  40065c:	d005      	beq.n	40066a <pio_handler_process+0x36>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  40065e:	68e3      	ldr	r3, [r4, #12]
  400660:	4640      	mov	r0, r8
  400662:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
  400664:	6863      	ldr	r3, [r4, #4]
  400666:	ea25 0503 	bic.w	r5, r5, r3
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
  40066a:	42b4      	cmp	r4, r6
  40066c:	d002      	beq.n	400674 <pio_handler_process+0x40>
  40066e:	3410      	adds	r4, #16

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
  400670:	2d00      	cmp	r5, #0
  400672:	d1ee      	bne.n	400652 <pio_handler_process+0x1e>
		}
	}

	/* Check capture events */
#if (SAM3S || SAM4S || SAM4E)
	if (pio_capture_enable_flag) {
  400674:	4b07      	ldr	r3, [pc, #28]	; (400694 <pio_handler_process+0x60>)
  400676:	681b      	ldr	r3, [r3, #0]
  400678:	b123      	cbz	r3, 400684 <pio_handler_process+0x50>
		if (pio_capture_handler) {
  40067a:	4b07      	ldr	r3, [pc, #28]	; (400698 <pio_handler_process+0x64>)
  40067c:	681b      	ldr	r3, [r3, #0]
  40067e:	b10b      	cbz	r3, 400684 <pio_handler_process+0x50>
			pio_capture_handler(p_pio);
  400680:	4648      	mov	r0, r9
  400682:	4798      	blx	r3
  400684:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  400688:	00400411 	.word	0x00400411
  40068c:	00400415 	.word	0x00400415
  400690:	20000454 	.word	0x20000454
  400694:	200004c4 	.word	0x200004c4
  400698:	20000450 	.word	0x20000450

0040069c <pio_handler_set>:
 *
 * \return 0 if successful, 1 if the maximum number of sources has been defined.
 */
uint32_t pio_handler_set(Pio *p_pio, uint32_t ul_id, uint32_t ul_mask,
		uint32_t ul_attr, void (*p_handler) (uint32_t, uint32_t))
{
  40069c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint8_t i;
	struct s_interrupt_source *pSource;

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
  40069e:	4c17      	ldr	r4, [pc, #92]	; (4006fc <pio_handler_set+0x60>)
  4006a0:	6826      	ldr	r6, [r4, #0]
  4006a2:	2e06      	cmp	r6, #6
  4006a4:	d828      	bhi.n	4006f8 <pio_handler_set+0x5c>
  4006a6:	f04f 0c00 	mov.w	ip, #0
  4006aa:	4664      	mov	r4, ip
		return 1;

    /* Check interrupt for this pin, if already defined, redefine it. */
	for (i = 0; i <= gs_ul_nb_sources; i++) {
		pSource = &(gs_interrupt_sources[i]);
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
  4006ac:	4f14      	ldr	r7, [pc, #80]	; (400700 <pio_handler_set+0x64>)
	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
		return 1;

    /* Check interrupt for this pin, if already defined, redefine it. */
	for (i = 0; i <= gs_ul_nb_sources; i++) {
		pSource = &(gs_interrupt_sources[i]);
  4006ae:	46a6      	mov	lr, r4
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
  4006b0:	0125      	lsls	r5, r4, #4
  4006b2:	597d      	ldr	r5, [r7, r5]
  4006b4:	428d      	cmp	r5, r1
  4006b6:	d104      	bne.n	4006c2 <pio_handler_set+0x26>
  4006b8:	eb07 1504 	add.w	r5, r7, r4, lsl #4
  4006bc:	686d      	ldr	r5, [r5, #4]
  4006be:	4295      	cmp	r5, r2
  4006c0:	d004      	beq.n	4006cc <pio_handler_set+0x30>

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
		return 1;

    /* Check interrupt for this pin, if already defined, redefine it. */
	for (i = 0; i <= gs_ul_nb_sources; i++) {
  4006c2:	3401      	adds	r4, #1
  4006c4:	b2e4      	uxtb	r4, r4
  4006c6:	46a4      	mov	ip, r4
  4006c8:	42a6      	cmp	r6, r4
  4006ca:	d2f0      	bcs.n	4006ae <pio_handler_set+0x12>
			break;
		}
	}

	/* Define new source */
	pSource->id = ul_id;
  4006cc:	4d0c      	ldr	r5, [pc, #48]	; (400700 <pio_handler_set+0x64>)
  4006ce:	ea4f 1e0e 	mov.w	lr, lr, lsl #4
  4006d2:	eb05 040e 	add.w	r4, r5, lr
  4006d6:	f845 100e 	str.w	r1, [r5, lr]
	pSource->mask = ul_mask;
  4006da:	6062      	str	r2, [r4, #4]
	pSource->attr = ul_attr;
  4006dc:	60a3      	str	r3, [r4, #8]
	pSource->handler = p_handler;
  4006de:	9906      	ldr	r1, [sp, #24]
  4006e0:	60e1      	str	r1, [r4, #12]
	if (i == gs_ul_nb_sources + 1) {
  4006e2:	3601      	adds	r6, #1
  4006e4:	4566      	cmp	r6, ip
		gs_ul_nb_sources++;
  4006e6:	bf04      	itt	eq
  4006e8:	4904      	ldreq	r1, [pc, #16]	; (4006fc <pio_handler_set+0x60>)
  4006ea:	600e      	streq	r6, [r1, #0]
  4006ec:	4611      	mov	r1, r2
	}

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);
  4006ee:	461a      	mov	r2, r3
  4006f0:	4b04      	ldr	r3, [pc, #16]	; (400704 <pio_handler_set+0x68>)
  4006f2:	4798      	blx	r3

	return 0;
  4006f4:	2000      	movs	r0, #0
  4006f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
{
    uint8_t i;
	struct s_interrupt_source *pSource;

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
		return 1;
  4006f8:	2001      	movs	r0, #1

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);

	return 0;
}
  4006fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4006fc:	2000044c 	.word	0x2000044c
  400700:	20000454 	.word	0x20000454
  400704:	004003dd 	.word	0x004003dd

00400708 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  400708:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
  40070a:	210b      	movs	r1, #11
  40070c:	4801      	ldr	r0, [pc, #4]	; (400714 <PIOA_Handler+0xc>)
  40070e:	4b02      	ldr	r3, [pc, #8]	; (400718 <PIOA_Handler+0x10>)
  400710:	4798      	blx	r3
  400712:	bd08      	pop	{r3, pc}
  400714:	400e0e00 	.word	0x400e0e00
  400718:	00400635 	.word	0x00400635

0040071c <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  40071c:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  40071e:	210c      	movs	r1, #12
  400720:	4801      	ldr	r0, [pc, #4]	; (400728 <PIOB_Handler+0xc>)
  400722:	4b02      	ldr	r3, [pc, #8]	; (40072c <PIOB_Handler+0x10>)
  400724:	4798      	blx	r3
  400726:	bd08      	pop	{r3, pc}
  400728:	400e1000 	.word	0x400e1000
  40072c:	00400635 	.word	0x00400635

00400730 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  400730:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
  400732:	210d      	movs	r1, #13
  400734:	4801      	ldr	r0, [pc, #4]	; (40073c <PIOC_Handler+0xc>)
  400736:	4b02      	ldr	r3, [pc, #8]	; (400740 <PIOC_Handler+0x10>)
  400738:	4798      	blx	r3
  40073a:	bd08      	pop	{r3, pc}
  40073c:	400e1200 	.word	0x400e1200
  400740:	00400635 	.word	0x00400635

00400744 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  400744:	4a18      	ldr	r2, [pc, #96]	; (4007a8 <pmc_switch_mck_to_pllack+0x64>)
  400746:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400748:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  40074c:	4318      	orrs	r0, r3
  40074e:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400750:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400752:	f013 0f08 	tst.w	r3, #8
  400756:	d003      	beq.n	400760 <pmc_switch_mck_to_pllack+0x1c>
  400758:	e009      	b.n	40076e <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  40075a:	3b01      	subs	r3, #1
  40075c:	d103      	bne.n	400766 <pmc_switch_mck_to_pllack+0x22>
  40075e:	e01e      	b.n	40079e <pmc_switch_mck_to_pllack+0x5a>
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400760:	f44f 6300 	mov.w	r3, #2048	; 0x800
  400764:	4910      	ldr	r1, [pc, #64]	; (4007a8 <pmc_switch_mck_to_pllack+0x64>)
  400766:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  400768:	f012 0f08 	tst.w	r2, #8
  40076c:	d0f5      	beq.n	40075a <pmc_switch_mck_to_pllack+0x16>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  40076e:	4a0e      	ldr	r2, [pc, #56]	; (4007a8 <pmc_switch_mck_to_pllack+0x64>)
  400770:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400772:	f023 0303 	bic.w	r3, r3, #3
  400776:	f043 0302 	orr.w	r3, r3, #2
  40077a:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  40077c:	6e90      	ldr	r0, [r2, #104]	; 0x68
  40077e:	f010 0008 	ands.w	r0, r0, #8
  400782:	d004      	beq.n	40078e <pmc_switch_mck_to_pllack+0x4a>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
  400784:	2000      	movs	r0, #0
  400786:	4770      	bx	lr
	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
  400788:	3b01      	subs	r3, #1
  40078a:	d103      	bne.n	400794 <pmc_switch_mck_to_pllack+0x50>
  40078c:	e009      	b.n	4007a2 <pmc_switch_mck_to_pllack+0x5e>
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  40078e:	f44f 6300 	mov.w	r3, #2048	; 0x800
  400792:	4905      	ldr	r1, [pc, #20]	; (4007a8 <pmc_switch_mck_to_pllack+0x64>)
  400794:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  400796:	f012 0f08 	tst.w	r2, #8
  40079a:	d0f5      	beq.n	400788 <pmc_switch_mck_to_pllack+0x44>
  40079c:	4770      	bx	lr

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
  40079e:	2001      	movs	r0, #1
  4007a0:	4770      	bx	lr
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
  4007a2:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  4007a4:	4770      	bx	lr
  4007a6:	bf00      	nop
  4007a8:	400e0400 	.word	0x400e0400

004007ac <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  4007ac:	b138      	cbz	r0, 4007be <pmc_switch_mainck_to_xtal+0x12>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  4007ae:	4911      	ldr	r1, [pc, #68]	; (4007f4 <pmc_switch_mainck_to_xtal+0x48>)
  4007b0:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  4007b2:	4a11      	ldr	r2, [pc, #68]	; (4007f8 <pmc_switch_mainck_to_xtal+0x4c>)
  4007b4:	401a      	ands	r2, r3
  4007b6:	4b11      	ldr	r3, [pc, #68]	; (4007fc <pmc_switch_mainck_to_xtal+0x50>)
  4007b8:	4313      	orrs	r3, r2
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  4007ba:	620b      	str	r3, [r1, #32]
  4007bc:	4770      	bx	lr
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  4007be:	480d      	ldr	r0, [pc, #52]	; (4007f4 <pmc_switch_mainck_to_xtal+0x48>)
  4007c0:	6a02      	ldr	r2, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  4007c2:	0209      	lsls	r1, r1, #8
  4007c4:	b289      	uxth	r1, r1
  4007c6:	f422 135c 	bic.w	r3, r2, #3604480	; 0x370000
  4007ca:	f023 0303 	bic.w	r3, r3, #3
  4007ce:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  4007d2:	f043 0301 	orr.w	r3, r3, #1
  4007d6:	430b      	orrs	r3, r1
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  4007d8:	6203      	str	r3, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  4007da:	4602      	mov	r2, r0
  4007dc:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4007de:	f013 0f01 	tst.w	r3, #1
  4007e2:	d0fb      	beq.n	4007dc <pmc_switch_mainck_to_xtal+0x30>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  4007e4:	4a03      	ldr	r2, [pc, #12]	; (4007f4 <pmc_switch_mainck_to_xtal+0x48>)
  4007e6:	6a13      	ldr	r3, [r2, #32]
  4007e8:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
  4007ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  4007f0:	6213      	str	r3, [r2, #32]
  4007f2:	4770      	bx	lr
  4007f4:	400e0400 	.word	0x400e0400
  4007f8:	fec8fffc 	.word	0xfec8fffc
  4007fc:	01370002 	.word	0x01370002

00400800 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  400800:	4b02      	ldr	r3, [pc, #8]	; (40080c <pmc_osc_is_ready_mainck+0xc>)
  400802:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  400804:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  400808:	4770      	bx	lr
  40080a:	bf00      	nop
  40080c:	400e0400 	.word	0x400e0400

00400810 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  400810:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  400814:	4b01      	ldr	r3, [pc, #4]	; (40081c <pmc_disable_pllack+0xc>)
  400816:	629a      	str	r2, [r3, #40]	; 0x28
  400818:	4770      	bx	lr
  40081a:	bf00      	nop
  40081c:	400e0400 	.word	0x400e0400

00400820 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  400820:	4b02      	ldr	r3, [pc, #8]	; (40082c <pmc_is_locked_pllack+0xc>)
  400822:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  400824:	f000 0002 	and.w	r0, r0, #2
  400828:	4770      	bx	lr
  40082a:	bf00      	nop
  40082c:	400e0400 	.word	0x400e0400

00400830 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
  400830:	2822      	cmp	r0, #34	; 0x22
  400832:	d81e      	bhi.n	400872 <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
  400834:	281f      	cmp	r0, #31
  400836:	d80c      	bhi.n	400852 <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  400838:	4b11      	ldr	r3, [pc, #68]	; (400880 <pmc_enable_periph_clk+0x50>)
  40083a:	699a      	ldr	r2, [r3, #24]
  40083c:	2301      	movs	r3, #1
  40083e:	4083      	lsls	r3, r0
  400840:	4393      	bics	r3, r2
  400842:	d018      	beq.n	400876 <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
  400844:	2301      	movs	r3, #1
  400846:	fa03 f000 	lsl.w	r0, r3, r0
  40084a:	4b0d      	ldr	r3, [pc, #52]	; (400880 <pmc_enable_periph_clk+0x50>)
  40084c:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  40084e:	2000      	movs	r0, #0
  400850:	4770      	bx	lr
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
  400852:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  400854:	4b0a      	ldr	r3, [pc, #40]	; (400880 <pmc_enable_periph_clk+0x50>)
  400856:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  40085a:	2301      	movs	r3, #1
  40085c:	4083      	lsls	r3, r0
  40085e:	4393      	bics	r3, r2
  400860:	d00b      	beq.n	40087a <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
  400862:	2301      	movs	r3, #1
  400864:	fa03 f000 	lsl.w	r0, r3, r0
  400868:	4b05      	ldr	r3, [pc, #20]	; (400880 <pmc_enable_periph_clk+0x50>)
  40086a:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
		}
#endif
	}

	return 0;
  40086e:	2000      	movs	r0, #0
  400870:	4770      	bx	lr
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
		return 1;
  400872:	2001      	movs	r0, #1
  400874:	4770      	bx	lr
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  400876:	2000      	movs	r0, #0
  400878:	4770      	bx	lr
  40087a:	2000      	movs	r0, #0
}
  40087c:	4770      	bx	lr
  40087e:	bf00      	nop
  400880:	400e0400 	.word	0x400e0400

00400884 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  400884:	e7fe      	b.n	400884 <Dummy_Handler>
  400886:	bf00      	nop

00400888 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  400888:	b508      	push	{r3, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc > pDest) {
  40088a:	4b20      	ldr	r3, [pc, #128]	; (40090c <Reset_Handler+0x84>)
  40088c:	4a20      	ldr	r2, [pc, #128]	; (400910 <Reset_Handler+0x88>)
  40088e:	429a      	cmp	r2, r3
  400890:	d912      	bls.n	4008b8 <Reset_Handler+0x30>
		for (; pDest < &_erelocate;) {
  400892:	4b20      	ldr	r3, [pc, #128]	; (400914 <Reset_Handler+0x8c>)
  400894:	4a1d      	ldr	r2, [pc, #116]	; (40090c <Reset_Handler+0x84>)
  400896:	429a      	cmp	r2, r3
  400898:	d21e      	bcs.n	4008d8 <Reset_Handler+0x50>
  40089a:	4611      	mov	r1, r2
  40089c:	3b01      	subs	r3, #1
  40089e:	1a9b      	subs	r3, r3, r2
  4008a0:	f023 0303 	bic.w	r3, r3, #3
  4008a4:	3304      	adds	r3, #4
  4008a6:	4a1a      	ldr	r2, [pc, #104]	; (400910 <Reset_Handler+0x88>)
  4008a8:	4413      	add	r3, r2
			*pDest++ = *pSrc++;
  4008aa:	f852 0b04 	ldr.w	r0, [r2], #4
  4008ae:	f841 0b04 	str.w	r0, [r1], #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc > pDest) {
		for (; pDest < &_erelocate;) {
  4008b2:	429a      	cmp	r2, r3
  4008b4:	d1f9      	bne.n	4008aa <Reset_Handler+0x22>
  4008b6:	e00f      	b.n	4008d8 <Reset_Handler+0x50>
			*pDest++ = *pSrc++;
		}
	} else if (pSrc < pDest) {
  4008b8:	4b14      	ldr	r3, [pc, #80]	; (40090c <Reset_Handler+0x84>)
  4008ba:	4a15      	ldr	r2, [pc, #84]	; (400910 <Reset_Handler+0x88>)
  4008bc:	429a      	cmp	r2, r3
  4008be:	d20b      	bcs.n	4008d8 <Reset_Handler+0x50>
		uint32_t nb_bytes = (uint32_t)&_erelocate - (uint32_t)&_srelocate;
  4008c0:	4b14      	ldr	r3, [pc, #80]	; (400914 <Reset_Handler+0x8c>)
  4008c2:	4a12      	ldr	r2, [pc, #72]	; (40090c <Reset_Handler+0x84>)
  4008c4:	1a9a      	subs	r2, r3, r2
  4008c6:	4814      	ldr	r0, [pc, #80]	; (400918 <Reset_Handler+0x90>)
		pSrc = (uint32_t*)((uint32_t)pSrc + nb_bytes) - 1;
  4008c8:	1811      	adds	r1, r2, r0
		pDest = (uint32_t*)((uint32_t)pDest + nb_bytes) - 1;
		for (;nb_bytes;nb_bytes -= 4) {
  4008ca:	b12a      	cbz	r2, 4008d8 <Reset_Handler+0x50>
			*pDest-- = *pSrc--;
  4008cc:	f851 2904 	ldr.w	r2, [r1], #-4
  4008d0:	f843 2d04 	str.w	r2, [r3, #-4]!
		}
	} else if (pSrc < pDest) {
		uint32_t nb_bytes = (uint32_t)&_erelocate - (uint32_t)&_srelocate;
		pSrc = (uint32_t*)((uint32_t)pSrc + nb_bytes) - 1;
		pDest = (uint32_t*)((uint32_t)pDest + nb_bytes) - 1;
		for (;nb_bytes;nb_bytes -= 4) {
  4008d4:	4281      	cmp	r1, r0
  4008d6:	d1f9      	bne.n	4008cc <Reset_Handler+0x44>

    No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
  4008d8:	bf00      	nop
		}
	}
	__NOP();

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  4008da:	4b10      	ldr	r3, [pc, #64]	; (40091c <Reset_Handler+0x94>)
  4008dc:	4a10      	ldr	r2, [pc, #64]	; (400920 <Reset_Handler+0x98>)
  4008de:	429a      	cmp	r2, r3
  4008e0:	d20b      	bcs.n	4008fa <Reset_Handler+0x72>
  4008e2:	1d13      	adds	r3, r2, #4
  4008e4:	4a0f      	ldr	r2, [pc, #60]	; (400924 <Reset_Handler+0x9c>)
  4008e6:	1ad2      	subs	r2, r2, r3
  4008e8:	f022 0203 	bic.w	r2, r2, #3
  4008ec:	441a      	add	r2, r3
  4008ee:	3b04      	subs	r3, #4
		*pDest++ = 0;
  4008f0:	2100      	movs	r1, #0
  4008f2:	f843 1b04 	str.w	r1, [r3], #4
		}
	}
	__NOP();

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  4008f6:	429a      	cmp	r2, r3
  4008f8:	d1fb      	bne.n	4008f2 <Reset_Handler+0x6a>
		*pDest++ = 0;
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc);
  4008fa:	4b0b      	ldr	r3, [pc, #44]	; (400928 <Reset_Handler+0xa0>)
  4008fc:	4a0b      	ldr	r2, [pc, #44]	; (40092c <Reset_Handler+0xa4>)
  4008fe:	609a      	str	r2, [r3, #8]

	/* Initialize the C library */
	__libc_init_array();
  400900:	4b0b      	ldr	r3, [pc, #44]	; (400930 <Reset_Handler+0xa8>)
  400902:	4798      	blx	r3

	/* Branch to main function */
	main();
  400904:	4b0b      	ldr	r3, [pc, #44]	; (400934 <Reset_Handler+0xac>)
  400906:	4798      	blx	r3
  400908:	e7fe      	b.n	400908 <Reset_Handler+0x80>
  40090a:	bf00      	nop
  40090c:	20000000 	.word	0x20000000
  400910:	00400d10 	.word	0x00400d10
  400914:	20000430 	.word	0x20000430
  400918:	00400d0c 	.word	0x00400d0c
  40091c:	200004c8 	.word	0x200004c8
  400920:	20000430 	.word	0x20000430
  400924:	200004cb 	.word	0x200004cb
  400928:	e000ed00 	.word	0xe000ed00
  40092c:	00400000 	.word	0x00400000
  400930:	00400ba9 	.word	0x00400ba9
  400934:	00400b71 	.word	0x00400b71

00400938 <SystemCoreClockUpdate>:
 * \brief Get Core Clock Frequency.
 */
void SystemCoreClockUpdate( void )
{
	/* Determine clock frequency according to clock register values */
	switch ( PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk ) {
  400938:	4b3d      	ldr	r3, [pc, #244]	; (400a30 <SystemCoreClockUpdate+0xf8>)
  40093a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40093c:	f003 0303 	and.w	r3, r3, #3
  400940:	2b03      	cmp	r3, #3
  400942:	d85d      	bhi.n	400a00 <SystemCoreClockUpdate+0xc8>
  400944:	e8df f003 	tbb	[pc, r3]
  400948:	2b2b0e02 	.word	0x2b2b0e02
	case PMC_MCKR_CSS_SLOW_CLK: /* Slow clock */
			if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL ) {
  40094c:	4b39      	ldr	r3, [pc, #228]	; (400a34 <SystemCoreClockUpdate+0xfc>)
  40094e:	695b      	ldr	r3, [r3, #20]
  400950:	f013 0f80 	tst.w	r3, #128	; 0x80
				SystemCoreClock = CHIP_FREQ_XTAL_32K;
  400954:	bf14      	ite	ne
  400956:	f44f 4200 	movne.w	r2, #32768	; 0x8000
			} else {
				SystemCoreClock = CHIP_FREQ_SLCK_RC;
  40095a:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  40095e:	4b36      	ldr	r3, [pc, #216]	; (400a38 <SystemCoreClockUpdate+0x100>)
  400960:	601a      	str	r2, [r3, #0]
  400962:	e04d      	b.n	400a00 <SystemCoreClockUpdate+0xc8>
			}
		break;
		
	case PMC_MCKR_CSS_MAIN_CLK: /* Main clock */
		if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  400964:	4b32      	ldr	r3, [pc, #200]	; (400a30 <SystemCoreClockUpdate+0xf8>)
  400966:	6a1b      	ldr	r3, [r3, #32]
  400968:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  40096c:	d003      	beq.n	400976 <SystemCoreClockUpdate+0x3e>
			SystemCoreClock = CHIP_FREQ_XTAL;
  40096e:	4a33      	ldr	r2, [pc, #204]	; (400a3c <SystemCoreClockUpdate+0x104>)
  400970:	4b31      	ldr	r3, [pc, #196]	; (400a38 <SystemCoreClockUpdate+0x100>)
  400972:	601a      	str	r2, [r3, #0]
  400974:	e044      	b.n	400a00 <SystemCoreClockUpdate+0xc8>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  400976:	4a32      	ldr	r2, [pc, #200]	; (400a40 <SystemCoreClockUpdate+0x108>)
  400978:	4b2f      	ldr	r3, [pc, #188]	; (400a38 <SystemCoreClockUpdate+0x100>)
  40097a:	601a      	str	r2, [r3, #0]
			
			switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  40097c:	4b2c      	ldr	r3, [pc, #176]	; (400a30 <SystemCoreClockUpdate+0xf8>)
  40097e:	6a1b      	ldr	r3, [r3, #32]
  400980:	f003 0370 	and.w	r3, r3, #112	; 0x70
  400984:	2b10      	cmp	r3, #16
  400986:	d002      	beq.n	40098e <SystemCoreClockUpdate+0x56>
  400988:	2b20      	cmp	r3, #32
  40098a:	d004      	beq.n	400996 <SystemCoreClockUpdate+0x5e>
  40098c:	e038      	b.n	400a00 <SystemCoreClockUpdate+0xc8>
			case CKGR_MOR_MOSCRCF_4_MHz:
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
			break;
			
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_8MHZ;
  40098e:	4a2d      	ldr	r2, [pc, #180]	; (400a44 <SystemCoreClockUpdate+0x10c>)
  400990:	4b29      	ldr	r3, [pc, #164]	; (400a38 <SystemCoreClockUpdate+0x100>)
  400992:	601a      	str	r2, [r3, #0]
			break;
  400994:	e034      	b.n	400a00 <SystemCoreClockUpdate+0xc8>
			
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
  400996:	4a29      	ldr	r2, [pc, #164]	; (400a3c <SystemCoreClockUpdate+0x104>)
  400998:	4b27      	ldr	r3, [pc, #156]	; (400a38 <SystemCoreClockUpdate+0x100>)
  40099a:	601a      	str	r2, [r3, #0]
			break;
  40099c:	e030      	b.n	400a00 <SystemCoreClockUpdate+0xc8>
		}
		break;
		
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_PLLB_CLK:	/* PLLB clock */
			if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  40099e:	4b24      	ldr	r3, [pc, #144]	; (400a30 <SystemCoreClockUpdate+0xf8>)
  4009a0:	6a1b      	ldr	r3, [r3, #32]
  4009a2:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  4009a6:	d003      	beq.n	4009b0 <SystemCoreClockUpdate+0x78>
				SystemCoreClock = CHIP_FREQ_XTAL;
  4009a8:	4a24      	ldr	r2, [pc, #144]	; (400a3c <SystemCoreClockUpdate+0x104>)
  4009aa:	4b23      	ldr	r3, [pc, #140]	; (400a38 <SystemCoreClockUpdate+0x100>)
  4009ac:	601a      	str	r2, [r3, #0]
  4009ae:	e012      	b.n	4009d6 <SystemCoreClockUpdate+0x9e>
			} else {
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  4009b0:	4a23      	ldr	r2, [pc, #140]	; (400a40 <SystemCoreClockUpdate+0x108>)
  4009b2:	4b21      	ldr	r3, [pc, #132]	; (400a38 <SystemCoreClockUpdate+0x100>)
  4009b4:	601a      	str	r2, [r3, #0]
				
				switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  4009b6:	4b1e      	ldr	r3, [pc, #120]	; (400a30 <SystemCoreClockUpdate+0xf8>)
  4009b8:	6a1b      	ldr	r3, [r3, #32]
  4009ba:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4009be:	2b10      	cmp	r3, #16
  4009c0:	d002      	beq.n	4009c8 <SystemCoreClockUpdate+0x90>
  4009c2:	2b20      	cmp	r3, #32
  4009c4:	d004      	beq.n	4009d0 <SystemCoreClockUpdate+0x98>
  4009c6:	e006      	b.n	4009d6 <SystemCoreClockUpdate+0x9e>
				case CKGR_MOR_MOSCRCF_4_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
					break;
				
				case CKGR_MOR_MOSCRCF_8_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_8MHZ;
  4009c8:	4a1e      	ldr	r2, [pc, #120]	; (400a44 <SystemCoreClockUpdate+0x10c>)
  4009ca:	4b1b      	ldr	r3, [pc, #108]	; (400a38 <SystemCoreClockUpdate+0x100>)
  4009cc:	601a      	str	r2, [r3, #0]
					break;
  4009ce:	e002      	b.n	4009d6 <SystemCoreClockUpdate+0x9e>
				
				case CKGR_MOR_MOSCRCF_12_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
  4009d0:	4a1a      	ldr	r2, [pc, #104]	; (400a3c <SystemCoreClockUpdate+0x104>)
  4009d2:	4b19      	ldr	r3, [pc, #100]	; (400a38 <SystemCoreClockUpdate+0x100>)
  4009d4:	601a      	str	r2, [r3, #0]
				default:
					break;
				}
			}
			
			if ( (uint32_t)(PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) ==
  4009d6:	4b16      	ldr	r3, [pc, #88]	; (400a30 <SystemCoreClockUpdate+0xf8>)
  4009d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4009da:	f003 0303 	and.w	r3, r3, #3
  4009de:	2b02      	cmp	r3, #2
					PMC_MCKR_CSS_PLLA_CLK ) {
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
  4009e0:	4a13      	ldr	r2, [pc, #76]	; (400a30 <SystemCoreClockUpdate+0xf8>)
  4009e2:	bf07      	ittee	eq
  4009e4:	6a93      	ldreq	r3, [r2, #40]	; 0x28
						>> CKGR_PLLAR_MULA_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
  4009e6:	6a92      	ldreq	r2, [r2, #40]	; 0x28
						>> CKGR_PLLAR_DIVA_Pos));
			} else {
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
  4009e8:	6ad3      	ldrne	r3, [r2, #44]	; 0x2c
						>> CKGR_PLLBR_MULB_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
  4009ea:	6ad2      	ldrne	r2, [r2, #44]	; 0x2c
  4009ec:	4812      	ldr	r0, [pc, #72]	; (400a38 <SystemCoreClockUpdate+0x100>)
  4009ee:	f3c3 410a 	ubfx	r1, r3, #16, #11
  4009f2:	6803      	ldr	r3, [r0, #0]
  4009f4:	fb01 3303 	mla	r3, r1, r3, r3
  4009f8:	b2d2      	uxtb	r2, r2
  4009fa:	fbb3 f3f2 	udiv	r3, r3, r2
  4009fe:	6003      	str	r3, [r0, #0]
		
	default:
		break;
	}

	if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 ) {
  400a00:	4b0b      	ldr	r3, [pc, #44]	; (400a30 <SystemCoreClockUpdate+0xf8>)
  400a02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400a04:	f003 0370 	and.w	r3, r3, #112	; 0x70
  400a08:	2b70      	cmp	r3, #112	; 0x70
  400a0a:	d107      	bne.n	400a1c <SystemCoreClockUpdate+0xe4>
		SystemCoreClock /= 3U;
  400a0c:	4a0a      	ldr	r2, [pc, #40]	; (400a38 <SystemCoreClockUpdate+0x100>)
  400a0e:	6813      	ldr	r3, [r2, #0]
  400a10:	490d      	ldr	r1, [pc, #52]	; (400a48 <SystemCoreClockUpdate+0x110>)
  400a12:	fba1 1303 	umull	r1, r3, r1, r3
  400a16:	085b      	lsrs	r3, r3, #1
  400a18:	6013      	str	r3, [r2, #0]
  400a1a:	4770      	bx	lr
	} else {
		SystemCoreClock >>=
			((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  400a1c:	4b04      	ldr	r3, [pc, #16]	; (400a30 <SystemCoreClockUpdate+0xf8>)
  400a1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
	}

	if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 ) {
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>=
  400a20:	4905      	ldr	r1, [pc, #20]	; (400a38 <SystemCoreClockUpdate+0x100>)
  400a22:	f3c3 1202 	ubfx	r2, r3, #4, #3
  400a26:	680b      	ldr	r3, [r1, #0]
  400a28:	40d3      	lsrs	r3, r2
  400a2a:	600b      	str	r3, [r1, #0]
  400a2c:	4770      	bx	lr
  400a2e:	bf00      	nop
  400a30:	400e0400 	.word	0x400e0400
  400a34:	400e1410 	.word	0x400e1410
  400a38:	20000000 	.word	0x20000000
  400a3c:	00b71b00 	.word	0x00b71b00
  400a40:	003d0900 	.word	0x003d0900
  400a44:	007a1200 	.word	0x007a1200
  400a48:	aaaaaaab 	.word	0xaaaaaaab

00400a4c <system_init_flash>:
				}
			}
		}
	}
#else
	if ( ul_clk < CHIP_FREQ_FWS_0 ) {
  400a4c:	4b1a      	ldr	r3, [pc, #104]	; (400ab8 <system_init_flash+0x6c>)
  400a4e:	4298      	cmp	r0, r3
  400a50:	d807      	bhi.n	400a62 <system_init_flash+0x16>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  400a52:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  400a56:	4a19      	ldr	r2, [pc, #100]	; (400abc <system_init_flash+0x70>)
  400a58:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  400a5a:	f502 7200 	add.w	r2, r2, #512	; 0x200
  400a5e:	6013      	str	r3, [r2, #0]
  400a60:	4770      	bx	lr
	} else {
		if ( ul_clk < CHIP_FREQ_FWS_1 ) {
  400a62:	4b17      	ldr	r3, [pc, #92]	; (400ac0 <system_init_flash+0x74>)
  400a64:	4298      	cmp	r0, r3
  400a66:	d806      	bhi.n	400a76 <system_init_flash+0x2a>
			EFC0->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  400a68:	4b16      	ldr	r3, [pc, #88]	; (400ac4 <system_init_flash+0x78>)
  400a6a:	4a14      	ldr	r2, [pc, #80]	; (400abc <system_init_flash+0x70>)
  400a6c:	6013      	str	r3, [r2, #0]
			EFC1->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  400a6e:	f502 7200 	add.w	r2, r2, #512	; 0x200
  400a72:	6013      	str	r3, [r2, #0]
  400a74:	4770      	bx	lr
		} else {
			if ( ul_clk < CHIP_FREQ_FWS_2 ) {
  400a76:	4b14      	ldr	r3, [pc, #80]	; (400ac8 <system_init_flash+0x7c>)
  400a78:	4298      	cmp	r0, r3
  400a7a:	d806      	bhi.n	400a8a <system_init_flash+0x3e>
				EFC0->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  400a7c:	4b13      	ldr	r3, [pc, #76]	; (400acc <system_init_flash+0x80>)
  400a7e:	4a0f      	ldr	r2, [pc, #60]	; (400abc <system_init_flash+0x70>)
  400a80:	6013      	str	r3, [r2, #0]
				EFC1->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  400a82:	f502 7200 	add.w	r2, r2, #512	; 0x200
  400a86:	6013      	str	r3, [r2, #0]
  400a88:	4770      	bx	lr
			} else {
				if ( ul_clk < CHIP_FREQ_FWS_3 ) {
  400a8a:	4b11      	ldr	r3, [pc, #68]	; (400ad0 <system_init_flash+0x84>)
  400a8c:	4298      	cmp	r0, r3
  400a8e:	d806      	bhi.n	400a9e <system_init_flash+0x52>
					EFC0->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  400a90:	4b10      	ldr	r3, [pc, #64]	; (400ad4 <system_init_flash+0x88>)
  400a92:	4a0a      	ldr	r2, [pc, #40]	; (400abc <system_init_flash+0x70>)
  400a94:	6013      	str	r3, [r2, #0]
					EFC1->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  400a96:	f502 7200 	add.w	r2, r2, #512	; 0x200
  400a9a:	6013      	str	r3, [r2, #0]
  400a9c:	4770      	bx	lr
				} else {
					if ( ul_clk < CHIP_FREQ_FWS_4 ) {
  400a9e:	4b0e      	ldr	r3, [pc, #56]	; (400ad8 <system_init_flash+0x8c>)
  400aa0:	4298      	cmp	r0, r3
						EFC0->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  400aa2:	bf94      	ite	ls
  400aa4:	f04f 2304 	movls.w	r3, #67109888	; 0x4000400
						EFC1->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
					} else {
						EFC0->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  400aa8:	4b0c      	ldrhi	r3, [pc, #48]	; (400adc <system_init_flash+0x90>)
  400aaa:	4a04      	ldr	r2, [pc, #16]	; (400abc <system_init_flash+0x70>)
  400aac:	6013      	str	r3, [r2, #0]
						EFC1->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  400aae:	f502 7200 	add.w	r2, r2, #512	; 0x200
  400ab2:	6013      	str	r3, [r2, #0]
  400ab4:	4770      	bx	lr
  400ab6:	bf00      	nop
  400ab8:	01312cff 	.word	0x01312cff
  400abc:	400e0a00 	.word	0x400e0a00
  400ac0:	026259ff 	.word	0x026259ff
  400ac4:	04000100 	.word	0x04000100
  400ac8:	039386ff 	.word	0x039386ff
  400acc:	04000200 	.word	0x04000200
  400ad0:	04c4b3ff 	.word	0x04c4b3ff
  400ad4:	04000300 	.word	0x04000300
  400ad8:	05f5e0ff 	.word	0x05f5e0ff
  400adc:	04000500 	.word	0x04000500

00400ae0 <tratamento_interrupcao_pioB>:
		
	}

}

void tratamento_interrupcao_pioB(const uint32_t id, const uint32_t index){
  400ae0:	b508      	push	{r3, lr}

	if(pio_get(PIOA,PIO_TYPE_PIO_OUTPUT_1,PINO_LED_AZUL))
  400ae2:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  400ae6:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  400aea:	4808      	ldr	r0, [pc, #32]	; (400b0c <tratamento_interrupcao_pioB+0x2c>)
  400aec:	4b08      	ldr	r3, [pc, #32]	; (400b10 <tratamento_interrupcao_pioB+0x30>)
  400aee:	4798      	blx	r3
  400af0:	b128      	cbz	r0, 400afe <tratamento_interrupcao_pioB+0x1e>
		pio_clear(PIOA,PINO_LED_AZUL);
  400af2:	f44f 2100 	mov.w	r1, #524288	; 0x80000
  400af6:	4805      	ldr	r0, [pc, #20]	; (400b0c <tratamento_interrupcao_pioB+0x2c>)
  400af8:	4b06      	ldr	r3, [pc, #24]	; (400b14 <tratamento_interrupcao_pioB+0x34>)
  400afa:	4798      	blx	r3
  400afc:	bd08      	pop	{r3, pc}
	else
		pio_set(PIOA,PINO_LED_AZUL);
  400afe:	f44f 2100 	mov.w	r1, #524288	; 0x80000
  400b02:	4802      	ldr	r0, [pc, #8]	; (400b0c <tratamento_interrupcao_pioB+0x2c>)
  400b04:	4b04      	ldr	r3, [pc, #16]	; (400b18 <tratamento_interrupcao_pioB+0x38>)
  400b06:	4798      	blx	r3
  400b08:	bd08      	pop	{r3, pc}
  400b0a:	bf00      	nop
  400b0c:	400e0e00 	.word	0x400e0e00
  400b10:	004002d9 	.word	0x004002d9
  400b14:	004002d5 	.word	0x004002d5
  400b18:	004002d1 	.word	0x004002d1

00400b1c <configurar_botao1>:
#define PINO_LED_AZUL PIO_PA19

void tratamento_interrupcao_pioB();
void configurar_botao1 ();

void configurar_botao1 (){
  400b1c:	b530      	push	{r4, r5, lr}
  400b1e:	b083      	sub	sp, #12
	pio_set_input(PIOB, PIO_PB3, PIO_PULLUP | PIO_DEBOUNCE);
  400b20:	4c0d      	ldr	r4, [pc, #52]	; (400b58 <configurar_botao1+0x3c>)
  400b22:	2209      	movs	r2, #9
  400b24:	2108      	movs	r1, #8
  400b26:	4620      	mov	r0, r4
  400b28:	4b0c      	ldr	r3, [pc, #48]	; (400b5c <configurar_botao1+0x40>)
  400b2a:	4798      	blx	r3
	pio_handler_set(PIOB, ID_PIOB, PIO_PB3, PIO_IT_RISE_EDGE, tratamento_interrupcao_pioB);
  400b2c:	4b0c      	ldr	r3, [pc, #48]	; (400b60 <configurar_botao1+0x44>)
  400b2e:	9300      	str	r3, [sp, #0]
  400b30:	2370      	movs	r3, #112	; 0x70
  400b32:	2208      	movs	r2, #8
  400b34:	210c      	movs	r1, #12
  400b36:	4620      	mov	r0, r4
  400b38:	4d0a      	ldr	r5, [pc, #40]	; (400b64 <configurar_botao1+0x48>)
  400b3a:	47a8      	blx	r5
	pio_enable_interrupt(PIOB, PIO_PB3);
  400b3c:	2108      	movs	r1, #8
  400b3e:	4620      	mov	r0, r4
  400b40:	4b09      	ldr	r3, [pc, #36]	; (400b68 <configurar_botao1+0x4c>)
  400b42:	4798      	blx	r3
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
  400b44:	4b09      	ldr	r3, [pc, #36]	; (400b6c <configurar_botao1+0x50>)
  400b46:	22f0      	movs	r2, #240	; 0xf0
  400b48:	f883 230c 	strb.w	r2, [r3, #780]	; 0x30c
    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  400b4c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  400b50:	601a      	str	r2, [r3, #0]

	NVIC_SetPriority (PIOB_IRQn,15);
	NVIC_EnableIRQ(PIOB_IRQn);
}
  400b52:	b003      	add	sp, #12
  400b54:	bd30      	pop	{r4, r5, pc}
  400b56:	bf00      	nop
  400b58:	400e1000 	.word	0x400e1000
  400b5c:	00400381 	.word	0x00400381
  400b60:	00400ae1 	.word	0x00400ae1
  400b64:	0040069d 	.word	0x0040069d
  400b68:	0040040d 	.word	0x0040040d
  400b6c:	e000e100 	.word	0xe000e100

00400b70 <main>:


int main (void)
{
  400b70:	b500      	push	{lr}
  400b72:	b083      	sub	sp, #12
	sysclk_init();
  400b74:	4b07      	ldr	r3, [pc, #28]	; (400b94 <main+0x24>)
  400b76:	4798      	blx	r3
	board_init();
  400b78:	4b07      	ldr	r3, [pc, #28]	; (400b98 <main+0x28>)
  400b7a:	4798      	blx	r3
	configurar_botao1();
  400b7c:	4b07      	ldr	r3, [pc, #28]	; (400b9c <main+0x2c>)
  400b7e:	4798      	blx	r3
	pio_set_output(PIOA,PINO_LED_AZUL,LOW,DISABLE,ENABLE);
  400b80:	2301      	movs	r3, #1
  400b82:	9300      	str	r3, [sp, #0]
  400b84:	2300      	movs	r3, #0
  400b86:	461a      	mov	r2, r3
  400b88:	f44f 2100 	mov.w	r1, #524288	; 0x80000
  400b8c:	4804      	ldr	r0, [pc, #16]	; (400ba0 <main+0x30>)
  400b8e:	4c05      	ldr	r4, [pc, #20]	; (400ba4 <main+0x34>)
  400b90:	47a0      	blx	r4
  400b92:	e7fe      	b.n	400b92 <main+0x22>
  400b94:	00400129 	.word	0x00400129
  400b98:	0040018d 	.word	0x0040018d
  400b9c:	00400b1d 	.word	0x00400b1d
  400ba0:	400e0e00 	.word	0x400e0e00
  400ba4:	004003b5 	.word	0x004003b5

00400ba8 <__libc_init_array>:
  400ba8:	b570      	push	{r4, r5, r6, lr}
  400baa:	4e0f      	ldr	r6, [pc, #60]	; (400be8 <__libc_init_array+0x40>)
  400bac:	4d0f      	ldr	r5, [pc, #60]	; (400bec <__libc_init_array+0x44>)
  400bae:	1b76      	subs	r6, r6, r5
  400bb0:	10b6      	asrs	r6, r6, #2
  400bb2:	bf18      	it	ne
  400bb4:	2400      	movne	r4, #0
  400bb6:	d005      	beq.n	400bc4 <__libc_init_array+0x1c>
  400bb8:	3401      	adds	r4, #1
  400bba:	f855 3b04 	ldr.w	r3, [r5], #4
  400bbe:	4798      	blx	r3
  400bc0:	42a6      	cmp	r6, r4
  400bc2:	d1f9      	bne.n	400bb8 <__libc_init_array+0x10>
  400bc4:	4e0a      	ldr	r6, [pc, #40]	; (400bf0 <__libc_init_array+0x48>)
  400bc6:	4d0b      	ldr	r5, [pc, #44]	; (400bf4 <__libc_init_array+0x4c>)
  400bc8:	1b76      	subs	r6, r6, r5
  400bca:	f000 f88f 	bl	400cec <_init>
  400bce:	10b6      	asrs	r6, r6, #2
  400bd0:	bf18      	it	ne
  400bd2:	2400      	movne	r4, #0
  400bd4:	d006      	beq.n	400be4 <__libc_init_array+0x3c>
  400bd6:	3401      	adds	r4, #1
  400bd8:	f855 3b04 	ldr.w	r3, [r5], #4
  400bdc:	4798      	blx	r3
  400bde:	42a6      	cmp	r6, r4
  400be0:	d1f9      	bne.n	400bd6 <__libc_init_array+0x2e>
  400be2:	bd70      	pop	{r4, r5, r6, pc}
  400be4:	bd70      	pop	{r4, r5, r6, pc}
  400be6:	bf00      	nop
  400be8:	00400cf8 	.word	0x00400cf8
  400bec:	00400cf8 	.word	0x00400cf8
  400bf0:	00400d00 	.word	0x00400d00
  400bf4:	00400cf8 	.word	0x00400cf8

00400bf8 <register_fini>:
  400bf8:	4b02      	ldr	r3, [pc, #8]	; (400c04 <register_fini+0xc>)
  400bfa:	b113      	cbz	r3, 400c02 <register_fini+0xa>
  400bfc:	4802      	ldr	r0, [pc, #8]	; (400c08 <register_fini+0x10>)
  400bfe:	f000 b805 	b.w	400c0c <atexit>
  400c02:	4770      	bx	lr
  400c04:	00000000 	.word	0x00000000
  400c08:	00400c19 	.word	0x00400c19

00400c0c <atexit>:
  400c0c:	2300      	movs	r3, #0
  400c0e:	4601      	mov	r1, r0
  400c10:	461a      	mov	r2, r3
  400c12:	4618      	mov	r0, r3
  400c14:	f000 b814 	b.w	400c40 <__register_exitproc>

00400c18 <__libc_fini_array>:
  400c18:	b538      	push	{r3, r4, r5, lr}
  400c1a:	4d07      	ldr	r5, [pc, #28]	; (400c38 <__libc_fini_array+0x20>)
  400c1c:	4c07      	ldr	r4, [pc, #28]	; (400c3c <__libc_fini_array+0x24>)
  400c1e:	1b2c      	subs	r4, r5, r4
  400c20:	10a4      	asrs	r4, r4, #2
  400c22:	d005      	beq.n	400c30 <__libc_fini_array+0x18>
  400c24:	3c01      	subs	r4, #1
  400c26:	f855 3d04 	ldr.w	r3, [r5, #-4]!
  400c2a:	4798      	blx	r3
  400c2c:	2c00      	cmp	r4, #0
  400c2e:	d1f9      	bne.n	400c24 <__libc_fini_array+0xc>
  400c30:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  400c34:	f000 b864 	b.w	400d00 <_fini>
  400c38:	00400d10 	.word	0x00400d10
  400c3c:	00400d0c 	.word	0x00400d0c

00400c40 <__register_exitproc>:
  400c40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  400c44:	4c25      	ldr	r4, [pc, #148]	; (400cdc <__register_exitproc+0x9c>)
  400c46:	6825      	ldr	r5, [r4, #0]
  400c48:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
  400c4c:	4606      	mov	r6, r0
  400c4e:	4688      	mov	r8, r1
  400c50:	4692      	mov	sl, r2
  400c52:	4699      	mov	r9, r3
  400c54:	b3c4      	cbz	r4, 400cc8 <__register_exitproc+0x88>
  400c56:	6860      	ldr	r0, [r4, #4]
  400c58:	281f      	cmp	r0, #31
  400c5a:	dc17      	bgt.n	400c8c <__register_exitproc+0x4c>
  400c5c:	1c43      	adds	r3, r0, #1
  400c5e:	b176      	cbz	r6, 400c7e <__register_exitproc+0x3e>
  400c60:	eb04 0580 	add.w	r5, r4, r0, lsl #2
  400c64:	2201      	movs	r2, #1
  400c66:	f8c5 a088 	str.w	sl, [r5, #136]	; 0x88
  400c6a:	f8d4 1188 	ldr.w	r1, [r4, #392]	; 0x188
  400c6e:	4082      	lsls	r2, r0
  400c70:	4311      	orrs	r1, r2
  400c72:	2e02      	cmp	r6, #2
  400c74:	f8c4 1188 	str.w	r1, [r4, #392]	; 0x188
  400c78:	f8c5 9108 	str.w	r9, [r5, #264]	; 0x108
  400c7c:	d01e      	beq.n	400cbc <__register_exitproc+0x7c>
  400c7e:	3002      	adds	r0, #2
  400c80:	6063      	str	r3, [r4, #4]
  400c82:	f844 8020 	str.w	r8, [r4, r0, lsl #2]
  400c86:	2000      	movs	r0, #0
  400c88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  400c8c:	4b14      	ldr	r3, [pc, #80]	; (400ce0 <__register_exitproc+0xa0>)
  400c8e:	b303      	cbz	r3, 400cd2 <__register_exitproc+0x92>
  400c90:	f44f 70c8 	mov.w	r0, #400	; 0x190
  400c94:	f3af 8000 	nop.w
  400c98:	4604      	mov	r4, r0
  400c9a:	b1d0      	cbz	r0, 400cd2 <__register_exitproc+0x92>
  400c9c:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
  400ca0:	2700      	movs	r7, #0
  400ca2:	e880 0088 	stmia.w	r0, {r3, r7}
  400ca6:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  400caa:	4638      	mov	r0, r7
  400cac:	2301      	movs	r3, #1
  400cae:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
  400cb2:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
  400cb6:	2e00      	cmp	r6, #0
  400cb8:	d0e1      	beq.n	400c7e <__register_exitproc+0x3e>
  400cba:	e7d1      	b.n	400c60 <__register_exitproc+0x20>
  400cbc:	f8d4 118c 	ldr.w	r1, [r4, #396]	; 0x18c
  400cc0:	430a      	orrs	r2, r1
  400cc2:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
  400cc6:	e7da      	b.n	400c7e <__register_exitproc+0x3e>
  400cc8:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
  400ccc:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  400cd0:	e7c1      	b.n	400c56 <__register_exitproc+0x16>
  400cd2:	f04f 30ff 	mov.w	r0, #4294967295
  400cd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  400cda:	bf00      	nop
  400cdc:	00400ce8 	.word	0x00400ce8
  400ce0:	00000000 	.word	0x00000000
  400ce4:	00000043 	.word	0x00000043

00400ce8 <_global_impure_ptr>:
  400ce8:	20000008                                ... 

00400cec <_init>:
  400cec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  400cee:	bf00      	nop
  400cf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
  400cf2:	bc08      	pop	{r3}
  400cf4:	469e      	mov	lr, r3
  400cf6:	4770      	bx	lr

00400cf8 <__init_array_start>:
  400cf8:	00400bf9 	.word	0x00400bf9

00400cfc <__frame_dummy_init_array_entry>:
  400cfc:	004000f1                                ..@.

00400d00 <_fini>:
  400d00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  400d02:	bf00      	nop
  400d04:	bcf8      	pop	{r3, r4, r5, r6, r7}
  400d06:	bc08      	pop	{r3}
  400d08:	469e      	mov	lr, r3
  400d0a:	4770      	bx	lr

00400d0c <__fini_array_start>:
  400d0c:	004000cd 	.word	0x004000cd
