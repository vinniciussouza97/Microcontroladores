
PWM_PWM_LED_EXAMPLE1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002ed8  00400000  00400000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000844  20000000  00402ed8  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000104  20000844  0040371c  00020844  2**2
                  ALLOC
  3 .stack        00003000  20000948  00403820  00020844  2**0
                  ALLOC
  4 .ARM.attributes 0000002a  00000000  00000000  00020844  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  0002086e  2**0
                  CONTENTS, READONLY
  6 .debug_info   0000d516  00000000  00000000  000208c7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002082  00000000  00000000  0002dddd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00005977  00000000  00000000  0002fe5f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000c40  00000000  00000000  000357d6  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000b40  00000000  00000000  00036416  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00014052  00000000  00000000  00036f56  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000c058  00000000  00000000  0004afa8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00054378  00000000  00000000  00057000  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  000022ec  00000000  00000000  000ab378  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <_sfixed>:
  400000:	20003948 	.word	0x20003948
  400004:	00400b01 	.word	0x00400b01
  400008:	00400afd 	.word	0x00400afd
  40000c:	00400afd 	.word	0x00400afd
  400010:	00400afd 	.word	0x00400afd
  400014:	00400afd 	.word	0x00400afd
  400018:	00400afd 	.word	0x00400afd
	...
  40002c:	00400afd 	.word	0x00400afd
  400030:	00400afd 	.word	0x00400afd
  400034:	00000000 	.word	0x00000000
  400038:	00400afd 	.word	0x00400afd
  40003c:	00400afd 	.word	0x00400afd
  400040:	00400afd 	.word	0x00400afd
  400044:	00400afd 	.word	0x00400afd
  400048:	00400afd 	.word	0x00400afd
  40004c:	00400afd 	.word	0x00400afd
  400050:	00400afd 	.word	0x00400afd
  400054:	00400afd 	.word	0x00400afd
  400058:	00400afd 	.word	0x00400afd
  40005c:	00400afd 	.word	0x00400afd
  400060:	00400afd 	.word	0x00400afd
  400064:	00400afd 	.word	0x00400afd
  400068:	00000000 	.word	0x00000000
  40006c:	00400669 	.word	0x00400669
  400070:	0040067d 	.word	0x0040067d
  400074:	00400691 	.word	0x00400691
  400078:	00400afd 	.word	0x00400afd
  40007c:	00400afd 	.word	0x00400afd
	...
  400088:	00400afd 	.word	0x00400afd
  40008c:	00400afd 	.word	0x00400afd
  400090:	00400afd 	.word	0x00400afd
  400094:	00400afd 	.word	0x00400afd
  400098:	00400afd 	.word	0x00400afd
  40009c:	00400f65 	.word	0x00400f65
  4000a0:	00400afd 	.word	0x00400afd
  4000a4:	00400afd 	.word	0x00400afd
  4000a8:	00400afd 	.word	0x00400afd
  4000ac:	00400afd 	.word	0x00400afd
  4000b0:	00400afd 	.word	0x00400afd
  4000b4:	00400f2d 	.word	0x00400f2d
  4000b8:	00400afd 	.word	0x00400afd
  4000bc:	00400afd 	.word	0x00400afd
  4000c0:	00400afd 	.word	0x00400afd
  4000c4:	00400afd 	.word	0x00400afd
  4000c8:	00400afd 	.word	0x00400afd

004000cc <__do_global_dtors_aux>:
  4000cc:	b510      	push	{r4, lr}
  4000ce:	4c05      	ldr	r4, [pc, #20]	; (4000e4 <__do_global_dtors_aux+0x18>)
  4000d0:	7823      	ldrb	r3, [r4, #0]
  4000d2:	b933      	cbnz	r3, 4000e2 <__do_global_dtors_aux+0x16>
  4000d4:	4b04      	ldr	r3, [pc, #16]	; (4000e8 <__do_global_dtors_aux+0x1c>)
  4000d6:	b113      	cbz	r3, 4000de <__do_global_dtors_aux+0x12>
  4000d8:	4804      	ldr	r0, [pc, #16]	; (4000ec <__do_global_dtors_aux+0x20>)
  4000da:	f3af 8000 	nop.w
  4000de:	2301      	movs	r3, #1
  4000e0:	7023      	strb	r3, [r4, #0]
  4000e2:	bd10      	pop	{r4, pc}
  4000e4:	20000844 	.word	0x20000844
  4000e8:	00000000 	.word	0x00000000
  4000ec:	00402ed8 	.word	0x00402ed8

004000f0 <frame_dummy>:
  4000f0:	4b08      	ldr	r3, [pc, #32]	; (400114 <frame_dummy+0x24>)
  4000f2:	b510      	push	{r4, lr}
  4000f4:	b11b      	cbz	r3, 4000fe <frame_dummy+0xe>
  4000f6:	4908      	ldr	r1, [pc, #32]	; (400118 <frame_dummy+0x28>)
  4000f8:	4808      	ldr	r0, [pc, #32]	; (40011c <frame_dummy+0x2c>)
  4000fa:	f3af 8000 	nop.w
  4000fe:	4808      	ldr	r0, [pc, #32]	; (400120 <frame_dummy+0x30>)
  400100:	6803      	ldr	r3, [r0, #0]
  400102:	b903      	cbnz	r3, 400106 <frame_dummy+0x16>
  400104:	bd10      	pop	{r4, pc}
  400106:	4b07      	ldr	r3, [pc, #28]	; (400124 <frame_dummy+0x34>)
  400108:	2b00      	cmp	r3, #0
  40010a:	d0fb      	beq.n	400104 <frame_dummy+0x14>
  40010c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  400110:	4718      	bx	r3
  400112:	bf00      	nop
  400114:	00000000 	.word	0x00000000
  400118:	20000848 	.word	0x20000848
  40011c:	00402ed8 	.word	0x00402ed8
  400120:	00402ed8 	.word	0x00402ed8
  400124:	00000000 	.word	0x00000000

00400128 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  400128:	b510      	push	{r4, lr}
	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  40012a:	480e      	ldr	r0, [pc, #56]	; (400164 <sysclk_init+0x3c>)
  40012c:	4b0e      	ldr	r3, [pc, #56]	; (400168 <sysclk_init+0x40>)
  40012e:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  400130:	213e      	movs	r1, #62	; 0x3e
  400132:	2000      	movs	r0, #0
  400134:	4b0d      	ldr	r3, [pc, #52]	; (40016c <sysclk_init+0x44>)
  400136:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  400138:	4c0d      	ldr	r4, [pc, #52]	; (400170 <sysclk_init+0x48>)
  40013a:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  40013c:	2800      	cmp	r0, #0
  40013e:	d0fc      	beq.n	40013a <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  400140:	4b0c      	ldr	r3, [pc, #48]	; (400174 <sysclk_init+0x4c>)
  400142:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  400144:	4a0c      	ldr	r2, [pc, #48]	; (400178 <sysclk_init+0x50>)
  400146:	4b0d      	ldr	r3, [pc, #52]	; (40017c <sysclk_init+0x54>)
  400148:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
  40014a:	4c0d      	ldr	r4, [pc, #52]	; (400180 <sysclk_init+0x58>)
  40014c:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  40014e:	2800      	cmp	r0, #0
  400150:	d0fc      	beq.n	40014c <sysclk_init+0x24>

		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  400152:	2010      	movs	r0, #16
  400154:	4b0b      	ldr	r3, [pc, #44]	; (400184 <sysclk_init+0x5c>)
  400156:	4798      	blx	r3
		pmc_switch_mck_to_pllbck(CONFIG_SYSCLK_PRES);
	}
#endif

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  400158:	4b0b      	ldr	r3, [pc, #44]	; (400188 <sysclk_init+0x60>)
  40015a:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  40015c:	4801      	ldr	r0, [pc, #4]	; (400164 <sysclk_init+0x3c>)
  40015e:	4b02      	ldr	r3, [pc, #8]	; (400168 <sysclk_init+0x40>)
  400160:	4798      	blx	r3
  400162:	bd10      	pop	{r4, pc}
  400164:	07270e00 	.word	0x07270e00
  400168:	00400cc5 	.word	0x00400cc5
  40016c:	0040070d 	.word	0x0040070d
  400170:	00400761 	.word	0x00400761
  400174:	00400771 	.word	0x00400771
  400178:	20133f01 	.word	0x20133f01
  40017c:	400e0400 	.word	0x400e0400
  400180:	00400781 	.word	0x00400781
  400184:	004006a5 	.word	0x004006a5
  400188:	00400bb1 	.word	0x00400bb1

0040018c <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
  40018c:	b990      	cbnz	r0, 4001b4 <_read+0x28>
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
  40018e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400192:	460c      	mov	r4, r1
  400194:	4690      	mov	r8, r2

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
  400196:	2a00      	cmp	r2, #0
  400198:	dd0f      	ble.n	4001ba <_read+0x2e>
  40019a:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
  40019c:	4e08      	ldr	r6, [pc, #32]	; (4001c0 <_read+0x34>)
  40019e:	4d09      	ldr	r5, [pc, #36]	; (4001c4 <_read+0x38>)
  4001a0:	6830      	ldr	r0, [r6, #0]
  4001a2:	4621      	mov	r1, r4
  4001a4:	682b      	ldr	r3, [r5, #0]
  4001a6:	4798      	blx	r3
		ptr++;
  4001a8:	3401      	adds	r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
  4001aa:	42a7      	cmp	r7, r4
  4001ac:	d1f8      	bne.n	4001a0 <_read+0x14>
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
  4001ae:	4640      	mov	r0, r8
  4001b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
		return -1;
  4001b4:	f04f 30ff 	mov.w	r0, #4294967295
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
}
  4001b8:	4770      	bx	lr

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
  4001ba:	2000      	movs	r0, #0
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
}
  4001bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4001c0:	20000914 	.word	0x20000914
  4001c4:	2000090c 	.word	0x2000090c

004001c8 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
  4001c8:	3801      	subs	r0, #1
  4001ca:	2802      	cmp	r0, #2
  4001cc:	d815      	bhi.n	4001fa <_write+0x32>
int __attribute__((weak))
_write (int file, const char *ptr, int len);

int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
  4001ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4001d2:	460e      	mov	r6, r1
  4001d4:	4614      	mov	r4, r2

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
  4001d6:	b19a      	cbz	r2, 400200 <_write+0x38>
  4001d8:	460d      	mov	r5, r1
		if (ptr_put(stdio_base, *ptr++) < 0) {
  4001da:	f8df 8038 	ldr.w	r8, [pc, #56]	; 400214 <_write+0x4c>
  4001de:	4f0c      	ldr	r7, [pc, #48]	; (400210 <_write+0x48>)
  4001e0:	f8d8 0000 	ldr.w	r0, [r8]
  4001e4:	f815 1b01 	ldrb.w	r1, [r5], #1
  4001e8:	683b      	ldr	r3, [r7, #0]
  4001ea:	4798      	blx	r3
  4001ec:	2800      	cmp	r0, #0
  4001ee:	db0a      	blt.n	400206 <_write+0x3e>
  4001f0:	1ba8      	subs	r0, r5, r6

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
  4001f2:	3c01      	subs	r4, #1
  4001f4:	d1f4      	bne.n	4001e0 <_write+0x18>
  4001f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
  4001fa:	f04f 30ff 	mov.w	r0, #4294967295
			return -1;
		}
		++nChars;
	}
	return nChars;
}
  4001fe:	4770      	bx	lr

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
  400200:	2000      	movs	r0, #0
  400202:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
  400206:	f04f 30ff 	mov.w	r0, #4294967295
		}
		++nChars;
	}
	return nChars;
}
  40020a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40020e:	bf00      	nop
  400210:	20000910 	.word	0x20000910
  400214:	20000914 	.word	0x20000914

00400218 <board_init>:
#include "conf_board.h"
#include "gpio.h"
#include "ioport.h"

void board_init(void)
{
  400218:	b510      	push	{r4, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  40021a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  40021e:	4b14      	ldr	r3, [pc, #80]	; (400270 <board_init+0x58>)
  400220:	605a      	str	r2, [r3, #4]
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  400222:	200b      	movs	r0, #11
  400224:	4c13      	ldr	r4, [pc, #76]	; (400274 <board_init+0x5c>)
  400226:	47a0      	blx	r4
  400228:	200c      	movs	r0, #12
  40022a:	47a0      	blx	r4
  40022c:	200d      	movs	r0, #13
  40022e:	47a0      	blx	r4
	 * Here IOPORT must be initialized for others to use before setting up IO.
	 */
	ioport_init();

	/* Configure LED pins */
	gpio_configure_pin(LED0_GPIO, LED0_FLAGS);
  400230:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  400234:	2013      	movs	r0, #19
  400236:	4c10      	ldr	r4, [pc, #64]	; (400278 <board_init+0x60>)
  400238:	47a0      	blx	r4
	gpio_configure_pin(LED1_GPIO, LED1_FLAGS);
  40023a:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  40023e:	2014      	movs	r0, #20
  400240:	47a0      	blx	r4

	/* Configure Push Button pins */
	gpio_configure_pin(GPIO_PUSH_BUTTON_1, GPIO_PUSH_BUTTON_1_FLAGS);
  400242:	490e      	ldr	r1, [pc, #56]	; (40027c <board_init+0x64>)
  400244:	2023      	movs	r0, #35	; 0x23
  400246:	47a0      	blx	r4
	gpio_configure_pin(GPIO_PUSH_BUTTON_2, GPIO_PUSH_BUTTON_2_FLAGS);
  400248:	490d      	ldr	r1, [pc, #52]	; (400280 <board_init+0x68>)
  40024a:	204c      	movs	r0, #76	; 0x4c
  40024c:	47a0      	blx	r4

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	gpio_configure_group(PINS_UART0_PIO, PINS_UART0, PINS_UART0_FLAGS);
  40024e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  400252:	f44f 61c0 	mov.w	r1, #1536	; 0x600
  400256:	480b      	ldr	r0, [pc, #44]	; (400284 <board_init+0x6c>)
  400258:	4b0b      	ldr	r3, [pc, #44]	; (400288 <board_init+0x70>)
  40025a:	4798      	blx	r3
	gpio_configure_pin(PIN_PWMC_PWMH0_TRIG, PIN_PWMC_PWMH0_TRIG_FLAG);
#endif

#ifdef CONF_BOARD_PWM_LED0
	/* Configure PWM LED0 pin */
	gpio_configure_pin(PIN_PWM_LED0_GPIO, PIN_PWM_LED0_FLAGS);
  40025c:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400260:	2013      	movs	r0, #19
  400262:	47a0      	blx	r4
#endif

#ifdef CONF_BOARD_PWM_LED1
	/* Configure PWM LED1 pin */
	gpio_configure_pin(PIN_PWM_LED1_GPIO, PIN_PWM_LED1_FLAGS);
  400264:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400268:	2014      	movs	r0, #20
  40026a:	47a0      	blx	r4
  40026c:	bd10      	pop	{r4, pc}
  40026e:	bf00      	nop
  400270:	400e1450 	.word	0x400e1450
  400274:	00400791 	.word	0x00400791
  400278:	00400401 	.word	0x00400401
  40027c:	28000079 	.word	0x28000079
  400280:	28000059 	.word	0x28000059
  400284:	400e0e00 	.word	0x400e0e00
  400288:	00400525 	.word	0x00400525

0040028c <adc_init>:
 *
 * \return 0 on success.
 */
uint32_t adc_init(Adc *p_adc, const uint32_t ul_mck,
		const uint32_t ul_adc_clock, const enum adc_startup_time startup)
{
  40028c:	b430      	push	{r4, r5}
	uint32_t ul_prescal;

	/*  Reset the controller. */
	p_adc->ADC_CR = ADC_CR_SWRST;
  40028e:	2401      	movs	r4, #1
  400290:	6004      	str	r4, [r0, #0]

	/* Reset Mode Register. */
	p_adc->ADC_MR = 0;
  400292:	2500      	movs	r5, #0
  400294:	6045      	str	r5, [r0, #4]

	/* Reset PDC transfer. */
	p_adc->ADC_PTCR = (ADC_PTCR_RXTDIS | ADC_PTCR_TXTDIS);
  400296:	f240 2402 	movw	r4, #514	; 0x202
  40029a:	f8c0 4120 	str.w	r4, [r0, #288]	; 0x120
	p_adc->ADC_RCR = 0;
  40029e:	f8c0 5104 	str.w	r5, [r0, #260]	; 0x104
	p_adc->ADC_RNCR = 0;
  4002a2:	f8c0 5114 	str.w	r5, [r0, #276]	; 0x114

	ul_prescal = ul_mck / (2 * ul_adc_clock) - 1;
	p_adc->ADC_MR |= ADC_MR_PRESCAL(ul_prescal) | startup;
  4002a6:	6844      	ldr	r4, [r0, #4]
  4002a8:	0052      	lsls	r2, r2, #1
  4002aa:	fbb1 f1f2 	udiv	r1, r1, r2
  4002ae:	1e4a      	subs	r2, r1, #1
  4002b0:	0212      	lsls	r2, r2, #8
  4002b2:	b292      	uxth	r2, r2
  4002b4:	4323      	orrs	r3, r4
  4002b6:	431a      	orrs	r2, r3
  4002b8:	6042      	str	r2, [r0, #4]
	return 0;
}
  4002ba:	4628      	mov	r0, r5
  4002bc:	bc30      	pop	{r4, r5}
  4002be:	4770      	bx	lr

004002c0 <adc_configure_trigger>:
 *
 */
void adc_configure_trigger(Adc *p_adc, const enum adc_trigger_t trigger,
		uint8_t uc_freerun)
{
	p_adc->ADC_MR |= trigger | ((uc_freerun << 7) & ADC_MR_FREERUN);
  4002c0:	6843      	ldr	r3, [r0, #4]
  4002c2:	01d2      	lsls	r2, r2, #7
  4002c4:	b2d2      	uxtb	r2, r2
  4002c6:	4319      	orrs	r1, r3
  4002c8:	4311      	orrs	r1, r2
  4002ca:	6041      	str	r1, [r0, #4]
  4002cc:	4770      	bx	lr
  4002ce:	bf00      	nop

004002d0 <adc_configure_timing>:
 * \param uc_settling Analog settling time = (uc_settling + 1) / ADC clock.
 * \param uc_transfer Data transfer time = (uc_transfer * 2 + 3) / ADC clock.
 */
void adc_configure_timing(Adc *p_adc, const uint8_t uc_tracking,
		const enum adc_settling_time_t settling,const uint8_t uc_transfer)
{
  4002d0:	b410      	push	{r4}
	p_adc->ADC_MR |= ADC_MR_TRANSFER(uc_transfer)
  4002d2:	6844      	ldr	r4, [r0, #4]
  4002d4:	0609      	lsls	r1, r1, #24
  4002d6:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
  4002da:	4322      	orrs	r2, r4
  4002dc:	430a      	orrs	r2, r1
  4002de:	071b      	lsls	r3, r3, #28
  4002e0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
  4002e4:	4313      	orrs	r3, r2
  4002e6:	6043      	str	r3, [r0, #4]
			| settling | ADC_MR_TRACKTIM(uc_tracking);
}
  4002e8:	bc10      	pop	{r4}
  4002ea:	4770      	bx	lr

004002ec <adc_start>:
 * \param p_adc Pointer to an ADC instance.
 */

void adc_start(Adc *p_adc)
{
	p_adc->ADC_CR = ADC_CR_START;
  4002ec:	2302      	movs	r3, #2
  4002ee:	6003      	str	r3, [r0, #0]
  4002f0:	4770      	bx	lr
  4002f2:	bf00      	nop

004002f4 <adc_enable_channel>:
 * \param p_adc Pointer to an ADC instance.
 * \param adc_ch ADC channel number.
 */
void adc_enable_channel(Adc *p_adc, const enum adc_channel_num_t adc_ch)
{
	p_adc->ADC_CHER = 1 << adc_ch;
  4002f4:	2301      	movs	r3, #1
  4002f6:	fa03 f101 	lsl.w	r1, r3, r1
  4002fa:	6101      	str	r1, [r0, #16]
  4002fc:	4770      	bx	lr
  4002fe:	bf00      	nop

00400300 <adc_get_latest_value>:
 *
 * \return ADC latest value.
 */
uint32_t adc_get_latest_value(const Adc *p_adc)
{
	return p_adc->ADC_LCDR;
  400300:	6a00      	ldr	r0, [r0, #32]
}
  400302:	4770      	bx	lr

00400304 <adc_enable_interrupt>:
 * \param p_adc Pointer to an ADC instance.
 * \param ul_source Interrupts to be enabled.
 */
void adc_enable_interrupt(Adc *p_adc, const uint32_t ul_source)
{
	p_adc->ADC_IER = ul_source;
  400304:	6241      	str	r1, [r0, #36]	; 0x24
  400306:	4770      	bx	lr

00400308 <adc_get_status>:
 *
 * \return ADC status structure.
 */
uint32_t adc_get_status(const Adc *p_adc)
{
	return p_adc->ADC_ISR;
  400308:	6b00      	ldr	r0, [r0, #48]	; 0x30
}
  40030a:	4770      	bx	lr

0040030c <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  40030c:	6442      	str	r2, [r0, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  40030e:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  400312:	d02f      	beq.n	400374 <pio_set_peripheral+0x68>
  400314:	d807      	bhi.n	400326 <pio_set_peripheral+0x1a>
  400316:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  40031a:	d014      	beq.n	400346 <pio_set_peripheral+0x3a>
  40031c:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  400320:	d01e      	beq.n	400360 <pio_set_peripheral+0x54>
  400322:	b939      	cbnz	r1, 400334 <pio_set_peripheral+0x28>
  400324:	4770      	bx	lr
  400326:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  40032a:	d036      	beq.n	40039a <pio_set_peripheral+0x8e>
  40032c:	d804      	bhi.n	400338 <pio_set_peripheral+0x2c>
  40032e:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  400332:	d029      	beq.n	400388 <pio_set_peripheral+0x7c>
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  400334:	6042      	str	r2, [r0, #4]
  400336:	4770      	bx	lr

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  400338:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  40033c:	d02d      	beq.n	40039a <pio_set_peripheral+0x8e>
  40033e:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  400342:	d02a      	beq.n	40039a <pio_set_peripheral+0x8e>
  400344:	e7f6      	b.n	400334 <pio_set_peripheral+0x28>
 * \param ul_type PIO type.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set_peripheral(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask)
{
  400346:	b410      	push	{r4}
	p_pio->PIO_IDR = ul_mask;

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABCDSR[0];
  400348:	6f04      	ldr	r4, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  40034a:	6f01      	ldr	r1, [r0, #112]	; 0x70
  40034c:	43d3      	mvns	r3, r2
  40034e:	4021      	ands	r1, r4
  400350:	4019      	ands	r1, r3
  400352:	6701      	str	r1, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  400354:	6f44      	ldr	r4, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  400356:	6f41      	ldr	r1, [r0, #116]	; 0x74
  400358:	4021      	ands	r1, r4
  40035a:	400b      	ands	r3, r1
  40035c:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  40035e:	e01a      	b.n	400396 <pio_set_peripheral+0x8a>
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  400360:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  400362:	4313      	orrs	r3, r2
  400364:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  400366:	6f41      	ldr	r1, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  400368:	6f43      	ldr	r3, [r0, #116]	; 0x74
  40036a:	400b      	ands	r3, r1
  40036c:	ea23 0302 	bic.w	r3, r3, r2
  400370:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  400372:	e7df      	b.n	400334 <pio_set_peripheral+0x28>
#if (!SAMG)
	case PIO_PERIPH_C:
		ul_sr = p_pio->PIO_ABCDSR[0];
  400374:	6f01      	ldr	r1, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  400376:	6f03      	ldr	r3, [r0, #112]	; 0x70
  400378:	400b      	ands	r3, r1
  40037a:	ea23 0302 	bic.w	r3, r3, r2
  40037e:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  400380:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  400382:	4313      	orrs	r3, r2
  400384:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  400386:	e7d5      	b.n	400334 <pio_set_peripheral+0x28>
	case PIO_PERIPH_D:
		ul_sr = p_pio->PIO_ABCDSR[0];
  400388:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  40038a:	4313      	orrs	r3, r2
  40038c:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  40038e:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  400390:	4313      	orrs	r3, r2
  400392:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  400394:	e7ce      	b.n	400334 <pio_set_peripheral+0x28>
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  400396:	6042      	str	r2, [r0, #4]
}
  400398:	bc10      	pop	{r4}
  40039a:	4770      	bx	lr

0040039c <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  40039c:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  40039e:	f012 0f01 	tst.w	r2, #1
		p_pio->PIO_PUER = ul_mask;
  4003a2:	bf14      	ite	ne
  4003a4:	6641      	strne	r1, [r0, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  4003a6:	6601      	streq	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  4003a8:	f012 0f0a 	tst.w	r2, #10
		p_pio->PIO_IFER = ul_mask;
  4003ac:	bf14      	ite	ne
  4003ae:	6201      	strne	r1, [r0, #32]
	} else {
		p_pio->PIO_IFDR = ul_mask;
  4003b0:	6241      	streq	r1, [r0, #36]	; 0x24
	}

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
  4003b2:	f012 0f02 	tst.w	r2, #2
  4003b6:	d002      	beq.n	4003be <pio_set_input+0x22>
		p_pio->PIO_IFSCDR = ul_mask;
  4003b8:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
  4003bc:	e004      	b.n	4003c8 <pio_set_input+0x2c>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
  4003be:	f012 0f08 	tst.w	r2, #8
			p_pio->PIO_IFSCER = ul_mask;
  4003c2:	bf18      	it	ne
  4003c4:	f8c0 1084 	strne.w	r1, [r0, #132]	; 0x84
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
  4003c8:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
  4003ca:	6001      	str	r1, [r0, #0]
  4003cc:	4770      	bx	lr
  4003ce:	bf00      	nop

004003d0 <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
  4003d0:	b410      	push	{r4}
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  4003d2:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  4003d4:	9c01      	ldr	r4, [sp, #4]
  4003d6:	b10c      	cbz	r4, 4003dc <pio_set_output+0xc>
		p_pio->PIO_PUER = ul_mask;
  4003d8:	6641      	str	r1, [r0, #100]	; 0x64
  4003da:	e000      	b.n	4003de <pio_set_output+0xe>
	} else {
		p_pio->PIO_PUDR = ul_mask;
  4003dc:	6601      	str	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
  4003de:	b10b      	cbz	r3, 4003e4 <pio_set_output+0x14>
		p_pio->PIO_MDER = ul_mask;
  4003e0:	6501      	str	r1, [r0, #80]	; 0x50
  4003e2:	e000      	b.n	4003e6 <pio_set_output+0x16>
	} else {
		p_pio->PIO_MDDR = ul_mask;
  4003e4:	6541      	str	r1, [r0, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
  4003e6:	b10a      	cbz	r2, 4003ec <pio_set_output+0x1c>
		p_pio->PIO_SODR = ul_mask;
  4003e8:	6301      	str	r1, [r0, #48]	; 0x30
  4003ea:	e000      	b.n	4003ee <pio_set_output+0x1e>
	} else {
		p_pio->PIO_CODR = ul_mask;
  4003ec:	6341      	str	r1, [r0, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
  4003ee:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
  4003f0:	6001      	str	r1, [r0, #0]
}
  4003f2:	bc10      	pop	{r4}
  4003f4:	4770      	bx	lr
  4003f6:	bf00      	nop

004003f8 <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  4003f8:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  4003fa:	4770      	bx	lr

004003fc <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  4003fc:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  4003fe:	4770      	bx	lr

00400400 <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
  400400:	b570      	push	{r4, r5, r6, lr}
  400402:	b082      	sub	sp, #8
  400404:	460d      	mov	r5, r1
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  400406:	0943      	lsrs	r3, r0, #5
  400408:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  40040c:	f203 7307 	addw	r3, r3, #1799	; 0x707
  400410:	025c      	lsls	r4, r3, #9
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
	Pio *p_pio = pio_get_pin_group(ul_pin);

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
  400412:	f001 43f0 	and.w	r3, r1, #2013265920	; 0x78000000
  400416:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  40041a:	d047      	beq.n	4004ac <pio_configure_pin+0xac>
  40041c:	d809      	bhi.n	400432 <pio_configure_pin+0x32>
  40041e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  400422:	d021      	beq.n	400468 <pio_configure_pin+0x68>
  400424:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  400428:	d02f      	beq.n	40048a <pio_configure_pin+0x8a>
  40042a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  40042e:	d16f      	bne.n	400510 <pio_configure_pin+0x110>
  400430:	e009      	b.n	400446 <pio_configure_pin+0x46>
  400432:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  400436:	d055      	beq.n	4004e4 <pio_configure_pin+0xe4>
  400438:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  40043c:	d052      	beq.n	4004e4 <pio_configure_pin+0xe4>
  40043e:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  400442:	d044      	beq.n	4004ce <pio_configure_pin+0xce>
  400444:	e064      	b.n	400510 <pio_configure_pin+0x110>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
  400446:	f000 001f 	and.w	r0, r0, #31
  40044a:	2601      	movs	r6, #1
  40044c:	4086      	lsls	r6, r0
  40044e:	4632      	mov	r2, r6
  400450:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400454:	4620      	mov	r0, r4
  400456:	4b30      	ldr	r3, [pc, #192]	; (400518 <pio_configure_pin+0x118>)
  400458:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  40045a:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  40045e:	bf14      	ite	ne
  400460:	6666      	strne	r6, [r4, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  400462:	6626      	streq	r6, [r4, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  400464:	2001      	movs	r0, #1
  400466:	e054      	b.n	400512 <pio_configure_pin+0x112>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
  400468:	f000 001f 	and.w	r0, r0, #31
  40046c:	2601      	movs	r6, #1
  40046e:	4086      	lsls	r6, r0
  400470:	4632      	mov	r2, r6
  400472:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400476:	4620      	mov	r0, r4
  400478:	4b27      	ldr	r3, [pc, #156]	; (400518 <pio_configure_pin+0x118>)
  40047a:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  40047c:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  400480:	bf14      	ite	ne
  400482:	6666      	strne	r6, [r4, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  400484:	6626      	streq	r6, [r4, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  400486:	2001      	movs	r0, #1
  400488:	e043      	b.n	400512 <pio_configure_pin+0x112>
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	case PIO_TYPE_PIO_PERIPH_C:
		pio_set_peripheral(p_pio, PIO_PERIPH_C, (1 << (ul_pin & 0x1F)));
  40048a:	f000 001f 	and.w	r0, r0, #31
  40048e:	2601      	movs	r6, #1
  400490:	4086      	lsls	r6, r0
  400492:	4632      	mov	r2, r6
  400494:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  400498:	4620      	mov	r0, r4
  40049a:	4b1f      	ldr	r3, [pc, #124]	; (400518 <pio_configure_pin+0x118>)
  40049c:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  40049e:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  4004a2:	bf14      	ite	ne
  4004a4:	6666      	strne	r6, [r4, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  4004a6:	6626      	streq	r6, [r4, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  4004a8:	2001      	movs	r0, #1
  4004aa:	e032      	b.n	400512 <pio_configure_pin+0x112>
		pio_set_peripheral(p_pio, PIO_PERIPH_C, (1 << (ul_pin & 0x1F)));
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_D:
		pio_set_peripheral(p_pio, PIO_PERIPH_D, (1 << (ul_pin & 0x1F)));
  4004ac:	f000 001f 	and.w	r0, r0, #31
  4004b0:	2601      	movs	r6, #1
  4004b2:	4086      	lsls	r6, r0
  4004b4:	4632      	mov	r2, r6
  4004b6:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  4004ba:	4620      	mov	r0, r4
  4004bc:	4b16      	ldr	r3, [pc, #88]	; (400518 <pio_configure_pin+0x118>)
  4004be:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  4004c0:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  4004c4:	bf14      	ite	ne
  4004c6:	6666      	strne	r6, [r4, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  4004c8:	6626      	streq	r6, [r4, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  4004ca:	2001      	movs	r0, #1
  4004cc:	e021      	b.n	400512 <pio_configure_pin+0x112>
				(ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
  4004ce:	f000 011f 	and.w	r1, r0, #31
  4004d2:	2601      	movs	r6, #1
  4004d4:	462a      	mov	r2, r5
  4004d6:	fa06 f101 	lsl.w	r1, r6, r1
  4004da:	4620      	mov	r0, r4
  4004dc:	4b0f      	ldr	r3, [pc, #60]	; (40051c <pio_configure_pin+0x11c>)
  4004de:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
  4004e0:	4630      	mov	r0, r6
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;
  4004e2:	e016      	b.n	400512 <pio_configure_pin+0x112>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  4004e4:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
  4004e8:	f000 011f 	and.w	r1, r0, #31
  4004ec:	2601      	movs	r6, #1
  4004ee:	ea05 0306 	and.w	r3, r5, r6
  4004f2:	9300      	str	r3, [sp, #0]
  4004f4:	f3c5 0380 	ubfx	r3, r5, #2, #1
  4004f8:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
  4004fc:	bf14      	ite	ne
  4004fe:	2200      	movne	r2, #0
  400500:	2201      	moveq	r2, #1
  400502:	fa06 f101 	lsl.w	r1, r6, r1
  400506:	4620      	mov	r0, r4
  400508:	4c05      	ldr	r4, [pc, #20]	; (400520 <pio_configure_pin+0x120>)
  40050a:	47a0      	blx	r4

	default:
		return 0;
	}

	return 1;
  40050c:	4630      	mov	r0, r6
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
  40050e:	e000      	b.n	400512 <pio_configure_pin+0x112>

	default:
		return 0;
  400510:	2000      	movs	r0, #0
	}

	return 1;
}
  400512:	b002      	add	sp, #8
  400514:	bd70      	pop	{r4, r5, r6, pc}
  400516:	bf00      	nop
  400518:	0040030d 	.word	0x0040030d
  40051c:	0040039d 	.word	0x0040039d
  400520:	004003d1 	.word	0x004003d1

00400524 <pio_configure_pin_group>:
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin_group(Pio *p_pio,
		uint32_t ul_mask, const uint32_t ul_flags)
{
  400524:	b570      	push	{r4, r5, r6, lr}
  400526:	b082      	sub	sp, #8
  400528:	4605      	mov	r5, r0
  40052a:	460e      	mov	r6, r1
  40052c:	4614      	mov	r4, r2
	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
  40052e:	f002 43f0 	and.w	r3, r2, #2013265920	; 0x78000000
  400532:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  400536:	d038      	beq.n	4005aa <pio_configure_pin_group+0x86>
  400538:	d809      	bhi.n	40054e <pio_configure_pin_group+0x2a>
  40053a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  40053e:	d01c      	beq.n	40057a <pio_configure_pin_group+0x56>
  400540:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  400544:	d025      	beq.n	400592 <pio_configure_pin_group+0x6e>
  400546:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  40054a:	d150      	bne.n	4005ee <pio_configure_pin_group+0xca>
  40054c:	e009      	b.n	400562 <pio_configure_pin_group+0x3e>
  40054e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  400552:	d03a      	beq.n	4005ca <pio_configure_pin_group+0xa6>
  400554:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  400558:	d037      	beq.n	4005ca <pio_configure_pin_group+0xa6>
  40055a:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  40055e:	d030      	beq.n	4005c2 <pio_configure_pin_group+0x9e>
  400560:	e045      	b.n	4005ee <pio_configure_pin_group+0xca>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
  400562:	460a      	mov	r2, r1
  400564:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400568:	4b22      	ldr	r3, [pc, #136]	; (4005f4 <pio_configure_pin_group+0xd0>)
  40056a:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  40056c:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
  400570:	bf14      	ite	ne
  400572:	666e      	strne	r6, [r5, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  400574:	662e      	streq	r6, [r5, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  400576:	2001      	movs	r0, #1
  400578:	e03a      	b.n	4005f0 <pio_configure_pin_group+0xcc>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
  40057a:	460a      	mov	r2, r1
  40057c:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400580:	4b1c      	ldr	r3, [pc, #112]	; (4005f4 <pio_configure_pin_group+0xd0>)
  400582:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  400584:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
  400588:	bf14      	ite	ne
  40058a:	666e      	strne	r6, [r5, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  40058c:	662e      	streq	r6, [r5, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  40058e:	2001      	movs	r0, #1
  400590:	e02e      	b.n	4005f0 <pio_configure_pin_group+0xcc>
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	case PIO_TYPE_PIO_PERIPH_C:
		pio_set_peripheral(p_pio, PIO_PERIPH_C, ul_mask);
  400592:	460a      	mov	r2, r1
  400594:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  400598:	4b16      	ldr	r3, [pc, #88]	; (4005f4 <pio_configure_pin_group+0xd0>)
  40059a:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  40059c:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
  4005a0:	bf14      	ite	ne
  4005a2:	666e      	strne	r6, [r5, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  4005a4:	662e      	streq	r6, [r5, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  4005a6:	2001      	movs	r0, #1
  4005a8:	e022      	b.n	4005f0 <pio_configure_pin_group+0xcc>
	case PIO_TYPE_PIO_PERIPH_C:
		pio_set_peripheral(p_pio, PIO_PERIPH_C, ul_mask);
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_D:
		pio_set_peripheral(p_pio, PIO_PERIPH_D, ul_mask);
  4005aa:	460a      	mov	r2, r1
  4005ac:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  4005b0:	4b10      	ldr	r3, [pc, #64]	; (4005f4 <pio_configure_pin_group+0xd0>)
  4005b2:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  4005b4:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
  4005b8:	bf14      	ite	ne
  4005ba:	666e      	strne	r6, [r5, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  4005bc:	662e      	streq	r6, [r5, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  4005be:	2001      	movs	r0, #1
  4005c0:	e016      	b.n	4005f0 <pio_configure_pin_group+0xcc>
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
  4005c2:	4b0d      	ldr	r3, [pc, #52]	; (4005f8 <pio_configure_pin_group+0xd4>)
  4005c4:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
  4005c6:	2001      	movs	r0, #1
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;
  4005c8:	e012      	b.n	4005f0 <pio_configure_pin_group+0xcc>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
  4005ca:	f004 5260 	and.w	r2, r4, #939524096	; 0x38000000
  4005ce:	f004 0301 	and.w	r3, r4, #1
  4005d2:	9300      	str	r3, [sp, #0]
  4005d4:	f3c4 0380 	ubfx	r3, r4, #2, #1
  4005d8:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
  4005dc:	bf14      	ite	ne
  4005de:	2200      	movne	r2, #0
  4005e0:	2201      	moveq	r2, #1
  4005e2:	4631      	mov	r1, r6
  4005e4:	4628      	mov	r0, r5
  4005e6:	4c05      	ldr	r4, [pc, #20]	; (4005fc <pio_configure_pin_group+0xd8>)
  4005e8:	47a0      	blx	r4

	default:
		return 0;
	}

	return 1;
  4005ea:	2001      	movs	r0, #1
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
  4005ec:	e000      	b.n	4005f0 <pio_configure_pin_group+0xcc>

	default:
		return 0;
  4005ee:	2000      	movs	r0, #0
	}

	return 1;
}
  4005f0:	b002      	add	sp, #8
  4005f2:	bd70      	pop	{r4, r5, r6, pc}
  4005f4:	0040030d 	.word	0x0040030d
  4005f8:	0040039d 	.word	0x0040039d
  4005fc:	004003d1 	.word	0x004003d1

00400600 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  400600:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  400604:	4681      	mov	r9, r0
  400606:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  400608:	4b12      	ldr	r3, [pc, #72]	; (400654 <pio_handler_process+0x54>)
  40060a:	4798      	blx	r3
  40060c:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  40060e:	4648      	mov	r0, r9
  400610:	4b11      	ldr	r3, [pc, #68]	; (400658 <pio_handler_process+0x58>)
  400612:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
  400614:	4005      	ands	r5, r0
  400616:	d013      	beq.n	400640 <pio_handler_process+0x40>
  400618:	4c10      	ldr	r4, [pc, #64]	; (40065c <pio_handler_process+0x5c>)
  40061a:	f104 0660 	add.w	r6, r4, #96	; 0x60
		/* Find triggering source */
		i = 0;
		while (status != 0) {
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
  40061e:	6823      	ldr	r3, [r4, #0]
  400620:	4543      	cmp	r3, r8
  400622:	d108      	bne.n	400636 <pio_handler_process+0x36>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  400624:	6861      	ldr	r1, [r4, #4]
  400626:	4229      	tst	r1, r5
  400628:	d005      	beq.n	400636 <pio_handler_process+0x36>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  40062a:	68e3      	ldr	r3, [r4, #12]
  40062c:	4640      	mov	r0, r8
  40062e:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
  400630:	6863      	ldr	r3, [r4, #4]
  400632:	ea25 0503 	bic.w	r5, r5, r3
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
  400636:	42b4      	cmp	r4, r6
  400638:	d002      	beq.n	400640 <pio_handler_process+0x40>
  40063a:	3410      	adds	r4, #16

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
  40063c:	2d00      	cmp	r5, #0
  40063e:	d1ee      	bne.n	40061e <pio_handler_process+0x1e>
		}
	}

	/* Check capture events */
#if (SAM3S || SAM4S || SAM4E)
	if (pio_capture_enable_flag) {
  400640:	4b07      	ldr	r3, [pc, #28]	; (400660 <pio_handler_process+0x60>)
  400642:	681b      	ldr	r3, [r3, #0]
  400644:	b123      	cbz	r3, 400650 <pio_handler_process+0x50>
		if (pio_capture_handler) {
  400646:	4b07      	ldr	r3, [pc, #28]	; (400664 <pio_handler_process+0x64>)
  400648:	681b      	ldr	r3, [r3, #0]
  40064a:	b10b      	cbz	r3, 400650 <pio_handler_process+0x50>
			pio_capture_handler(p_pio);
  40064c:	4648      	mov	r0, r9
  40064e:	4798      	blx	r3
  400650:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  400654:	004003f9 	.word	0x004003f9
  400658:	004003fd 	.word	0x004003fd
  40065c:	20000864 	.word	0x20000864
  400660:	20000918 	.word	0x20000918
  400664:	20000860 	.word	0x20000860

00400668 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  400668:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
  40066a:	210b      	movs	r1, #11
  40066c:	4801      	ldr	r0, [pc, #4]	; (400674 <PIOA_Handler+0xc>)
  40066e:	4b02      	ldr	r3, [pc, #8]	; (400678 <PIOA_Handler+0x10>)
  400670:	4798      	blx	r3
  400672:	bd08      	pop	{r3, pc}
  400674:	400e0e00 	.word	0x400e0e00
  400678:	00400601 	.word	0x00400601

0040067c <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  40067c:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  40067e:	210c      	movs	r1, #12
  400680:	4801      	ldr	r0, [pc, #4]	; (400688 <PIOB_Handler+0xc>)
  400682:	4b02      	ldr	r3, [pc, #8]	; (40068c <PIOB_Handler+0x10>)
  400684:	4798      	blx	r3
  400686:	bd08      	pop	{r3, pc}
  400688:	400e1000 	.word	0x400e1000
  40068c:	00400601 	.word	0x00400601

00400690 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  400690:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
  400692:	210d      	movs	r1, #13
  400694:	4801      	ldr	r0, [pc, #4]	; (40069c <PIOC_Handler+0xc>)
  400696:	4b02      	ldr	r3, [pc, #8]	; (4006a0 <PIOC_Handler+0x10>)
  400698:	4798      	blx	r3
  40069a:	bd08      	pop	{r3, pc}
  40069c:	400e1200 	.word	0x400e1200
  4006a0:	00400601 	.word	0x00400601

004006a4 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  4006a4:	4a18      	ldr	r2, [pc, #96]	; (400708 <pmc_switch_mck_to_pllack+0x64>)
  4006a6:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4006a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  4006ac:	4318      	orrs	r0, r3
  4006ae:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4006b0:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4006b2:	f013 0f08 	tst.w	r3, #8
  4006b6:	d003      	beq.n	4006c0 <pmc_switch_mck_to_pllack+0x1c>
  4006b8:	e009      	b.n	4006ce <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  4006ba:	3b01      	subs	r3, #1
  4006bc:	d103      	bne.n	4006c6 <pmc_switch_mck_to_pllack+0x22>
  4006be:	e01e      	b.n	4006fe <pmc_switch_mck_to_pllack+0x5a>
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4006c0:	f44f 6300 	mov.w	r3, #2048	; 0x800
  4006c4:	4910      	ldr	r1, [pc, #64]	; (400708 <pmc_switch_mck_to_pllack+0x64>)
  4006c6:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  4006c8:	f012 0f08 	tst.w	r2, #8
  4006cc:	d0f5      	beq.n	4006ba <pmc_switch_mck_to_pllack+0x16>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  4006ce:	4a0e      	ldr	r2, [pc, #56]	; (400708 <pmc_switch_mck_to_pllack+0x64>)
  4006d0:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4006d2:	f023 0303 	bic.w	r3, r3, #3
  4006d6:	f043 0302 	orr.w	r3, r3, #2
  4006da:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4006dc:	6e90      	ldr	r0, [r2, #104]	; 0x68
  4006de:	f010 0008 	ands.w	r0, r0, #8
  4006e2:	d004      	beq.n	4006ee <pmc_switch_mck_to_pllack+0x4a>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
  4006e4:	2000      	movs	r0, #0
  4006e6:	4770      	bx	lr
	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
  4006e8:	3b01      	subs	r3, #1
  4006ea:	d103      	bne.n	4006f4 <pmc_switch_mck_to_pllack+0x50>
  4006ec:	e009      	b.n	400702 <pmc_switch_mck_to_pllack+0x5e>
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4006ee:	f44f 6300 	mov.w	r3, #2048	; 0x800
  4006f2:	4905      	ldr	r1, [pc, #20]	; (400708 <pmc_switch_mck_to_pllack+0x64>)
  4006f4:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  4006f6:	f012 0f08 	tst.w	r2, #8
  4006fa:	d0f5      	beq.n	4006e8 <pmc_switch_mck_to_pllack+0x44>
  4006fc:	4770      	bx	lr

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
  4006fe:	2001      	movs	r0, #1
  400700:	4770      	bx	lr
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
  400702:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  400704:	4770      	bx	lr
  400706:	bf00      	nop
  400708:	400e0400 	.word	0x400e0400

0040070c <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  40070c:	b138      	cbz	r0, 40071e <pmc_switch_mainck_to_xtal+0x12>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  40070e:	4911      	ldr	r1, [pc, #68]	; (400754 <pmc_switch_mainck_to_xtal+0x48>)
  400710:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  400712:	4a11      	ldr	r2, [pc, #68]	; (400758 <pmc_switch_mainck_to_xtal+0x4c>)
  400714:	401a      	ands	r2, r3
  400716:	4b11      	ldr	r3, [pc, #68]	; (40075c <pmc_switch_mainck_to_xtal+0x50>)
  400718:	4313      	orrs	r3, r2
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  40071a:	620b      	str	r3, [r1, #32]
  40071c:	4770      	bx	lr
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  40071e:	480d      	ldr	r0, [pc, #52]	; (400754 <pmc_switch_mainck_to_xtal+0x48>)
  400720:	6a02      	ldr	r2, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  400722:	0209      	lsls	r1, r1, #8
  400724:	b289      	uxth	r1, r1
  400726:	f422 135c 	bic.w	r3, r2, #3604480	; 0x370000
  40072a:	f023 0303 	bic.w	r3, r3, #3
  40072e:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  400732:	f043 0301 	orr.w	r3, r3, #1
  400736:	430b      	orrs	r3, r1
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  400738:	6203      	str	r3, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  40073a:	4602      	mov	r2, r0
  40073c:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40073e:	f013 0f01 	tst.w	r3, #1
  400742:	d0fb      	beq.n	40073c <pmc_switch_mainck_to_xtal+0x30>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  400744:	4a03      	ldr	r2, [pc, #12]	; (400754 <pmc_switch_mainck_to_xtal+0x48>)
  400746:	6a13      	ldr	r3, [r2, #32]
  400748:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
  40074c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  400750:	6213      	str	r3, [r2, #32]
  400752:	4770      	bx	lr
  400754:	400e0400 	.word	0x400e0400
  400758:	fec8fffc 	.word	0xfec8fffc
  40075c:	01370002 	.word	0x01370002

00400760 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  400760:	4b02      	ldr	r3, [pc, #8]	; (40076c <pmc_osc_is_ready_mainck+0xc>)
  400762:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  400764:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  400768:	4770      	bx	lr
  40076a:	bf00      	nop
  40076c:	400e0400 	.word	0x400e0400

00400770 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  400770:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  400774:	4b01      	ldr	r3, [pc, #4]	; (40077c <pmc_disable_pllack+0xc>)
  400776:	629a      	str	r2, [r3, #40]	; 0x28
  400778:	4770      	bx	lr
  40077a:	bf00      	nop
  40077c:	400e0400 	.word	0x400e0400

00400780 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  400780:	4b02      	ldr	r3, [pc, #8]	; (40078c <pmc_is_locked_pllack+0xc>)
  400782:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  400784:	f000 0002 	and.w	r0, r0, #2
  400788:	4770      	bx	lr
  40078a:	bf00      	nop
  40078c:	400e0400 	.word	0x400e0400

00400790 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
  400790:	2822      	cmp	r0, #34	; 0x22
  400792:	d81e      	bhi.n	4007d2 <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
  400794:	281f      	cmp	r0, #31
  400796:	d80c      	bhi.n	4007b2 <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  400798:	4b11      	ldr	r3, [pc, #68]	; (4007e0 <pmc_enable_periph_clk+0x50>)
  40079a:	699a      	ldr	r2, [r3, #24]
  40079c:	2301      	movs	r3, #1
  40079e:	4083      	lsls	r3, r0
  4007a0:	4393      	bics	r3, r2
  4007a2:	d018      	beq.n	4007d6 <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
  4007a4:	2301      	movs	r3, #1
  4007a6:	fa03 f000 	lsl.w	r0, r3, r0
  4007aa:	4b0d      	ldr	r3, [pc, #52]	; (4007e0 <pmc_enable_periph_clk+0x50>)
  4007ac:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  4007ae:	2000      	movs	r0, #0
  4007b0:	4770      	bx	lr
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
  4007b2:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  4007b4:	4b0a      	ldr	r3, [pc, #40]	; (4007e0 <pmc_enable_periph_clk+0x50>)
  4007b6:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  4007ba:	2301      	movs	r3, #1
  4007bc:	4083      	lsls	r3, r0
  4007be:	4393      	bics	r3, r2
  4007c0:	d00b      	beq.n	4007da <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
  4007c2:	2301      	movs	r3, #1
  4007c4:	fa03 f000 	lsl.w	r0, r3, r0
  4007c8:	4b05      	ldr	r3, [pc, #20]	; (4007e0 <pmc_enable_periph_clk+0x50>)
  4007ca:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
		}
#endif
	}

	return 0;
  4007ce:	2000      	movs	r0, #0
  4007d0:	4770      	bx	lr
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
		return 1;
  4007d2:	2001      	movs	r0, #1
  4007d4:	4770      	bx	lr
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  4007d6:	2000      	movs	r0, #0
  4007d8:	4770      	bx	lr
  4007da:	2000      	movs	r0, #0
}
  4007dc:	4770      	bx	lr
  4007de:	bf00      	nop
  4007e0:	400e0400 	.word	0x400e0400

004007e4 <pwm_clocks_generate>:
 *
 * \retval Return the value to be set in the PWM Clock Register (PWM Mode Register for
 * SAM3N/SAM4N/SAM4C/SAM4CP/SAM4CM) or PWM_INVALID_ARGUMENT if the configuration cannot be met.
 */
static uint32_t pwm_clocks_generate(uint32_t ul_frequency, uint32_t ul_mck)
{
  4007e4:	b4f0      	push	{r4, r5, r6, r7}
  4007e6:	b08c      	sub	sp, #48	; 0x30
  4007e8:	4607      	mov	r7, r0
  4007ea:	460e      	mov	r6, r1
	uint32_t ul_divisors[PWM_CLOCK_PRE_MAX] =
  4007ec:	ac01      	add	r4, sp, #4
  4007ee:	4d11      	ldr	r5, [pc, #68]	; (400834 <pwm_clocks_generate+0x50>)
  4007f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  4007f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  4007f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  4007f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  4007f8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
  4007fc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  400800:	aa01      	add	r2, sp, #4
			{1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024 };
	uint32_t ul_pre = 0;
  400802:	2000      	movs	r0, #0
	uint32_t ul_div;

	/* Find prescaler and divisor values */
	do {
		ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
  400804:	f852 3b04 	ldr.w	r3, [r2], #4
  400808:	fbb6 f3f3 	udiv	r3, r6, r3
  40080c:	fbb3 f3f7 	udiv	r3, r3, r7
		if (ul_div <= PWM_CLOCK_DIV_MAX) {
  400810:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
  400814:	d905      	bls.n	400822 <pwm_clocks_generate+0x3e>
			break;
		}
		ul_pre++;
  400816:	3001      	adds	r0, #1
	} while (ul_pre < PWM_CLOCK_PRE_MAX);
  400818:	280b      	cmp	r0, #11
  40081a:	d1f3      	bne.n	400804 <pwm_clocks_generate+0x20>

	/* Return result */
	if (ul_pre < PWM_CLOCK_PRE_MAX) {
		return ul_div | (ul_pre << 8);
	} else {
		return PWM_INVALID_ARGUMENT;
  40081c:	f64f 70ff 	movw	r0, #65535	; 0xffff
  400820:	e005      	b.n	40082e <pwm_clocks_generate+0x4a>
		}
		ul_pre++;
	} while (ul_pre < PWM_CLOCK_PRE_MAX);

	/* Return result */
	if (ul_pre < PWM_CLOCK_PRE_MAX) {
  400822:	280a      	cmp	r0, #10
		return ul_div | (ul_pre << 8);
  400824:	bf94      	ite	ls
  400826:	ea43 2000 	orrls.w	r0, r3, r0, lsl #8
	} else {
		return PWM_INVALID_ARGUMENT;
  40082a:	f64f 70ff 	movwhi	r0, #65535	; 0xffff
	}
}
  40082e:	b00c      	add	sp, #48	; 0x30
  400830:	bcf0      	pop	{r4, r5, r6, r7}
  400832:	4770      	bx	lr
  400834:	00402e2c 	.word	0x00402e2c

00400838 <pwm_init>:
 * \param clock_config PWM clock configuration.
 *
 * \retval 0 if initialization succeeds, otherwise fails.
 */
uint32_t pwm_init(Pwm *p_pwm, pwm_clock_t *clock_config)
{
  400838:	b570      	push	{r4, r5, r6, lr}
  40083a:	4606      	mov	r6, r0
  40083c:	460c      	mov	r4, r1
	uint32_t clock = 0;
	uint32_t result;

	/* Clock A */
	if (clock_config->ul_clka != 0) {
  40083e:	6808      	ldr	r0, [r1, #0]
  400840:	b140      	cbz	r0, 400854 <pwm_init+0x1c>
		result = pwm_clocks_generate(clock_config->ul_clka, clock_config->ul_mck);
  400842:	6889      	ldr	r1, [r1, #8]
  400844:	4b0e      	ldr	r3, [pc, #56]	; (400880 <pwm_init+0x48>)
  400846:	4798      	blx	r3
  400848:	4605      	mov	r5, r0
		if (result == PWM_INVALID_ARGUMENT) {
  40084a:	f64f 73ff 	movw	r3, #65535	; 0xffff
  40084e:	4298      	cmp	r0, r3
  400850:	d101      	bne.n	400856 <pwm_init+0x1e>
  400852:	e00e      	b.n	400872 <pwm_init+0x3a>
 *
 * \retval 0 if initialization succeeds, otherwise fails.
 */
uint32_t pwm_init(Pwm *p_pwm, pwm_clock_t *clock_config)
{
	uint32_t clock = 0;
  400854:	2500      	movs	r5, #0

		clock = result;
	}

	/* Clock B */
	if (clock_config->ul_clkb != 0) {
  400856:	6860      	ldr	r0, [r4, #4]
  400858:	b140      	cbz	r0, 40086c <pwm_init+0x34>
		result = pwm_clocks_generate(clock_config->ul_clkb, clock_config->ul_mck);
  40085a:	68a1      	ldr	r1, [r4, #8]
  40085c:	4b08      	ldr	r3, [pc, #32]	; (400880 <pwm_init+0x48>)
  40085e:	4798      	blx	r3

		if (result == PWM_INVALID_ARGUMENT) {
  400860:	f64f 73ff 	movw	r3, #65535	; 0xffff
  400864:	4298      	cmp	r0, r3
  400866:	d007      	beq.n	400878 <pwm_init+0x40>
			return result;
		}

		clock |= (result << 16);
  400868:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
	}
#if (SAM3N || SAM4N || SAM4C || SAM4CP || SAM4CM)
	p_pwm->PWM_MR = clock;
#else
	p_pwm->PWM_CLK = clock;
  40086c:	6035      	str	r5, [r6, #0]
#endif
	return 0;
  40086e:	2000      	movs	r0, #0
  400870:	bd70      	pop	{r4, r5, r6, pc}

	/* Clock A */
	if (clock_config->ul_clka != 0) {
		result = pwm_clocks_generate(clock_config->ul_clka, clock_config->ul_mck);
		if (result == PWM_INVALID_ARGUMENT) {
			return result;
  400872:	f64f 70ff 	movw	r0, #65535	; 0xffff
  400876:	bd70      	pop	{r4, r5, r6, pc}
	/* Clock B */
	if (clock_config->ul_clkb != 0) {
		result = pwm_clocks_generate(clock_config->ul_clkb, clock_config->ul_mck);

		if (result == PWM_INVALID_ARGUMENT) {
			return result;
  400878:	f64f 70ff 	movw	r0, #65535	; 0xffff
	p_pwm->PWM_MR = clock;
#else
	p_pwm->PWM_CLK = clock;
#endif
	return 0;
}
  40087c:	bd70      	pop	{r4, r5, r6, pc}
  40087e:	bf00      	nop
  400880:	004007e5 	.word	0x004007e5

00400884 <pwm_channel_init>:
 * \param p_channel Configurations of the specified PWM channel.
 *
 * \retval 0 if initialization succeeds, otherwise fails.
 */
uint32_t pwm_channel_init(Pwm *p_pwm, pwm_channel_t *p_channel)
{
  400884:	b470      	push	{r4, r5, r6}
	uint32_t tmp_reg = 0;
	uint32_t ch_num = p_channel->channel;
  400886:	680b      	ldr	r3, [r1, #0]

	/* Channel Mode/Clock Register */
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
  400888:	684a      	ldr	r2, [r1, #4]
  40088a:	f002 020f 	and.w	r2, r2, #15
  40088e:	8a8c      	ldrh	r4, [r1, #20]
  400890:	4322      	orrs	r2, r4
  400892:	890c      	ldrh	r4, [r1, #8]
  400894:	4322      	orrs	r2, r4
  400896:	7a8c      	ldrb	r4, [r1, #10]
  400898:	ea42 2244 	orr.w	r2, r2, r4, lsl #9
  40089c:	7d8c      	ldrb	r4, [r1, #22]
  40089e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
  4008a2:	7dcc      	ldrb	r4, [r1, #23]
  4008a4:	ea42 4244 	orr.w	r2, r2, r4, lsl #17
  4008a8:	7e0c      	ldrb	r4, [r1, #24]
  4008aa:	ea42 4284 	orr.w	r2, r2, r4, lsl #18
  4008ae:	eb00 1443 	add.w	r4, r0, r3, lsl #5
			(p_channel->b_deadtime_generator << 16) |
			(p_channel->b_pwmh_output_inverted << 17) |
			(p_channel->b_pwml_output_inverted << 18) |
#endif
			(p_channel->alignment);
	p_pwm->PWM_CH_NUM[ch_num].PWM_CMR = tmp_reg;
  4008b2:	f8c4 2200 	str.w	r2, [r4, #512]	; 0x200

	/* Channel Duty Cycle Register */
	p_pwm->PWM_CH_NUM[ch_num].PWM_CDTY = p_channel->ul_duty;
  4008b6:	68ca      	ldr	r2, [r1, #12]
  4008b8:	f8c4 2204 	str.w	r2, [r4, #516]	; 0x204

	/* Channel Period Register */
	p_pwm->PWM_CH_NUM[ch_num].PWM_CPRD = p_channel->ul_period;
  4008bc:	690a      	ldr	r2, [r1, #16]
  4008be:	f8c4 220c 	str.w	r2, [r4, #524]	; 0x20c
	
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E || SAMV70 || SAMV71 || SAME70 || SAMS70)
	/* Channel Dead Time Register */
	if (p_channel->b_deadtime_generator) {
  4008c2:	7d8a      	ldrb	r2, [r1, #22]
  4008c4:	b13a      	cbz	r2, 4008d6 <pwm_channel_init+0x52>
		p_pwm->PWM_CH_NUM[ch_num].PWM_DT =
				PWM_DT_DTL(p_channel->
				us_deadtime_pwml) | PWM_DT_DTH(p_channel->
  4008c6:	8b8c      	ldrh	r4, [r1, #28]
  4008c8:	8b4a      	ldrh	r2, [r1, #26]
  4008ca:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
	p_pwm->PWM_CH_NUM[ch_num].PWM_CPRD = p_channel->ul_period;
	
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E || SAMV70 || SAMV71 || SAME70 || SAMS70)
	/* Channel Dead Time Register */
	if (p_channel->b_deadtime_generator) {
		p_pwm->PWM_CH_NUM[ch_num].PWM_DT =
  4008ce:	eb00 1443 	add.w	r4, r0, r3, lsl #5
  4008d2:	f8c4 2218 	str.w	r2, [r4, #536]	; 0x218
				us_deadtime_pwml) | PWM_DT_DTH(p_channel->
				us_deadtime_pwmh);
	}

	/* Output Selection Register */
	tmp_reg  = p_pwm->PWM_OS & (~((PWM_OS_OSH0 | PWM_OS_OSL0) << ch_num));
  4008d6:	6c84      	ldr	r4, [r0, #72]	; 0x48
  4008d8:	f04f 1201 	mov.w	r2, #65537	; 0x10001
  4008dc:	409a      	lsls	r2, r3
  4008de:	43d2      	mvns	r2, r2
  4008e0:	ea04 0502 	and.w	r5, r4, r2
	tmp_reg |= ((p_channel->output_selection.b_override_pwmh) << ch_num) |
  4008e4:	7fcc      	ldrb	r4, [r1, #31]
  4008e6:	fa04 f603 	lsl.w	r6, r4, r3
  4008ea:	7f8c      	ldrb	r4, [r1, #30]
  4008ec:	409c      	lsls	r4, r3
  4008ee:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
  4008f2:	432c      	orrs	r4, r5
			(((p_channel->output_selection.b_override_pwml) << ch_num)
					<< 16);
	p_pwm->PWM_OS = tmp_reg;
  4008f4:	6484      	str	r4, [r0, #72]	; 0x48

	/* Output Override Value Register */
	tmp_reg  = p_pwm->PWM_OOV & (~((PWM_OOV_OOVH0 | PWM_OOV_OOVL0) << ch_num));
  4008f6:	6c44      	ldr	r4, [r0, #68]	; 0x44
  4008f8:	4022      	ands	r2, r4
	tmp_reg |= ((p_channel->output_selection.override_level_pwmh) << ch_num) |
  4008fa:	f891 4021 	ldrb.w	r4, [r1, #33]	; 0x21
  4008fe:	fa04 f503 	lsl.w	r5, r4, r3
  400902:	f891 4020 	ldrb.w	r4, [r1, #32]
  400906:	409c      	lsls	r4, r3
  400908:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  40090c:	4322      	orrs	r2, r4
			(((p_channel->output_selection.override_level_pwml) << ch_num)
					<< 16);
	p_pwm->PWM_OOV = tmp_reg;
  40090e:	6442      	str	r2, [r0, #68]	; 0x44

	/* Sync Channels Mode Register */
	uint32_t channel = (1 << ch_num);
  400910:	2201      	movs	r2, #1
  400912:	409a      	lsls	r2, r3
	if (p_channel->b_sync_ch) {
  400914:	f891 4022 	ldrb.w	r4, [r1, #34]	; 0x22
  400918:	b11c      	cbz	r4, 400922 <pwm_channel_init+0x9e>
		p_pwm->PWM_SCM |= channel;
  40091a:	6a04      	ldr	r4, [r0, #32]
  40091c:	4314      	orrs	r4, r2
  40091e:	6204      	str	r4, [r0, #32]
  400920:	e003      	b.n	40092a <pwm_channel_init+0xa6>
	} else {
		p_pwm->PWM_SCM &= ~((uint32_t) channel);
  400922:	6a04      	ldr	r4, [r0, #32]
  400924:	ea24 0402 	bic.w	r4, r4, r2
  400928:	6204      	str	r4, [r0, #32]
		} else {
			p_pwm->PWM_FPV1 &= (~((0x01 << ch_num) << 16));
		}
	}
#else
	if (p_channel->ul_fault_output_pwmh == PWM_HIGH) {
  40092a:	f891 4024 	ldrb.w	r4, [r1, #36]	; 0x24
  40092e:	2c01      	cmp	r4, #1
		p_pwm->PWM_FPV |= (0x01 << ch_num);
  400930:	6e84      	ldr	r4, [r0, #104]	; 0x68
  400932:	bf0c      	ite	eq
  400934:	4314      	orreq	r4, r2
	} else {
		p_pwm->PWM_FPV &= (~(0x01 << ch_num));
  400936:	4394      	bicne	r4, r2
  400938:	6684      	str	r4, [r0, #104]	; 0x68
	}
	if (p_channel->ul_fault_output_pwml == PWM_HIGH) {
  40093a:	f891 4025 	ldrb.w	r4, [r1, #37]	; 0x25
  40093e:	2c01      	cmp	r4, #1
		p_pwm->PWM_FPV |= ((0x01 << ch_num) << 16);
  400940:	6e84      	ldr	r4, [r0, #104]	; 0x68
  400942:	bf0c      	ite	eq
  400944:	ea44 4202 	orreq.w	r2, r4, r2, lsl #16
	} else {
		p_pwm->PWM_FPV &= (~((0x01 << ch_num) << 16));
  400948:	ea24 4202 	bicne.w	r2, r4, r2, lsl #16
  40094c:	6682      	str	r2, [r0, #104]	; 0x68
		p_pwm->PWM_FPE2 = fault_enable_reg;
	}
#endif

#if (SAM3U || SAM3S || SAM4S || SAM4E || SAMV70 || SAMV71 || SAME70 || SAMS70)
	ch_num *= 8;
  40094e:	00db      	lsls	r3, r3, #3
	fault_enable_reg = p_pwm->PWM_FPE;
  400950:	6ec4      	ldr	r4, [r0, #108]	; 0x6c
	fault_enable_reg &= ~(0xFF << ch_num);
  400952:	22ff      	movs	r2, #255	; 0xff
  400954:	409a      	lsls	r2, r3
  400956:	ea24 0202 	bic.w	r2, r4, r2
	fault_enable_reg |= ((p_channel->fault_id) << ch_num);
  40095a:	f891 1023 	ldrb.w	r1, [r1, #35]	; 0x23
  40095e:	fa01 f303 	lsl.w	r3, r1, r3
  400962:	4313      	orrs	r3, r2
	p_pwm->PWM_FPE = fault_enable_reg;
  400964:	66c3      	str	r3, [r0, #108]	; 0x6c
	p_pwm->PWM_CH_NUM[ch_num].PWM_CMR &= (~PWM_CMR_PPM);
	p_pwm->PWM_CH_NUM[ch_num].PWM_CMR |= (p_channel->ul_ppm_mode & PWM_CMR_PPM);
#endif

	return 0;
}
  400966:	2000      	movs	r0, #0
  400968:	bc70      	pop	{r4, r5, r6}
  40096a:	4770      	bx	lr

0040096c <pwm_channel_update_duty>:
		uint32_t ul_duty)
{
	uint32_t ch_num = p_channel->channel;

		/** Check parameter */
	if (p_channel->ul_period < ul_duty) {
  40096c:	690b      	ldr	r3, [r1, #16]
  40096e:	4293      	cmp	r3, r2
  400970:	d307      	bcc.n	400982 <pwm_channel_update_duty+0x16>
 * \retval 0 if changing succeeds, otherwise fails.
 */
uint32_t pwm_channel_update_duty(Pwm *p_pwm, pwm_channel_t *p_channel,
		uint32_t ul_duty)
{
	uint32_t ch_num = p_channel->channel;
  400972:	680b      	ldr	r3, [r1, #0]
		/** Check parameter */
	if (p_channel->ul_period < ul_duty) {
		return PWM_INVALID_ARGUMENT;
	} else {
		/* Save new duty cycle value */
		p_channel->ul_duty = ul_duty;
  400974:	60ca      	str	r2, [r1, #12]
		mode &= ~PWM_CMR_CPD;
		p_pwm->PWM_CH_NUM[ch_num].PWM_CMR = mode;

		p_pwm->PWM_CH_NUM[ch_num].PWM_CUPD = ul_duty;
#else
		p_pwm->PWM_CH_NUM[ch_num].PWM_CDTYUPD = ul_duty;
  400976:	eb00 1043 	add.w	r0, r0, r3, lsl #5
  40097a:	f8c0 2208 	str.w	r2, [r0, #520]	; 0x208
#endif
	}

	return 0;
  40097e:	2000      	movs	r0, #0
  400980:	4770      	bx	lr
{
	uint32_t ch_num = p_channel->channel;

		/** Check parameter */
	if (p_channel->ul_period < ul_duty) {
		return PWM_INVALID_ARGUMENT;
  400982:	f64f 70ff 	movw	r0, #65535	; 0xffff
		p_pwm->PWM_CH_NUM[ch_num].PWM_CDTYUPD = ul_duty;
#endif
	}

	return 0;
}
  400986:	4770      	bx	lr

00400988 <pwm_channel_enable>:
 * \param p_pwm Pointer to a PWM instance.
 * \param ul_channel PWM channel number to enable.
 */
void pwm_channel_enable(Pwm *p_pwm, uint32_t ul_channel)
{
	p_pwm->PWM_ENA = (1 << ul_channel);
  400988:	2301      	movs	r3, #1
  40098a:	fa03 f101 	lsl.w	r1, r3, r1
  40098e:	6041      	str	r1, [r0, #4]
  400990:	4770      	bx	lr
  400992:	bf00      	nop

00400994 <pwm_channel_disable>:
 * \param p_pwm Pointer to a PWM instance.
 * \param ul_channel PWM channel number to disable.
 */
void pwm_channel_disable(Pwm *p_pwm, uint32_t ul_channel)
{
	p_pwm->PWM_DIS = (1 << ul_channel);
  400994:	2301      	movs	r3, #1
  400996:	fa03 f101 	lsl.w	r1, r3, r1
  40099a:	6081      	str	r1, [r0, #8]
  40099c:	4770      	bx	lr
  40099e:	bf00      	nop

004009a0 <pwm_channel_enable_interrupt>:
#if (SAM3N || SAM4N || SAM4C || SAM4CP || SAM4CM)
	p_pwm->PWM_IER = (1 << ul_event);
	/* avoid Cppcheck Warning */
	UNUSED(ul_fault);
#else
	p_pwm->PWM_IER1 = (1 << ul_event) | (1 << (ul_fault + 16));
  4009a0:	3210      	adds	r2, #16
  4009a2:	2301      	movs	r3, #1
  4009a4:	fa03 f202 	lsl.w	r2, r3, r2
  4009a8:	fa03 f101 	lsl.w	r1, r3, r1
  4009ac:	4311      	orrs	r1, r2
  4009ae:	6101      	str	r1, [r0, #16]
  4009b0:	4770      	bx	lr
  4009b2:	bf00      	nop

004009b4 <pwm_channel_disable_interrupt>:
#if (SAM3N || SAM4N || SAM4C || SAM4CP || SAM4CM)
	p_pwm->PWM_IDR = (1 << ul_event);
	/* avoid Cppcheck Warning */
	UNUSED(ul_fault);
#else
	p_pwm->PWM_IDR1 = (1 << ul_event) | (1 << (ul_fault + 16));
  4009b4:	3210      	adds	r2, #16
  4009b6:	2301      	movs	r3, #1
  4009b8:	fa03 f202 	lsl.w	r2, r3, r2
  4009bc:	fa03 f101 	lsl.w	r1, r3, r1
  4009c0:	4311      	orrs	r1, r2
  4009c2:	6141      	str	r1, [r0, #20]
  4009c4:	4770      	bx	lr
  4009c6:	bf00      	nop

004009c8 <tc_init>:
 */
void tc_init(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_mode)
{
  4009c8:	b410      	push	{r4}

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  4009ca:	0189      	lsls	r1, r1, #6
  4009cc:	1843      	adds	r3, r0, r1

	/*  Disable TC clock. */
	tc_channel->TC_CCR = TC_CCR_CLKDIS;
  4009ce:	2402      	movs	r4, #2
  4009d0:	5044      	str	r4, [r0, r1]

	/*  Disable interrupts. */
	tc_channel->TC_IDR = 0xFFFFFFFF;
  4009d2:	f04f 31ff 	mov.w	r1, #4294967295
  4009d6:	6299      	str	r1, [r3, #40]	; 0x28

	/*  Clear status register. */
	tc_channel->TC_SR;
  4009d8:	6a19      	ldr	r1, [r3, #32]

	/*  Set mode. */
	tc_channel->TC_CMR = ul_mode;
  4009da:	605a      	str	r2, [r3, #4]
}
  4009dc:	bc10      	pop	{r4}
  4009de:	4770      	bx	lr

004009e0 <tc_start>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKEN | TC_CCR_SWTRG;
  4009e0:	0189      	lsls	r1, r1, #6
  4009e2:	2305      	movs	r3, #5
  4009e4:	5043      	str	r3, [r0, r1]
  4009e6:	4770      	bx	lr

004009e8 <tc_write_rc>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_RC = ul_value;
  4009e8:	eb00 1181 	add.w	r1, r0, r1, lsl #6
  4009ec:	61ca      	str	r2, [r1, #28]
  4009ee:	4770      	bx	lr

004009f0 <tc_enable_interrupt>:

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  4009f0:	eb00 1181 	add.w	r1, r0, r1, lsl #6
	tc_channel->TC_IER = ul_sources;
  4009f4:	624a      	str	r2, [r1, #36]	; 0x24
  4009f6:	4770      	bx	lr

004009f8 <tc_get_status>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
			
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  4009f8:	eb00 1181 	add.w	r1, r0, r1, lsl #6
	return tc_channel->TC_SR;
  4009fc:	6a08      	ldr	r0, [r1, #32]
}
  4009fe:	4770      	bx	lr

00400a00 <tc_find_mck_divisor>:
		uint32_t ul_freq,
		uint32_t ul_mck,
		uint32_t *p_uldiv,
		uint32_t *p_ultcclks,
		uint32_t ul_boardmck)
{
  400a00:	b4f0      	push	{r4, r5, r6, r7}
  400a02:	b086      	sub	sp, #24
	const uint32_t divisors[5] = { 2, 8, 32, 128,
  400a04:	2402      	movs	r4, #2
  400a06:	9401      	str	r4, [sp, #4]
  400a08:	2408      	movs	r4, #8
  400a0a:	9402      	str	r4, [sp, #8]
  400a0c:	2420      	movs	r4, #32
  400a0e:	9403      	str	r4, [sp, #12]
  400a10:	2480      	movs	r4, #128	; 0x80
  400a12:	9404      	str	r4, [sp, #16]
  400a14:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  400a16:	0be4      	lsrs	r4, r4, #15
  400a18:	9405      	str	r4, [sp, #20]
	for (ul_index = 0;
			ul_index < (sizeof(divisors) / sizeof(divisors[0]));
			ul_index++) {
		ul_high = ul_mck / divisors[ul_index];
		ul_low  = ul_high / TC_DIV_FACTOR;
		if (ul_freq > ul_high) {
  400a1a:	ebb0 0f51 	cmp.w	r0, r1, lsr #1
  400a1e:	d81c      	bhi.n	400a5a <tc_find_mck_divisor+0x5a>
  400a20:	0c4c      	lsrs	r4, r1, #17
			return 0;
		} else if (ul_freq >= ul_low) {
  400a22:	42a0      	cmp	r0, r4
  400a24:	d21f      	bcs.n	400a66 <tc_find_mck_divisor+0x66>
  400a26:	ae01      	add	r6, sp, #4
	uint32_t ul_high, ul_low;

	/*  Satisfy frequency bound. */
	for (ul_index = 0;
			ul_index < (sizeof(divisors) / sizeof(divisors[0]));
			ul_index++) {
  400a28:	2501      	movs	r5, #1
		ul_high = ul_mck / divisors[ul_index];
  400a2a:	f856 4f04 	ldr.w	r4, [r6, #4]!
  400a2e:	fbb1 f4f4 	udiv	r4, r1, r4
		ul_low  = ul_high / TC_DIV_FACTOR;
  400a32:	0c27      	lsrs	r7, r4, #16
		if (ul_freq > ul_high) {
  400a34:	4284      	cmp	r4, r0
  400a36:	d312      	bcc.n	400a5e <tc_find_mck_divisor+0x5e>
			return 0;
		} else if (ul_freq >= ul_low) {
  400a38:	4287      	cmp	r7, r0
  400a3a:	d915      	bls.n	400a68 <tc_find_mck_divisor+0x68>
	uint32_t ul_high, ul_low;

	/*  Satisfy frequency bound. */
	for (ul_index = 0;
			ul_index < (sizeof(divisors) / sizeof(divisors[0]));
			ul_index++) {
  400a3c:	3501      	adds	r5, #1
			ul_boardmck / FREQ_SLOW_CLOCK_EXT };
	uint32_t ul_index;
	uint32_t ul_high, ul_low;

	/*  Satisfy frequency bound. */
	for (ul_index = 0;
  400a3e:	2d05      	cmp	r5, #5
  400a40:	d1f3      	bne.n	400a2a <tc_find_mck_divisor+0x2a>
		} else if (ul_freq >= ul_low) {
			break;
		}
	}
	if (ul_index >= (sizeof(divisors) / sizeof(divisors[0]))) {
		return 0;
  400a42:	2000      	movs	r0, #0
  400a44:	e013      	b.n	400a6e <tc_find_mck_divisor+0x6e>
	}

	/*  Store results. */
	if (p_uldiv) {
		*p_uldiv = divisors[ul_index];
  400a46:	a906      	add	r1, sp, #24
  400a48:	eb01 0185 	add.w	r1, r1, r5, lsl #2
  400a4c:	f851 1c14 	ldr.w	r1, [r1, #-20]
  400a50:	6011      	str	r1, [r2, #0]
	}

	if (p_ultcclks) {
  400a52:	b133      	cbz	r3, 400a62 <tc_find_mck_divisor+0x62>
		*p_ultcclks = ul_index;
  400a54:	601d      	str	r5, [r3, #0]
	}

	return 1;
  400a56:	2001      	movs	r0, #1
  400a58:	e009      	b.n	400a6e <tc_find_mck_divisor+0x6e>
			ul_index < (sizeof(divisors) / sizeof(divisors[0]));
			ul_index++) {
		ul_high = ul_mck / divisors[ul_index];
		ul_low  = ul_high / TC_DIV_FACTOR;
		if (ul_freq > ul_high) {
			return 0;
  400a5a:	2000      	movs	r0, #0
  400a5c:	e007      	b.n	400a6e <tc_find_mck_divisor+0x6e>
  400a5e:	2000      	movs	r0, #0
  400a60:	e005      	b.n	400a6e <tc_find_mck_divisor+0x6e>

	if (p_ultcclks) {
		*p_ultcclks = ul_index;
	}

	return 1;
  400a62:	2001      	movs	r0, #1
  400a64:	e003      	b.n	400a6e <tc_find_mck_divisor+0x6e>
			ul_boardmck / FREQ_SLOW_CLOCK_EXT };
	uint32_t ul_index;
	uint32_t ul_high, ul_low;

	/*  Satisfy frequency bound. */
	for (ul_index = 0;
  400a66:	2500      	movs	r5, #0
	if (ul_index >= (sizeof(divisors) / sizeof(divisors[0]))) {
		return 0;
	}

	/*  Store results. */
	if (p_uldiv) {
  400a68:	2a00      	cmp	r2, #0
  400a6a:	d1ec      	bne.n	400a46 <tc_find_mck_divisor+0x46>
  400a6c:	e7f1      	b.n	400a52 <tc_find_mck_divisor+0x52>
	if (p_ultcclks) {
		*p_ultcclks = ul_index;
	}

	return 1;
}
  400a6e:	b006      	add	sp, #24
  400a70:	bcf0      	pop	{r4, r5, r6, r7}
  400a72:	4770      	bx	lr

00400a74 <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
  400a74:	b410      	push	{r4}
	uint32_t cd = 0;

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
  400a76:	23ac      	movs	r3, #172	; 0xac
  400a78:	6003      	str	r3, [r0, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
  400a7a:	680b      	ldr	r3, [r1, #0]
  400a7c:	684a      	ldr	r2, [r1, #4]
  400a7e:	fbb3 f3f2 	udiv	r3, r3, r2
  400a82:	091b      	lsrs	r3, r3, #4
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
  400a84:	1e5c      	subs	r4, r3, #1
  400a86:	f64f 72fe 	movw	r2, #65534	; 0xfffe
  400a8a:	4294      	cmp	r4, r2
  400a8c:	d80a      	bhi.n	400aa4 <uart_init+0x30>
		return 1;

	p_uart->UART_BRGR = cd;
  400a8e:	6203      	str	r3, [r0, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
  400a90:	688b      	ldr	r3, [r1, #8]
  400a92:	6043      	str	r3, [r0, #4]

#if (!SAMV71 && !SAMV70 && !SAME70 && !SAMS70)
	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
  400a94:	f240 2302 	movw	r3, #514	; 0x202
  400a98:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120
#endif

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
  400a9c:	2350      	movs	r3, #80	; 0x50
  400a9e:	6003      	str	r3, [r0, #0]

	return 0;
  400aa0:	2000      	movs	r0, #0
  400aa2:	e000      	b.n	400aa6 <uart_init+0x32>

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
		return 1;
  400aa4:	2001      	movs	r0, #1

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;

	return 0;
}
  400aa6:	bc10      	pop	{r4}
  400aa8:	4770      	bx	lr
  400aaa:	bf00      	nop

00400aac <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
  400aac:	6943      	ldr	r3, [r0, #20]
  400aae:	f013 0f02 	tst.w	r3, #2
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
  400ab2:	bf1a      	itte	ne
  400ab4:	61c1      	strne	r1, [r0, #28]
	return 0;
  400ab6:	2000      	movne	r0, #0
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
		return 1;
  400ab8:	2001      	moveq	r0, #1

	/* Send character */
	p_uart->UART_THR = uc_data;
	return 0;
}
  400aba:	4770      	bx	lr

00400abc <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
  400abc:	6943      	ldr	r3, [r0, #20]
  400abe:	f013 0f01 	tst.w	r3, #1
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
  400ac2:	bf1d      	ittte	ne
  400ac4:	6983      	ldrne	r3, [r0, #24]
  400ac6:	700b      	strbne	r3, [r1, #0]
	return 0;
  400ac8:	2000      	movne	r0, #0
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
		return 1;
  400aca:	2001      	moveq	r0, #1

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
	return 0;
}
  400acc:	4770      	bx	lr
  400ace:	bf00      	nop

00400ad0 <usart_write>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  400ad0:	6943      	ldr	r3, [r0, #20]
  400ad2:	f013 0f02 	tst.w	r3, #2
		return 1;
	}

	p_usart->US_THR = US_THR_TXCHR(c);
  400ad6:	bf1d      	ittte	ne
  400ad8:	f3c1 0108 	ubfxne	r1, r1, #0, #9
  400adc:	61c1      	strne	r1, [r0, #28]
	return 0;
  400ade:	2000      	movne	r0, #0
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
		return 1;
  400ae0:	2001      	moveq	r0, #1
	}

	p_usart->US_THR = US_THR_TXCHR(c);
	return 0;
}
  400ae2:	4770      	bx	lr

00400ae4 <usart_read>:
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  400ae4:	6943      	ldr	r3, [r0, #20]
  400ae6:	f013 0f01 	tst.w	r3, #1
  400aea:	d005      	beq.n	400af8 <usart_read+0x14>
		return 1;
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  400aec:	6983      	ldr	r3, [r0, #24]
  400aee:	f3c3 0308 	ubfx	r3, r3, #0, #9
  400af2:	600b      	str	r3, [r1, #0]

	return 0;
  400af4:	2000      	movs	r0, #0
  400af6:	4770      	bx	lr
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
		return 1;
  400af8:	2001      	movs	r0, #1

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;

	return 0;
}
  400afa:	4770      	bx	lr

00400afc <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  400afc:	e7fe      	b.n	400afc <Dummy_Handler>
  400afe:	bf00      	nop

00400b00 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  400b00:	b508      	push	{r3, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc > pDest) {
  400b02:	4b20      	ldr	r3, [pc, #128]	; (400b84 <Reset_Handler+0x84>)
  400b04:	4a20      	ldr	r2, [pc, #128]	; (400b88 <Reset_Handler+0x88>)
  400b06:	429a      	cmp	r2, r3
  400b08:	d912      	bls.n	400b30 <Reset_Handler+0x30>
		for (; pDest < &_erelocate;) {
  400b0a:	4b20      	ldr	r3, [pc, #128]	; (400b8c <Reset_Handler+0x8c>)
  400b0c:	4a1d      	ldr	r2, [pc, #116]	; (400b84 <Reset_Handler+0x84>)
  400b0e:	429a      	cmp	r2, r3
  400b10:	d21e      	bcs.n	400b50 <Reset_Handler+0x50>
  400b12:	4611      	mov	r1, r2
  400b14:	3b01      	subs	r3, #1
  400b16:	1a9b      	subs	r3, r3, r2
  400b18:	f023 0303 	bic.w	r3, r3, #3
  400b1c:	3304      	adds	r3, #4
  400b1e:	4a1a      	ldr	r2, [pc, #104]	; (400b88 <Reset_Handler+0x88>)
  400b20:	4413      	add	r3, r2
			*pDest++ = *pSrc++;
  400b22:	f852 0b04 	ldr.w	r0, [r2], #4
  400b26:	f841 0b04 	str.w	r0, [r1], #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc > pDest) {
		for (; pDest < &_erelocate;) {
  400b2a:	429a      	cmp	r2, r3
  400b2c:	d1f9      	bne.n	400b22 <Reset_Handler+0x22>
  400b2e:	e00f      	b.n	400b50 <Reset_Handler+0x50>
			*pDest++ = *pSrc++;
		}
	} else if (pSrc < pDest) {
  400b30:	4b14      	ldr	r3, [pc, #80]	; (400b84 <Reset_Handler+0x84>)
  400b32:	4a15      	ldr	r2, [pc, #84]	; (400b88 <Reset_Handler+0x88>)
  400b34:	429a      	cmp	r2, r3
  400b36:	d20b      	bcs.n	400b50 <Reset_Handler+0x50>
		uint32_t nb_bytes = (uint32_t)&_erelocate - (uint32_t)&_srelocate;
  400b38:	4b14      	ldr	r3, [pc, #80]	; (400b8c <Reset_Handler+0x8c>)
  400b3a:	4a12      	ldr	r2, [pc, #72]	; (400b84 <Reset_Handler+0x84>)
  400b3c:	1a9a      	subs	r2, r3, r2
  400b3e:	4814      	ldr	r0, [pc, #80]	; (400b90 <Reset_Handler+0x90>)
		pSrc = (uint32_t*)((uint32_t)pSrc + nb_bytes) - 1;
  400b40:	1811      	adds	r1, r2, r0
		pDest = (uint32_t*)((uint32_t)pDest + nb_bytes) - 1;
		for (;nb_bytes;nb_bytes -= 4) {
  400b42:	b12a      	cbz	r2, 400b50 <Reset_Handler+0x50>
			*pDest-- = *pSrc--;
  400b44:	f851 2904 	ldr.w	r2, [r1], #-4
  400b48:	f843 2d04 	str.w	r2, [r3, #-4]!
		}
	} else if (pSrc < pDest) {
		uint32_t nb_bytes = (uint32_t)&_erelocate - (uint32_t)&_srelocate;
		pSrc = (uint32_t*)((uint32_t)pSrc + nb_bytes) - 1;
		pDest = (uint32_t*)((uint32_t)pDest + nb_bytes) - 1;
		for (;nb_bytes;nb_bytes -= 4) {
  400b4c:	4281      	cmp	r1, r0
  400b4e:	d1f9      	bne.n	400b44 <Reset_Handler+0x44>

    No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
  400b50:	bf00      	nop
		}
	}
	__NOP();

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  400b52:	4b10      	ldr	r3, [pc, #64]	; (400b94 <Reset_Handler+0x94>)
  400b54:	4a10      	ldr	r2, [pc, #64]	; (400b98 <Reset_Handler+0x98>)
  400b56:	429a      	cmp	r2, r3
  400b58:	d20b      	bcs.n	400b72 <Reset_Handler+0x72>
  400b5a:	1d13      	adds	r3, r2, #4
  400b5c:	4a0f      	ldr	r2, [pc, #60]	; (400b9c <Reset_Handler+0x9c>)
  400b5e:	1ad2      	subs	r2, r2, r3
  400b60:	f022 0203 	bic.w	r2, r2, #3
  400b64:	441a      	add	r2, r3
  400b66:	3b04      	subs	r3, #4
		*pDest++ = 0;
  400b68:	2100      	movs	r1, #0
  400b6a:	f843 1b04 	str.w	r1, [r3], #4
		}
	}
	__NOP();

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  400b6e:	429a      	cmp	r2, r3
  400b70:	d1fb      	bne.n	400b6a <Reset_Handler+0x6a>
		*pDest++ = 0;
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc);
  400b72:	4b0b      	ldr	r3, [pc, #44]	; (400ba0 <Reset_Handler+0xa0>)
  400b74:	4a0b      	ldr	r2, [pc, #44]	; (400ba4 <Reset_Handler+0xa4>)
  400b76:	609a      	str	r2, [r3, #8]

	/* Initialize the C library */
	__libc_init_array();
  400b78:	4b0b      	ldr	r3, [pc, #44]	; (400ba8 <Reset_Handler+0xa8>)
  400b7a:	4798      	blx	r3

	/* Branch to main function */
	main();
  400b7c:	4b0b      	ldr	r3, [pc, #44]	; (400bac <Reset_Handler+0xac>)
  400b7e:	4798      	blx	r3
  400b80:	e7fe      	b.n	400b80 <Reset_Handler+0x80>
  400b82:	bf00      	nop
  400b84:	20000000 	.word	0x20000000
  400b88:	00402ed8 	.word	0x00402ed8
  400b8c:	20000844 	.word	0x20000844
  400b90:	00402ed4 	.word	0x00402ed4
  400b94:	20000948 	.word	0x20000948
  400b98:	20000844 	.word	0x20000844
  400b9c:	2000094b 	.word	0x2000094b
  400ba0:	e000ed00 	.word	0xe000ed00
  400ba4:	00400000 	.word	0x00400000
  400ba8:	0040116d 	.word	0x0040116d
  400bac:	00400f89 	.word	0x00400f89

00400bb0 <SystemCoreClockUpdate>:
 * \brief Get Core Clock Frequency.
 */
void SystemCoreClockUpdate( void )
{
	/* Determine clock frequency according to clock register values */
	switch ( PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk ) {
  400bb0:	4b3d      	ldr	r3, [pc, #244]	; (400ca8 <SystemCoreClockUpdate+0xf8>)
  400bb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400bb4:	f003 0303 	and.w	r3, r3, #3
  400bb8:	2b03      	cmp	r3, #3
  400bba:	d85d      	bhi.n	400c78 <SystemCoreClockUpdate+0xc8>
  400bbc:	e8df f003 	tbb	[pc, r3]
  400bc0:	2b2b0e02 	.word	0x2b2b0e02
	case PMC_MCKR_CSS_SLOW_CLK: /* Slow clock */
			if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL ) {
  400bc4:	4b39      	ldr	r3, [pc, #228]	; (400cac <SystemCoreClockUpdate+0xfc>)
  400bc6:	695b      	ldr	r3, [r3, #20]
  400bc8:	f013 0f80 	tst.w	r3, #128	; 0x80
				SystemCoreClock = CHIP_FREQ_XTAL_32K;
  400bcc:	bf14      	ite	ne
  400bce:	f44f 4200 	movne.w	r2, #32768	; 0x8000
			} else {
				SystemCoreClock = CHIP_FREQ_SLCK_RC;
  400bd2:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  400bd6:	4b36      	ldr	r3, [pc, #216]	; (400cb0 <SystemCoreClockUpdate+0x100>)
  400bd8:	601a      	str	r2, [r3, #0]
  400bda:	e04d      	b.n	400c78 <SystemCoreClockUpdate+0xc8>
			}
		break;
		
	case PMC_MCKR_CSS_MAIN_CLK: /* Main clock */
		if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  400bdc:	4b32      	ldr	r3, [pc, #200]	; (400ca8 <SystemCoreClockUpdate+0xf8>)
  400bde:	6a1b      	ldr	r3, [r3, #32]
  400be0:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  400be4:	d003      	beq.n	400bee <SystemCoreClockUpdate+0x3e>
			SystemCoreClock = CHIP_FREQ_XTAL;
  400be6:	4a33      	ldr	r2, [pc, #204]	; (400cb4 <SystemCoreClockUpdate+0x104>)
  400be8:	4b31      	ldr	r3, [pc, #196]	; (400cb0 <SystemCoreClockUpdate+0x100>)
  400bea:	601a      	str	r2, [r3, #0]
  400bec:	e044      	b.n	400c78 <SystemCoreClockUpdate+0xc8>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  400bee:	4a32      	ldr	r2, [pc, #200]	; (400cb8 <SystemCoreClockUpdate+0x108>)
  400bf0:	4b2f      	ldr	r3, [pc, #188]	; (400cb0 <SystemCoreClockUpdate+0x100>)
  400bf2:	601a      	str	r2, [r3, #0]
			
			switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  400bf4:	4b2c      	ldr	r3, [pc, #176]	; (400ca8 <SystemCoreClockUpdate+0xf8>)
  400bf6:	6a1b      	ldr	r3, [r3, #32]
  400bf8:	f003 0370 	and.w	r3, r3, #112	; 0x70
  400bfc:	2b10      	cmp	r3, #16
  400bfe:	d002      	beq.n	400c06 <SystemCoreClockUpdate+0x56>
  400c00:	2b20      	cmp	r3, #32
  400c02:	d004      	beq.n	400c0e <SystemCoreClockUpdate+0x5e>
  400c04:	e038      	b.n	400c78 <SystemCoreClockUpdate+0xc8>
			case CKGR_MOR_MOSCRCF_4_MHz:
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
			break;
			
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_8MHZ;
  400c06:	4a2d      	ldr	r2, [pc, #180]	; (400cbc <SystemCoreClockUpdate+0x10c>)
  400c08:	4b29      	ldr	r3, [pc, #164]	; (400cb0 <SystemCoreClockUpdate+0x100>)
  400c0a:	601a      	str	r2, [r3, #0]
			break;
  400c0c:	e034      	b.n	400c78 <SystemCoreClockUpdate+0xc8>
			
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
  400c0e:	4a29      	ldr	r2, [pc, #164]	; (400cb4 <SystemCoreClockUpdate+0x104>)
  400c10:	4b27      	ldr	r3, [pc, #156]	; (400cb0 <SystemCoreClockUpdate+0x100>)
  400c12:	601a      	str	r2, [r3, #0]
			break;
  400c14:	e030      	b.n	400c78 <SystemCoreClockUpdate+0xc8>
		}
		break;
		
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_PLLB_CLK:	/* PLLB clock */
			if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  400c16:	4b24      	ldr	r3, [pc, #144]	; (400ca8 <SystemCoreClockUpdate+0xf8>)
  400c18:	6a1b      	ldr	r3, [r3, #32]
  400c1a:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  400c1e:	d003      	beq.n	400c28 <SystemCoreClockUpdate+0x78>
				SystemCoreClock = CHIP_FREQ_XTAL;
  400c20:	4a24      	ldr	r2, [pc, #144]	; (400cb4 <SystemCoreClockUpdate+0x104>)
  400c22:	4b23      	ldr	r3, [pc, #140]	; (400cb0 <SystemCoreClockUpdate+0x100>)
  400c24:	601a      	str	r2, [r3, #0]
  400c26:	e012      	b.n	400c4e <SystemCoreClockUpdate+0x9e>
			} else {
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  400c28:	4a23      	ldr	r2, [pc, #140]	; (400cb8 <SystemCoreClockUpdate+0x108>)
  400c2a:	4b21      	ldr	r3, [pc, #132]	; (400cb0 <SystemCoreClockUpdate+0x100>)
  400c2c:	601a      	str	r2, [r3, #0]
				
				switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  400c2e:	4b1e      	ldr	r3, [pc, #120]	; (400ca8 <SystemCoreClockUpdate+0xf8>)
  400c30:	6a1b      	ldr	r3, [r3, #32]
  400c32:	f003 0370 	and.w	r3, r3, #112	; 0x70
  400c36:	2b10      	cmp	r3, #16
  400c38:	d002      	beq.n	400c40 <SystemCoreClockUpdate+0x90>
  400c3a:	2b20      	cmp	r3, #32
  400c3c:	d004      	beq.n	400c48 <SystemCoreClockUpdate+0x98>
  400c3e:	e006      	b.n	400c4e <SystemCoreClockUpdate+0x9e>
				case CKGR_MOR_MOSCRCF_4_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
					break;
				
				case CKGR_MOR_MOSCRCF_8_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_8MHZ;
  400c40:	4a1e      	ldr	r2, [pc, #120]	; (400cbc <SystemCoreClockUpdate+0x10c>)
  400c42:	4b1b      	ldr	r3, [pc, #108]	; (400cb0 <SystemCoreClockUpdate+0x100>)
  400c44:	601a      	str	r2, [r3, #0]
					break;
  400c46:	e002      	b.n	400c4e <SystemCoreClockUpdate+0x9e>
				
				case CKGR_MOR_MOSCRCF_12_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
  400c48:	4a1a      	ldr	r2, [pc, #104]	; (400cb4 <SystemCoreClockUpdate+0x104>)
  400c4a:	4b19      	ldr	r3, [pc, #100]	; (400cb0 <SystemCoreClockUpdate+0x100>)
  400c4c:	601a      	str	r2, [r3, #0]
				default:
					break;
				}
			}
			
			if ( (uint32_t)(PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) ==
  400c4e:	4b16      	ldr	r3, [pc, #88]	; (400ca8 <SystemCoreClockUpdate+0xf8>)
  400c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400c52:	f003 0303 	and.w	r3, r3, #3
  400c56:	2b02      	cmp	r3, #2
					PMC_MCKR_CSS_PLLA_CLK ) {
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
  400c58:	4a13      	ldr	r2, [pc, #76]	; (400ca8 <SystemCoreClockUpdate+0xf8>)
  400c5a:	bf07      	ittee	eq
  400c5c:	6a93      	ldreq	r3, [r2, #40]	; 0x28
						>> CKGR_PLLAR_MULA_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
  400c5e:	6a92      	ldreq	r2, [r2, #40]	; 0x28
						>> CKGR_PLLAR_DIVA_Pos));
			} else {
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
  400c60:	6ad3      	ldrne	r3, [r2, #44]	; 0x2c
						>> CKGR_PLLBR_MULB_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
  400c62:	6ad2      	ldrne	r2, [r2, #44]	; 0x2c
  400c64:	4812      	ldr	r0, [pc, #72]	; (400cb0 <SystemCoreClockUpdate+0x100>)
  400c66:	f3c3 410a 	ubfx	r1, r3, #16, #11
  400c6a:	6803      	ldr	r3, [r0, #0]
  400c6c:	fb01 3303 	mla	r3, r1, r3, r3
  400c70:	b2d2      	uxtb	r2, r2
  400c72:	fbb3 f3f2 	udiv	r3, r3, r2
  400c76:	6003      	str	r3, [r0, #0]
		
	default:
		break;
	}

	if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 ) {
  400c78:	4b0b      	ldr	r3, [pc, #44]	; (400ca8 <SystemCoreClockUpdate+0xf8>)
  400c7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400c7c:	f003 0370 	and.w	r3, r3, #112	; 0x70
  400c80:	2b70      	cmp	r3, #112	; 0x70
  400c82:	d107      	bne.n	400c94 <SystemCoreClockUpdate+0xe4>
		SystemCoreClock /= 3U;
  400c84:	4a0a      	ldr	r2, [pc, #40]	; (400cb0 <SystemCoreClockUpdate+0x100>)
  400c86:	6813      	ldr	r3, [r2, #0]
  400c88:	490d      	ldr	r1, [pc, #52]	; (400cc0 <SystemCoreClockUpdate+0x110>)
  400c8a:	fba1 1303 	umull	r1, r3, r1, r3
  400c8e:	085b      	lsrs	r3, r3, #1
  400c90:	6013      	str	r3, [r2, #0]
  400c92:	4770      	bx	lr
	} else {
		SystemCoreClock >>=
			((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  400c94:	4b04      	ldr	r3, [pc, #16]	; (400ca8 <SystemCoreClockUpdate+0xf8>)
  400c96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
	}

	if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 ) {
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>=
  400c98:	4905      	ldr	r1, [pc, #20]	; (400cb0 <SystemCoreClockUpdate+0x100>)
  400c9a:	f3c3 1202 	ubfx	r2, r3, #4, #3
  400c9e:	680b      	ldr	r3, [r1, #0]
  400ca0:	40d3      	lsrs	r3, r2
  400ca2:	600b      	str	r3, [r1, #0]
  400ca4:	4770      	bx	lr
  400ca6:	bf00      	nop
  400ca8:	400e0400 	.word	0x400e0400
  400cac:	400e1410 	.word	0x400e1410
  400cb0:	20000000 	.word	0x20000000
  400cb4:	00b71b00 	.word	0x00b71b00
  400cb8:	003d0900 	.word	0x003d0900
  400cbc:	007a1200 	.word	0x007a1200
  400cc0:	aaaaaaab 	.word	0xaaaaaaab

00400cc4 <system_init_flash>:
				}
			}
		}
	}
#else
	if ( ul_clk < CHIP_FREQ_FWS_0 ) {
  400cc4:	4b1a      	ldr	r3, [pc, #104]	; (400d30 <system_init_flash+0x6c>)
  400cc6:	4298      	cmp	r0, r3
  400cc8:	d807      	bhi.n	400cda <system_init_flash+0x16>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  400cca:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  400cce:	4a19      	ldr	r2, [pc, #100]	; (400d34 <system_init_flash+0x70>)
  400cd0:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  400cd2:	f502 7200 	add.w	r2, r2, #512	; 0x200
  400cd6:	6013      	str	r3, [r2, #0]
  400cd8:	4770      	bx	lr
	} else {
		if ( ul_clk < CHIP_FREQ_FWS_1 ) {
  400cda:	4b17      	ldr	r3, [pc, #92]	; (400d38 <system_init_flash+0x74>)
  400cdc:	4298      	cmp	r0, r3
  400cde:	d806      	bhi.n	400cee <system_init_flash+0x2a>
			EFC0->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  400ce0:	4b16      	ldr	r3, [pc, #88]	; (400d3c <system_init_flash+0x78>)
  400ce2:	4a14      	ldr	r2, [pc, #80]	; (400d34 <system_init_flash+0x70>)
  400ce4:	6013      	str	r3, [r2, #0]
			EFC1->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  400ce6:	f502 7200 	add.w	r2, r2, #512	; 0x200
  400cea:	6013      	str	r3, [r2, #0]
  400cec:	4770      	bx	lr
		} else {
			if ( ul_clk < CHIP_FREQ_FWS_2 ) {
  400cee:	4b14      	ldr	r3, [pc, #80]	; (400d40 <system_init_flash+0x7c>)
  400cf0:	4298      	cmp	r0, r3
  400cf2:	d806      	bhi.n	400d02 <system_init_flash+0x3e>
				EFC0->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  400cf4:	4b13      	ldr	r3, [pc, #76]	; (400d44 <system_init_flash+0x80>)
  400cf6:	4a0f      	ldr	r2, [pc, #60]	; (400d34 <system_init_flash+0x70>)
  400cf8:	6013      	str	r3, [r2, #0]
				EFC1->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  400cfa:	f502 7200 	add.w	r2, r2, #512	; 0x200
  400cfe:	6013      	str	r3, [r2, #0]
  400d00:	4770      	bx	lr
			} else {
				if ( ul_clk < CHIP_FREQ_FWS_3 ) {
  400d02:	4b11      	ldr	r3, [pc, #68]	; (400d48 <system_init_flash+0x84>)
  400d04:	4298      	cmp	r0, r3
  400d06:	d806      	bhi.n	400d16 <system_init_flash+0x52>
					EFC0->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  400d08:	4b10      	ldr	r3, [pc, #64]	; (400d4c <system_init_flash+0x88>)
  400d0a:	4a0a      	ldr	r2, [pc, #40]	; (400d34 <system_init_flash+0x70>)
  400d0c:	6013      	str	r3, [r2, #0]
					EFC1->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  400d0e:	f502 7200 	add.w	r2, r2, #512	; 0x200
  400d12:	6013      	str	r3, [r2, #0]
  400d14:	4770      	bx	lr
				} else {
					if ( ul_clk < CHIP_FREQ_FWS_4 ) {
  400d16:	4b0e      	ldr	r3, [pc, #56]	; (400d50 <system_init_flash+0x8c>)
  400d18:	4298      	cmp	r0, r3
						EFC0->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  400d1a:	bf94      	ite	ls
  400d1c:	f04f 2304 	movls.w	r3, #67109888	; 0x4000400
						EFC1->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
					} else {
						EFC0->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  400d20:	4b0c      	ldrhi	r3, [pc, #48]	; (400d54 <system_init_flash+0x90>)
  400d22:	4a04      	ldr	r2, [pc, #16]	; (400d34 <system_init_flash+0x70>)
  400d24:	6013      	str	r3, [r2, #0]
						EFC1->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  400d26:	f502 7200 	add.w	r2, r2, #512	; 0x200
  400d2a:	6013      	str	r3, [r2, #0]
  400d2c:	4770      	bx	lr
  400d2e:	bf00      	nop
  400d30:	01312cff 	.word	0x01312cff
  400d34:	400e0a00 	.word	0x400e0a00
  400d38:	026259ff 	.word	0x026259ff
  400d3c:	04000100 	.word	0x04000100
  400d40:	039386ff 	.word	0x039386ff
  400d44:	04000200 	.word	0x04000200
  400d48:	04c4b3ff 	.word	0x04c4b3ff
  400d4c:	04000300 	.word	0x04000300
  400d50:	05f5e0ff 	.word	0x05f5e0ff
  400d54:	04000500 	.word	0x04000500

00400d58 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
  400d58:	4b09      	ldr	r3, [pc, #36]	; (400d80 <_sbrk+0x28>)
  400d5a:	681b      	ldr	r3, [r3, #0]
  400d5c:	b913      	cbnz	r3, 400d64 <_sbrk+0xc>
		heap = (unsigned char *)&_end;
  400d5e:	4a09      	ldr	r2, [pc, #36]	; (400d84 <_sbrk+0x2c>)
  400d60:	4b07      	ldr	r3, [pc, #28]	; (400d80 <_sbrk+0x28>)
  400d62:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
  400d64:	4b06      	ldr	r3, [pc, #24]	; (400d80 <_sbrk+0x28>)
  400d66:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
  400d68:	181a      	adds	r2, r3, r0
  400d6a:	4907      	ldr	r1, [pc, #28]	; (400d88 <_sbrk+0x30>)
  400d6c:	4291      	cmp	r1, r2
  400d6e:	db04      	blt.n	400d7a <_sbrk+0x22>
		return (caddr_t) -1;	
	}

	heap += incr;
  400d70:	4610      	mov	r0, r2
  400d72:	4a03      	ldr	r2, [pc, #12]	; (400d80 <_sbrk+0x28>)
  400d74:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
  400d76:	4618      	mov	r0, r3
  400d78:	4770      	bx	lr
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;

	if (((int)prev_heap + incr) > ramend) {
		return (caddr_t) -1;	
  400d7a:	f04f 30ff 	mov.w	r0, #4294967295
	}

	heap += incr;

	return (caddr_t) prev_heap;
}
  400d7e:	4770      	bx	lr
  400d80:	200008d4 	.word	0x200008d4
  400d84:	20003948 	.word	0x20003948
  400d88:	20027ffc 	.word	0x20027ffc

00400d8c <_close>:
}

extern int _close(int file)
{
	return -1;
}
  400d8c:	f04f 30ff 	mov.w	r0, #4294967295
  400d90:	4770      	bx	lr
  400d92:	bf00      	nop

00400d94 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
  400d94:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  400d98:	604b      	str	r3, [r1, #4]

	return 0;
}
  400d9a:	2000      	movs	r0, #0
  400d9c:	4770      	bx	lr
  400d9e:	bf00      	nop

00400da0 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
  400da0:	2001      	movs	r0, #1
  400da2:	4770      	bx	lr

00400da4 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
  400da4:	2000      	movs	r0, #0
  400da6:	4770      	bx	lr

00400da8 <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
  400da8:	b5f0      	push	{r4, r5, r6, r7, lr}
  400daa:	b083      	sub	sp, #12
  400dac:	4605      	mov	r5, r0
  400dae:	460c      	mov	r4, r1
	uint32_t val = 0;
  400db0:	2300      	movs	r3, #0
  400db2:	9301      	str	r3, [sp, #4]
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  400db4:	4b18      	ldr	r3, [pc, #96]	; (400e18 <usart_serial_getchar+0x70>)
  400db6:	4298      	cmp	r0, r3
  400db8:	d107      	bne.n	400dca <usart_serial_getchar+0x22>
		while (uart_read((Uart*)p_usart, data));
  400dba:	461f      	mov	r7, r3
  400dbc:	4e17      	ldr	r6, [pc, #92]	; (400e1c <usart_serial_getchar+0x74>)
  400dbe:	4621      	mov	r1, r4
  400dc0:	4638      	mov	r0, r7
  400dc2:	47b0      	blx	r6
  400dc4:	2800      	cmp	r0, #0
  400dc6:	d1fa      	bne.n	400dbe <usart_serial_getchar+0x16>
  400dc8:	e017      	b.n	400dfa <usart_serial_getchar+0x52>
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  400dca:	4b15      	ldr	r3, [pc, #84]	; (400e20 <usart_serial_getchar+0x78>)
  400dcc:	4298      	cmp	r0, r3
  400dce:	d107      	bne.n	400de0 <usart_serial_getchar+0x38>
		while (uart_read((Uart*)p_usart, data));
  400dd0:	461e      	mov	r6, r3
  400dd2:	4d12      	ldr	r5, [pc, #72]	; (400e1c <usart_serial_getchar+0x74>)
  400dd4:	4621      	mov	r1, r4
  400dd6:	4630      	mov	r0, r6
  400dd8:	47a8      	blx	r5
  400dda:	2800      	cmp	r0, #0
  400ddc:	d1fa      	bne.n	400dd4 <usart_serial_getchar+0x2c>
  400dde:	e018      	b.n	400e12 <usart_serial_getchar+0x6a>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  400de0:	4b10      	ldr	r3, [pc, #64]	; (400e24 <usart_serial_getchar+0x7c>)
  400de2:	4298      	cmp	r0, r3
  400de4:	d109      	bne.n	400dfa <usart_serial_getchar+0x52>
		while (usart_read(p_usart, &val));
  400de6:	461e      	mov	r6, r3
  400de8:	4d0f      	ldr	r5, [pc, #60]	; (400e28 <usart_serial_getchar+0x80>)
  400dea:	a901      	add	r1, sp, #4
  400dec:	4630      	mov	r0, r6
  400dee:	47a8      	blx	r5
  400df0:	2800      	cmp	r0, #0
  400df2:	d1fa      	bne.n	400dea <usart_serial_getchar+0x42>
		*data = (uint8_t)(val & 0xFF);
  400df4:	9b01      	ldr	r3, [sp, #4]
  400df6:	7023      	strb	r3, [r4, #0]
  400df8:	e00b      	b.n	400e12 <usart_serial_getchar+0x6a>
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  400dfa:	4b0c      	ldr	r3, [pc, #48]	; (400e2c <usart_serial_getchar+0x84>)
  400dfc:	429d      	cmp	r5, r3
  400dfe:	d108      	bne.n	400e12 <usart_serial_getchar+0x6a>
		while (usart_read(p_usart, &val));
  400e00:	461e      	mov	r6, r3
  400e02:	4d09      	ldr	r5, [pc, #36]	; (400e28 <usart_serial_getchar+0x80>)
  400e04:	a901      	add	r1, sp, #4
  400e06:	4630      	mov	r0, r6
  400e08:	47a8      	blx	r5
  400e0a:	2800      	cmp	r0, #0
  400e0c:	d1fa      	bne.n	400e04 <usart_serial_getchar+0x5c>
		*data = (uint8_t)(val & 0xFF);
  400e0e:	9b01      	ldr	r3, [sp, #4]
  400e10:	7023      	strb	r3, [r4, #0]
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
  400e12:	b003      	add	sp, #12
  400e14:	bdf0      	pop	{r4, r5, r6, r7, pc}
  400e16:	bf00      	nop
  400e18:	400e0600 	.word	0x400e0600
  400e1c:	00400abd 	.word	0x00400abd
  400e20:	400e0800 	.word	0x400e0800
  400e24:	40024000 	.word	0x40024000
  400e28:	00400ae5 	.word	0x00400ae5
  400e2c:	40028000 	.word	0x40028000

00400e30 <usart_serial_putchar>:
 *   \retval 1  The character was written.
 *   \retval 0  The function timed out before the USART transmitter became
 * ready to send.
 */
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
  400e30:	b570      	push	{r4, r5, r6, lr}
  400e32:	460c      	mov	r4, r1
		while (uart_write((Uart*)p_usart, c)!=0);
		return 1;
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  400e34:	4b18      	ldr	r3, [pc, #96]	; (400e98 <usart_serial_putchar+0x68>)
  400e36:	4298      	cmp	r0, r3
  400e38:	d108      	bne.n	400e4c <usart_serial_putchar+0x1c>
		while (uart_write((Uart*)p_usart, c)!=0);
  400e3a:	461e      	mov	r6, r3
  400e3c:	4d17      	ldr	r5, [pc, #92]	; (400e9c <usart_serial_putchar+0x6c>)
  400e3e:	4621      	mov	r1, r4
  400e40:	4630      	mov	r0, r6
  400e42:	47a8      	blx	r5
  400e44:	2800      	cmp	r0, #0
  400e46:	d1fa      	bne.n	400e3e <usart_serial_putchar+0xe>
		return 1;
  400e48:	2001      	movs	r0, #1
  400e4a:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  400e4c:	4b14      	ldr	r3, [pc, #80]	; (400ea0 <usart_serial_putchar+0x70>)
  400e4e:	4298      	cmp	r0, r3
  400e50:	d108      	bne.n	400e64 <usart_serial_putchar+0x34>
		while (uart_write((Uart*)p_usart, c)!=0);
  400e52:	461e      	mov	r6, r3
  400e54:	4d11      	ldr	r5, [pc, #68]	; (400e9c <usart_serial_putchar+0x6c>)
  400e56:	4621      	mov	r1, r4
  400e58:	4630      	mov	r0, r6
  400e5a:	47a8      	blx	r5
  400e5c:	2800      	cmp	r0, #0
  400e5e:	d1fa      	bne.n	400e56 <usart_serial_putchar+0x26>
		return 1;
  400e60:	2001      	movs	r0, #1
  400e62:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  400e64:	4b0f      	ldr	r3, [pc, #60]	; (400ea4 <usart_serial_putchar+0x74>)
  400e66:	4298      	cmp	r0, r3
  400e68:	d108      	bne.n	400e7c <usart_serial_putchar+0x4c>
		while (usart_write(p_usart, c)!=0);
  400e6a:	461e      	mov	r6, r3
  400e6c:	4d0e      	ldr	r5, [pc, #56]	; (400ea8 <usart_serial_putchar+0x78>)
  400e6e:	4621      	mov	r1, r4
  400e70:	4630      	mov	r0, r6
  400e72:	47a8      	blx	r5
  400e74:	2800      	cmp	r0, #0
  400e76:	d1fa      	bne.n	400e6e <usart_serial_putchar+0x3e>
		return 1;
  400e78:	2001      	movs	r0, #1
  400e7a:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  400e7c:	4b0b      	ldr	r3, [pc, #44]	; (400eac <usart_serial_putchar+0x7c>)
  400e7e:	4298      	cmp	r0, r3
  400e80:	d108      	bne.n	400e94 <usart_serial_putchar+0x64>
		while (usart_write(p_usart, c)!=0);
  400e82:	461e      	mov	r6, r3
  400e84:	4d08      	ldr	r5, [pc, #32]	; (400ea8 <usart_serial_putchar+0x78>)
  400e86:	4621      	mov	r1, r4
  400e88:	4630      	mov	r0, r6
  400e8a:	47a8      	blx	r5
  400e8c:	2800      	cmp	r0, #0
  400e8e:	d1fa      	bne.n	400e86 <usart_serial_putchar+0x56>
		return 1;
  400e90:	2001      	movs	r0, #1
  400e92:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
	}
# endif
#endif /* ifdef USART */

	return 0;
  400e94:	2000      	movs	r0, #0
}
  400e96:	bd70      	pop	{r4, r5, r6, pc}
  400e98:	400e0600 	.word	0x400e0600
  400e9c:	00400aad 	.word	0x00400aad
  400ea0:	400e0800 	.word	0x400e0800
  400ea4:	40024000 	.word	0x40024000
  400ea8:	00400ad1 	.word	0x00400ad1
  400eac:	40028000 	.word	0x40028000

00400eb0 <configure_adc>:

/** PWM channel instance for LEDs */
pwm_channel_t g_pwm_channel_led;

void configure_adc(void)
{
  400eb0:	b538      	push	{r3, r4, r5, lr}
	/* Enable peripheral clock. */
	pmc_enable_periph_clk(ID_ADC);
  400eb2:	201d      	movs	r0, #29
  400eb4:	4b13      	ldr	r3, [pc, #76]	; (400f04 <configure_adc+0x54>)
  400eb6:	4798      	blx	r3
	
	adc_init(ADC, sysclk_get_cpu_hz(), 6400000, STARTUP_TIME);
  400eb8:	4c13      	ldr	r4, [pc, #76]	; (400f08 <configure_adc+0x58>)
  400eba:	f44f 2380 	mov.w	r3, #262144	; 0x40000
  400ebe:	4a13      	ldr	r2, [pc, #76]	; (400f0c <configure_adc+0x5c>)
  400ec0:	4913      	ldr	r1, [pc, #76]	; (400f10 <configure_adc+0x60>)
  400ec2:	4620      	mov	r0, r4
  400ec4:	4d13      	ldr	r5, [pc, #76]	; (400f14 <configure_adc+0x64>)
  400ec6:	47a8      	blx	r5
	adc_configure_timing(ADC, TRACKING_TIME	, ADC_SETTLING_TIME_3, TRANSFER_PERIOD);
  400ec8:	2302      	movs	r3, #2
  400eca:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
  400ece:	210f      	movs	r1, #15
  400ed0:	4620      	mov	r0, r4
  400ed2:	4d11      	ldr	r5, [pc, #68]	; (400f18 <configure_adc+0x68>)
  400ed4:	47a8      	blx	r5
	adc_configure_trigger(ADC, ADC_TRIG_SW, 0);
  400ed6:	2200      	movs	r2, #0
  400ed8:	4611      	mov	r1, r2
  400eda:	4620      	mov	r0, r4
  400edc:	4b0f      	ldr	r3, [pc, #60]	; (400f1c <configure_adc+0x6c>)
  400ede:	4798      	blx	r3
	adc_enable_channel(ADC, ADC_CHANNEL);
  400ee0:	2105      	movs	r1, #5
  400ee2:	4620      	mov	r0, r4
  400ee4:	4b0e      	ldr	r3, [pc, #56]	; (400f20 <configure_adc+0x70>)
  400ee6:	4798      	blx	r3
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
  400ee8:	4b0e      	ldr	r3, [pc, #56]	; (400f24 <configure_adc+0x74>)
  400eea:	2250      	movs	r2, #80	; 0x50
  400eec:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  400ef0:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  400ef4:	601a      	str	r2, [r3, #0]
	NVIC_SetPriority(ADC_IRQn, 5);
	NVIC_EnableIRQ(ADC_IRQn);
	adc_enable_interrupt(ADC, ADC_IER_DRDY);
  400ef6:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
  400efa:	4620      	mov	r0, r4
  400efc:	4b0a      	ldr	r3, [pc, #40]	; (400f28 <configure_adc+0x78>)
  400efe:	4798      	blx	r3
  400f00:	bd38      	pop	{r3, r4, r5, pc}
  400f02:	bf00      	nop
  400f04:	00400791 	.word	0x00400791
  400f08:	40038000 	.word	0x40038000
  400f0c:	0061a800 	.word	0x0061a800
  400f10:	07270e00 	.word	0x07270e00
  400f14:	0040028d 	.word	0x0040028d
  400f18:	004002d1 	.word	0x004002d1
  400f1c:	004002c1 	.word	0x004002c1
  400f20:	004002f5 	.word	0x004002f5
  400f24:	e000e100 	.word	0xe000e100
  400f28:	00400305 	.word	0x00400305

00400f2c <ADC_Handler>:
	tc_enable_interrupt(TC,	CHANNEL, TC_IER_CPCS);
	tc_start(TC, CHANNEL);
}

void ADC_Handler(void)
{
  400f2c:	b508      	push	{r3, lr}
	uint16_t result;

	if ((adc_get_status(ADC) & ADC_ISR_DRDY) == ADC_ISR_DRDY)
  400f2e:	4807      	ldr	r0, [pc, #28]	; (400f4c <ADC_Handler+0x20>)
  400f30:	4b07      	ldr	r3, [pc, #28]	; (400f50 <ADC_Handler+0x24>)
  400f32:	4798      	blx	r3
  400f34:	f010 7f80 	tst.w	r0, #16777216	; 0x1000000
  400f38:	d007      	beq.n	400f4a <ADC_Handler+0x1e>
	{
		result = adc_get_latest_value(ADC);
  400f3a:	4804      	ldr	r0, [pc, #16]	; (400f4c <ADC_Handler+0x20>)
  400f3c:	4b05      	ldr	r3, [pc, #20]	; (400f54 <ADC_Handler+0x28>)
  400f3e:	4798      	blx	r3
		pwm_channel_update_duty(PWM, &g_pwm_channel_led, result);
  400f40:	b282      	uxth	r2, r0
  400f42:	4905      	ldr	r1, [pc, #20]	; (400f58 <ADC_Handler+0x2c>)
  400f44:	4805      	ldr	r0, [pc, #20]	; (400f5c <ADC_Handler+0x30>)
  400f46:	4b06      	ldr	r3, [pc, #24]	; (400f60 <ADC_Handler+0x34>)
  400f48:	4798      	blx	r3
  400f4a:	bd08      	pop	{r3, pc}
  400f4c:	40038000 	.word	0x40038000
  400f50:	00400309 	.word	0x00400309
  400f54:	00400301 	.word	0x00400301
  400f58:	2000091c 	.word	0x2000091c
  400f5c:	40020000 	.word	0x40020000
  400f60:	0040096d 	.word	0x0040096d

00400f64 <TC0_Handler>:
	}
}

void TC_Handler(void)
{
  400f64:	b508      	push	{r3, lr}
	tc_get_status(TC,CHANNEL);
  400f66:	2100      	movs	r1, #0
  400f68:	4803      	ldr	r0, [pc, #12]	; (400f78 <TC0_Handler+0x14>)
  400f6a:	4b04      	ldr	r3, [pc, #16]	; (400f7c <TC0_Handler+0x18>)
  400f6c:	4798      	blx	r3
	adc_start(ADC);
  400f6e:	4804      	ldr	r0, [pc, #16]	; (400f80 <TC0_Handler+0x1c>)
  400f70:	4b04      	ldr	r3, [pc, #16]	; (400f84 <TC0_Handler+0x20>)
  400f72:	4798      	blx	r3
  400f74:	bd08      	pop	{r3, pc}
  400f76:	bf00      	nop
  400f78:	40010000 	.word	0x40010000
  400f7c:	004009f9 	.word	0x004009f9
  400f80:	40038000 	.word	0x40038000
  400f84:	004002ed 	.word	0x004002ed

00400f88 <main>:
 * Output PWM waves on LEDs to make them fade in and out.
 *
 * \return Unused (ANSI-C compatibility).
 */
int main(void)
{
  400f88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  400f8c:	b08b      	sub	sp, #44	; 0x2c
	/* Initialize the SAM system */
	sysclk_init();
  400f8e:	4b56      	ldr	r3, [pc, #344]	; (4010e8 <main+0x160>)
  400f90:	4798      	blx	r3
	board_init();
  400f92:	4b56      	ldr	r3, [pc, #344]	; (4010ec <main+0x164>)
  400f94:	4798      	blx	r3
  400f96:	2008      	movs	r0, #8
  400f98:	f8df 81c8 	ldr.w	r8, [pc, #456]	; 401164 <main+0x1dc>
  400f9c:	47c0      	blx	r8
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
  400f9e:	4c54      	ldr	r4, [pc, #336]	; (4010f0 <main+0x168>)
  400fa0:	4b54      	ldr	r3, [pc, #336]	; (4010f4 <main+0x16c>)
  400fa2:	601c      	str	r4, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
  400fa4:	4a54      	ldr	r2, [pc, #336]	; (4010f8 <main+0x170>)
  400fa6:	4b55      	ldr	r3, [pc, #340]	; (4010fc <main+0x174>)
  400fa8:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
  400faa:	4a55      	ldr	r2, [pc, #340]	; (401100 <main+0x178>)
  400fac:	4b55      	ldr	r3, [pc, #340]	; (401104 <main+0x17c>)
  400fae:	601a      	str	r2, [r3, #0]
static inline void usart_serial_init(usart_if p_usart,
		usart_serial_options_t *opt)
{
#if ((!SAM4L) && (!SAMG55))
	sam_uart_opt_t uart_settings;
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
  400fb0:	4e55      	ldr	r6, [pc, #340]	; (401108 <main+0x180>)
  400fb2:	9604      	str	r6, [sp, #16]
	uart_settings.ul_baudrate = opt->baudrate;
  400fb4:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  400fb8:	9305      	str	r3, [sp, #20]
	uart_settings.ul_mode = opt->paritytype;
  400fba:	f44f 6300 	mov.w	r3, #2048	; 0x800
  400fbe:	9306      	str	r3, [sp, #24]
  400fc0:	2008      	movs	r0, #8
  400fc2:	47c0      	blx	r8
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
		sysclk_enable_peripheral_clock(ID_UART0);
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
  400fc4:	a904      	add	r1, sp, #16
  400fc6:	4620      	mov	r0, r4
  400fc8:	4b50      	ldr	r3, [pc, #320]	; (40110c <main+0x184>)
  400fca:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
  400fcc:	4d50      	ldr	r5, [pc, #320]	; (401110 <main+0x188>)
  400fce:	682b      	ldr	r3, [r5, #0]
  400fd0:	2100      	movs	r1, #0
  400fd2:	6898      	ldr	r0, [r3, #8]
  400fd4:	4c4f      	ldr	r4, [pc, #316]	; (401114 <main+0x18c>)
  400fd6:	47a0      	blx	r4
	setbuf(stdin, NULL);
  400fd8:	682b      	ldr	r3, [r5, #0]
  400fda:	2100      	movs	r1, #0
  400fdc:	6858      	ldr	r0, [r3, #4]
  400fde:	47a0      	blx	r4

	/* Configure the console uart for debug information */
	configure_console();

	/* Output example information */
	puts(STRING_HEADER);
  400fe0:	484d      	ldr	r0, [pc, #308]	; (401118 <main+0x190>)
  400fe2:	4b4e      	ldr	r3, [pc, #312]	; (40111c <main+0x194>)
  400fe4:	4798      	blx	r3
	
	/* Enable PWM peripheral clock */
#if (SAMV70 || SAMV71 || SAME70 || SAMS70)
	pmc_enable_periph_clk(ID_PWM0);
#else
	pmc_enable_periph_clk(ID_PWM);
  400fe6:	201f      	movs	r0, #31
  400fe8:	47c0      	blx	r8
	/* Disable PWM channels for LEDs */
#if (SAMV70 || SAMV71 || SAME70 || SAMS70)
	pwm_channel_disable(PWM0, PIN_PWM_LED0_CHANNEL);
	pwm_channel_disable(PWM0, PIN_PWM_LED1_CHANNEL);
#else
	pwm_channel_disable(PWM, PIN_PWM_LED0_CHANNEL);
  400fea:	2100      	movs	r1, #0
  400fec:	484c      	ldr	r0, [pc, #304]	; (401120 <main+0x198>)
  400fee:	4c4d      	ldr	r4, [pc, #308]	; (401124 <main+0x19c>)
  400ff0:	47a0      	blx	r4
	pwm_channel_disable(PWM, PIN_PWM_LED1_CHANNEL);
  400ff2:	2101      	movs	r1, #1
  400ff4:	484a      	ldr	r0, [pc, #296]	; (401120 <main+0x198>)
  400ff6:	47a0      	blx	r4
#endif

	/* Set PWM clock A as PWM_FREQUENCY*PERIOD_VALUE (clock B is not used) */
	pwm_clock_t clock_setting = {
  400ff8:	4b4b      	ldr	r3, [pc, #300]	; (401128 <main+0x1a0>)
  400ffa:	9307      	str	r3, [sp, #28]
  400ffc:	2400      	movs	r4, #0
  400ffe:	9408      	str	r4, [sp, #32]
  401000:	9609      	str	r6, [sp, #36]	; 0x24
		.ul_mck = sysclk_get_cpu_hz()
	};
#if (SAMV70 || SAMV71 || SAME70 || SAMS70)
	pwm_init(PWM0, &clock_setting);
#else
	pwm_init(PWM, &clock_setting);
  401002:	a907      	add	r1, sp, #28
  401004:	4846      	ldr	r0, [pc, #280]	; (401120 <main+0x198>)
  401006:	4b49      	ldr	r3, [pc, #292]	; (40112c <main+0x1a4>)
  401008:	4798      	blx	r3
#endif

	/* Initialize PWM channel for LED0 */
	/* Period is left-aligned */
	g_pwm_channel_led.alignment = PWM_ALIGN_LEFT;
  40100a:	4d49      	ldr	r5, [pc, #292]	; (401130 <main+0x1a8>)
  40100c:	812c      	strh	r4, [r5, #8]
	/* Output waveform starts at a low level */
	g_pwm_channel_led.polarity = PWM_LOW;
  40100e:	72ac      	strb	r4, [r5, #10]
	/* Use PWM clock A as source clock */
	g_pwm_channel_led.ul_prescaler = PWM_CMR_CPRE_CLKA;
  401010:	f04f 0b0b 	mov.w	fp, #11
  401014:	f8c5 b004 	str.w	fp, [r5, #4]
	/* Period value of output waveform */
	g_pwm_channel_led.ul_period = PERIOD_VALUE;
  401018:	f640 7afd 	movw	sl, #4093	; 0xffd
  40101c:	f8c5 a010 	str.w	sl, [r5, #16]
	/* Duty cycle value of output waveform */
	g_pwm_channel_led.ul_duty = INIT_DUTY_VALUE;
  401020:	60ec      	str	r4, [r5, #12]
	g_pwm_channel_led.channel = PIN_PWM_LED0_CHANNEL;
  401022:	602c      	str	r4, [r5, #0]
#if (SAMV70 || SAMV71 || SAME70 || SAMS70)
	pwm_channel_init(PWM0, &g_pwm_channel_led);
#else
	pwm_channel_init(PWM, &g_pwm_channel_led);
  401024:	4629      	mov	r1, r5
  401026:	483e      	ldr	r0, [pc, #248]	; (401120 <main+0x198>)
  401028:	4f42      	ldr	r7, [pc, #264]	; (401134 <main+0x1ac>)
  40102a:	47b8      	blx	r7

	/* Enable channel counter event interrupt */
#if (SAMV70 || SAMV71 || SAME70 || SAMS70)
	pwm_channel_enable_interrupt(PWM0, PIN_PWM_LED0_CHANNEL, 0);
#else
	pwm_channel_enable_interrupt(PWM, PIN_PWM_LED0_CHANNEL, 0);
  40102c:	4622      	mov	r2, r4
  40102e:	4621      	mov	r1, r4
  401030:	483b      	ldr	r0, [pc, #236]	; (401120 <main+0x198>)
  401032:	4b41      	ldr	r3, [pc, #260]	; (401138 <main+0x1b0>)
  401034:	4798      	blx	r3
#endif

	/* Initialize PWM channel for LED1 */
	/* Period is center-aligned */
	g_pwm_channel_led.alignment = PWM_ALIGN_CENTER;
  401036:	f44f 7380 	mov.w	r3, #256	; 0x100
  40103a:	812b      	strh	r3, [r5, #8]
	/* Output waveform starts at a high level */
	g_pwm_channel_led.polarity = PWM_HIGH;
  40103c:	f04f 0901 	mov.w	r9, #1
  401040:	f885 900a 	strb.w	r9, [r5, #10]
	/* Use PWM clock A as source clock */
	g_pwm_channel_led.ul_prescaler = PWM_CMR_CPRE_CLKA;
  401044:	f8c5 b004 	str.w	fp, [r5, #4]
	/* Period value of output waveform */
	g_pwm_channel_led.ul_period = PERIOD_VALUE;
  401048:	f8c5 a010 	str.w	sl, [r5, #16]
	/* Duty cycle value of output waveform */
	g_pwm_channel_led.ul_duty = INIT_DUTY_VALUE;
  40104c:	60ec      	str	r4, [r5, #12]
	g_pwm_channel_led.channel = PIN_PWM_LED1_CHANNEL;
  40104e:	f8c5 9000 	str.w	r9, [r5]
	pwm_channel_init(PWM0, &g_pwm_channel_led);

	/* Disable channel counter event interrupt */
	pwm_channel_disable_interrupt(PWM0, PIN_PWM_LED1_CHANNEL, 0);
#else
	pwm_channel_init(PWM, &g_pwm_channel_led);
  401052:	4629      	mov	r1, r5
  401054:	4832      	ldr	r0, [pc, #200]	; (401120 <main+0x198>)
  401056:	47b8      	blx	r7

	/* Disable channel counter event interrupt */
	pwm_channel_disable_interrupt(PWM, PIN_PWM_LED1_CHANNEL, 0);
  401058:	4622      	mov	r2, r4
  40105a:	4649      	mov	r1, r9
  40105c:	4830      	ldr	r0, [pc, #192]	; (401120 <main+0x198>)
  40105e:	4b37      	ldr	r3, [pc, #220]	; (40113c <main+0x1b4>)
  401060:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
  401062:	4d37      	ldr	r5, [pc, #220]	; (401140 <main+0x1b8>)
  401064:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
  401068:	f8c5 3080 	str.w	r3, [r5, #128]	; 0x80

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  40106c:	f8c5 3180 	str.w	r3, [r5, #384]	; 0x180
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
  401070:	f885 431f 	strb.w	r4, [r5, #799]	; 0x31f
    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  401074:	602b      	str	r3, [r5, #0]
	NVIC_ClearPendingIRQ(PWM_IRQn);
	NVIC_SetPriority(PWM_IRQn, 0);
	NVIC_EnableIRQ(PWM_IRQn);
	
	/* Enable PWM channels for LEDs */
	pwm_channel_enable(PWM, PIN_PWM_LED0_CHANNEL);
  401076:	4621      	mov	r1, r4
  401078:	4829      	ldr	r0, [pc, #164]	; (401120 <main+0x198>)
  40107a:	f8df a0ec 	ldr.w	sl, [pc, #236]	; 401168 <main+0x1e0>
  40107e:	47d0      	blx	sl
	pwm_channel_enable(PWM, PIN_PWM_LED1_CHANNEL);
  401080:	4649      	mov	r1, r9
  401082:	4827      	ldr	r0, [pc, #156]	; (401120 <main+0x198>)
  401084:	47d0      	blx	sl
#endif

	configure_adc();
  401086:	4b2f      	ldr	r3, [pc, #188]	; (401144 <main+0x1bc>)
  401088:	4798      	blx	r3
	uint32_t ul_div;
	uint32_t ul_tcclks;
	uint32_t counts;
	uint32_t ul_sysclk = sysclk_get_cpu_hz();
	
	pmc_enable_periph_clk(ID_TC);
  40108a:	2017      	movs	r0, #23
  40108c:	47c0      	blx	r8
	
	tc_find_mck_divisor( freq_desejada, ul_sysclk, &ul_div, &ul_tcclks,	BOARD_MCK);
  40108e:	9600      	str	r6, [sp, #0]
  401090:	ab04      	add	r3, sp, #16
  401092:	aa03      	add	r2, sp, #12
  401094:	4631      	mov	r1, r6
  401096:	200a      	movs	r0, #10
  401098:	4f2b      	ldr	r7, [pc, #172]	; (401148 <main+0x1c0>)
  40109a:	47b8      	blx	r7
	tc_init(TC, CHANNEL, ul_tcclks | TC_CMR_CPCTRG);
  40109c:	4f2b      	ldr	r7, [pc, #172]	; (40114c <main+0x1c4>)
  40109e:	9a04      	ldr	r2, [sp, #16]
  4010a0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
  4010a4:	4621      	mov	r1, r4
  4010a6:	4638      	mov	r0, r7
  4010a8:	4b29      	ldr	r3, [pc, #164]	; (401150 <main+0x1c8>)
  4010aa:	4798      	blx	r3
	counts = (ul_sysclk/ul_div)/freq_desejada;
	tc_write_rc(TC, CHANNEL, counts);
  4010ac:	9a03      	ldr	r2, [sp, #12]
  4010ae:	fbb6 f6f2 	udiv	r6, r6, r2
  4010b2:	4a28      	ldr	r2, [pc, #160]	; (401154 <main+0x1cc>)
  4010b4:	fba2 3206 	umull	r3, r2, r2, r6
  4010b8:	08d2      	lsrs	r2, r2, #3
  4010ba:	4621      	mov	r1, r4
  4010bc:	4638      	mov	r0, r7
  4010be:	4b26      	ldr	r3, [pc, #152]	; (401158 <main+0x1d0>)
  4010c0:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  4010c2:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
  4010c6:	f8c5 3180 	str.w	r3, [r5, #384]	; 0x180
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
  4010ca:	2240      	movs	r2, #64	; 0x40
  4010cc:	f885 2317 	strb.w	r2, [r5, #791]	; 0x317
    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  4010d0:	602b      	str	r3, [r5, #0]
	NVIC_ClearPendingIRQ(TC_IRQn);
	NVIC_SetPriority(TC_IRQn, 4);
	NVIC_EnableIRQ(TC_IRQn);
	tc_enable_interrupt(TC,	CHANNEL, TC_IER_CPCS);
  4010d2:	2210      	movs	r2, #16
  4010d4:	4621      	mov	r1, r4
  4010d6:	4638      	mov	r0, r7
  4010d8:	4b20      	ldr	r3, [pc, #128]	; (40115c <main+0x1d4>)
  4010da:	4798      	blx	r3
	tc_start(TC, CHANNEL);
  4010dc:	4621      	mov	r1, r4
  4010de:	4638      	mov	r0, r7
  4010e0:	4b1f      	ldr	r3, [pc, #124]	; (401160 <main+0x1d8>)
  4010e2:	4798      	blx	r3
  4010e4:	e7fe      	b.n	4010e4 <main+0x15c>
  4010e6:	bf00      	nop
  4010e8:	00400129 	.word	0x00400129
  4010ec:	00400219 	.word	0x00400219
  4010f0:	400e0600 	.word	0x400e0600
  4010f4:	20000914 	.word	0x20000914
  4010f8:	00400e31 	.word	0x00400e31
  4010fc:	20000910 	.word	0x20000910
  401100:	00400da9 	.word	0x00400da9
  401104:	2000090c 	.word	0x2000090c
  401108:	07270e00 	.word	0x07270e00
  40110c:	00400a75 	.word	0x00400a75
  401110:	20000430 	.word	0x20000430
  401114:	004012d1 	.word	0x004012d1
  401118:	00402e58 	.word	0x00402e58
  40111c:	004012c1 	.word	0x004012c1
  401120:	40020000 	.word	0x40020000
  401124:	00400995 	.word	0x00400995
  401128:	003e7448 	.word	0x003e7448
  40112c:	00400839 	.word	0x00400839
  401130:	2000091c 	.word	0x2000091c
  401134:	00400885 	.word	0x00400885
  401138:	004009a1 	.word	0x004009a1
  40113c:	004009b5 	.word	0x004009b5
  401140:	e000e100 	.word	0xe000e100
  401144:	00400eb1 	.word	0x00400eb1
  401148:	00400a01 	.word	0x00400a01
  40114c:	40010000 	.word	0x40010000
  401150:	004009c9 	.word	0x004009c9
  401154:	cccccccd 	.word	0xcccccccd
  401158:	004009e9 	.word	0x004009e9
  40115c:	004009f1 	.word	0x004009f1
  401160:	004009e1 	.word	0x004009e1
  401164:	00400791 	.word	0x00400791
  401168:	00400989 	.word	0x00400989

0040116c <__libc_init_array>:
  40116c:	b570      	push	{r4, r5, r6, lr}
  40116e:	4e0f      	ldr	r6, [pc, #60]	; (4011ac <__libc_init_array+0x40>)
  401170:	4d0f      	ldr	r5, [pc, #60]	; (4011b0 <__libc_init_array+0x44>)
  401172:	1b76      	subs	r6, r6, r5
  401174:	10b6      	asrs	r6, r6, #2
  401176:	bf18      	it	ne
  401178:	2400      	movne	r4, #0
  40117a:	d005      	beq.n	401188 <__libc_init_array+0x1c>
  40117c:	3401      	adds	r4, #1
  40117e:	f855 3b04 	ldr.w	r3, [r5], #4
  401182:	4798      	blx	r3
  401184:	42a6      	cmp	r6, r4
  401186:	d1f9      	bne.n	40117c <__libc_init_array+0x10>
  401188:	4e0a      	ldr	r6, [pc, #40]	; (4011b4 <__libc_init_array+0x48>)
  40118a:	4d0b      	ldr	r5, [pc, #44]	; (4011b8 <__libc_init_array+0x4c>)
  40118c:	1b76      	subs	r6, r6, r5
  40118e:	f001 fe91 	bl	402eb4 <_init>
  401192:	10b6      	asrs	r6, r6, #2
  401194:	bf18      	it	ne
  401196:	2400      	movne	r4, #0
  401198:	d006      	beq.n	4011a8 <__libc_init_array+0x3c>
  40119a:	3401      	adds	r4, #1
  40119c:	f855 3b04 	ldr.w	r3, [r5], #4
  4011a0:	4798      	blx	r3
  4011a2:	42a6      	cmp	r6, r4
  4011a4:	d1f9      	bne.n	40119a <__libc_init_array+0x2e>
  4011a6:	bd70      	pop	{r4, r5, r6, pc}
  4011a8:	bd70      	pop	{r4, r5, r6, pc}
  4011aa:	bf00      	nop
  4011ac:	00402ec0 	.word	0x00402ec0
  4011b0:	00402ec0 	.word	0x00402ec0
  4011b4:	00402ec8 	.word	0x00402ec8
  4011b8:	00402ec0 	.word	0x00402ec0

004011bc <memset>:
  4011bc:	b470      	push	{r4, r5, r6}
  4011be:	0784      	lsls	r4, r0, #30
  4011c0:	d046      	beq.n	401250 <memset+0x94>
  4011c2:	1e54      	subs	r4, r2, #1
  4011c4:	2a00      	cmp	r2, #0
  4011c6:	d041      	beq.n	40124c <memset+0x90>
  4011c8:	b2cd      	uxtb	r5, r1
  4011ca:	4603      	mov	r3, r0
  4011cc:	e002      	b.n	4011d4 <memset+0x18>
  4011ce:	1e62      	subs	r2, r4, #1
  4011d0:	b3e4      	cbz	r4, 40124c <memset+0x90>
  4011d2:	4614      	mov	r4, r2
  4011d4:	f803 5b01 	strb.w	r5, [r3], #1
  4011d8:	079a      	lsls	r2, r3, #30
  4011da:	d1f8      	bne.n	4011ce <memset+0x12>
  4011dc:	2c03      	cmp	r4, #3
  4011de:	d92e      	bls.n	40123e <memset+0x82>
  4011e0:	b2cd      	uxtb	r5, r1
  4011e2:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  4011e6:	2c0f      	cmp	r4, #15
  4011e8:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  4011ec:	d919      	bls.n	401222 <memset+0x66>
  4011ee:	f103 0210 	add.w	r2, r3, #16
  4011f2:	4626      	mov	r6, r4
  4011f4:	3e10      	subs	r6, #16
  4011f6:	2e0f      	cmp	r6, #15
  4011f8:	f842 5c10 	str.w	r5, [r2, #-16]
  4011fc:	f842 5c0c 	str.w	r5, [r2, #-12]
  401200:	f842 5c08 	str.w	r5, [r2, #-8]
  401204:	f842 5c04 	str.w	r5, [r2, #-4]
  401208:	f102 0210 	add.w	r2, r2, #16
  40120c:	d8f2      	bhi.n	4011f4 <memset+0x38>
  40120e:	f1a4 0210 	sub.w	r2, r4, #16
  401212:	f022 020f 	bic.w	r2, r2, #15
  401216:	f004 040f 	and.w	r4, r4, #15
  40121a:	3210      	adds	r2, #16
  40121c:	2c03      	cmp	r4, #3
  40121e:	4413      	add	r3, r2
  401220:	d90d      	bls.n	40123e <memset+0x82>
  401222:	461e      	mov	r6, r3
  401224:	4622      	mov	r2, r4
  401226:	3a04      	subs	r2, #4
  401228:	2a03      	cmp	r2, #3
  40122a:	f846 5b04 	str.w	r5, [r6], #4
  40122e:	d8fa      	bhi.n	401226 <memset+0x6a>
  401230:	1f22      	subs	r2, r4, #4
  401232:	f022 0203 	bic.w	r2, r2, #3
  401236:	3204      	adds	r2, #4
  401238:	4413      	add	r3, r2
  40123a:	f004 0403 	and.w	r4, r4, #3
  40123e:	b12c      	cbz	r4, 40124c <memset+0x90>
  401240:	b2c9      	uxtb	r1, r1
  401242:	441c      	add	r4, r3
  401244:	f803 1b01 	strb.w	r1, [r3], #1
  401248:	42a3      	cmp	r3, r4
  40124a:	d1fb      	bne.n	401244 <memset+0x88>
  40124c:	bc70      	pop	{r4, r5, r6}
  40124e:	4770      	bx	lr
  401250:	4614      	mov	r4, r2
  401252:	4603      	mov	r3, r0
  401254:	e7c2      	b.n	4011dc <memset+0x20>
  401256:	bf00      	nop

00401258 <_puts_r>:
  401258:	b5f0      	push	{r4, r5, r6, r7, lr}
  40125a:	4605      	mov	r5, r0
  40125c:	b089      	sub	sp, #36	; 0x24
  40125e:	4608      	mov	r0, r1
  401260:	460c      	mov	r4, r1
  401262:	f000 f8ed 	bl	401440 <strlen>
  401266:	6bab      	ldr	r3, [r5, #56]	; 0x38
  401268:	4f14      	ldr	r7, [pc, #80]	; (4012bc <_puts_r+0x64>)
  40126a:	9404      	str	r4, [sp, #16]
  40126c:	2601      	movs	r6, #1
  40126e:	1c44      	adds	r4, r0, #1
  401270:	a904      	add	r1, sp, #16
  401272:	2202      	movs	r2, #2
  401274:	9403      	str	r4, [sp, #12]
  401276:	9005      	str	r0, [sp, #20]
  401278:	68ac      	ldr	r4, [r5, #8]
  40127a:	9706      	str	r7, [sp, #24]
  40127c:	9607      	str	r6, [sp, #28]
  40127e:	9101      	str	r1, [sp, #4]
  401280:	9202      	str	r2, [sp, #8]
  401282:	b1b3      	cbz	r3, 4012b2 <_puts_r+0x5a>
  401284:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  401288:	049a      	lsls	r2, r3, #18
  40128a:	d406      	bmi.n	40129a <_puts_r+0x42>
  40128c:	6e62      	ldr	r2, [r4, #100]	; 0x64
  40128e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  401292:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  401296:	81a3      	strh	r3, [r4, #12]
  401298:	6662      	str	r2, [r4, #100]	; 0x64
  40129a:	4621      	mov	r1, r4
  40129c:	4628      	mov	r0, r5
  40129e:	aa01      	add	r2, sp, #4
  4012a0:	f000 fc3c 	bl	401b1c <__sfvwrite_r>
  4012a4:	2800      	cmp	r0, #0
  4012a6:	bf14      	ite	ne
  4012a8:	f04f 30ff 	movne.w	r0, #4294967295
  4012ac:	200a      	moveq	r0, #10
  4012ae:	b009      	add	sp, #36	; 0x24
  4012b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4012b2:	4628      	mov	r0, r5
  4012b4:	f000 fade 	bl	401874 <__sinit>
  4012b8:	e7e4      	b.n	401284 <_puts_r+0x2c>
  4012ba:	bf00      	nop
  4012bc:	00402eb0 	.word	0x00402eb0

004012c0 <puts>:
  4012c0:	4b02      	ldr	r3, [pc, #8]	; (4012cc <puts+0xc>)
  4012c2:	4601      	mov	r1, r0
  4012c4:	6818      	ldr	r0, [r3, #0]
  4012c6:	f7ff bfc7 	b.w	401258 <_puts_r>
  4012ca:	bf00      	nop
  4012cc:	20000430 	.word	0x20000430

004012d0 <setbuf>:
  4012d0:	2900      	cmp	r1, #0
  4012d2:	bf0c      	ite	eq
  4012d4:	2202      	moveq	r2, #2
  4012d6:	2200      	movne	r2, #0
  4012d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
  4012dc:	f000 b800 	b.w	4012e0 <setvbuf>

004012e0 <setvbuf>:
  4012e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  4012e4:	4c51      	ldr	r4, [pc, #324]	; (40142c <setvbuf+0x14c>)
  4012e6:	6825      	ldr	r5, [r4, #0]
  4012e8:	b083      	sub	sp, #12
  4012ea:	4604      	mov	r4, r0
  4012ec:	460f      	mov	r7, r1
  4012ee:	4690      	mov	r8, r2
  4012f0:	461e      	mov	r6, r3
  4012f2:	b115      	cbz	r5, 4012fa <setvbuf+0x1a>
  4012f4:	6bab      	ldr	r3, [r5, #56]	; 0x38
  4012f6:	2b00      	cmp	r3, #0
  4012f8:	d079      	beq.n	4013ee <setvbuf+0x10e>
  4012fa:	f1b8 0f02 	cmp.w	r8, #2
  4012fe:	d004      	beq.n	40130a <setvbuf+0x2a>
  401300:	f1b8 0f01 	cmp.w	r8, #1
  401304:	d87f      	bhi.n	401406 <setvbuf+0x126>
  401306:	2e00      	cmp	r6, #0
  401308:	db7d      	blt.n	401406 <setvbuf+0x126>
  40130a:	4621      	mov	r1, r4
  40130c:	4628      	mov	r0, r5
  40130e:	f000 fa1d 	bl	40174c <_fflush_r>
  401312:	6b21      	ldr	r1, [r4, #48]	; 0x30
  401314:	b141      	cbz	r1, 401328 <setvbuf+0x48>
  401316:	f104 0340 	add.w	r3, r4, #64	; 0x40
  40131a:	4299      	cmp	r1, r3
  40131c:	d002      	beq.n	401324 <setvbuf+0x44>
  40131e:	4628      	mov	r0, r5
  401320:	f000 fb14 	bl	40194c <_free_r>
  401324:	2300      	movs	r3, #0
  401326:	6323      	str	r3, [r4, #48]	; 0x30
  401328:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40132c:	2200      	movs	r2, #0
  40132e:	61a2      	str	r2, [r4, #24]
  401330:	6062      	str	r2, [r4, #4]
  401332:	061a      	lsls	r2, r3, #24
  401334:	d454      	bmi.n	4013e0 <setvbuf+0x100>
  401336:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
  40133a:	f023 0303 	bic.w	r3, r3, #3
  40133e:	f1b8 0f02 	cmp.w	r8, #2
  401342:	81a3      	strh	r3, [r4, #12]
  401344:	d039      	beq.n	4013ba <setvbuf+0xda>
  401346:	ab01      	add	r3, sp, #4
  401348:	466a      	mov	r2, sp
  40134a:	4621      	mov	r1, r4
  40134c:	4628      	mov	r0, r5
  40134e:	f000 fd91 	bl	401e74 <__swhatbuf_r>
  401352:	89a3      	ldrh	r3, [r4, #12]
  401354:	4318      	orrs	r0, r3
  401356:	81a0      	strh	r0, [r4, #12]
  401358:	b326      	cbz	r6, 4013a4 <setvbuf+0xc4>
  40135a:	b327      	cbz	r7, 4013a6 <setvbuf+0xc6>
  40135c:	6bab      	ldr	r3, [r5, #56]	; 0x38
  40135e:	2b00      	cmp	r3, #0
  401360:	d04d      	beq.n	4013fe <setvbuf+0x11e>
  401362:	9b00      	ldr	r3, [sp, #0]
  401364:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
  401368:	6027      	str	r7, [r4, #0]
  40136a:	429e      	cmp	r6, r3
  40136c:	bf1c      	itt	ne
  40136e:	f440 6000 	orrne.w	r0, r0, #2048	; 0x800
  401372:	81a0      	strhne	r0, [r4, #12]
  401374:	f1b8 0f01 	cmp.w	r8, #1
  401378:	bf08      	it	eq
  40137a:	f040 0001 	orreq.w	r0, r0, #1
  40137e:	b283      	uxth	r3, r0
  401380:	bf08      	it	eq
  401382:	81a0      	strheq	r0, [r4, #12]
  401384:	f003 0008 	and.w	r0, r3, #8
  401388:	b280      	uxth	r0, r0
  40138a:	6127      	str	r7, [r4, #16]
  40138c:	6166      	str	r6, [r4, #20]
  40138e:	b318      	cbz	r0, 4013d8 <setvbuf+0xf8>
  401390:	f013 0001 	ands.w	r0, r3, #1
  401394:	d02f      	beq.n	4013f6 <setvbuf+0x116>
  401396:	2000      	movs	r0, #0
  401398:	4276      	negs	r6, r6
  40139a:	61a6      	str	r6, [r4, #24]
  40139c:	60a0      	str	r0, [r4, #8]
  40139e:	b003      	add	sp, #12
  4013a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  4013a4:	9e00      	ldr	r6, [sp, #0]
  4013a6:	4630      	mov	r0, r6
  4013a8:	f000 fdd8 	bl	401f5c <malloc>
  4013ac:	4607      	mov	r7, r0
  4013ae:	b368      	cbz	r0, 40140c <setvbuf+0x12c>
  4013b0:	89a3      	ldrh	r3, [r4, #12]
  4013b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  4013b6:	81a3      	strh	r3, [r4, #12]
  4013b8:	e7d0      	b.n	40135c <setvbuf+0x7c>
  4013ba:	2000      	movs	r0, #0
  4013bc:	f104 0243 	add.w	r2, r4, #67	; 0x43
  4013c0:	f043 0302 	orr.w	r3, r3, #2
  4013c4:	2500      	movs	r5, #0
  4013c6:	2101      	movs	r1, #1
  4013c8:	81a3      	strh	r3, [r4, #12]
  4013ca:	60a5      	str	r5, [r4, #8]
  4013cc:	6022      	str	r2, [r4, #0]
  4013ce:	6122      	str	r2, [r4, #16]
  4013d0:	6161      	str	r1, [r4, #20]
  4013d2:	b003      	add	sp, #12
  4013d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  4013d8:	60a0      	str	r0, [r4, #8]
  4013da:	b003      	add	sp, #12
  4013dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  4013e0:	6921      	ldr	r1, [r4, #16]
  4013e2:	4628      	mov	r0, r5
  4013e4:	f000 fab2 	bl	40194c <_free_r>
  4013e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4013ec:	e7a3      	b.n	401336 <setvbuf+0x56>
  4013ee:	4628      	mov	r0, r5
  4013f0:	f000 fa40 	bl	401874 <__sinit>
  4013f4:	e781      	b.n	4012fa <setvbuf+0x1a>
  4013f6:	60a6      	str	r6, [r4, #8]
  4013f8:	b003      	add	sp, #12
  4013fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  4013fe:	4628      	mov	r0, r5
  401400:	f000 fa38 	bl	401874 <__sinit>
  401404:	e7ad      	b.n	401362 <setvbuf+0x82>
  401406:	f04f 30ff 	mov.w	r0, #4294967295
  40140a:	e7e2      	b.n	4013d2 <setvbuf+0xf2>
  40140c:	f8dd 9000 	ldr.w	r9, [sp]
  401410:	45b1      	cmp	r9, r6
  401412:	d006      	beq.n	401422 <setvbuf+0x142>
  401414:	4648      	mov	r0, r9
  401416:	f000 fda1 	bl	401f5c <malloc>
  40141a:	4607      	mov	r7, r0
  40141c:	b108      	cbz	r0, 401422 <setvbuf+0x142>
  40141e:	464e      	mov	r6, r9
  401420:	e7c6      	b.n	4013b0 <setvbuf+0xd0>
  401422:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  401426:	f04f 30ff 	mov.w	r0, #4294967295
  40142a:	e7c7      	b.n	4013bc <setvbuf+0xdc>
  40142c:	20000430 	.word	0x20000430
	...

00401440 <strlen>:
  401440:	f890 f000 	pld	[r0]
  401444:	e96d 4502 	strd	r4, r5, [sp, #-8]!
  401448:	f020 0107 	bic.w	r1, r0, #7
  40144c:	f06f 0c00 	mvn.w	ip, #0
  401450:	f010 0407 	ands.w	r4, r0, #7
  401454:	f891 f020 	pld	[r1, #32]
  401458:	f040 8049 	bne.w	4014ee <strlen+0xae>
  40145c:	f04f 0400 	mov.w	r4, #0
  401460:	f06f 0007 	mvn.w	r0, #7
  401464:	e9d1 2300 	ldrd	r2, r3, [r1]
  401468:	f891 f040 	pld	[r1, #64]	; 0x40
  40146c:	f100 0008 	add.w	r0, r0, #8
  401470:	fa82 f24c 	uadd8	r2, r2, ip
  401474:	faa4 f28c 	sel	r2, r4, ip
  401478:	fa83 f34c 	uadd8	r3, r3, ip
  40147c:	faa2 f38c 	sel	r3, r2, ip
  401480:	bb4b      	cbnz	r3, 4014d6 <strlen+0x96>
  401482:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
  401486:	fa82 f24c 	uadd8	r2, r2, ip
  40148a:	f100 0008 	add.w	r0, r0, #8
  40148e:	faa4 f28c 	sel	r2, r4, ip
  401492:	fa83 f34c 	uadd8	r3, r3, ip
  401496:	faa2 f38c 	sel	r3, r2, ip
  40149a:	b9e3      	cbnz	r3, 4014d6 <strlen+0x96>
  40149c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
  4014a0:	fa82 f24c 	uadd8	r2, r2, ip
  4014a4:	f100 0008 	add.w	r0, r0, #8
  4014a8:	faa4 f28c 	sel	r2, r4, ip
  4014ac:	fa83 f34c 	uadd8	r3, r3, ip
  4014b0:	faa2 f38c 	sel	r3, r2, ip
  4014b4:	b97b      	cbnz	r3, 4014d6 <strlen+0x96>
  4014b6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
  4014ba:	f101 0120 	add.w	r1, r1, #32
  4014be:	fa82 f24c 	uadd8	r2, r2, ip
  4014c2:	f100 0008 	add.w	r0, r0, #8
  4014c6:	faa4 f28c 	sel	r2, r4, ip
  4014ca:	fa83 f34c 	uadd8	r3, r3, ip
  4014ce:	faa2 f38c 	sel	r3, r2, ip
  4014d2:	2b00      	cmp	r3, #0
  4014d4:	d0c6      	beq.n	401464 <strlen+0x24>
  4014d6:	2a00      	cmp	r2, #0
  4014d8:	bf04      	itt	eq
  4014da:	3004      	addeq	r0, #4
  4014dc:	461a      	moveq	r2, r3
  4014de:	ba12      	rev	r2, r2
  4014e0:	fab2 f282 	clz	r2, r2
  4014e4:	e8fd 4502 	ldrd	r4, r5, [sp], #8
  4014e8:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  4014ec:	4770      	bx	lr
  4014ee:	e9d1 2300 	ldrd	r2, r3, [r1]
  4014f2:	f004 0503 	and.w	r5, r4, #3
  4014f6:	f1c4 0000 	rsb	r0, r4, #0
  4014fa:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  4014fe:	f014 0f04 	tst.w	r4, #4
  401502:	f891 f040 	pld	[r1, #64]	; 0x40
  401506:	fa0c f505 	lsl.w	r5, ip, r5
  40150a:	ea62 0205 	orn	r2, r2, r5
  40150e:	bf1c      	itt	ne
  401510:	ea63 0305 	ornne	r3, r3, r5
  401514:	4662      	movne	r2, ip
  401516:	f04f 0400 	mov.w	r4, #0
  40151a:	e7a9      	b.n	401470 <strlen+0x30>

0040151c <__swsetup_r>:
  40151c:	b538      	push	{r3, r4, r5, lr}
  40151e:	4b30      	ldr	r3, [pc, #192]	; (4015e0 <__swsetup_r+0xc4>)
  401520:	681b      	ldr	r3, [r3, #0]
  401522:	4605      	mov	r5, r0
  401524:	460c      	mov	r4, r1
  401526:	b113      	cbz	r3, 40152e <__swsetup_r+0x12>
  401528:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  40152a:	2a00      	cmp	r2, #0
  40152c:	d038      	beq.n	4015a0 <__swsetup_r+0x84>
  40152e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  401532:	b293      	uxth	r3, r2
  401534:	0718      	lsls	r0, r3, #28
  401536:	d50c      	bpl.n	401552 <__swsetup_r+0x36>
  401538:	6920      	ldr	r0, [r4, #16]
  40153a:	b1a8      	cbz	r0, 401568 <__swsetup_r+0x4c>
  40153c:	f013 0201 	ands.w	r2, r3, #1
  401540:	d01e      	beq.n	401580 <__swsetup_r+0x64>
  401542:	6963      	ldr	r3, [r4, #20]
  401544:	2200      	movs	r2, #0
  401546:	425b      	negs	r3, r3
  401548:	61a3      	str	r3, [r4, #24]
  40154a:	60a2      	str	r2, [r4, #8]
  40154c:	b1f0      	cbz	r0, 40158c <__swsetup_r+0x70>
  40154e:	2000      	movs	r0, #0
  401550:	bd38      	pop	{r3, r4, r5, pc}
  401552:	06d9      	lsls	r1, r3, #27
  401554:	d53c      	bpl.n	4015d0 <__swsetup_r+0xb4>
  401556:	0758      	lsls	r0, r3, #29
  401558:	d426      	bmi.n	4015a8 <__swsetup_r+0x8c>
  40155a:	6920      	ldr	r0, [r4, #16]
  40155c:	f042 0308 	orr.w	r3, r2, #8
  401560:	81a3      	strh	r3, [r4, #12]
  401562:	b29b      	uxth	r3, r3
  401564:	2800      	cmp	r0, #0
  401566:	d1e9      	bne.n	40153c <__swsetup_r+0x20>
  401568:	f403 7220 	and.w	r2, r3, #640	; 0x280
  40156c:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  401570:	d0e4      	beq.n	40153c <__swsetup_r+0x20>
  401572:	4628      	mov	r0, r5
  401574:	4621      	mov	r1, r4
  401576:	f000 fcad 	bl	401ed4 <__smakebuf_r>
  40157a:	89a3      	ldrh	r3, [r4, #12]
  40157c:	6920      	ldr	r0, [r4, #16]
  40157e:	e7dd      	b.n	40153c <__swsetup_r+0x20>
  401580:	0799      	lsls	r1, r3, #30
  401582:	bf58      	it	pl
  401584:	6962      	ldrpl	r2, [r4, #20]
  401586:	60a2      	str	r2, [r4, #8]
  401588:	2800      	cmp	r0, #0
  40158a:	d1e0      	bne.n	40154e <__swsetup_r+0x32>
  40158c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  401590:	061a      	lsls	r2, r3, #24
  401592:	d5dd      	bpl.n	401550 <__swsetup_r+0x34>
  401594:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  401598:	81a3      	strh	r3, [r4, #12]
  40159a:	f04f 30ff 	mov.w	r0, #4294967295
  40159e:	bd38      	pop	{r3, r4, r5, pc}
  4015a0:	4618      	mov	r0, r3
  4015a2:	f000 f967 	bl	401874 <__sinit>
  4015a6:	e7c2      	b.n	40152e <__swsetup_r+0x12>
  4015a8:	6b21      	ldr	r1, [r4, #48]	; 0x30
  4015aa:	b151      	cbz	r1, 4015c2 <__swsetup_r+0xa6>
  4015ac:	f104 0340 	add.w	r3, r4, #64	; 0x40
  4015b0:	4299      	cmp	r1, r3
  4015b2:	d004      	beq.n	4015be <__swsetup_r+0xa2>
  4015b4:	4628      	mov	r0, r5
  4015b6:	f000 f9c9 	bl	40194c <_free_r>
  4015ba:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  4015be:	2300      	movs	r3, #0
  4015c0:	6323      	str	r3, [r4, #48]	; 0x30
  4015c2:	2300      	movs	r3, #0
  4015c4:	6920      	ldr	r0, [r4, #16]
  4015c6:	6063      	str	r3, [r4, #4]
  4015c8:	f022 0224 	bic.w	r2, r2, #36	; 0x24
  4015cc:	6020      	str	r0, [r4, #0]
  4015ce:	e7c5      	b.n	40155c <__swsetup_r+0x40>
  4015d0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  4015d4:	2309      	movs	r3, #9
  4015d6:	602b      	str	r3, [r5, #0]
  4015d8:	f04f 30ff 	mov.w	r0, #4294967295
  4015dc:	81a2      	strh	r2, [r4, #12]
  4015de:	bd38      	pop	{r3, r4, r5, pc}
  4015e0:	20000430 	.word	0x20000430

004015e4 <register_fini>:
  4015e4:	4b02      	ldr	r3, [pc, #8]	; (4015f0 <register_fini+0xc>)
  4015e6:	b113      	cbz	r3, 4015ee <register_fini+0xa>
  4015e8:	4802      	ldr	r0, [pc, #8]	; (4015f4 <register_fini+0x10>)
  4015ea:	f000 b805 	b.w	4015f8 <atexit>
  4015ee:	4770      	bx	lr
  4015f0:	00000000 	.word	0x00000000
  4015f4:	00401889 	.word	0x00401889

004015f8 <atexit>:
  4015f8:	2300      	movs	r3, #0
  4015fa:	4601      	mov	r1, r0
  4015fc:	461a      	mov	r2, r3
  4015fe:	4618      	mov	r0, r3
  401600:	f001 bb1c 	b.w	402c3c <__register_exitproc>

00401604 <__sflush_r>:
  401604:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
  401608:	b29a      	uxth	r2, r3
  40160a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40160e:	460d      	mov	r5, r1
  401610:	0711      	lsls	r1, r2, #28
  401612:	4680      	mov	r8, r0
  401614:	d43c      	bmi.n	401690 <__sflush_r+0x8c>
  401616:	686a      	ldr	r2, [r5, #4]
  401618:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  40161c:	2a00      	cmp	r2, #0
  40161e:	81ab      	strh	r3, [r5, #12]
  401620:	dd73      	ble.n	40170a <__sflush_r+0x106>
  401622:	6aac      	ldr	r4, [r5, #40]	; 0x28
  401624:	2c00      	cmp	r4, #0
  401626:	d04b      	beq.n	4016c0 <__sflush_r+0xbc>
  401628:	b29b      	uxth	r3, r3
  40162a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
  40162e:	2100      	movs	r1, #0
  401630:	b292      	uxth	r2, r2
  401632:	f8d8 6000 	ldr.w	r6, [r8]
  401636:	f8c8 1000 	str.w	r1, [r8]
  40163a:	2a00      	cmp	r2, #0
  40163c:	d069      	beq.n	401712 <__sflush_r+0x10e>
  40163e:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  401640:	075f      	lsls	r7, r3, #29
  401642:	d505      	bpl.n	401650 <__sflush_r+0x4c>
  401644:	6869      	ldr	r1, [r5, #4]
  401646:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  401648:	1a52      	subs	r2, r2, r1
  40164a:	b10b      	cbz	r3, 401650 <__sflush_r+0x4c>
  40164c:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  40164e:	1ad2      	subs	r2, r2, r3
  401650:	2300      	movs	r3, #0
  401652:	69e9      	ldr	r1, [r5, #28]
  401654:	4640      	mov	r0, r8
  401656:	47a0      	blx	r4
  401658:	1c44      	adds	r4, r0, #1
  40165a:	d03c      	beq.n	4016d6 <__sflush_r+0xd2>
  40165c:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
  401660:	692a      	ldr	r2, [r5, #16]
  401662:	602a      	str	r2, [r5, #0]
  401664:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  401668:	2200      	movs	r2, #0
  40166a:	81ab      	strh	r3, [r5, #12]
  40166c:	04db      	lsls	r3, r3, #19
  40166e:	606a      	str	r2, [r5, #4]
  401670:	d449      	bmi.n	401706 <__sflush_r+0x102>
  401672:	6b29      	ldr	r1, [r5, #48]	; 0x30
  401674:	f8c8 6000 	str.w	r6, [r8]
  401678:	b311      	cbz	r1, 4016c0 <__sflush_r+0xbc>
  40167a:	f105 0340 	add.w	r3, r5, #64	; 0x40
  40167e:	4299      	cmp	r1, r3
  401680:	d002      	beq.n	401688 <__sflush_r+0x84>
  401682:	4640      	mov	r0, r8
  401684:	f000 f962 	bl	40194c <_free_r>
  401688:	2000      	movs	r0, #0
  40168a:	6328      	str	r0, [r5, #48]	; 0x30
  40168c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  401690:	692e      	ldr	r6, [r5, #16]
  401692:	b1ae      	cbz	r6, 4016c0 <__sflush_r+0xbc>
  401694:	682c      	ldr	r4, [r5, #0]
  401696:	602e      	str	r6, [r5, #0]
  401698:	0790      	lsls	r0, r2, #30
  40169a:	bf0c      	ite	eq
  40169c:	696b      	ldreq	r3, [r5, #20]
  40169e:	2300      	movne	r3, #0
  4016a0:	1ba4      	subs	r4, r4, r6
  4016a2:	60ab      	str	r3, [r5, #8]
  4016a4:	e00a      	b.n	4016bc <__sflush_r+0xb8>
  4016a6:	4623      	mov	r3, r4
  4016a8:	4632      	mov	r2, r6
  4016aa:	6a6f      	ldr	r7, [r5, #36]	; 0x24
  4016ac:	69e9      	ldr	r1, [r5, #28]
  4016ae:	4640      	mov	r0, r8
  4016b0:	47b8      	blx	r7
  4016b2:	2800      	cmp	r0, #0
  4016b4:	eba4 0400 	sub.w	r4, r4, r0
  4016b8:	4406      	add	r6, r0
  4016ba:	dd04      	ble.n	4016c6 <__sflush_r+0xc2>
  4016bc:	2c00      	cmp	r4, #0
  4016be:	dcf2      	bgt.n	4016a6 <__sflush_r+0xa2>
  4016c0:	2000      	movs	r0, #0
  4016c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4016c6:	89ab      	ldrh	r3, [r5, #12]
  4016c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4016cc:	81ab      	strh	r3, [r5, #12]
  4016ce:	f04f 30ff 	mov.w	r0, #4294967295
  4016d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4016d6:	f8d8 2000 	ldr.w	r2, [r8]
  4016da:	2a1d      	cmp	r2, #29
  4016dc:	d8f3      	bhi.n	4016c6 <__sflush_r+0xc2>
  4016de:	4b1a      	ldr	r3, [pc, #104]	; (401748 <__sflush_r+0x144>)
  4016e0:	40d3      	lsrs	r3, r2
  4016e2:	f003 0301 	and.w	r3, r3, #1
  4016e6:	f083 0401 	eor.w	r4, r3, #1
  4016ea:	2b00      	cmp	r3, #0
  4016ec:	d0eb      	beq.n	4016c6 <__sflush_r+0xc2>
  4016ee:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
  4016f2:	6929      	ldr	r1, [r5, #16]
  4016f4:	6029      	str	r1, [r5, #0]
  4016f6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  4016fa:	04d9      	lsls	r1, r3, #19
  4016fc:	606c      	str	r4, [r5, #4]
  4016fe:	81ab      	strh	r3, [r5, #12]
  401700:	d5b7      	bpl.n	401672 <__sflush_r+0x6e>
  401702:	2a00      	cmp	r2, #0
  401704:	d1b5      	bne.n	401672 <__sflush_r+0x6e>
  401706:	6528      	str	r0, [r5, #80]	; 0x50
  401708:	e7b3      	b.n	401672 <__sflush_r+0x6e>
  40170a:	6bea      	ldr	r2, [r5, #60]	; 0x3c
  40170c:	2a00      	cmp	r2, #0
  40170e:	dc88      	bgt.n	401622 <__sflush_r+0x1e>
  401710:	e7d6      	b.n	4016c0 <__sflush_r+0xbc>
  401712:	2301      	movs	r3, #1
  401714:	69e9      	ldr	r1, [r5, #28]
  401716:	4640      	mov	r0, r8
  401718:	47a0      	blx	r4
  40171a:	1c43      	adds	r3, r0, #1
  40171c:	4602      	mov	r2, r0
  40171e:	d002      	beq.n	401726 <__sflush_r+0x122>
  401720:	89ab      	ldrh	r3, [r5, #12]
  401722:	6aac      	ldr	r4, [r5, #40]	; 0x28
  401724:	e78c      	b.n	401640 <__sflush_r+0x3c>
  401726:	f8d8 3000 	ldr.w	r3, [r8]
  40172a:	2b00      	cmp	r3, #0
  40172c:	d0f8      	beq.n	401720 <__sflush_r+0x11c>
  40172e:	2b1d      	cmp	r3, #29
  401730:	d001      	beq.n	401736 <__sflush_r+0x132>
  401732:	2b16      	cmp	r3, #22
  401734:	d102      	bne.n	40173c <__sflush_r+0x138>
  401736:	f8c8 6000 	str.w	r6, [r8]
  40173a:	e7c1      	b.n	4016c0 <__sflush_r+0xbc>
  40173c:	89ab      	ldrh	r3, [r5, #12]
  40173e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  401742:	81ab      	strh	r3, [r5, #12]
  401744:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  401748:	20400001 	.word	0x20400001

0040174c <_fflush_r>:
  40174c:	b510      	push	{r4, lr}
  40174e:	4604      	mov	r4, r0
  401750:	b082      	sub	sp, #8
  401752:	b108      	cbz	r0, 401758 <_fflush_r+0xc>
  401754:	6b83      	ldr	r3, [r0, #56]	; 0x38
  401756:	b153      	cbz	r3, 40176e <_fflush_r+0x22>
  401758:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
  40175c:	b908      	cbnz	r0, 401762 <_fflush_r+0x16>
  40175e:	b002      	add	sp, #8
  401760:	bd10      	pop	{r4, pc}
  401762:	4620      	mov	r0, r4
  401764:	b002      	add	sp, #8
  401766:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  40176a:	f7ff bf4b 	b.w	401604 <__sflush_r>
  40176e:	9101      	str	r1, [sp, #4]
  401770:	f000 f880 	bl	401874 <__sinit>
  401774:	9901      	ldr	r1, [sp, #4]
  401776:	e7ef      	b.n	401758 <_fflush_r+0xc>

00401778 <_cleanup_r>:
  401778:	4901      	ldr	r1, [pc, #4]	; (401780 <_cleanup_r+0x8>)
  40177a:	f000 bb51 	b.w	401e20 <_fwalk_reent>
  40177e:	bf00      	nop
  401780:	00402d05 	.word	0x00402d05

00401784 <__sinit.part.1>:
  401784:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401788:	4b35      	ldr	r3, [pc, #212]	; (401860 <__sinit.part.1+0xdc>)
  40178a:	6845      	ldr	r5, [r0, #4]
  40178c:	63c3      	str	r3, [r0, #60]	; 0x3c
  40178e:	2400      	movs	r4, #0
  401790:	4607      	mov	r7, r0
  401792:	f500 723b 	add.w	r2, r0, #748	; 0x2ec
  401796:	2304      	movs	r3, #4
  401798:	2103      	movs	r1, #3
  40179a:	f8c0 12e4 	str.w	r1, [r0, #740]	; 0x2e4
  40179e:	f8c0 22e8 	str.w	r2, [r0, #744]	; 0x2e8
  4017a2:	f8c0 42e0 	str.w	r4, [r0, #736]	; 0x2e0
  4017a6:	b083      	sub	sp, #12
  4017a8:	602c      	str	r4, [r5, #0]
  4017aa:	606c      	str	r4, [r5, #4]
  4017ac:	60ac      	str	r4, [r5, #8]
  4017ae:	666c      	str	r4, [r5, #100]	; 0x64
  4017b0:	81ec      	strh	r4, [r5, #14]
  4017b2:	612c      	str	r4, [r5, #16]
  4017b4:	616c      	str	r4, [r5, #20]
  4017b6:	61ac      	str	r4, [r5, #24]
  4017b8:	81ab      	strh	r3, [r5, #12]
  4017ba:	4621      	mov	r1, r4
  4017bc:	f105 005c 	add.w	r0, r5, #92	; 0x5c
  4017c0:	2208      	movs	r2, #8
  4017c2:	f7ff fcfb 	bl	4011bc <memset>
  4017c6:	68be      	ldr	r6, [r7, #8]
  4017c8:	f8df b098 	ldr.w	fp, [pc, #152]	; 401864 <__sinit.part.1+0xe0>
  4017cc:	f8df a098 	ldr.w	sl, [pc, #152]	; 401868 <__sinit.part.1+0xe4>
  4017d0:	f8df 9098 	ldr.w	r9, [pc, #152]	; 40186c <__sinit.part.1+0xe8>
  4017d4:	f8df 8098 	ldr.w	r8, [pc, #152]	; 401870 <__sinit.part.1+0xec>
  4017d8:	f8c5 b020 	str.w	fp, [r5, #32]
  4017dc:	2301      	movs	r3, #1
  4017de:	2209      	movs	r2, #9
  4017e0:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
  4017e4:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
  4017e8:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
  4017ec:	61ed      	str	r5, [r5, #28]
  4017ee:	4621      	mov	r1, r4
  4017f0:	81f3      	strh	r3, [r6, #14]
  4017f2:	81b2      	strh	r2, [r6, #12]
  4017f4:	f106 005c 	add.w	r0, r6, #92	; 0x5c
  4017f8:	6034      	str	r4, [r6, #0]
  4017fa:	6074      	str	r4, [r6, #4]
  4017fc:	60b4      	str	r4, [r6, #8]
  4017fe:	6674      	str	r4, [r6, #100]	; 0x64
  401800:	6134      	str	r4, [r6, #16]
  401802:	6174      	str	r4, [r6, #20]
  401804:	61b4      	str	r4, [r6, #24]
  401806:	2208      	movs	r2, #8
  401808:	9301      	str	r3, [sp, #4]
  40180a:	f7ff fcd7 	bl	4011bc <memset>
  40180e:	68fd      	ldr	r5, [r7, #12]
  401810:	61f6      	str	r6, [r6, #28]
  401812:	2012      	movs	r0, #18
  401814:	2202      	movs	r2, #2
  401816:	f8c6 b020 	str.w	fp, [r6, #32]
  40181a:	f8c6 a024 	str.w	sl, [r6, #36]	; 0x24
  40181e:	f8c6 9028 	str.w	r9, [r6, #40]	; 0x28
  401822:	f8c6 802c 	str.w	r8, [r6, #44]	; 0x2c
  401826:	4621      	mov	r1, r4
  401828:	81a8      	strh	r0, [r5, #12]
  40182a:	81ea      	strh	r2, [r5, #14]
  40182c:	602c      	str	r4, [r5, #0]
  40182e:	606c      	str	r4, [r5, #4]
  401830:	60ac      	str	r4, [r5, #8]
  401832:	666c      	str	r4, [r5, #100]	; 0x64
  401834:	612c      	str	r4, [r5, #16]
  401836:	616c      	str	r4, [r5, #20]
  401838:	61ac      	str	r4, [r5, #24]
  40183a:	f105 005c 	add.w	r0, r5, #92	; 0x5c
  40183e:	2208      	movs	r2, #8
  401840:	f7ff fcbc 	bl	4011bc <memset>
  401844:	9b01      	ldr	r3, [sp, #4]
  401846:	61ed      	str	r5, [r5, #28]
  401848:	f8c5 b020 	str.w	fp, [r5, #32]
  40184c:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
  401850:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
  401854:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
  401858:	63bb      	str	r3, [r7, #56]	; 0x38
  40185a:	b003      	add	sp, #12
  40185c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401860:	00401779 	.word	0x00401779
  401864:	00402b89 	.word	0x00402b89
  401868:	00402bad 	.word	0x00402bad
  40186c:	00402be9 	.word	0x00402be9
  401870:	00402c09 	.word	0x00402c09

00401874 <__sinit>:
  401874:	6b83      	ldr	r3, [r0, #56]	; 0x38
  401876:	b103      	cbz	r3, 40187a <__sinit+0x6>
  401878:	4770      	bx	lr
  40187a:	f7ff bf83 	b.w	401784 <__sinit.part.1>
  40187e:	bf00      	nop

00401880 <__sfp_lock_acquire>:
  401880:	4770      	bx	lr
  401882:	bf00      	nop

00401884 <__sfp_lock_release>:
  401884:	4770      	bx	lr
  401886:	bf00      	nop

00401888 <__libc_fini_array>:
  401888:	b538      	push	{r3, r4, r5, lr}
  40188a:	4d07      	ldr	r5, [pc, #28]	; (4018a8 <__libc_fini_array+0x20>)
  40188c:	4c07      	ldr	r4, [pc, #28]	; (4018ac <__libc_fini_array+0x24>)
  40188e:	1b2c      	subs	r4, r5, r4
  401890:	10a4      	asrs	r4, r4, #2
  401892:	d005      	beq.n	4018a0 <__libc_fini_array+0x18>
  401894:	3c01      	subs	r4, #1
  401896:	f855 3d04 	ldr.w	r3, [r5, #-4]!
  40189a:	4798      	blx	r3
  40189c:	2c00      	cmp	r4, #0
  40189e:	d1f9      	bne.n	401894 <__libc_fini_array+0xc>
  4018a0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  4018a4:	f001 bb10 	b.w	402ec8 <_fini>
  4018a8:	00402ed8 	.word	0x00402ed8
  4018ac:	00402ed4 	.word	0x00402ed4

004018b0 <_malloc_trim_r>:
  4018b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4018b2:	4f23      	ldr	r7, [pc, #140]	; (401940 <_malloc_trim_r+0x90>)
  4018b4:	460c      	mov	r4, r1
  4018b6:	4606      	mov	r6, r0
  4018b8:	f000 ff60 	bl	40277c <__malloc_lock>
  4018bc:	68bb      	ldr	r3, [r7, #8]
  4018be:	685d      	ldr	r5, [r3, #4]
  4018c0:	f025 0503 	bic.w	r5, r5, #3
  4018c4:	1b29      	subs	r1, r5, r4
  4018c6:	f601 71ef 	addw	r1, r1, #4079	; 0xfef
  4018ca:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  4018ce:	f021 010f 	bic.w	r1, r1, #15
  4018d2:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  4018d6:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  4018da:	db07      	blt.n	4018ec <_malloc_trim_r+0x3c>
  4018dc:	2100      	movs	r1, #0
  4018de:	4630      	mov	r0, r6
  4018e0:	f001 f940 	bl	402b64 <_sbrk_r>
  4018e4:	68bb      	ldr	r3, [r7, #8]
  4018e6:	442b      	add	r3, r5
  4018e8:	4298      	cmp	r0, r3
  4018ea:	d004      	beq.n	4018f6 <_malloc_trim_r+0x46>
  4018ec:	4630      	mov	r0, r6
  4018ee:	f000 ff47 	bl	402780 <__malloc_unlock>
  4018f2:	2000      	movs	r0, #0
  4018f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4018f6:	4261      	negs	r1, r4
  4018f8:	4630      	mov	r0, r6
  4018fa:	f001 f933 	bl	402b64 <_sbrk_r>
  4018fe:	3001      	adds	r0, #1
  401900:	d00d      	beq.n	40191e <_malloc_trim_r+0x6e>
  401902:	4b10      	ldr	r3, [pc, #64]	; (401944 <_malloc_trim_r+0x94>)
  401904:	68ba      	ldr	r2, [r7, #8]
  401906:	6819      	ldr	r1, [r3, #0]
  401908:	1b2d      	subs	r5, r5, r4
  40190a:	f045 0501 	orr.w	r5, r5, #1
  40190e:	4630      	mov	r0, r6
  401910:	1b09      	subs	r1, r1, r4
  401912:	6055      	str	r5, [r2, #4]
  401914:	6019      	str	r1, [r3, #0]
  401916:	f000 ff33 	bl	402780 <__malloc_unlock>
  40191a:	2001      	movs	r0, #1
  40191c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40191e:	2100      	movs	r1, #0
  401920:	4630      	mov	r0, r6
  401922:	f001 f91f 	bl	402b64 <_sbrk_r>
  401926:	68ba      	ldr	r2, [r7, #8]
  401928:	1a83      	subs	r3, r0, r2
  40192a:	2b0f      	cmp	r3, #15
  40192c:	ddde      	ble.n	4018ec <_malloc_trim_r+0x3c>
  40192e:	4c06      	ldr	r4, [pc, #24]	; (401948 <_malloc_trim_r+0x98>)
  401930:	4904      	ldr	r1, [pc, #16]	; (401944 <_malloc_trim_r+0x94>)
  401932:	6824      	ldr	r4, [r4, #0]
  401934:	f043 0301 	orr.w	r3, r3, #1
  401938:	1b00      	subs	r0, r0, r4
  40193a:	6053      	str	r3, [r2, #4]
  40193c:	6008      	str	r0, [r1, #0]
  40193e:	e7d5      	b.n	4018ec <_malloc_trim_r+0x3c>
  401940:	20000434 	.word	0x20000434
  401944:	200008e4 	.word	0x200008e4
  401948:	20000840 	.word	0x20000840

0040194c <_free_r>:
  40194c:	2900      	cmp	r1, #0
  40194e:	d045      	beq.n	4019dc <_free_r+0x90>
  401950:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  401954:	460d      	mov	r5, r1
  401956:	4680      	mov	r8, r0
  401958:	f000 ff10 	bl	40277c <__malloc_lock>
  40195c:	f855 7c04 	ldr.w	r7, [r5, #-4]
  401960:	496a      	ldr	r1, [pc, #424]	; (401b0c <_free_r+0x1c0>)
  401962:	f027 0301 	bic.w	r3, r7, #1
  401966:	f1a5 0408 	sub.w	r4, r5, #8
  40196a:	18e2      	adds	r2, r4, r3
  40196c:	688e      	ldr	r6, [r1, #8]
  40196e:	6850      	ldr	r0, [r2, #4]
  401970:	42b2      	cmp	r2, r6
  401972:	f020 0003 	bic.w	r0, r0, #3
  401976:	d062      	beq.n	401a3e <_free_r+0xf2>
  401978:	07fe      	lsls	r6, r7, #31
  40197a:	6050      	str	r0, [r2, #4]
  40197c:	d40b      	bmi.n	401996 <_free_r+0x4a>
  40197e:	f855 7c08 	ldr.w	r7, [r5, #-8]
  401982:	1be4      	subs	r4, r4, r7
  401984:	f101 0e08 	add.w	lr, r1, #8
  401988:	68a5      	ldr	r5, [r4, #8]
  40198a:	4575      	cmp	r5, lr
  40198c:	443b      	add	r3, r7
  40198e:	d06f      	beq.n	401a70 <_free_r+0x124>
  401990:	68e7      	ldr	r7, [r4, #12]
  401992:	60ef      	str	r7, [r5, #12]
  401994:	60bd      	str	r5, [r7, #8]
  401996:	1815      	adds	r5, r2, r0
  401998:	686d      	ldr	r5, [r5, #4]
  40199a:	07ed      	lsls	r5, r5, #31
  40199c:	d542      	bpl.n	401a24 <_free_r+0xd8>
  40199e:	f043 0201 	orr.w	r2, r3, #1
  4019a2:	6062      	str	r2, [r4, #4]
  4019a4:	50e3      	str	r3, [r4, r3]
  4019a6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  4019aa:	d218      	bcs.n	4019de <_free_r+0x92>
  4019ac:	08db      	lsrs	r3, r3, #3
  4019ae:	1c5a      	adds	r2, r3, #1
  4019b0:	684d      	ldr	r5, [r1, #4]
  4019b2:	f851 7032 	ldr.w	r7, [r1, r2, lsl #3]
  4019b6:	60a7      	str	r7, [r4, #8]
  4019b8:	2001      	movs	r0, #1
  4019ba:	109b      	asrs	r3, r3, #2
  4019bc:	fa00 f303 	lsl.w	r3, r0, r3
  4019c0:	eb01 00c2 	add.w	r0, r1, r2, lsl #3
  4019c4:	431d      	orrs	r5, r3
  4019c6:	3808      	subs	r0, #8
  4019c8:	60e0      	str	r0, [r4, #12]
  4019ca:	604d      	str	r5, [r1, #4]
  4019cc:	f841 4032 	str.w	r4, [r1, r2, lsl #3]
  4019d0:	60fc      	str	r4, [r7, #12]
  4019d2:	4640      	mov	r0, r8
  4019d4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  4019d8:	f000 bed2 	b.w	402780 <__malloc_unlock>
  4019dc:	4770      	bx	lr
  4019de:	0a5a      	lsrs	r2, r3, #9
  4019e0:	2a04      	cmp	r2, #4
  4019e2:	d853      	bhi.n	401a8c <_free_r+0x140>
  4019e4:	099a      	lsrs	r2, r3, #6
  4019e6:	f102 0739 	add.w	r7, r2, #57	; 0x39
  4019ea:	007f      	lsls	r7, r7, #1
  4019ec:	f102 0538 	add.w	r5, r2, #56	; 0x38
  4019f0:	eb01 0087 	add.w	r0, r1, r7, lsl #2
  4019f4:	f851 2027 	ldr.w	r2, [r1, r7, lsl #2]
  4019f8:	4944      	ldr	r1, [pc, #272]	; (401b0c <_free_r+0x1c0>)
  4019fa:	3808      	subs	r0, #8
  4019fc:	4290      	cmp	r0, r2
  4019fe:	d04d      	beq.n	401a9c <_free_r+0x150>
  401a00:	6851      	ldr	r1, [r2, #4]
  401a02:	f021 0103 	bic.w	r1, r1, #3
  401a06:	428b      	cmp	r3, r1
  401a08:	d202      	bcs.n	401a10 <_free_r+0xc4>
  401a0a:	6892      	ldr	r2, [r2, #8]
  401a0c:	4290      	cmp	r0, r2
  401a0e:	d1f7      	bne.n	401a00 <_free_r+0xb4>
  401a10:	68d0      	ldr	r0, [r2, #12]
  401a12:	60e0      	str	r0, [r4, #12]
  401a14:	60a2      	str	r2, [r4, #8]
  401a16:	6084      	str	r4, [r0, #8]
  401a18:	60d4      	str	r4, [r2, #12]
  401a1a:	4640      	mov	r0, r8
  401a1c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  401a20:	f000 beae 	b.w	402780 <__malloc_unlock>
  401a24:	6895      	ldr	r5, [r2, #8]
  401a26:	4f3a      	ldr	r7, [pc, #232]	; (401b10 <_free_r+0x1c4>)
  401a28:	42bd      	cmp	r5, r7
  401a2a:	4403      	add	r3, r0
  401a2c:	d03f      	beq.n	401aae <_free_r+0x162>
  401a2e:	68d0      	ldr	r0, [r2, #12]
  401a30:	60e8      	str	r0, [r5, #12]
  401a32:	f043 0201 	orr.w	r2, r3, #1
  401a36:	6085      	str	r5, [r0, #8]
  401a38:	6062      	str	r2, [r4, #4]
  401a3a:	50e3      	str	r3, [r4, r3]
  401a3c:	e7b3      	b.n	4019a6 <_free_r+0x5a>
  401a3e:	07ff      	lsls	r7, r7, #31
  401a40:	4403      	add	r3, r0
  401a42:	d407      	bmi.n	401a54 <_free_r+0x108>
  401a44:	f855 2c08 	ldr.w	r2, [r5, #-8]
  401a48:	1aa4      	subs	r4, r4, r2
  401a4a:	4413      	add	r3, r2
  401a4c:	68a0      	ldr	r0, [r4, #8]
  401a4e:	68e2      	ldr	r2, [r4, #12]
  401a50:	60c2      	str	r2, [r0, #12]
  401a52:	6090      	str	r0, [r2, #8]
  401a54:	4a2f      	ldr	r2, [pc, #188]	; (401b14 <_free_r+0x1c8>)
  401a56:	6812      	ldr	r2, [r2, #0]
  401a58:	f043 0001 	orr.w	r0, r3, #1
  401a5c:	4293      	cmp	r3, r2
  401a5e:	6060      	str	r0, [r4, #4]
  401a60:	608c      	str	r4, [r1, #8]
  401a62:	d3b6      	bcc.n	4019d2 <_free_r+0x86>
  401a64:	4b2c      	ldr	r3, [pc, #176]	; (401b18 <_free_r+0x1cc>)
  401a66:	4640      	mov	r0, r8
  401a68:	6819      	ldr	r1, [r3, #0]
  401a6a:	f7ff ff21 	bl	4018b0 <_malloc_trim_r>
  401a6e:	e7b0      	b.n	4019d2 <_free_r+0x86>
  401a70:	1811      	adds	r1, r2, r0
  401a72:	6849      	ldr	r1, [r1, #4]
  401a74:	07c9      	lsls	r1, r1, #31
  401a76:	d444      	bmi.n	401b02 <_free_r+0x1b6>
  401a78:	6891      	ldr	r1, [r2, #8]
  401a7a:	68d2      	ldr	r2, [r2, #12]
  401a7c:	60ca      	str	r2, [r1, #12]
  401a7e:	4403      	add	r3, r0
  401a80:	f043 0001 	orr.w	r0, r3, #1
  401a84:	6091      	str	r1, [r2, #8]
  401a86:	6060      	str	r0, [r4, #4]
  401a88:	50e3      	str	r3, [r4, r3]
  401a8a:	e7a2      	b.n	4019d2 <_free_r+0x86>
  401a8c:	2a14      	cmp	r2, #20
  401a8e:	d817      	bhi.n	401ac0 <_free_r+0x174>
  401a90:	f102 075c 	add.w	r7, r2, #92	; 0x5c
  401a94:	007f      	lsls	r7, r7, #1
  401a96:	f102 055b 	add.w	r5, r2, #91	; 0x5b
  401a9a:	e7a9      	b.n	4019f0 <_free_r+0xa4>
  401a9c:	10aa      	asrs	r2, r5, #2
  401a9e:	684b      	ldr	r3, [r1, #4]
  401aa0:	2501      	movs	r5, #1
  401aa2:	fa05 f202 	lsl.w	r2, r5, r2
  401aa6:	4313      	orrs	r3, r2
  401aa8:	604b      	str	r3, [r1, #4]
  401aaa:	4602      	mov	r2, r0
  401aac:	e7b1      	b.n	401a12 <_free_r+0xc6>
  401aae:	f043 0201 	orr.w	r2, r3, #1
  401ab2:	614c      	str	r4, [r1, #20]
  401ab4:	610c      	str	r4, [r1, #16]
  401ab6:	60e5      	str	r5, [r4, #12]
  401ab8:	60a5      	str	r5, [r4, #8]
  401aba:	6062      	str	r2, [r4, #4]
  401abc:	50e3      	str	r3, [r4, r3]
  401abe:	e788      	b.n	4019d2 <_free_r+0x86>
  401ac0:	2a54      	cmp	r2, #84	; 0x54
  401ac2:	d806      	bhi.n	401ad2 <_free_r+0x186>
  401ac4:	0b1a      	lsrs	r2, r3, #12
  401ac6:	f102 076f 	add.w	r7, r2, #111	; 0x6f
  401aca:	007f      	lsls	r7, r7, #1
  401acc:	f102 056e 	add.w	r5, r2, #110	; 0x6e
  401ad0:	e78e      	b.n	4019f0 <_free_r+0xa4>
  401ad2:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  401ad6:	d806      	bhi.n	401ae6 <_free_r+0x19a>
  401ad8:	0bda      	lsrs	r2, r3, #15
  401ada:	f102 0778 	add.w	r7, r2, #120	; 0x78
  401ade:	007f      	lsls	r7, r7, #1
  401ae0:	f102 0577 	add.w	r5, r2, #119	; 0x77
  401ae4:	e784      	b.n	4019f0 <_free_r+0xa4>
  401ae6:	f240 5054 	movw	r0, #1364	; 0x554
  401aea:	4282      	cmp	r2, r0
  401aec:	d806      	bhi.n	401afc <_free_r+0x1b0>
  401aee:	0c9a      	lsrs	r2, r3, #18
  401af0:	f102 077d 	add.w	r7, r2, #125	; 0x7d
  401af4:	007f      	lsls	r7, r7, #1
  401af6:	f102 057c 	add.w	r5, r2, #124	; 0x7c
  401afa:	e779      	b.n	4019f0 <_free_r+0xa4>
  401afc:	27fe      	movs	r7, #254	; 0xfe
  401afe:	257e      	movs	r5, #126	; 0x7e
  401b00:	e776      	b.n	4019f0 <_free_r+0xa4>
  401b02:	f043 0201 	orr.w	r2, r3, #1
  401b06:	6062      	str	r2, [r4, #4]
  401b08:	50e3      	str	r3, [r4, r3]
  401b0a:	e762      	b.n	4019d2 <_free_r+0x86>
  401b0c:	20000434 	.word	0x20000434
  401b10:	2000043c 	.word	0x2000043c
  401b14:	2000083c 	.word	0x2000083c
  401b18:	200008e0 	.word	0x200008e0

00401b1c <__sfvwrite_r>:
  401b1c:	6893      	ldr	r3, [r2, #8]
  401b1e:	2b00      	cmp	r3, #0
  401b20:	d076      	beq.n	401c10 <__sfvwrite_r+0xf4>
  401b22:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401b26:	898b      	ldrh	r3, [r1, #12]
  401b28:	b085      	sub	sp, #20
  401b2a:	460c      	mov	r4, r1
  401b2c:	0719      	lsls	r1, r3, #28
  401b2e:	9001      	str	r0, [sp, #4]
  401b30:	4616      	mov	r6, r2
  401b32:	d529      	bpl.n	401b88 <__sfvwrite_r+0x6c>
  401b34:	6922      	ldr	r2, [r4, #16]
  401b36:	b33a      	cbz	r2, 401b88 <__sfvwrite_r+0x6c>
  401b38:	f003 0802 	and.w	r8, r3, #2
  401b3c:	fa1f f088 	uxth.w	r0, r8
  401b40:	6835      	ldr	r5, [r6, #0]
  401b42:	2800      	cmp	r0, #0
  401b44:	d02f      	beq.n	401ba6 <__sfvwrite_r+0x8a>
  401b46:	f04f 0900 	mov.w	r9, #0
  401b4a:	4fb4      	ldr	r7, [pc, #720]	; (401e1c <__sfvwrite_r+0x300>)
  401b4c:	46c8      	mov	r8, r9
  401b4e:	46b2      	mov	sl, r6
  401b50:	45b8      	cmp	r8, r7
  401b52:	4643      	mov	r3, r8
  401b54:	464a      	mov	r2, r9
  401b56:	bf28      	it	cs
  401b58:	463b      	movcs	r3, r7
  401b5a:	9801      	ldr	r0, [sp, #4]
  401b5c:	f1b8 0f00 	cmp.w	r8, #0
  401b60:	d050      	beq.n	401c04 <__sfvwrite_r+0xe8>
  401b62:	69e1      	ldr	r1, [r4, #28]
  401b64:	6a66      	ldr	r6, [r4, #36]	; 0x24
  401b66:	47b0      	blx	r6
  401b68:	2800      	cmp	r0, #0
  401b6a:	dd71      	ble.n	401c50 <__sfvwrite_r+0x134>
  401b6c:	f8da 3008 	ldr.w	r3, [sl, #8]
  401b70:	1a1b      	subs	r3, r3, r0
  401b72:	4481      	add	r9, r0
  401b74:	ebc0 0808 	rsb	r8, r0, r8
  401b78:	f8ca 3008 	str.w	r3, [sl, #8]
  401b7c:	2b00      	cmp	r3, #0
  401b7e:	d1e7      	bne.n	401b50 <__sfvwrite_r+0x34>
  401b80:	2000      	movs	r0, #0
  401b82:	b005      	add	sp, #20
  401b84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401b88:	4621      	mov	r1, r4
  401b8a:	9801      	ldr	r0, [sp, #4]
  401b8c:	f7ff fcc6 	bl	40151c <__swsetup_r>
  401b90:	2800      	cmp	r0, #0
  401b92:	f040 813a 	bne.w	401e0a <__sfvwrite_r+0x2ee>
  401b96:	89a3      	ldrh	r3, [r4, #12]
  401b98:	6835      	ldr	r5, [r6, #0]
  401b9a:	f003 0802 	and.w	r8, r3, #2
  401b9e:	fa1f f088 	uxth.w	r0, r8
  401ba2:	2800      	cmp	r0, #0
  401ba4:	d1cf      	bne.n	401b46 <__sfvwrite_r+0x2a>
  401ba6:	f013 0901 	ands.w	r9, r3, #1
  401baa:	d15b      	bne.n	401c64 <__sfvwrite_r+0x148>
  401bac:	464f      	mov	r7, r9
  401bae:	9602      	str	r6, [sp, #8]
  401bb0:	b31f      	cbz	r7, 401bfa <__sfvwrite_r+0xde>
  401bb2:	059a      	lsls	r2, r3, #22
  401bb4:	f8d4 8008 	ldr.w	r8, [r4, #8]
  401bb8:	d52c      	bpl.n	401c14 <__sfvwrite_r+0xf8>
  401bba:	4547      	cmp	r7, r8
  401bbc:	46c2      	mov	sl, r8
  401bbe:	f0c0 80a4 	bcc.w	401d0a <__sfvwrite_r+0x1ee>
  401bc2:	f413 6f90 	tst.w	r3, #1152	; 0x480
  401bc6:	f040 80b1 	bne.w	401d2c <__sfvwrite_r+0x210>
  401bca:	6820      	ldr	r0, [r4, #0]
  401bcc:	4652      	mov	r2, sl
  401bce:	4649      	mov	r1, r9
  401bd0:	f000 fd70 	bl	4026b4 <memmove>
  401bd4:	68a0      	ldr	r0, [r4, #8]
  401bd6:	6823      	ldr	r3, [r4, #0]
  401bd8:	ebc8 0000 	rsb	r0, r8, r0
  401bdc:	4453      	add	r3, sl
  401bde:	60a0      	str	r0, [r4, #8]
  401be0:	6023      	str	r3, [r4, #0]
  401be2:	4638      	mov	r0, r7
  401be4:	9a02      	ldr	r2, [sp, #8]
  401be6:	6893      	ldr	r3, [r2, #8]
  401be8:	1a1b      	subs	r3, r3, r0
  401bea:	4481      	add	r9, r0
  401bec:	1a3f      	subs	r7, r7, r0
  401bee:	6093      	str	r3, [r2, #8]
  401bf0:	2b00      	cmp	r3, #0
  401bf2:	d0c5      	beq.n	401b80 <__sfvwrite_r+0x64>
  401bf4:	89a3      	ldrh	r3, [r4, #12]
  401bf6:	2f00      	cmp	r7, #0
  401bf8:	d1db      	bne.n	401bb2 <__sfvwrite_r+0x96>
  401bfa:	f8d5 9000 	ldr.w	r9, [r5]
  401bfe:	686f      	ldr	r7, [r5, #4]
  401c00:	3508      	adds	r5, #8
  401c02:	e7d5      	b.n	401bb0 <__sfvwrite_r+0x94>
  401c04:	f8d5 9000 	ldr.w	r9, [r5]
  401c08:	f8d5 8004 	ldr.w	r8, [r5, #4]
  401c0c:	3508      	adds	r5, #8
  401c0e:	e79f      	b.n	401b50 <__sfvwrite_r+0x34>
  401c10:	2000      	movs	r0, #0
  401c12:	4770      	bx	lr
  401c14:	6820      	ldr	r0, [r4, #0]
  401c16:	6923      	ldr	r3, [r4, #16]
  401c18:	4298      	cmp	r0, r3
  401c1a:	d803      	bhi.n	401c24 <__sfvwrite_r+0x108>
  401c1c:	6961      	ldr	r1, [r4, #20]
  401c1e:	428f      	cmp	r7, r1
  401c20:	f080 80b7 	bcs.w	401d92 <__sfvwrite_r+0x276>
  401c24:	45b8      	cmp	r8, r7
  401c26:	bf28      	it	cs
  401c28:	46b8      	movcs	r8, r7
  401c2a:	4642      	mov	r2, r8
  401c2c:	4649      	mov	r1, r9
  401c2e:	f000 fd41 	bl	4026b4 <memmove>
  401c32:	68a3      	ldr	r3, [r4, #8]
  401c34:	6822      	ldr	r2, [r4, #0]
  401c36:	ebc8 0303 	rsb	r3, r8, r3
  401c3a:	4442      	add	r2, r8
  401c3c:	60a3      	str	r3, [r4, #8]
  401c3e:	6022      	str	r2, [r4, #0]
  401c40:	2b00      	cmp	r3, #0
  401c42:	d149      	bne.n	401cd8 <__sfvwrite_r+0x1bc>
  401c44:	4621      	mov	r1, r4
  401c46:	9801      	ldr	r0, [sp, #4]
  401c48:	f7ff fd80 	bl	40174c <_fflush_r>
  401c4c:	2800      	cmp	r0, #0
  401c4e:	d043      	beq.n	401cd8 <__sfvwrite_r+0x1bc>
  401c50:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  401c54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  401c58:	f04f 30ff 	mov.w	r0, #4294967295
  401c5c:	81a3      	strh	r3, [r4, #12]
  401c5e:	b005      	add	sp, #20
  401c60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401c64:	4680      	mov	r8, r0
  401c66:	9002      	str	r0, [sp, #8]
  401c68:	4682      	mov	sl, r0
  401c6a:	4681      	mov	r9, r0
  401c6c:	f1b9 0f00 	cmp.w	r9, #0
  401c70:	d02a      	beq.n	401cc8 <__sfvwrite_r+0x1ac>
  401c72:	9b02      	ldr	r3, [sp, #8]
  401c74:	2b00      	cmp	r3, #0
  401c76:	d04c      	beq.n	401d12 <__sfvwrite_r+0x1f6>
  401c78:	6820      	ldr	r0, [r4, #0]
  401c7a:	6923      	ldr	r3, [r4, #16]
  401c7c:	6962      	ldr	r2, [r4, #20]
  401c7e:	45c8      	cmp	r8, r9
  401c80:	46c3      	mov	fp, r8
  401c82:	bf28      	it	cs
  401c84:	46cb      	movcs	fp, r9
  401c86:	4298      	cmp	r0, r3
  401c88:	465f      	mov	r7, fp
  401c8a:	d904      	bls.n	401c96 <__sfvwrite_r+0x17a>
  401c8c:	68a3      	ldr	r3, [r4, #8]
  401c8e:	4413      	add	r3, r2
  401c90:	459b      	cmp	fp, r3
  401c92:	f300 8090 	bgt.w	401db6 <__sfvwrite_r+0x29a>
  401c96:	4593      	cmp	fp, r2
  401c98:	db20      	blt.n	401cdc <__sfvwrite_r+0x1c0>
  401c9a:	4613      	mov	r3, r2
  401c9c:	6a67      	ldr	r7, [r4, #36]	; 0x24
  401c9e:	69e1      	ldr	r1, [r4, #28]
  401ca0:	9801      	ldr	r0, [sp, #4]
  401ca2:	4652      	mov	r2, sl
  401ca4:	47b8      	blx	r7
  401ca6:	1e07      	subs	r7, r0, #0
  401ca8:	ddd2      	ble.n	401c50 <__sfvwrite_r+0x134>
  401caa:	ebb8 0807 	subs.w	r8, r8, r7
  401cae:	d023      	beq.n	401cf8 <__sfvwrite_r+0x1dc>
  401cb0:	68b3      	ldr	r3, [r6, #8]
  401cb2:	1bdb      	subs	r3, r3, r7
  401cb4:	44ba      	add	sl, r7
  401cb6:	ebc7 0909 	rsb	r9, r7, r9
  401cba:	60b3      	str	r3, [r6, #8]
  401cbc:	2b00      	cmp	r3, #0
  401cbe:	f43f af5f 	beq.w	401b80 <__sfvwrite_r+0x64>
  401cc2:	f1b9 0f00 	cmp.w	r9, #0
  401cc6:	d1d4      	bne.n	401c72 <__sfvwrite_r+0x156>
  401cc8:	2300      	movs	r3, #0
  401cca:	f8d5 a000 	ldr.w	sl, [r5]
  401cce:	f8d5 9004 	ldr.w	r9, [r5, #4]
  401cd2:	9302      	str	r3, [sp, #8]
  401cd4:	3508      	adds	r5, #8
  401cd6:	e7c9      	b.n	401c6c <__sfvwrite_r+0x150>
  401cd8:	4640      	mov	r0, r8
  401cda:	e783      	b.n	401be4 <__sfvwrite_r+0xc8>
  401cdc:	465a      	mov	r2, fp
  401cde:	4651      	mov	r1, sl
  401ce0:	f000 fce8 	bl	4026b4 <memmove>
  401ce4:	68a2      	ldr	r2, [r4, #8]
  401ce6:	6823      	ldr	r3, [r4, #0]
  401ce8:	ebcb 0202 	rsb	r2, fp, r2
  401cec:	445b      	add	r3, fp
  401cee:	ebb8 0807 	subs.w	r8, r8, r7
  401cf2:	60a2      	str	r2, [r4, #8]
  401cf4:	6023      	str	r3, [r4, #0]
  401cf6:	d1db      	bne.n	401cb0 <__sfvwrite_r+0x194>
  401cf8:	4621      	mov	r1, r4
  401cfa:	9801      	ldr	r0, [sp, #4]
  401cfc:	f7ff fd26 	bl	40174c <_fflush_r>
  401d00:	2800      	cmp	r0, #0
  401d02:	d1a5      	bne.n	401c50 <__sfvwrite_r+0x134>
  401d04:	f8cd 8008 	str.w	r8, [sp, #8]
  401d08:	e7d2      	b.n	401cb0 <__sfvwrite_r+0x194>
  401d0a:	6820      	ldr	r0, [r4, #0]
  401d0c:	46b8      	mov	r8, r7
  401d0e:	46ba      	mov	sl, r7
  401d10:	e75c      	b.n	401bcc <__sfvwrite_r+0xb0>
  401d12:	464a      	mov	r2, r9
  401d14:	210a      	movs	r1, #10
  401d16:	4650      	mov	r0, sl
  401d18:	f000 fbe2 	bl	4024e0 <memchr>
  401d1c:	2800      	cmp	r0, #0
  401d1e:	d06f      	beq.n	401e00 <__sfvwrite_r+0x2e4>
  401d20:	3001      	adds	r0, #1
  401d22:	2301      	movs	r3, #1
  401d24:	ebca 0800 	rsb	r8, sl, r0
  401d28:	9302      	str	r3, [sp, #8]
  401d2a:	e7a5      	b.n	401c78 <__sfvwrite_r+0x15c>
  401d2c:	6962      	ldr	r2, [r4, #20]
  401d2e:	6820      	ldr	r0, [r4, #0]
  401d30:	6921      	ldr	r1, [r4, #16]
  401d32:	eb02 0842 	add.w	r8, r2, r2, lsl #1
  401d36:	ebc1 0a00 	rsb	sl, r1, r0
  401d3a:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
  401d3e:	f10a 0001 	add.w	r0, sl, #1
  401d42:	ea4f 0868 	mov.w	r8, r8, asr #1
  401d46:	4438      	add	r0, r7
  401d48:	4540      	cmp	r0, r8
  401d4a:	4642      	mov	r2, r8
  401d4c:	bf84      	itt	hi
  401d4e:	4680      	movhi	r8, r0
  401d50:	4642      	movhi	r2, r8
  401d52:	055b      	lsls	r3, r3, #21
  401d54:	d542      	bpl.n	401ddc <__sfvwrite_r+0x2c0>
  401d56:	4611      	mov	r1, r2
  401d58:	9801      	ldr	r0, [sp, #4]
  401d5a:	f000 f907 	bl	401f6c <_malloc_r>
  401d5e:	4683      	mov	fp, r0
  401d60:	2800      	cmp	r0, #0
  401d62:	d055      	beq.n	401e10 <__sfvwrite_r+0x2f4>
  401d64:	4652      	mov	r2, sl
  401d66:	6921      	ldr	r1, [r4, #16]
  401d68:	f000 fc0a 	bl	402580 <memcpy>
  401d6c:	89a3      	ldrh	r3, [r4, #12]
  401d6e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
  401d72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  401d76:	81a3      	strh	r3, [r4, #12]
  401d78:	ebca 0308 	rsb	r3, sl, r8
  401d7c:	eb0b 000a 	add.w	r0, fp, sl
  401d80:	f8c4 8014 	str.w	r8, [r4, #20]
  401d84:	f8c4 b010 	str.w	fp, [r4, #16]
  401d88:	6020      	str	r0, [r4, #0]
  401d8a:	60a3      	str	r3, [r4, #8]
  401d8c:	46b8      	mov	r8, r7
  401d8e:	46ba      	mov	sl, r7
  401d90:	e71c      	b.n	401bcc <__sfvwrite_r+0xb0>
  401d92:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
  401d96:	42bb      	cmp	r3, r7
  401d98:	bf28      	it	cs
  401d9a:	463b      	movcs	r3, r7
  401d9c:	464a      	mov	r2, r9
  401d9e:	fb93 f3f1 	sdiv	r3, r3, r1
  401da2:	9801      	ldr	r0, [sp, #4]
  401da4:	6a66      	ldr	r6, [r4, #36]	; 0x24
  401da6:	fb01 f303 	mul.w	r3, r1, r3
  401daa:	69e1      	ldr	r1, [r4, #28]
  401dac:	47b0      	blx	r6
  401dae:	2800      	cmp	r0, #0
  401db0:	f73f af18 	bgt.w	401be4 <__sfvwrite_r+0xc8>
  401db4:	e74c      	b.n	401c50 <__sfvwrite_r+0x134>
  401db6:	461a      	mov	r2, r3
  401db8:	4651      	mov	r1, sl
  401dba:	9303      	str	r3, [sp, #12]
  401dbc:	f000 fc7a 	bl	4026b4 <memmove>
  401dc0:	6822      	ldr	r2, [r4, #0]
  401dc2:	9b03      	ldr	r3, [sp, #12]
  401dc4:	9801      	ldr	r0, [sp, #4]
  401dc6:	441a      	add	r2, r3
  401dc8:	6022      	str	r2, [r4, #0]
  401dca:	4621      	mov	r1, r4
  401dcc:	f7ff fcbe 	bl	40174c <_fflush_r>
  401dd0:	9b03      	ldr	r3, [sp, #12]
  401dd2:	2800      	cmp	r0, #0
  401dd4:	f47f af3c 	bne.w	401c50 <__sfvwrite_r+0x134>
  401dd8:	461f      	mov	r7, r3
  401dda:	e766      	b.n	401caa <__sfvwrite_r+0x18e>
  401ddc:	9801      	ldr	r0, [sp, #4]
  401dde:	f000 fcd1 	bl	402784 <_realloc_r>
  401de2:	4683      	mov	fp, r0
  401de4:	2800      	cmp	r0, #0
  401de6:	d1c7      	bne.n	401d78 <__sfvwrite_r+0x25c>
  401de8:	9d01      	ldr	r5, [sp, #4]
  401dea:	6921      	ldr	r1, [r4, #16]
  401dec:	4628      	mov	r0, r5
  401dee:	f7ff fdad 	bl	40194c <_free_r>
  401df2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  401df6:	220c      	movs	r2, #12
  401df8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  401dfc:	602a      	str	r2, [r5, #0]
  401dfe:	e729      	b.n	401c54 <__sfvwrite_r+0x138>
  401e00:	2301      	movs	r3, #1
  401e02:	f109 0801 	add.w	r8, r9, #1
  401e06:	9302      	str	r3, [sp, #8]
  401e08:	e736      	b.n	401c78 <__sfvwrite_r+0x15c>
  401e0a:	f04f 30ff 	mov.w	r0, #4294967295
  401e0e:	e6b8      	b.n	401b82 <__sfvwrite_r+0x66>
  401e10:	9a01      	ldr	r2, [sp, #4]
  401e12:	230c      	movs	r3, #12
  401e14:	6013      	str	r3, [r2, #0]
  401e16:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  401e1a:	e71b      	b.n	401c54 <__sfvwrite_r+0x138>
  401e1c:	7ffffc00 	.word	0x7ffffc00

00401e20 <_fwalk_reent>:
  401e20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  401e24:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
  401e28:	d01f      	beq.n	401e6a <_fwalk_reent+0x4a>
  401e2a:	4688      	mov	r8, r1
  401e2c:	4606      	mov	r6, r0
  401e2e:	f04f 0900 	mov.w	r9, #0
  401e32:	687d      	ldr	r5, [r7, #4]
  401e34:	68bc      	ldr	r4, [r7, #8]
  401e36:	3d01      	subs	r5, #1
  401e38:	d411      	bmi.n	401e5e <_fwalk_reent+0x3e>
  401e3a:	89a3      	ldrh	r3, [r4, #12]
  401e3c:	2b01      	cmp	r3, #1
  401e3e:	f105 35ff 	add.w	r5, r5, #4294967295
  401e42:	d908      	bls.n	401e56 <_fwalk_reent+0x36>
  401e44:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
  401e48:	3301      	adds	r3, #1
  401e4a:	4621      	mov	r1, r4
  401e4c:	4630      	mov	r0, r6
  401e4e:	d002      	beq.n	401e56 <_fwalk_reent+0x36>
  401e50:	47c0      	blx	r8
  401e52:	ea49 0900 	orr.w	r9, r9, r0
  401e56:	1c6b      	adds	r3, r5, #1
  401e58:	f104 0468 	add.w	r4, r4, #104	; 0x68
  401e5c:	d1ed      	bne.n	401e3a <_fwalk_reent+0x1a>
  401e5e:	683f      	ldr	r7, [r7, #0]
  401e60:	2f00      	cmp	r7, #0
  401e62:	d1e6      	bne.n	401e32 <_fwalk_reent+0x12>
  401e64:	4648      	mov	r0, r9
  401e66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  401e6a:	46b9      	mov	r9, r7
  401e6c:	4648      	mov	r0, r9
  401e6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  401e72:	bf00      	nop

00401e74 <__swhatbuf_r>:
  401e74:	b570      	push	{r4, r5, r6, lr}
  401e76:	460d      	mov	r5, r1
  401e78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  401e7c:	2900      	cmp	r1, #0
  401e7e:	b090      	sub	sp, #64	; 0x40
  401e80:	4614      	mov	r4, r2
  401e82:	461e      	mov	r6, r3
  401e84:	db14      	blt.n	401eb0 <__swhatbuf_r+0x3c>
  401e86:	aa01      	add	r2, sp, #4
  401e88:	f000 ff7e 	bl	402d88 <_fstat_r>
  401e8c:	2800      	cmp	r0, #0
  401e8e:	db0f      	blt.n	401eb0 <__swhatbuf_r+0x3c>
  401e90:	9a02      	ldr	r2, [sp, #8]
  401e92:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
  401e96:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
  401e9a:	fab2 f282 	clz	r2, r2
  401e9e:	0952      	lsrs	r2, r2, #5
  401ea0:	f44f 6380 	mov.w	r3, #1024	; 0x400
  401ea4:	f44f 6000 	mov.w	r0, #2048	; 0x800
  401ea8:	6032      	str	r2, [r6, #0]
  401eaa:	6023      	str	r3, [r4, #0]
  401eac:	b010      	add	sp, #64	; 0x40
  401eae:	bd70      	pop	{r4, r5, r6, pc}
  401eb0:	89a8      	ldrh	r0, [r5, #12]
  401eb2:	f000 0080 	and.w	r0, r0, #128	; 0x80
  401eb6:	b282      	uxth	r2, r0
  401eb8:	2000      	movs	r0, #0
  401eba:	6030      	str	r0, [r6, #0]
  401ebc:	b11a      	cbz	r2, 401ec6 <__swhatbuf_r+0x52>
  401ebe:	2340      	movs	r3, #64	; 0x40
  401ec0:	6023      	str	r3, [r4, #0]
  401ec2:	b010      	add	sp, #64	; 0x40
  401ec4:	bd70      	pop	{r4, r5, r6, pc}
  401ec6:	f44f 6380 	mov.w	r3, #1024	; 0x400
  401eca:	4610      	mov	r0, r2
  401ecc:	6023      	str	r3, [r4, #0]
  401ece:	b010      	add	sp, #64	; 0x40
  401ed0:	bd70      	pop	{r4, r5, r6, pc}
  401ed2:	bf00      	nop

00401ed4 <__smakebuf_r>:
  401ed4:	898a      	ldrh	r2, [r1, #12]
  401ed6:	0792      	lsls	r2, r2, #30
  401ed8:	460b      	mov	r3, r1
  401eda:	d506      	bpl.n	401eea <__smakebuf_r+0x16>
  401edc:	f101 0243 	add.w	r2, r1, #67	; 0x43
  401ee0:	2101      	movs	r1, #1
  401ee2:	601a      	str	r2, [r3, #0]
  401ee4:	611a      	str	r2, [r3, #16]
  401ee6:	6159      	str	r1, [r3, #20]
  401ee8:	4770      	bx	lr
  401eea:	b5f0      	push	{r4, r5, r6, r7, lr}
  401eec:	b083      	sub	sp, #12
  401eee:	ab01      	add	r3, sp, #4
  401ef0:	466a      	mov	r2, sp
  401ef2:	460c      	mov	r4, r1
  401ef4:	4605      	mov	r5, r0
  401ef6:	f7ff ffbd 	bl	401e74 <__swhatbuf_r>
  401efa:	9900      	ldr	r1, [sp, #0]
  401efc:	4606      	mov	r6, r0
  401efe:	4628      	mov	r0, r5
  401f00:	f000 f834 	bl	401f6c <_malloc_r>
  401f04:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  401f08:	b1d0      	cbz	r0, 401f40 <__smakebuf_r+0x6c>
  401f0a:	9a01      	ldr	r2, [sp, #4]
  401f0c:	4f12      	ldr	r7, [pc, #72]	; (401f58 <__smakebuf_r+0x84>)
  401f0e:	9900      	ldr	r1, [sp, #0]
  401f10:	63ef      	str	r7, [r5, #60]	; 0x3c
  401f12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  401f16:	81a3      	strh	r3, [r4, #12]
  401f18:	6020      	str	r0, [r4, #0]
  401f1a:	6120      	str	r0, [r4, #16]
  401f1c:	6161      	str	r1, [r4, #20]
  401f1e:	b91a      	cbnz	r2, 401f28 <__smakebuf_r+0x54>
  401f20:	4333      	orrs	r3, r6
  401f22:	81a3      	strh	r3, [r4, #12]
  401f24:	b003      	add	sp, #12
  401f26:	bdf0      	pop	{r4, r5, r6, r7, pc}
  401f28:	4628      	mov	r0, r5
  401f2a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  401f2e:	f000 ff3f 	bl	402db0 <_isatty_r>
  401f32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  401f36:	2800      	cmp	r0, #0
  401f38:	d0f2      	beq.n	401f20 <__smakebuf_r+0x4c>
  401f3a:	f043 0301 	orr.w	r3, r3, #1
  401f3e:	e7ef      	b.n	401f20 <__smakebuf_r+0x4c>
  401f40:	059a      	lsls	r2, r3, #22
  401f42:	d4ef      	bmi.n	401f24 <__smakebuf_r+0x50>
  401f44:	f104 0243 	add.w	r2, r4, #67	; 0x43
  401f48:	f043 0302 	orr.w	r3, r3, #2
  401f4c:	2101      	movs	r1, #1
  401f4e:	81a3      	strh	r3, [r4, #12]
  401f50:	6022      	str	r2, [r4, #0]
  401f52:	6122      	str	r2, [r4, #16]
  401f54:	6161      	str	r1, [r4, #20]
  401f56:	e7e5      	b.n	401f24 <__smakebuf_r+0x50>
  401f58:	00401779 	.word	0x00401779

00401f5c <malloc>:
  401f5c:	4b02      	ldr	r3, [pc, #8]	; (401f68 <malloc+0xc>)
  401f5e:	4601      	mov	r1, r0
  401f60:	6818      	ldr	r0, [r3, #0]
  401f62:	f000 b803 	b.w	401f6c <_malloc_r>
  401f66:	bf00      	nop
  401f68:	20000430 	.word	0x20000430

00401f6c <_malloc_r>:
  401f6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401f70:	f101 050b 	add.w	r5, r1, #11
  401f74:	2d16      	cmp	r5, #22
  401f76:	b083      	sub	sp, #12
  401f78:	4606      	mov	r6, r0
  401f7a:	f240 809f 	bls.w	4020bc <_malloc_r+0x150>
  401f7e:	f035 0507 	bics.w	r5, r5, #7
  401f82:	f100 80bf 	bmi.w	402104 <_malloc_r+0x198>
  401f86:	42a9      	cmp	r1, r5
  401f88:	f200 80bc 	bhi.w	402104 <_malloc_r+0x198>
  401f8c:	f000 fbf6 	bl	40277c <__malloc_lock>
  401f90:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
  401f94:	f0c0 829c 	bcc.w	4024d0 <_malloc_r+0x564>
  401f98:	0a6b      	lsrs	r3, r5, #9
  401f9a:	f000 80ba 	beq.w	402112 <_malloc_r+0x1a6>
  401f9e:	2b04      	cmp	r3, #4
  401fa0:	f200 8183 	bhi.w	4022aa <_malloc_r+0x33e>
  401fa4:	09a8      	lsrs	r0, r5, #6
  401fa6:	f100 0e39 	add.w	lr, r0, #57	; 0x39
  401faa:	ea4f 034e 	mov.w	r3, lr, lsl #1
  401fae:	3038      	adds	r0, #56	; 0x38
  401fb0:	4fc4      	ldr	r7, [pc, #784]	; (4022c4 <_malloc_r+0x358>)
  401fb2:	eb07 0383 	add.w	r3, r7, r3, lsl #2
  401fb6:	f1a3 0108 	sub.w	r1, r3, #8
  401fba:	685c      	ldr	r4, [r3, #4]
  401fbc:	42a1      	cmp	r1, r4
  401fbe:	d107      	bne.n	401fd0 <_malloc_r+0x64>
  401fc0:	e0ac      	b.n	40211c <_malloc_r+0x1b0>
  401fc2:	2a00      	cmp	r2, #0
  401fc4:	f280 80ac 	bge.w	402120 <_malloc_r+0x1b4>
  401fc8:	68e4      	ldr	r4, [r4, #12]
  401fca:	42a1      	cmp	r1, r4
  401fcc:	f000 80a6 	beq.w	40211c <_malloc_r+0x1b0>
  401fd0:	6863      	ldr	r3, [r4, #4]
  401fd2:	f023 0303 	bic.w	r3, r3, #3
  401fd6:	1b5a      	subs	r2, r3, r5
  401fd8:	2a0f      	cmp	r2, #15
  401fda:	ddf2      	ble.n	401fc2 <_malloc_r+0x56>
  401fdc:	49b9      	ldr	r1, [pc, #740]	; (4022c4 <_malloc_r+0x358>)
  401fde:	693c      	ldr	r4, [r7, #16]
  401fe0:	f101 0e08 	add.w	lr, r1, #8
  401fe4:	4574      	cmp	r4, lr
  401fe6:	f000 81b3 	beq.w	402350 <_malloc_r+0x3e4>
  401fea:	6863      	ldr	r3, [r4, #4]
  401fec:	f023 0303 	bic.w	r3, r3, #3
  401ff0:	1b5a      	subs	r2, r3, r5
  401ff2:	2a0f      	cmp	r2, #15
  401ff4:	f300 8199 	bgt.w	40232a <_malloc_r+0x3be>
  401ff8:	2a00      	cmp	r2, #0
  401ffa:	f8c1 e014 	str.w	lr, [r1, #20]
  401ffe:	f8c1 e010 	str.w	lr, [r1, #16]
  402002:	f280 809e 	bge.w	402142 <_malloc_r+0x1d6>
  402006:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  40200a:	f080 8167 	bcs.w	4022dc <_malloc_r+0x370>
  40200e:	08db      	lsrs	r3, r3, #3
  402010:	f103 0c01 	add.w	ip, r3, #1
  402014:	2201      	movs	r2, #1
  402016:	109b      	asrs	r3, r3, #2
  402018:	fa02 f303 	lsl.w	r3, r2, r3
  40201c:	684a      	ldr	r2, [r1, #4]
  40201e:	f851 803c 	ldr.w	r8, [r1, ip, lsl #3]
  402022:	f8c4 8008 	str.w	r8, [r4, #8]
  402026:	eb01 09cc 	add.w	r9, r1, ip, lsl #3
  40202a:	431a      	orrs	r2, r3
  40202c:	f1a9 0308 	sub.w	r3, r9, #8
  402030:	60e3      	str	r3, [r4, #12]
  402032:	604a      	str	r2, [r1, #4]
  402034:	f841 403c 	str.w	r4, [r1, ip, lsl #3]
  402038:	f8c8 400c 	str.w	r4, [r8, #12]
  40203c:	1083      	asrs	r3, r0, #2
  40203e:	2401      	movs	r4, #1
  402040:	409c      	lsls	r4, r3
  402042:	4294      	cmp	r4, r2
  402044:	f200 808a 	bhi.w	40215c <_malloc_r+0x1f0>
  402048:	4214      	tst	r4, r2
  40204a:	d106      	bne.n	40205a <_malloc_r+0xee>
  40204c:	f020 0003 	bic.w	r0, r0, #3
  402050:	0064      	lsls	r4, r4, #1
  402052:	4214      	tst	r4, r2
  402054:	f100 0004 	add.w	r0, r0, #4
  402058:	d0fa      	beq.n	402050 <_malloc_r+0xe4>
  40205a:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
  40205e:	46cc      	mov	ip, r9
  402060:	4680      	mov	r8, r0
  402062:	f8dc 100c 	ldr.w	r1, [ip, #12]
  402066:	458c      	cmp	ip, r1
  402068:	d107      	bne.n	40207a <_malloc_r+0x10e>
  40206a:	e173      	b.n	402354 <_malloc_r+0x3e8>
  40206c:	2a00      	cmp	r2, #0
  40206e:	f280 8181 	bge.w	402374 <_malloc_r+0x408>
  402072:	68c9      	ldr	r1, [r1, #12]
  402074:	458c      	cmp	ip, r1
  402076:	f000 816d 	beq.w	402354 <_malloc_r+0x3e8>
  40207a:	684b      	ldr	r3, [r1, #4]
  40207c:	f023 0303 	bic.w	r3, r3, #3
  402080:	1b5a      	subs	r2, r3, r5
  402082:	2a0f      	cmp	r2, #15
  402084:	ddf2      	ble.n	40206c <_malloc_r+0x100>
  402086:	460c      	mov	r4, r1
  402088:	f8d1 c00c 	ldr.w	ip, [r1, #12]
  40208c:	f854 8f08 	ldr.w	r8, [r4, #8]!
  402090:	194b      	adds	r3, r1, r5
  402092:	f045 0501 	orr.w	r5, r5, #1
  402096:	604d      	str	r5, [r1, #4]
  402098:	f042 0101 	orr.w	r1, r2, #1
  40209c:	f8c8 c00c 	str.w	ip, [r8, #12]
  4020a0:	4630      	mov	r0, r6
  4020a2:	f8cc 8008 	str.w	r8, [ip, #8]
  4020a6:	617b      	str	r3, [r7, #20]
  4020a8:	613b      	str	r3, [r7, #16]
  4020aa:	f8c3 e00c 	str.w	lr, [r3, #12]
  4020ae:	f8c3 e008 	str.w	lr, [r3, #8]
  4020b2:	6059      	str	r1, [r3, #4]
  4020b4:	509a      	str	r2, [r3, r2]
  4020b6:	f000 fb63 	bl	402780 <__malloc_unlock>
  4020ba:	e01f      	b.n	4020fc <_malloc_r+0x190>
  4020bc:	2910      	cmp	r1, #16
  4020be:	d821      	bhi.n	402104 <_malloc_r+0x198>
  4020c0:	f000 fb5c 	bl	40277c <__malloc_lock>
  4020c4:	2510      	movs	r5, #16
  4020c6:	2306      	movs	r3, #6
  4020c8:	2002      	movs	r0, #2
  4020ca:	4f7e      	ldr	r7, [pc, #504]	; (4022c4 <_malloc_r+0x358>)
  4020cc:	eb07 0383 	add.w	r3, r7, r3, lsl #2
  4020d0:	f1a3 0208 	sub.w	r2, r3, #8
  4020d4:	685c      	ldr	r4, [r3, #4]
  4020d6:	4294      	cmp	r4, r2
  4020d8:	f000 8145 	beq.w	402366 <_malloc_r+0x3fa>
  4020dc:	6863      	ldr	r3, [r4, #4]
  4020de:	68e1      	ldr	r1, [r4, #12]
  4020e0:	68a5      	ldr	r5, [r4, #8]
  4020e2:	f023 0303 	bic.w	r3, r3, #3
  4020e6:	4423      	add	r3, r4
  4020e8:	4630      	mov	r0, r6
  4020ea:	685a      	ldr	r2, [r3, #4]
  4020ec:	60e9      	str	r1, [r5, #12]
  4020ee:	f042 0201 	orr.w	r2, r2, #1
  4020f2:	608d      	str	r5, [r1, #8]
  4020f4:	605a      	str	r2, [r3, #4]
  4020f6:	f000 fb43 	bl	402780 <__malloc_unlock>
  4020fa:	3408      	adds	r4, #8
  4020fc:	4620      	mov	r0, r4
  4020fe:	b003      	add	sp, #12
  402100:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402104:	2400      	movs	r4, #0
  402106:	230c      	movs	r3, #12
  402108:	4620      	mov	r0, r4
  40210a:	6033      	str	r3, [r6, #0]
  40210c:	b003      	add	sp, #12
  40210e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402112:	2380      	movs	r3, #128	; 0x80
  402114:	f04f 0e40 	mov.w	lr, #64	; 0x40
  402118:	203f      	movs	r0, #63	; 0x3f
  40211a:	e749      	b.n	401fb0 <_malloc_r+0x44>
  40211c:	4670      	mov	r0, lr
  40211e:	e75d      	b.n	401fdc <_malloc_r+0x70>
  402120:	4423      	add	r3, r4
  402122:	68e1      	ldr	r1, [r4, #12]
  402124:	685a      	ldr	r2, [r3, #4]
  402126:	68a5      	ldr	r5, [r4, #8]
  402128:	f042 0201 	orr.w	r2, r2, #1
  40212c:	60e9      	str	r1, [r5, #12]
  40212e:	4630      	mov	r0, r6
  402130:	608d      	str	r5, [r1, #8]
  402132:	605a      	str	r2, [r3, #4]
  402134:	f000 fb24 	bl	402780 <__malloc_unlock>
  402138:	3408      	adds	r4, #8
  40213a:	4620      	mov	r0, r4
  40213c:	b003      	add	sp, #12
  40213e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402142:	4423      	add	r3, r4
  402144:	4630      	mov	r0, r6
  402146:	685a      	ldr	r2, [r3, #4]
  402148:	f042 0201 	orr.w	r2, r2, #1
  40214c:	605a      	str	r2, [r3, #4]
  40214e:	f000 fb17 	bl	402780 <__malloc_unlock>
  402152:	3408      	adds	r4, #8
  402154:	4620      	mov	r0, r4
  402156:	b003      	add	sp, #12
  402158:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40215c:	68bc      	ldr	r4, [r7, #8]
  40215e:	6863      	ldr	r3, [r4, #4]
  402160:	f023 0803 	bic.w	r8, r3, #3
  402164:	45a8      	cmp	r8, r5
  402166:	d304      	bcc.n	402172 <_malloc_r+0x206>
  402168:	ebc5 0308 	rsb	r3, r5, r8
  40216c:	2b0f      	cmp	r3, #15
  40216e:	f300 808c 	bgt.w	40228a <_malloc_r+0x31e>
  402172:	4b55      	ldr	r3, [pc, #340]	; (4022c8 <_malloc_r+0x35c>)
  402174:	f8df 9160 	ldr.w	r9, [pc, #352]	; 4022d8 <_malloc_r+0x36c>
  402178:	681a      	ldr	r2, [r3, #0]
  40217a:	f8d9 3000 	ldr.w	r3, [r9]
  40217e:	3301      	adds	r3, #1
  402180:	442a      	add	r2, r5
  402182:	eb04 0a08 	add.w	sl, r4, r8
  402186:	f000 8160 	beq.w	40244a <_malloc_r+0x4de>
  40218a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
  40218e:	320f      	adds	r2, #15
  402190:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
  402194:	f022 020f 	bic.w	r2, r2, #15
  402198:	4611      	mov	r1, r2
  40219a:	4630      	mov	r0, r6
  40219c:	9201      	str	r2, [sp, #4]
  40219e:	f000 fce1 	bl	402b64 <_sbrk_r>
  4021a2:	f1b0 3fff 	cmp.w	r0, #4294967295
  4021a6:	4683      	mov	fp, r0
  4021a8:	9a01      	ldr	r2, [sp, #4]
  4021aa:	f000 8158 	beq.w	40245e <_malloc_r+0x4f2>
  4021ae:	4582      	cmp	sl, r0
  4021b0:	f200 80fc 	bhi.w	4023ac <_malloc_r+0x440>
  4021b4:	4b45      	ldr	r3, [pc, #276]	; (4022cc <_malloc_r+0x360>)
  4021b6:	6819      	ldr	r1, [r3, #0]
  4021b8:	45da      	cmp	sl, fp
  4021ba:	4411      	add	r1, r2
  4021bc:	6019      	str	r1, [r3, #0]
  4021be:	f000 8153 	beq.w	402468 <_malloc_r+0x4fc>
  4021c2:	f8d9 0000 	ldr.w	r0, [r9]
  4021c6:	f8df e110 	ldr.w	lr, [pc, #272]	; 4022d8 <_malloc_r+0x36c>
  4021ca:	3001      	adds	r0, #1
  4021cc:	bf1b      	ittet	ne
  4021ce:	ebca 0a0b 	rsbne	sl, sl, fp
  4021d2:	4451      	addne	r1, sl
  4021d4:	f8ce b000 	streq.w	fp, [lr]
  4021d8:	6019      	strne	r1, [r3, #0]
  4021da:	f01b 0107 	ands.w	r1, fp, #7
  4021de:	f000 8117 	beq.w	402410 <_malloc_r+0x4a4>
  4021e2:	f1c1 0008 	rsb	r0, r1, #8
  4021e6:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  4021ea:	4483      	add	fp, r0
  4021ec:	3108      	adds	r1, #8
  4021ee:	445a      	add	r2, fp
  4021f0:	f3c2 020b 	ubfx	r2, r2, #0, #12
  4021f4:	ebc2 0901 	rsb	r9, r2, r1
  4021f8:	4649      	mov	r1, r9
  4021fa:	4630      	mov	r0, r6
  4021fc:	9301      	str	r3, [sp, #4]
  4021fe:	f000 fcb1 	bl	402b64 <_sbrk_r>
  402202:	1c43      	adds	r3, r0, #1
  402204:	9b01      	ldr	r3, [sp, #4]
  402206:	f000 813f 	beq.w	402488 <_malloc_r+0x51c>
  40220a:	ebcb 0200 	rsb	r2, fp, r0
  40220e:	444a      	add	r2, r9
  402210:	f042 0201 	orr.w	r2, r2, #1
  402214:	6819      	ldr	r1, [r3, #0]
  402216:	f8c7 b008 	str.w	fp, [r7, #8]
  40221a:	4449      	add	r1, r9
  40221c:	42bc      	cmp	r4, r7
  40221e:	f8cb 2004 	str.w	r2, [fp, #4]
  402222:	6019      	str	r1, [r3, #0]
  402224:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 4022cc <_malloc_r+0x360>
  402228:	d016      	beq.n	402258 <_malloc_r+0x2ec>
  40222a:	f1b8 0f0f 	cmp.w	r8, #15
  40222e:	f240 80fd 	bls.w	40242c <_malloc_r+0x4c0>
  402232:	6862      	ldr	r2, [r4, #4]
  402234:	f1a8 030c 	sub.w	r3, r8, #12
  402238:	f023 0307 	bic.w	r3, r3, #7
  40223c:	18e0      	adds	r0, r4, r3
  40223e:	f002 0201 	and.w	r2, r2, #1
  402242:	f04f 0e05 	mov.w	lr, #5
  402246:	431a      	orrs	r2, r3
  402248:	2b0f      	cmp	r3, #15
  40224a:	6062      	str	r2, [r4, #4]
  40224c:	f8c0 e004 	str.w	lr, [r0, #4]
  402250:	f8c0 e008 	str.w	lr, [r0, #8]
  402254:	f200 811c 	bhi.w	402490 <_malloc_r+0x524>
  402258:	4b1d      	ldr	r3, [pc, #116]	; (4022d0 <_malloc_r+0x364>)
  40225a:	68bc      	ldr	r4, [r7, #8]
  40225c:	681a      	ldr	r2, [r3, #0]
  40225e:	4291      	cmp	r1, r2
  402260:	bf88      	it	hi
  402262:	6019      	strhi	r1, [r3, #0]
  402264:	4b1b      	ldr	r3, [pc, #108]	; (4022d4 <_malloc_r+0x368>)
  402266:	681a      	ldr	r2, [r3, #0]
  402268:	4291      	cmp	r1, r2
  40226a:	6862      	ldr	r2, [r4, #4]
  40226c:	bf88      	it	hi
  40226e:	6019      	strhi	r1, [r3, #0]
  402270:	f022 0203 	bic.w	r2, r2, #3
  402274:	4295      	cmp	r5, r2
  402276:	eba2 0305 	sub.w	r3, r2, r5
  40227a:	d801      	bhi.n	402280 <_malloc_r+0x314>
  40227c:	2b0f      	cmp	r3, #15
  40227e:	dc04      	bgt.n	40228a <_malloc_r+0x31e>
  402280:	4630      	mov	r0, r6
  402282:	f000 fa7d 	bl	402780 <__malloc_unlock>
  402286:	2400      	movs	r4, #0
  402288:	e738      	b.n	4020fc <_malloc_r+0x190>
  40228a:	1962      	adds	r2, r4, r5
  40228c:	f043 0301 	orr.w	r3, r3, #1
  402290:	f045 0501 	orr.w	r5, r5, #1
  402294:	6065      	str	r5, [r4, #4]
  402296:	4630      	mov	r0, r6
  402298:	60ba      	str	r2, [r7, #8]
  40229a:	6053      	str	r3, [r2, #4]
  40229c:	f000 fa70 	bl	402780 <__malloc_unlock>
  4022a0:	3408      	adds	r4, #8
  4022a2:	4620      	mov	r0, r4
  4022a4:	b003      	add	sp, #12
  4022a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4022aa:	2b14      	cmp	r3, #20
  4022ac:	d971      	bls.n	402392 <_malloc_r+0x426>
  4022ae:	2b54      	cmp	r3, #84	; 0x54
  4022b0:	f200 80a4 	bhi.w	4023fc <_malloc_r+0x490>
  4022b4:	0b28      	lsrs	r0, r5, #12
  4022b6:	f100 0e6f 	add.w	lr, r0, #111	; 0x6f
  4022ba:	ea4f 034e 	mov.w	r3, lr, lsl #1
  4022be:	306e      	adds	r0, #110	; 0x6e
  4022c0:	e676      	b.n	401fb0 <_malloc_r+0x44>
  4022c2:	bf00      	nop
  4022c4:	20000434 	.word	0x20000434
  4022c8:	200008e0 	.word	0x200008e0
  4022cc:	200008e4 	.word	0x200008e4
  4022d0:	200008dc 	.word	0x200008dc
  4022d4:	200008d8 	.word	0x200008d8
  4022d8:	20000840 	.word	0x20000840
  4022dc:	0a5a      	lsrs	r2, r3, #9
  4022de:	2a04      	cmp	r2, #4
  4022e0:	d95e      	bls.n	4023a0 <_malloc_r+0x434>
  4022e2:	2a14      	cmp	r2, #20
  4022e4:	f200 80b3 	bhi.w	40244e <_malloc_r+0x4e2>
  4022e8:	f102 015c 	add.w	r1, r2, #92	; 0x5c
  4022ec:	0049      	lsls	r1, r1, #1
  4022ee:	325b      	adds	r2, #91	; 0x5b
  4022f0:	eb07 0c81 	add.w	ip, r7, r1, lsl #2
  4022f4:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
  4022f8:	f8df 81dc 	ldr.w	r8, [pc, #476]	; 4024d8 <_malloc_r+0x56c>
  4022fc:	f1ac 0c08 	sub.w	ip, ip, #8
  402300:	458c      	cmp	ip, r1
  402302:	f000 8088 	beq.w	402416 <_malloc_r+0x4aa>
  402306:	684a      	ldr	r2, [r1, #4]
  402308:	f022 0203 	bic.w	r2, r2, #3
  40230c:	4293      	cmp	r3, r2
  40230e:	d202      	bcs.n	402316 <_malloc_r+0x3aa>
  402310:	6889      	ldr	r1, [r1, #8]
  402312:	458c      	cmp	ip, r1
  402314:	d1f7      	bne.n	402306 <_malloc_r+0x39a>
  402316:	f8d1 c00c 	ldr.w	ip, [r1, #12]
  40231a:	687a      	ldr	r2, [r7, #4]
  40231c:	f8c4 c00c 	str.w	ip, [r4, #12]
  402320:	60a1      	str	r1, [r4, #8]
  402322:	f8cc 4008 	str.w	r4, [ip, #8]
  402326:	60cc      	str	r4, [r1, #12]
  402328:	e688      	b.n	40203c <_malloc_r+0xd0>
  40232a:	1963      	adds	r3, r4, r5
  40232c:	f042 0701 	orr.w	r7, r2, #1
  402330:	f045 0501 	orr.w	r5, r5, #1
  402334:	6065      	str	r5, [r4, #4]
  402336:	4630      	mov	r0, r6
  402338:	614b      	str	r3, [r1, #20]
  40233a:	610b      	str	r3, [r1, #16]
  40233c:	f8c3 e00c 	str.w	lr, [r3, #12]
  402340:	f8c3 e008 	str.w	lr, [r3, #8]
  402344:	605f      	str	r7, [r3, #4]
  402346:	509a      	str	r2, [r3, r2]
  402348:	3408      	adds	r4, #8
  40234a:	f000 fa19 	bl	402780 <__malloc_unlock>
  40234e:	e6d5      	b.n	4020fc <_malloc_r+0x190>
  402350:	684a      	ldr	r2, [r1, #4]
  402352:	e673      	b.n	40203c <_malloc_r+0xd0>
  402354:	f108 0801 	add.w	r8, r8, #1
  402358:	f018 0f03 	tst.w	r8, #3
  40235c:	f10c 0c08 	add.w	ip, ip, #8
  402360:	f47f ae7f 	bne.w	402062 <_malloc_r+0xf6>
  402364:	e030      	b.n	4023c8 <_malloc_r+0x45c>
  402366:	68dc      	ldr	r4, [r3, #12]
  402368:	42a3      	cmp	r3, r4
  40236a:	bf08      	it	eq
  40236c:	3002      	addeq	r0, #2
  40236e:	f43f ae35 	beq.w	401fdc <_malloc_r+0x70>
  402372:	e6b3      	b.n	4020dc <_malloc_r+0x170>
  402374:	440b      	add	r3, r1
  402376:	460c      	mov	r4, r1
  402378:	685a      	ldr	r2, [r3, #4]
  40237a:	68c9      	ldr	r1, [r1, #12]
  40237c:	f854 5f08 	ldr.w	r5, [r4, #8]!
  402380:	f042 0201 	orr.w	r2, r2, #1
  402384:	605a      	str	r2, [r3, #4]
  402386:	4630      	mov	r0, r6
  402388:	60e9      	str	r1, [r5, #12]
  40238a:	608d      	str	r5, [r1, #8]
  40238c:	f000 f9f8 	bl	402780 <__malloc_unlock>
  402390:	e6b4      	b.n	4020fc <_malloc_r+0x190>
  402392:	f103 0e5c 	add.w	lr, r3, #92	; 0x5c
  402396:	f103 005b 	add.w	r0, r3, #91	; 0x5b
  40239a:	ea4f 034e 	mov.w	r3, lr, lsl #1
  40239e:	e607      	b.n	401fb0 <_malloc_r+0x44>
  4023a0:	099a      	lsrs	r2, r3, #6
  4023a2:	f102 0139 	add.w	r1, r2, #57	; 0x39
  4023a6:	0049      	lsls	r1, r1, #1
  4023a8:	3238      	adds	r2, #56	; 0x38
  4023aa:	e7a1      	b.n	4022f0 <_malloc_r+0x384>
  4023ac:	42bc      	cmp	r4, r7
  4023ae:	4b4a      	ldr	r3, [pc, #296]	; (4024d8 <_malloc_r+0x56c>)
  4023b0:	f43f af00 	beq.w	4021b4 <_malloc_r+0x248>
  4023b4:	689c      	ldr	r4, [r3, #8]
  4023b6:	6862      	ldr	r2, [r4, #4]
  4023b8:	f022 0203 	bic.w	r2, r2, #3
  4023bc:	e75a      	b.n	402274 <_malloc_r+0x308>
  4023be:	f859 3908 	ldr.w	r3, [r9], #-8
  4023c2:	4599      	cmp	r9, r3
  4023c4:	f040 8082 	bne.w	4024cc <_malloc_r+0x560>
  4023c8:	f010 0f03 	tst.w	r0, #3
  4023cc:	f100 30ff 	add.w	r0, r0, #4294967295
  4023d0:	d1f5      	bne.n	4023be <_malloc_r+0x452>
  4023d2:	687b      	ldr	r3, [r7, #4]
  4023d4:	ea23 0304 	bic.w	r3, r3, r4
  4023d8:	607b      	str	r3, [r7, #4]
  4023da:	0064      	lsls	r4, r4, #1
  4023dc:	429c      	cmp	r4, r3
  4023de:	f63f aebd 	bhi.w	40215c <_malloc_r+0x1f0>
  4023e2:	2c00      	cmp	r4, #0
  4023e4:	f43f aeba 	beq.w	40215c <_malloc_r+0x1f0>
  4023e8:	421c      	tst	r4, r3
  4023ea:	4640      	mov	r0, r8
  4023ec:	f47f ae35 	bne.w	40205a <_malloc_r+0xee>
  4023f0:	0064      	lsls	r4, r4, #1
  4023f2:	421c      	tst	r4, r3
  4023f4:	f100 0004 	add.w	r0, r0, #4
  4023f8:	d0fa      	beq.n	4023f0 <_malloc_r+0x484>
  4023fa:	e62e      	b.n	40205a <_malloc_r+0xee>
  4023fc:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  402400:	d818      	bhi.n	402434 <_malloc_r+0x4c8>
  402402:	0be8      	lsrs	r0, r5, #15
  402404:	f100 0e78 	add.w	lr, r0, #120	; 0x78
  402408:	ea4f 034e 	mov.w	r3, lr, lsl #1
  40240c:	3077      	adds	r0, #119	; 0x77
  40240e:	e5cf      	b.n	401fb0 <_malloc_r+0x44>
  402410:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  402414:	e6eb      	b.n	4021ee <_malloc_r+0x282>
  402416:	2101      	movs	r1, #1
  402418:	f8d8 3004 	ldr.w	r3, [r8, #4]
  40241c:	1092      	asrs	r2, r2, #2
  40241e:	fa01 f202 	lsl.w	r2, r1, r2
  402422:	431a      	orrs	r2, r3
  402424:	f8c8 2004 	str.w	r2, [r8, #4]
  402428:	4661      	mov	r1, ip
  40242a:	e777      	b.n	40231c <_malloc_r+0x3b0>
  40242c:	2301      	movs	r3, #1
  40242e:	f8cb 3004 	str.w	r3, [fp, #4]
  402432:	e725      	b.n	402280 <_malloc_r+0x314>
  402434:	f240 5254 	movw	r2, #1364	; 0x554
  402438:	4293      	cmp	r3, r2
  40243a:	d820      	bhi.n	40247e <_malloc_r+0x512>
  40243c:	0ca8      	lsrs	r0, r5, #18
  40243e:	f100 0e7d 	add.w	lr, r0, #125	; 0x7d
  402442:	ea4f 034e 	mov.w	r3, lr, lsl #1
  402446:	307c      	adds	r0, #124	; 0x7c
  402448:	e5b2      	b.n	401fb0 <_malloc_r+0x44>
  40244a:	3210      	adds	r2, #16
  40244c:	e6a4      	b.n	402198 <_malloc_r+0x22c>
  40244e:	2a54      	cmp	r2, #84	; 0x54
  402450:	d826      	bhi.n	4024a0 <_malloc_r+0x534>
  402452:	0b1a      	lsrs	r2, r3, #12
  402454:	f102 016f 	add.w	r1, r2, #111	; 0x6f
  402458:	0049      	lsls	r1, r1, #1
  40245a:	326e      	adds	r2, #110	; 0x6e
  40245c:	e748      	b.n	4022f0 <_malloc_r+0x384>
  40245e:	68bc      	ldr	r4, [r7, #8]
  402460:	6862      	ldr	r2, [r4, #4]
  402462:	f022 0203 	bic.w	r2, r2, #3
  402466:	e705      	b.n	402274 <_malloc_r+0x308>
  402468:	f3ca 000b 	ubfx	r0, sl, #0, #12
  40246c:	2800      	cmp	r0, #0
  40246e:	f47f aea8 	bne.w	4021c2 <_malloc_r+0x256>
  402472:	4442      	add	r2, r8
  402474:	68bb      	ldr	r3, [r7, #8]
  402476:	f042 0201 	orr.w	r2, r2, #1
  40247a:	605a      	str	r2, [r3, #4]
  40247c:	e6ec      	b.n	402258 <_malloc_r+0x2ec>
  40247e:	23fe      	movs	r3, #254	; 0xfe
  402480:	f04f 0e7f 	mov.w	lr, #127	; 0x7f
  402484:	207e      	movs	r0, #126	; 0x7e
  402486:	e593      	b.n	401fb0 <_malloc_r+0x44>
  402488:	2201      	movs	r2, #1
  40248a:	f04f 0900 	mov.w	r9, #0
  40248e:	e6c1      	b.n	402214 <_malloc_r+0x2a8>
  402490:	f104 0108 	add.w	r1, r4, #8
  402494:	4630      	mov	r0, r6
  402496:	f7ff fa59 	bl	40194c <_free_r>
  40249a:	f8d9 1000 	ldr.w	r1, [r9]
  40249e:	e6db      	b.n	402258 <_malloc_r+0x2ec>
  4024a0:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  4024a4:	d805      	bhi.n	4024b2 <_malloc_r+0x546>
  4024a6:	0bda      	lsrs	r2, r3, #15
  4024a8:	f102 0178 	add.w	r1, r2, #120	; 0x78
  4024ac:	0049      	lsls	r1, r1, #1
  4024ae:	3277      	adds	r2, #119	; 0x77
  4024b0:	e71e      	b.n	4022f0 <_malloc_r+0x384>
  4024b2:	f240 5154 	movw	r1, #1364	; 0x554
  4024b6:	428a      	cmp	r2, r1
  4024b8:	d805      	bhi.n	4024c6 <_malloc_r+0x55a>
  4024ba:	0c9a      	lsrs	r2, r3, #18
  4024bc:	f102 017d 	add.w	r1, r2, #125	; 0x7d
  4024c0:	0049      	lsls	r1, r1, #1
  4024c2:	327c      	adds	r2, #124	; 0x7c
  4024c4:	e714      	b.n	4022f0 <_malloc_r+0x384>
  4024c6:	21fe      	movs	r1, #254	; 0xfe
  4024c8:	227e      	movs	r2, #126	; 0x7e
  4024ca:	e711      	b.n	4022f0 <_malloc_r+0x384>
  4024cc:	687b      	ldr	r3, [r7, #4]
  4024ce:	e784      	b.n	4023da <_malloc_r+0x46e>
  4024d0:	08e8      	lsrs	r0, r5, #3
  4024d2:	1c43      	adds	r3, r0, #1
  4024d4:	005b      	lsls	r3, r3, #1
  4024d6:	e5f8      	b.n	4020ca <_malloc_r+0x15e>
  4024d8:	20000434 	.word	0x20000434
  4024dc:	00000000 	.word	0x00000000

004024e0 <memchr>:
  4024e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  4024e4:	2a10      	cmp	r2, #16
  4024e6:	db2b      	blt.n	402540 <memchr+0x60>
  4024e8:	f010 0f07 	tst.w	r0, #7
  4024ec:	d008      	beq.n	402500 <memchr+0x20>
  4024ee:	f810 3b01 	ldrb.w	r3, [r0], #1
  4024f2:	3a01      	subs	r2, #1
  4024f4:	428b      	cmp	r3, r1
  4024f6:	d02d      	beq.n	402554 <memchr+0x74>
  4024f8:	f010 0f07 	tst.w	r0, #7
  4024fc:	b342      	cbz	r2, 402550 <memchr+0x70>
  4024fe:	d1f6      	bne.n	4024ee <memchr+0xe>
  402500:	b4f0      	push	{r4, r5, r6, r7}
  402502:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  402506:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  40250a:	f022 0407 	bic.w	r4, r2, #7
  40250e:	f07f 0700 	mvns.w	r7, #0
  402512:	2300      	movs	r3, #0
  402514:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  402518:	3c08      	subs	r4, #8
  40251a:	ea85 0501 	eor.w	r5, r5, r1
  40251e:	ea86 0601 	eor.w	r6, r6, r1
  402522:	fa85 f547 	uadd8	r5, r5, r7
  402526:	faa3 f587 	sel	r5, r3, r7
  40252a:	fa86 f647 	uadd8	r6, r6, r7
  40252e:	faa5 f687 	sel	r6, r5, r7
  402532:	b98e      	cbnz	r6, 402558 <memchr+0x78>
  402534:	d1ee      	bne.n	402514 <memchr+0x34>
  402536:	bcf0      	pop	{r4, r5, r6, r7}
  402538:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  40253c:	f002 0207 	and.w	r2, r2, #7
  402540:	b132      	cbz	r2, 402550 <memchr+0x70>
  402542:	f810 3b01 	ldrb.w	r3, [r0], #1
  402546:	3a01      	subs	r2, #1
  402548:	ea83 0301 	eor.w	r3, r3, r1
  40254c:	b113      	cbz	r3, 402554 <memchr+0x74>
  40254e:	d1f8      	bne.n	402542 <memchr+0x62>
  402550:	2000      	movs	r0, #0
  402552:	4770      	bx	lr
  402554:	3801      	subs	r0, #1
  402556:	4770      	bx	lr
  402558:	2d00      	cmp	r5, #0
  40255a:	bf06      	itte	eq
  40255c:	4635      	moveq	r5, r6
  40255e:	3803      	subeq	r0, #3
  402560:	3807      	subne	r0, #7
  402562:	f015 0f01 	tst.w	r5, #1
  402566:	d107      	bne.n	402578 <memchr+0x98>
  402568:	3001      	adds	r0, #1
  40256a:	f415 7f80 	tst.w	r5, #256	; 0x100
  40256e:	bf02      	ittt	eq
  402570:	3001      	addeq	r0, #1
  402572:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  402576:	3001      	addeq	r0, #1
  402578:	bcf0      	pop	{r4, r5, r6, r7}
  40257a:	3801      	subs	r0, #1
  40257c:	4770      	bx	lr
  40257e:	bf00      	nop

00402580 <memcpy>:
  402580:	4684      	mov	ip, r0
  402582:	ea41 0300 	orr.w	r3, r1, r0
  402586:	f013 0303 	ands.w	r3, r3, #3
  40258a:	d16d      	bne.n	402668 <memcpy+0xe8>
  40258c:	3a40      	subs	r2, #64	; 0x40
  40258e:	d341      	bcc.n	402614 <memcpy+0x94>
  402590:	f851 3b04 	ldr.w	r3, [r1], #4
  402594:	f840 3b04 	str.w	r3, [r0], #4
  402598:	f851 3b04 	ldr.w	r3, [r1], #4
  40259c:	f840 3b04 	str.w	r3, [r0], #4
  4025a0:	f851 3b04 	ldr.w	r3, [r1], #4
  4025a4:	f840 3b04 	str.w	r3, [r0], #4
  4025a8:	f851 3b04 	ldr.w	r3, [r1], #4
  4025ac:	f840 3b04 	str.w	r3, [r0], #4
  4025b0:	f851 3b04 	ldr.w	r3, [r1], #4
  4025b4:	f840 3b04 	str.w	r3, [r0], #4
  4025b8:	f851 3b04 	ldr.w	r3, [r1], #4
  4025bc:	f840 3b04 	str.w	r3, [r0], #4
  4025c0:	f851 3b04 	ldr.w	r3, [r1], #4
  4025c4:	f840 3b04 	str.w	r3, [r0], #4
  4025c8:	f851 3b04 	ldr.w	r3, [r1], #4
  4025cc:	f840 3b04 	str.w	r3, [r0], #4
  4025d0:	f851 3b04 	ldr.w	r3, [r1], #4
  4025d4:	f840 3b04 	str.w	r3, [r0], #4
  4025d8:	f851 3b04 	ldr.w	r3, [r1], #4
  4025dc:	f840 3b04 	str.w	r3, [r0], #4
  4025e0:	f851 3b04 	ldr.w	r3, [r1], #4
  4025e4:	f840 3b04 	str.w	r3, [r0], #4
  4025e8:	f851 3b04 	ldr.w	r3, [r1], #4
  4025ec:	f840 3b04 	str.w	r3, [r0], #4
  4025f0:	f851 3b04 	ldr.w	r3, [r1], #4
  4025f4:	f840 3b04 	str.w	r3, [r0], #4
  4025f8:	f851 3b04 	ldr.w	r3, [r1], #4
  4025fc:	f840 3b04 	str.w	r3, [r0], #4
  402600:	f851 3b04 	ldr.w	r3, [r1], #4
  402604:	f840 3b04 	str.w	r3, [r0], #4
  402608:	f851 3b04 	ldr.w	r3, [r1], #4
  40260c:	f840 3b04 	str.w	r3, [r0], #4
  402610:	3a40      	subs	r2, #64	; 0x40
  402612:	d2bd      	bcs.n	402590 <memcpy+0x10>
  402614:	3230      	adds	r2, #48	; 0x30
  402616:	d311      	bcc.n	40263c <memcpy+0xbc>
  402618:	f851 3b04 	ldr.w	r3, [r1], #4
  40261c:	f840 3b04 	str.w	r3, [r0], #4
  402620:	f851 3b04 	ldr.w	r3, [r1], #4
  402624:	f840 3b04 	str.w	r3, [r0], #4
  402628:	f851 3b04 	ldr.w	r3, [r1], #4
  40262c:	f840 3b04 	str.w	r3, [r0], #4
  402630:	f851 3b04 	ldr.w	r3, [r1], #4
  402634:	f840 3b04 	str.w	r3, [r0], #4
  402638:	3a10      	subs	r2, #16
  40263a:	d2ed      	bcs.n	402618 <memcpy+0x98>
  40263c:	320c      	adds	r2, #12
  40263e:	d305      	bcc.n	40264c <memcpy+0xcc>
  402640:	f851 3b04 	ldr.w	r3, [r1], #4
  402644:	f840 3b04 	str.w	r3, [r0], #4
  402648:	3a04      	subs	r2, #4
  40264a:	d2f9      	bcs.n	402640 <memcpy+0xc0>
  40264c:	3204      	adds	r2, #4
  40264e:	d008      	beq.n	402662 <memcpy+0xe2>
  402650:	07d2      	lsls	r2, r2, #31
  402652:	bf1c      	itt	ne
  402654:	f811 3b01 	ldrbne.w	r3, [r1], #1
  402658:	f800 3b01 	strbne.w	r3, [r0], #1
  40265c:	d301      	bcc.n	402662 <memcpy+0xe2>
  40265e:	880b      	ldrh	r3, [r1, #0]
  402660:	8003      	strh	r3, [r0, #0]
  402662:	4660      	mov	r0, ip
  402664:	4770      	bx	lr
  402666:	bf00      	nop
  402668:	2a08      	cmp	r2, #8
  40266a:	d313      	bcc.n	402694 <memcpy+0x114>
  40266c:	078b      	lsls	r3, r1, #30
  40266e:	d08d      	beq.n	40258c <memcpy+0xc>
  402670:	f010 0303 	ands.w	r3, r0, #3
  402674:	d08a      	beq.n	40258c <memcpy+0xc>
  402676:	f1c3 0304 	rsb	r3, r3, #4
  40267a:	1ad2      	subs	r2, r2, r3
  40267c:	07db      	lsls	r3, r3, #31
  40267e:	bf1c      	itt	ne
  402680:	f811 3b01 	ldrbne.w	r3, [r1], #1
  402684:	f800 3b01 	strbne.w	r3, [r0], #1
  402688:	d380      	bcc.n	40258c <memcpy+0xc>
  40268a:	f831 3b02 	ldrh.w	r3, [r1], #2
  40268e:	f820 3b02 	strh.w	r3, [r0], #2
  402692:	e77b      	b.n	40258c <memcpy+0xc>
  402694:	3a04      	subs	r2, #4
  402696:	d3d9      	bcc.n	40264c <memcpy+0xcc>
  402698:	3a01      	subs	r2, #1
  40269a:	f811 3b01 	ldrb.w	r3, [r1], #1
  40269e:	f800 3b01 	strb.w	r3, [r0], #1
  4026a2:	d2f9      	bcs.n	402698 <memcpy+0x118>
  4026a4:	780b      	ldrb	r3, [r1, #0]
  4026a6:	7003      	strb	r3, [r0, #0]
  4026a8:	784b      	ldrb	r3, [r1, #1]
  4026aa:	7043      	strb	r3, [r0, #1]
  4026ac:	788b      	ldrb	r3, [r1, #2]
  4026ae:	7083      	strb	r3, [r0, #2]
  4026b0:	4660      	mov	r0, ip
  4026b2:	4770      	bx	lr

004026b4 <memmove>:
  4026b4:	4288      	cmp	r0, r1
  4026b6:	b5f0      	push	{r4, r5, r6, r7, lr}
  4026b8:	d90d      	bls.n	4026d6 <memmove+0x22>
  4026ba:	188b      	adds	r3, r1, r2
  4026bc:	4298      	cmp	r0, r3
  4026be:	d20a      	bcs.n	4026d6 <memmove+0x22>
  4026c0:	1881      	adds	r1, r0, r2
  4026c2:	2a00      	cmp	r2, #0
  4026c4:	d051      	beq.n	40276a <memmove+0xb6>
  4026c6:	1a9a      	subs	r2, r3, r2
  4026c8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  4026cc:	f801 4d01 	strb.w	r4, [r1, #-1]!
  4026d0:	4293      	cmp	r3, r2
  4026d2:	d1f9      	bne.n	4026c8 <memmove+0x14>
  4026d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4026d6:	2a0f      	cmp	r2, #15
  4026d8:	d948      	bls.n	40276c <memmove+0xb8>
  4026da:	ea41 0300 	orr.w	r3, r1, r0
  4026de:	079b      	lsls	r3, r3, #30
  4026e0:	d146      	bne.n	402770 <memmove+0xbc>
  4026e2:	f100 0410 	add.w	r4, r0, #16
  4026e6:	f101 0310 	add.w	r3, r1, #16
  4026ea:	4615      	mov	r5, r2
  4026ec:	f853 6c10 	ldr.w	r6, [r3, #-16]
  4026f0:	f844 6c10 	str.w	r6, [r4, #-16]
  4026f4:	f853 6c0c 	ldr.w	r6, [r3, #-12]
  4026f8:	f844 6c0c 	str.w	r6, [r4, #-12]
  4026fc:	f853 6c08 	ldr.w	r6, [r3, #-8]
  402700:	f844 6c08 	str.w	r6, [r4, #-8]
  402704:	3d10      	subs	r5, #16
  402706:	f853 6c04 	ldr.w	r6, [r3, #-4]
  40270a:	f844 6c04 	str.w	r6, [r4, #-4]
  40270e:	2d0f      	cmp	r5, #15
  402710:	f103 0310 	add.w	r3, r3, #16
  402714:	f104 0410 	add.w	r4, r4, #16
  402718:	d8e8      	bhi.n	4026ec <memmove+0x38>
  40271a:	f1a2 0310 	sub.w	r3, r2, #16
  40271e:	f023 030f 	bic.w	r3, r3, #15
  402722:	f002 0e0f 	and.w	lr, r2, #15
  402726:	3310      	adds	r3, #16
  402728:	f1be 0f03 	cmp.w	lr, #3
  40272c:	4419      	add	r1, r3
  40272e:	4403      	add	r3, r0
  402730:	d921      	bls.n	402776 <memmove+0xc2>
  402732:	1f1e      	subs	r6, r3, #4
  402734:	460d      	mov	r5, r1
  402736:	4674      	mov	r4, lr
  402738:	3c04      	subs	r4, #4
  40273a:	f855 7b04 	ldr.w	r7, [r5], #4
  40273e:	f846 7f04 	str.w	r7, [r6, #4]!
  402742:	2c03      	cmp	r4, #3
  402744:	d8f8      	bhi.n	402738 <memmove+0x84>
  402746:	f1ae 0404 	sub.w	r4, lr, #4
  40274a:	f024 0403 	bic.w	r4, r4, #3
  40274e:	3404      	adds	r4, #4
  402750:	4423      	add	r3, r4
  402752:	4421      	add	r1, r4
  402754:	f002 0203 	and.w	r2, r2, #3
  402758:	b162      	cbz	r2, 402774 <memmove+0xc0>
  40275a:	3b01      	subs	r3, #1
  40275c:	440a      	add	r2, r1
  40275e:	f811 4b01 	ldrb.w	r4, [r1], #1
  402762:	f803 4f01 	strb.w	r4, [r3, #1]!
  402766:	428a      	cmp	r2, r1
  402768:	d1f9      	bne.n	40275e <memmove+0xaa>
  40276a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40276c:	4603      	mov	r3, r0
  40276e:	e7f3      	b.n	402758 <memmove+0xa4>
  402770:	4603      	mov	r3, r0
  402772:	e7f2      	b.n	40275a <memmove+0xa6>
  402774:	bdf0      	pop	{r4, r5, r6, r7, pc}
  402776:	4672      	mov	r2, lr
  402778:	e7ee      	b.n	402758 <memmove+0xa4>
  40277a:	bf00      	nop

0040277c <__malloc_lock>:
  40277c:	4770      	bx	lr
  40277e:	bf00      	nop

00402780 <__malloc_unlock>:
  402780:	4770      	bx	lr
  402782:	bf00      	nop

00402784 <_realloc_r>:
  402784:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402788:	4617      	mov	r7, r2
  40278a:	b083      	sub	sp, #12
  40278c:	2900      	cmp	r1, #0
  40278e:	f000 80c1 	beq.w	402914 <_realloc_r+0x190>
  402792:	460e      	mov	r6, r1
  402794:	4681      	mov	r9, r0
  402796:	f107 050b 	add.w	r5, r7, #11
  40279a:	f7ff ffef 	bl	40277c <__malloc_lock>
  40279e:	f856 ec04 	ldr.w	lr, [r6, #-4]
  4027a2:	2d16      	cmp	r5, #22
  4027a4:	f02e 0403 	bic.w	r4, lr, #3
  4027a8:	f1a6 0808 	sub.w	r8, r6, #8
  4027ac:	d840      	bhi.n	402830 <_realloc_r+0xac>
  4027ae:	2210      	movs	r2, #16
  4027b0:	4615      	mov	r5, r2
  4027b2:	42af      	cmp	r7, r5
  4027b4:	d841      	bhi.n	40283a <_realloc_r+0xb6>
  4027b6:	4294      	cmp	r4, r2
  4027b8:	da75      	bge.n	4028a6 <_realloc_r+0x122>
  4027ba:	4bc9      	ldr	r3, [pc, #804]	; (402ae0 <_realloc_r+0x35c>)
  4027bc:	6899      	ldr	r1, [r3, #8]
  4027be:	eb08 0004 	add.w	r0, r8, r4
  4027c2:	4288      	cmp	r0, r1
  4027c4:	6841      	ldr	r1, [r0, #4]
  4027c6:	f000 80d9 	beq.w	40297c <_realloc_r+0x1f8>
  4027ca:	f021 0301 	bic.w	r3, r1, #1
  4027ce:	4403      	add	r3, r0
  4027d0:	685b      	ldr	r3, [r3, #4]
  4027d2:	07db      	lsls	r3, r3, #31
  4027d4:	d57d      	bpl.n	4028d2 <_realloc_r+0x14e>
  4027d6:	f01e 0f01 	tst.w	lr, #1
  4027da:	d035      	beq.n	402848 <_realloc_r+0xc4>
  4027dc:	4639      	mov	r1, r7
  4027de:	4648      	mov	r0, r9
  4027e0:	f7ff fbc4 	bl	401f6c <_malloc_r>
  4027e4:	4607      	mov	r7, r0
  4027e6:	b1e0      	cbz	r0, 402822 <_realloc_r+0x9e>
  4027e8:	f856 3c04 	ldr.w	r3, [r6, #-4]
  4027ec:	f023 0301 	bic.w	r3, r3, #1
  4027f0:	4443      	add	r3, r8
  4027f2:	f1a0 0208 	sub.w	r2, r0, #8
  4027f6:	429a      	cmp	r2, r3
  4027f8:	f000 8144 	beq.w	402a84 <_realloc_r+0x300>
  4027fc:	1f22      	subs	r2, r4, #4
  4027fe:	2a24      	cmp	r2, #36	; 0x24
  402800:	f200 8131 	bhi.w	402a66 <_realloc_r+0x2e2>
  402804:	2a13      	cmp	r2, #19
  402806:	f200 8104 	bhi.w	402a12 <_realloc_r+0x28e>
  40280a:	4603      	mov	r3, r0
  40280c:	4632      	mov	r2, r6
  40280e:	6811      	ldr	r1, [r2, #0]
  402810:	6019      	str	r1, [r3, #0]
  402812:	6851      	ldr	r1, [r2, #4]
  402814:	6059      	str	r1, [r3, #4]
  402816:	6892      	ldr	r2, [r2, #8]
  402818:	609a      	str	r2, [r3, #8]
  40281a:	4631      	mov	r1, r6
  40281c:	4648      	mov	r0, r9
  40281e:	f7ff f895 	bl	40194c <_free_r>
  402822:	4648      	mov	r0, r9
  402824:	f7ff ffac 	bl	402780 <__malloc_unlock>
  402828:	4638      	mov	r0, r7
  40282a:	b003      	add	sp, #12
  40282c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402830:	f025 0507 	bic.w	r5, r5, #7
  402834:	2d00      	cmp	r5, #0
  402836:	462a      	mov	r2, r5
  402838:	dabb      	bge.n	4027b2 <_realloc_r+0x2e>
  40283a:	230c      	movs	r3, #12
  40283c:	2000      	movs	r0, #0
  40283e:	f8c9 3000 	str.w	r3, [r9]
  402842:	b003      	add	sp, #12
  402844:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402848:	f856 3c08 	ldr.w	r3, [r6, #-8]
  40284c:	ebc3 0a08 	rsb	sl, r3, r8
  402850:	f8da 3004 	ldr.w	r3, [sl, #4]
  402854:	f023 0c03 	bic.w	ip, r3, #3
  402858:	eb04 030c 	add.w	r3, r4, ip
  40285c:	4293      	cmp	r3, r2
  40285e:	dbbd      	blt.n	4027dc <_realloc_r+0x58>
  402860:	4657      	mov	r7, sl
  402862:	f8da 100c 	ldr.w	r1, [sl, #12]
  402866:	f857 0f08 	ldr.w	r0, [r7, #8]!
  40286a:	1f22      	subs	r2, r4, #4
  40286c:	2a24      	cmp	r2, #36	; 0x24
  40286e:	60c1      	str	r1, [r0, #12]
  402870:	6088      	str	r0, [r1, #8]
  402872:	f200 8117 	bhi.w	402aa4 <_realloc_r+0x320>
  402876:	2a13      	cmp	r2, #19
  402878:	f240 8112 	bls.w	402aa0 <_realloc_r+0x31c>
  40287c:	6831      	ldr	r1, [r6, #0]
  40287e:	f8ca 1008 	str.w	r1, [sl, #8]
  402882:	6871      	ldr	r1, [r6, #4]
  402884:	f8ca 100c 	str.w	r1, [sl, #12]
  402888:	2a1b      	cmp	r2, #27
  40288a:	f200 812b 	bhi.w	402ae4 <_realloc_r+0x360>
  40288e:	3608      	adds	r6, #8
  402890:	f10a 0210 	add.w	r2, sl, #16
  402894:	6831      	ldr	r1, [r6, #0]
  402896:	6011      	str	r1, [r2, #0]
  402898:	6871      	ldr	r1, [r6, #4]
  40289a:	6051      	str	r1, [r2, #4]
  40289c:	68b1      	ldr	r1, [r6, #8]
  40289e:	6091      	str	r1, [r2, #8]
  4028a0:	463e      	mov	r6, r7
  4028a2:	461c      	mov	r4, r3
  4028a4:	46d0      	mov	r8, sl
  4028a6:	1b63      	subs	r3, r4, r5
  4028a8:	2b0f      	cmp	r3, #15
  4028aa:	d81d      	bhi.n	4028e8 <_realloc_r+0x164>
  4028ac:	f8d8 3004 	ldr.w	r3, [r8, #4]
  4028b0:	f003 0301 	and.w	r3, r3, #1
  4028b4:	4323      	orrs	r3, r4
  4028b6:	4444      	add	r4, r8
  4028b8:	f8c8 3004 	str.w	r3, [r8, #4]
  4028bc:	6863      	ldr	r3, [r4, #4]
  4028be:	f043 0301 	orr.w	r3, r3, #1
  4028c2:	6063      	str	r3, [r4, #4]
  4028c4:	4648      	mov	r0, r9
  4028c6:	f7ff ff5b 	bl	402780 <__malloc_unlock>
  4028ca:	4630      	mov	r0, r6
  4028cc:	b003      	add	sp, #12
  4028ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4028d2:	f021 0103 	bic.w	r1, r1, #3
  4028d6:	4421      	add	r1, r4
  4028d8:	4291      	cmp	r1, r2
  4028da:	db21      	blt.n	402920 <_realloc_r+0x19c>
  4028dc:	68c3      	ldr	r3, [r0, #12]
  4028de:	6882      	ldr	r2, [r0, #8]
  4028e0:	460c      	mov	r4, r1
  4028e2:	60d3      	str	r3, [r2, #12]
  4028e4:	609a      	str	r2, [r3, #8]
  4028e6:	e7de      	b.n	4028a6 <_realloc_r+0x122>
  4028e8:	f8d8 2004 	ldr.w	r2, [r8, #4]
  4028ec:	eb08 0105 	add.w	r1, r8, r5
  4028f0:	f002 0201 	and.w	r2, r2, #1
  4028f4:	4315      	orrs	r5, r2
  4028f6:	f043 0201 	orr.w	r2, r3, #1
  4028fa:	440b      	add	r3, r1
  4028fc:	f8c8 5004 	str.w	r5, [r8, #4]
  402900:	604a      	str	r2, [r1, #4]
  402902:	685a      	ldr	r2, [r3, #4]
  402904:	f042 0201 	orr.w	r2, r2, #1
  402908:	3108      	adds	r1, #8
  40290a:	605a      	str	r2, [r3, #4]
  40290c:	4648      	mov	r0, r9
  40290e:	f7ff f81d 	bl	40194c <_free_r>
  402912:	e7d7      	b.n	4028c4 <_realloc_r+0x140>
  402914:	4611      	mov	r1, r2
  402916:	b003      	add	sp, #12
  402918:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40291c:	f7ff bb26 	b.w	401f6c <_malloc_r>
  402920:	f01e 0f01 	tst.w	lr, #1
  402924:	f47f af5a 	bne.w	4027dc <_realloc_r+0x58>
  402928:	f856 3c08 	ldr.w	r3, [r6, #-8]
  40292c:	ebc3 0a08 	rsb	sl, r3, r8
  402930:	f8da 3004 	ldr.w	r3, [sl, #4]
  402934:	f023 0c03 	bic.w	ip, r3, #3
  402938:	eb01 0e0c 	add.w	lr, r1, ip
  40293c:	4596      	cmp	lr, r2
  40293e:	db8b      	blt.n	402858 <_realloc_r+0xd4>
  402940:	68c3      	ldr	r3, [r0, #12]
  402942:	6882      	ldr	r2, [r0, #8]
  402944:	4657      	mov	r7, sl
  402946:	60d3      	str	r3, [r2, #12]
  402948:	609a      	str	r2, [r3, #8]
  40294a:	f857 1f08 	ldr.w	r1, [r7, #8]!
  40294e:	f8da 300c 	ldr.w	r3, [sl, #12]
  402952:	60cb      	str	r3, [r1, #12]
  402954:	1f22      	subs	r2, r4, #4
  402956:	2a24      	cmp	r2, #36	; 0x24
  402958:	6099      	str	r1, [r3, #8]
  40295a:	f200 8099 	bhi.w	402a90 <_realloc_r+0x30c>
  40295e:	2a13      	cmp	r2, #19
  402960:	d962      	bls.n	402a28 <_realloc_r+0x2a4>
  402962:	6833      	ldr	r3, [r6, #0]
  402964:	f8ca 3008 	str.w	r3, [sl, #8]
  402968:	6873      	ldr	r3, [r6, #4]
  40296a:	f8ca 300c 	str.w	r3, [sl, #12]
  40296e:	2a1b      	cmp	r2, #27
  402970:	f200 80a0 	bhi.w	402ab4 <_realloc_r+0x330>
  402974:	3608      	adds	r6, #8
  402976:	f10a 0310 	add.w	r3, sl, #16
  40297a:	e056      	b.n	402a2a <_realloc_r+0x2a6>
  40297c:	f021 0b03 	bic.w	fp, r1, #3
  402980:	44a3      	add	fp, r4
  402982:	f105 0010 	add.w	r0, r5, #16
  402986:	4583      	cmp	fp, r0
  402988:	da59      	bge.n	402a3e <_realloc_r+0x2ba>
  40298a:	f01e 0f01 	tst.w	lr, #1
  40298e:	f47f af25 	bne.w	4027dc <_realloc_r+0x58>
  402992:	f856 1c08 	ldr.w	r1, [r6, #-8]
  402996:	ebc1 0a08 	rsb	sl, r1, r8
  40299a:	f8da 1004 	ldr.w	r1, [sl, #4]
  40299e:	f021 0c03 	bic.w	ip, r1, #3
  4029a2:	44e3      	add	fp, ip
  4029a4:	4558      	cmp	r0, fp
  4029a6:	f73f af57 	bgt.w	402858 <_realloc_r+0xd4>
  4029aa:	4657      	mov	r7, sl
  4029ac:	f8da 100c 	ldr.w	r1, [sl, #12]
  4029b0:	f857 0f08 	ldr.w	r0, [r7, #8]!
  4029b4:	1f22      	subs	r2, r4, #4
  4029b6:	2a24      	cmp	r2, #36	; 0x24
  4029b8:	60c1      	str	r1, [r0, #12]
  4029ba:	6088      	str	r0, [r1, #8]
  4029bc:	f200 80b4 	bhi.w	402b28 <_realloc_r+0x3a4>
  4029c0:	2a13      	cmp	r2, #19
  4029c2:	f240 80a5 	bls.w	402b10 <_realloc_r+0x38c>
  4029c6:	6831      	ldr	r1, [r6, #0]
  4029c8:	f8ca 1008 	str.w	r1, [sl, #8]
  4029cc:	6871      	ldr	r1, [r6, #4]
  4029ce:	f8ca 100c 	str.w	r1, [sl, #12]
  4029d2:	2a1b      	cmp	r2, #27
  4029d4:	f200 80af 	bhi.w	402b36 <_realloc_r+0x3b2>
  4029d8:	3608      	adds	r6, #8
  4029da:	f10a 0210 	add.w	r2, sl, #16
  4029de:	6831      	ldr	r1, [r6, #0]
  4029e0:	6011      	str	r1, [r2, #0]
  4029e2:	6871      	ldr	r1, [r6, #4]
  4029e4:	6051      	str	r1, [r2, #4]
  4029e6:	68b1      	ldr	r1, [r6, #8]
  4029e8:	6091      	str	r1, [r2, #8]
  4029ea:	eb0a 0105 	add.w	r1, sl, r5
  4029ee:	ebc5 020b 	rsb	r2, r5, fp
  4029f2:	f042 0201 	orr.w	r2, r2, #1
  4029f6:	6099      	str	r1, [r3, #8]
  4029f8:	604a      	str	r2, [r1, #4]
  4029fa:	f8da 3004 	ldr.w	r3, [sl, #4]
  4029fe:	f003 0301 	and.w	r3, r3, #1
  402a02:	431d      	orrs	r5, r3
  402a04:	4648      	mov	r0, r9
  402a06:	f8ca 5004 	str.w	r5, [sl, #4]
  402a0a:	f7ff feb9 	bl	402780 <__malloc_unlock>
  402a0e:	4638      	mov	r0, r7
  402a10:	e75c      	b.n	4028cc <_realloc_r+0x148>
  402a12:	6833      	ldr	r3, [r6, #0]
  402a14:	6003      	str	r3, [r0, #0]
  402a16:	6873      	ldr	r3, [r6, #4]
  402a18:	6043      	str	r3, [r0, #4]
  402a1a:	2a1b      	cmp	r2, #27
  402a1c:	d827      	bhi.n	402a6e <_realloc_r+0x2ea>
  402a1e:	f100 0308 	add.w	r3, r0, #8
  402a22:	f106 0208 	add.w	r2, r6, #8
  402a26:	e6f2      	b.n	40280e <_realloc_r+0x8a>
  402a28:	463b      	mov	r3, r7
  402a2a:	6832      	ldr	r2, [r6, #0]
  402a2c:	601a      	str	r2, [r3, #0]
  402a2e:	6872      	ldr	r2, [r6, #4]
  402a30:	605a      	str	r2, [r3, #4]
  402a32:	68b2      	ldr	r2, [r6, #8]
  402a34:	609a      	str	r2, [r3, #8]
  402a36:	463e      	mov	r6, r7
  402a38:	4674      	mov	r4, lr
  402a3a:	46d0      	mov	r8, sl
  402a3c:	e733      	b.n	4028a6 <_realloc_r+0x122>
  402a3e:	eb08 0105 	add.w	r1, r8, r5
  402a42:	ebc5 0b0b 	rsb	fp, r5, fp
  402a46:	f04b 0201 	orr.w	r2, fp, #1
  402a4a:	6099      	str	r1, [r3, #8]
  402a4c:	604a      	str	r2, [r1, #4]
  402a4e:	f856 3c04 	ldr.w	r3, [r6, #-4]
  402a52:	f003 0301 	and.w	r3, r3, #1
  402a56:	431d      	orrs	r5, r3
  402a58:	4648      	mov	r0, r9
  402a5a:	f846 5c04 	str.w	r5, [r6, #-4]
  402a5e:	f7ff fe8f 	bl	402780 <__malloc_unlock>
  402a62:	4630      	mov	r0, r6
  402a64:	e732      	b.n	4028cc <_realloc_r+0x148>
  402a66:	4631      	mov	r1, r6
  402a68:	f7ff fe24 	bl	4026b4 <memmove>
  402a6c:	e6d5      	b.n	40281a <_realloc_r+0x96>
  402a6e:	68b3      	ldr	r3, [r6, #8]
  402a70:	6083      	str	r3, [r0, #8]
  402a72:	68f3      	ldr	r3, [r6, #12]
  402a74:	60c3      	str	r3, [r0, #12]
  402a76:	2a24      	cmp	r2, #36	; 0x24
  402a78:	d028      	beq.n	402acc <_realloc_r+0x348>
  402a7a:	f100 0310 	add.w	r3, r0, #16
  402a7e:	f106 0210 	add.w	r2, r6, #16
  402a82:	e6c4      	b.n	40280e <_realloc_r+0x8a>
  402a84:	f850 3c04 	ldr.w	r3, [r0, #-4]
  402a88:	f023 0303 	bic.w	r3, r3, #3
  402a8c:	441c      	add	r4, r3
  402a8e:	e70a      	b.n	4028a6 <_realloc_r+0x122>
  402a90:	4631      	mov	r1, r6
  402a92:	4638      	mov	r0, r7
  402a94:	4674      	mov	r4, lr
  402a96:	46d0      	mov	r8, sl
  402a98:	f7ff fe0c 	bl	4026b4 <memmove>
  402a9c:	463e      	mov	r6, r7
  402a9e:	e702      	b.n	4028a6 <_realloc_r+0x122>
  402aa0:	463a      	mov	r2, r7
  402aa2:	e6f7      	b.n	402894 <_realloc_r+0x110>
  402aa4:	4631      	mov	r1, r6
  402aa6:	4638      	mov	r0, r7
  402aa8:	461c      	mov	r4, r3
  402aaa:	46d0      	mov	r8, sl
  402aac:	f7ff fe02 	bl	4026b4 <memmove>
  402ab0:	463e      	mov	r6, r7
  402ab2:	e6f8      	b.n	4028a6 <_realloc_r+0x122>
  402ab4:	68b3      	ldr	r3, [r6, #8]
  402ab6:	f8ca 3010 	str.w	r3, [sl, #16]
  402aba:	68f3      	ldr	r3, [r6, #12]
  402abc:	f8ca 3014 	str.w	r3, [sl, #20]
  402ac0:	2a24      	cmp	r2, #36	; 0x24
  402ac2:	d01b      	beq.n	402afc <_realloc_r+0x378>
  402ac4:	3610      	adds	r6, #16
  402ac6:	f10a 0318 	add.w	r3, sl, #24
  402aca:	e7ae      	b.n	402a2a <_realloc_r+0x2a6>
  402acc:	6933      	ldr	r3, [r6, #16]
  402ace:	6103      	str	r3, [r0, #16]
  402ad0:	6973      	ldr	r3, [r6, #20]
  402ad2:	6143      	str	r3, [r0, #20]
  402ad4:	f106 0218 	add.w	r2, r6, #24
  402ad8:	f100 0318 	add.w	r3, r0, #24
  402adc:	e697      	b.n	40280e <_realloc_r+0x8a>
  402ade:	bf00      	nop
  402ae0:	20000434 	.word	0x20000434
  402ae4:	68b1      	ldr	r1, [r6, #8]
  402ae6:	f8ca 1010 	str.w	r1, [sl, #16]
  402aea:	68f1      	ldr	r1, [r6, #12]
  402aec:	f8ca 1014 	str.w	r1, [sl, #20]
  402af0:	2a24      	cmp	r2, #36	; 0x24
  402af2:	d00f      	beq.n	402b14 <_realloc_r+0x390>
  402af4:	3610      	adds	r6, #16
  402af6:	f10a 0218 	add.w	r2, sl, #24
  402afa:	e6cb      	b.n	402894 <_realloc_r+0x110>
  402afc:	6933      	ldr	r3, [r6, #16]
  402afe:	f8ca 3018 	str.w	r3, [sl, #24]
  402b02:	6973      	ldr	r3, [r6, #20]
  402b04:	f8ca 301c 	str.w	r3, [sl, #28]
  402b08:	3618      	adds	r6, #24
  402b0a:	f10a 0320 	add.w	r3, sl, #32
  402b0e:	e78c      	b.n	402a2a <_realloc_r+0x2a6>
  402b10:	463a      	mov	r2, r7
  402b12:	e764      	b.n	4029de <_realloc_r+0x25a>
  402b14:	6932      	ldr	r2, [r6, #16]
  402b16:	f8ca 2018 	str.w	r2, [sl, #24]
  402b1a:	6972      	ldr	r2, [r6, #20]
  402b1c:	f8ca 201c 	str.w	r2, [sl, #28]
  402b20:	3618      	adds	r6, #24
  402b22:	f10a 0220 	add.w	r2, sl, #32
  402b26:	e6b5      	b.n	402894 <_realloc_r+0x110>
  402b28:	4631      	mov	r1, r6
  402b2a:	4638      	mov	r0, r7
  402b2c:	9301      	str	r3, [sp, #4]
  402b2e:	f7ff fdc1 	bl	4026b4 <memmove>
  402b32:	9b01      	ldr	r3, [sp, #4]
  402b34:	e759      	b.n	4029ea <_realloc_r+0x266>
  402b36:	68b1      	ldr	r1, [r6, #8]
  402b38:	f8ca 1010 	str.w	r1, [sl, #16]
  402b3c:	68f1      	ldr	r1, [r6, #12]
  402b3e:	f8ca 1014 	str.w	r1, [sl, #20]
  402b42:	2a24      	cmp	r2, #36	; 0x24
  402b44:	d003      	beq.n	402b4e <_realloc_r+0x3ca>
  402b46:	3610      	adds	r6, #16
  402b48:	f10a 0218 	add.w	r2, sl, #24
  402b4c:	e747      	b.n	4029de <_realloc_r+0x25a>
  402b4e:	6932      	ldr	r2, [r6, #16]
  402b50:	f8ca 2018 	str.w	r2, [sl, #24]
  402b54:	6972      	ldr	r2, [r6, #20]
  402b56:	f8ca 201c 	str.w	r2, [sl, #28]
  402b5a:	3618      	adds	r6, #24
  402b5c:	f10a 0220 	add.w	r2, sl, #32
  402b60:	e73d      	b.n	4029de <_realloc_r+0x25a>
  402b62:	bf00      	nop

00402b64 <_sbrk_r>:
  402b64:	b538      	push	{r3, r4, r5, lr}
  402b66:	4c07      	ldr	r4, [pc, #28]	; (402b84 <_sbrk_r+0x20>)
  402b68:	2300      	movs	r3, #0
  402b6a:	4605      	mov	r5, r0
  402b6c:	4608      	mov	r0, r1
  402b6e:	6023      	str	r3, [r4, #0]
  402b70:	f7fe f8f2 	bl	400d58 <_sbrk>
  402b74:	1c43      	adds	r3, r0, #1
  402b76:	d000      	beq.n	402b7a <_sbrk_r+0x16>
  402b78:	bd38      	pop	{r3, r4, r5, pc}
  402b7a:	6823      	ldr	r3, [r4, #0]
  402b7c:	2b00      	cmp	r3, #0
  402b7e:	d0fb      	beq.n	402b78 <_sbrk_r+0x14>
  402b80:	602b      	str	r3, [r5, #0]
  402b82:	bd38      	pop	{r3, r4, r5, pc}
  402b84:	20000944 	.word	0x20000944

00402b88 <__sread>:
  402b88:	b510      	push	{r4, lr}
  402b8a:	460c      	mov	r4, r1
  402b8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  402b90:	f000 f936 	bl	402e00 <_read_r>
  402b94:	2800      	cmp	r0, #0
  402b96:	db03      	blt.n	402ba0 <__sread+0x18>
  402b98:	6d23      	ldr	r3, [r4, #80]	; 0x50
  402b9a:	4403      	add	r3, r0
  402b9c:	6523      	str	r3, [r4, #80]	; 0x50
  402b9e:	bd10      	pop	{r4, pc}
  402ba0:	89a3      	ldrh	r3, [r4, #12]
  402ba2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  402ba6:	81a3      	strh	r3, [r4, #12]
  402ba8:	bd10      	pop	{r4, pc}
  402baa:	bf00      	nop

00402bac <__swrite>:
  402bac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  402bb0:	4616      	mov	r6, r2
  402bb2:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
  402bb6:	461f      	mov	r7, r3
  402bb8:	05d3      	lsls	r3, r2, #23
  402bba:	460c      	mov	r4, r1
  402bbc:	4605      	mov	r5, r0
  402bbe:	d507      	bpl.n	402bd0 <__swrite+0x24>
  402bc0:	2200      	movs	r2, #0
  402bc2:	2302      	movs	r3, #2
  402bc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  402bc8:	f000 f904 	bl	402dd4 <_lseek_r>
  402bcc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  402bd0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  402bd4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  402bd8:	81a2      	strh	r2, [r4, #12]
  402bda:	463b      	mov	r3, r7
  402bdc:	4632      	mov	r2, r6
  402bde:	4628      	mov	r0, r5
  402be0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  402be4:	f000 b814 	b.w	402c10 <_write_r>

00402be8 <__sseek>:
  402be8:	b510      	push	{r4, lr}
  402bea:	460c      	mov	r4, r1
  402bec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  402bf0:	f000 f8f0 	bl	402dd4 <_lseek_r>
  402bf4:	89a3      	ldrh	r3, [r4, #12]
  402bf6:	1c42      	adds	r2, r0, #1
  402bf8:	bf0e      	itee	eq
  402bfa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  402bfe:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  402c02:	6520      	strne	r0, [r4, #80]	; 0x50
  402c04:	81a3      	strh	r3, [r4, #12]
  402c06:	bd10      	pop	{r4, pc}

00402c08 <__sclose>:
  402c08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  402c0c:	f000 b868 	b.w	402ce0 <_close_r>

00402c10 <_write_r>:
  402c10:	b570      	push	{r4, r5, r6, lr}
  402c12:	460d      	mov	r5, r1
  402c14:	4c08      	ldr	r4, [pc, #32]	; (402c38 <_write_r+0x28>)
  402c16:	4611      	mov	r1, r2
  402c18:	4606      	mov	r6, r0
  402c1a:	461a      	mov	r2, r3
  402c1c:	4628      	mov	r0, r5
  402c1e:	2300      	movs	r3, #0
  402c20:	6023      	str	r3, [r4, #0]
  402c22:	f7fd fad1 	bl	4001c8 <_write>
  402c26:	1c43      	adds	r3, r0, #1
  402c28:	d000      	beq.n	402c2c <_write_r+0x1c>
  402c2a:	bd70      	pop	{r4, r5, r6, pc}
  402c2c:	6823      	ldr	r3, [r4, #0]
  402c2e:	2b00      	cmp	r3, #0
  402c30:	d0fb      	beq.n	402c2a <_write_r+0x1a>
  402c32:	6033      	str	r3, [r6, #0]
  402c34:	bd70      	pop	{r4, r5, r6, pc}
  402c36:	bf00      	nop
  402c38:	20000944 	.word	0x20000944

00402c3c <__register_exitproc>:
  402c3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  402c40:	4c25      	ldr	r4, [pc, #148]	; (402cd8 <__register_exitproc+0x9c>)
  402c42:	6825      	ldr	r5, [r4, #0]
  402c44:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
  402c48:	4606      	mov	r6, r0
  402c4a:	4688      	mov	r8, r1
  402c4c:	4692      	mov	sl, r2
  402c4e:	4699      	mov	r9, r3
  402c50:	b3c4      	cbz	r4, 402cc4 <__register_exitproc+0x88>
  402c52:	6860      	ldr	r0, [r4, #4]
  402c54:	281f      	cmp	r0, #31
  402c56:	dc17      	bgt.n	402c88 <__register_exitproc+0x4c>
  402c58:	1c43      	adds	r3, r0, #1
  402c5a:	b176      	cbz	r6, 402c7a <__register_exitproc+0x3e>
  402c5c:	eb04 0580 	add.w	r5, r4, r0, lsl #2
  402c60:	2201      	movs	r2, #1
  402c62:	f8c5 a088 	str.w	sl, [r5, #136]	; 0x88
  402c66:	f8d4 1188 	ldr.w	r1, [r4, #392]	; 0x188
  402c6a:	4082      	lsls	r2, r0
  402c6c:	4311      	orrs	r1, r2
  402c6e:	2e02      	cmp	r6, #2
  402c70:	f8c4 1188 	str.w	r1, [r4, #392]	; 0x188
  402c74:	f8c5 9108 	str.w	r9, [r5, #264]	; 0x108
  402c78:	d01e      	beq.n	402cb8 <__register_exitproc+0x7c>
  402c7a:	3002      	adds	r0, #2
  402c7c:	6063      	str	r3, [r4, #4]
  402c7e:	f844 8020 	str.w	r8, [r4, r0, lsl #2]
  402c82:	2000      	movs	r0, #0
  402c84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402c88:	4b14      	ldr	r3, [pc, #80]	; (402cdc <__register_exitproc+0xa0>)
  402c8a:	b303      	cbz	r3, 402cce <__register_exitproc+0x92>
  402c8c:	f44f 70c8 	mov.w	r0, #400	; 0x190
  402c90:	f7ff f964 	bl	401f5c <malloc>
  402c94:	4604      	mov	r4, r0
  402c96:	b1d0      	cbz	r0, 402cce <__register_exitproc+0x92>
  402c98:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
  402c9c:	2700      	movs	r7, #0
  402c9e:	e880 0088 	stmia.w	r0, {r3, r7}
  402ca2:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  402ca6:	4638      	mov	r0, r7
  402ca8:	2301      	movs	r3, #1
  402caa:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
  402cae:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
  402cb2:	2e00      	cmp	r6, #0
  402cb4:	d0e1      	beq.n	402c7a <__register_exitproc+0x3e>
  402cb6:	e7d1      	b.n	402c5c <__register_exitproc+0x20>
  402cb8:	f8d4 118c 	ldr.w	r1, [r4, #396]	; 0x18c
  402cbc:	430a      	orrs	r2, r1
  402cbe:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
  402cc2:	e7da      	b.n	402c7a <__register_exitproc+0x3e>
  402cc4:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
  402cc8:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  402ccc:	e7c1      	b.n	402c52 <__register_exitproc+0x16>
  402cce:	f04f 30ff 	mov.w	r0, #4294967295
  402cd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402cd6:	bf00      	nop
  402cd8:	00402eac 	.word	0x00402eac
  402cdc:	00401f5d 	.word	0x00401f5d

00402ce0 <_close_r>:
  402ce0:	b538      	push	{r3, r4, r5, lr}
  402ce2:	4c07      	ldr	r4, [pc, #28]	; (402d00 <_close_r+0x20>)
  402ce4:	2300      	movs	r3, #0
  402ce6:	4605      	mov	r5, r0
  402ce8:	4608      	mov	r0, r1
  402cea:	6023      	str	r3, [r4, #0]
  402cec:	f7fe f84e 	bl	400d8c <_close>
  402cf0:	1c43      	adds	r3, r0, #1
  402cf2:	d000      	beq.n	402cf6 <_close_r+0x16>
  402cf4:	bd38      	pop	{r3, r4, r5, pc}
  402cf6:	6823      	ldr	r3, [r4, #0]
  402cf8:	2b00      	cmp	r3, #0
  402cfa:	d0fb      	beq.n	402cf4 <_close_r+0x14>
  402cfc:	602b      	str	r3, [r5, #0]
  402cfe:	bd38      	pop	{r3, r4, r5, pc}
  402d00:	20000944 	.word	0x20000944

00402d04 <_fclose_r>:
  402d04:	2900      	cmp	r1, #0
  402d06:	d03d      	beq.n	402d84 <_fclose_r+0x80>
  402d08:	b570      	push	{r4, r5, r6, lr}
  402d0a:	4605      	mov	r5, r0
  402d0c:	460c      	mov	r4, r1
  402d0e:	b108      	cbz	r0, 402d14 <_fclose_r+0x10>
  402d10:	6b83      	ldr	r3, [r0, #56]	; 0x38
  402d12:	b37b      	cbz	r3, 402d74 <_fclose_r+0x70>
  402d14:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  402d18:	b90b      	cbnz	r3, 402d1e <_fclose_r+0x1a>
  402d1a:	2000      	movs	r0, #0
  402d1c:	bd70      	pop	{r4, r5, r6, pc}
  402d1e:	4621      	mov	r1, r4
  402d20:	4628      	mov	r0, r5
  402d22:	f7fe fc6f 	bl	401604 <__sflush_r>
  402d26:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  402d28:	4606      	mov	r6, r0
  402d2a:	b133      	cbz	r3, 402d3a <_fclose_r+0x36>
  402d2c:	69e1      	ldr	r1, [r4, #28]
  402d2e:	4628      	mov	r0, r5
  402d30:	4798      	blx	r3
  402d32:	2800      	cmp	r0, #0
  402d34:	bfb8      	it	lt
  402d36:	f04f 36ff 	movlt.w	r6, #4294967295
  402d3a:	89a3      	ldrh	r3, [r4, #12]
  402d3c:	061b      	lsls	r3, r3, #24
  402d3e:	d41c      	bmi.n	402d7a <_fclose_r+0x76>
  402d40:	6b21      	ldr	r1, [r4, #48]	; 0x30
  402d42:	b141      	cbz	r1, 402d56 <_fclose_r+0x52>
  402d44:	f104 0340 	add.w	r3, r4, #64	; 0x40
  402d48:	4299      	cmp	r1, r3
  402d4a:	d002      	beq.n	402d52 <_fclose_r+0x4e>
  402d4c:	4628      	mov	r0, r5
  402d4e:	f7fe fdfd 	bl	40194c <_free_r>
  402d52:	2300      	movs	r3, #0
  402d54:	6323      	str	r3, [r4, #48]	; 0x30
  402d56:	6c61      	ldr	r1, [r4, #68]	; 0x44
  402d58:	b121      	cbz	r1, 402d64 <_fclose_r+0x60>
  402d5a:	4628      	mov	r0, r5
  402d5c:	f7fe fdf6 	bl	40194c <_free_r>
  402d60:	2300      	movs	r3, #0
  402d62:	6463      	str	r3, [r4, #68]	; 0x44
  402d64:	f7fe fd8c 	bl	401880 <__sfp_lock_acquire>
  402d68:	2300      	movs	r3, #0
  402d6a:	81a3      	strh	r3, [r4, #12]
  402d6c:	f7fe fd8a 	bl	401884 <__sfp_lock_release>
  402d70:	4630      	mov	r0, r6
  402d72:	bd70      	pop	{r4, r5, r6, pc}
  402d74:	f7fe fd7e 	bl	401874 <__sinit>
  402d78:	e7cc      	b.n	402d14 <_fclose_r+0x10>
  402d7a:	6921      	ldr	r1, [r4, #16]
  402d7c:	4628      	mov	r0, r5
  402d7e:	f7fe fde5 	bl	40194c <_free_r>
  402d82:	e7dd      	b.n	402d40 <_fclose_r+0x3c>
  402d84:	2000      	movs	r0, #0
  402d86:	4770      	bx	lr

00402d88 <_fstat_r>:
  402d88:	b538      	push	{r3, r4, r5, lr}
  402d8a:	460b      	mov	r3, r1
  402d8c:	4c07      	ldr	r4, [pc, #28]	; (402dac <_fstat_r+0x24>)
  402d8e:	4605      	mov	r5, r0
  402d90:	4611      	mov	r1, r2
  402d92:	4618      	mov	r0, r3
  402d94:	2300      	movs	r3, #0
  402d96:	6023      	str	r3, [r4, #0]
  402d98:	f7fd fffc 	bl	400d94 <_fstat>
  402d9c:	1c43      	adds	r3, r0, #1
  402d9e:	d000      	beq.n	402da2 <_fstat_r+0x1a>
  402da0:	bd38      	pop	{r3, r4, r5, pc}
  402da2:	6823      	ldr	r3, [r4, #0]
  402da4:	2b00      	cmp	r3, #0
  402da6:	d0fb      	beq.n	402da0 <_fstat_r+0x18>
  402da8:	602b      	str	r3, [r5, #0]
  402daa:	bd38      	pop	{r3, r4, r5, pc}
  402dac:	20000944 	.word	0x20000944

00402db0 <_isatty_r>:
  402db0:	b538      	push	{r3, r4, r5, lr}
  402db2:	4c07      	ldr	r4, [pc, #28]	; (402dd0 <_isatty_r+0x20>)
  402db4:	2300      	movs	r3, #0
  402db6:	4605      	mov	r5, r0
  402db8:	4608      	mov	r0, r1
  402dba:	6023      	str	r3, [r4, #0]
  402dbc:	f7fd fff0 	bl	400da0 <_isatty>
  402dc0:	1c43      	adds	r3, r0, #1
  402dc2:	d000      	beq.n	402dc6 <_isatty_r+0x16>
  402dc4:	bd38      	pop	{r3, r4, r5, pc}
  402dc6:	6823      	ldr	r3, [r4, #0]
  402dc8:	2b00      	cmp	r3, #0
  402dca:	d0fb      	beq.n	402dc4 <_isatty_r+0x14>
  402dcc:	602b      	str	r3, [r5, #0]
  402dce:	bd38      	pop	{r3, r4, r5, pc}
  402dd0:	20000944 	.word	0x20000944

00402dd4 <_lseek_r>:
  402dd4:	b570      	push	{r4, r5, r6, lr}
  402dd6:	460d      	mov	r5, r1
  402dd8:	4c08      	ldr	r4, [pc, #32]	; (402dfc <_lseek_r+0x28>)
  402dda:	4611      	mov	r1, r2
  402ddc:	4606      	mov	r6, r0
  402dde:	461a      	mov	r2, r3
  402de0:	4628      	mov	r0, r5
  402de2:	2300      	movs	r3, #0
  402de4:	6023      	str	r3, [r4, #0]
  402de6:	f7fd ffdd 	bl	400da4 <_lseek>
  402dea:	1c43      	adds	r3, r0, #1
  402dec:	d000      	beq.n	402df0 <_lseek_r+0x1c>
  402dee:	bd70      	pop	{r4, r5, r6, pc}
  402df0:	6823      	ldr	r3, [r4, #0]
  402df2:	2b00      	cmp	r3, #0
  402df4:	d0fb      	beq.n	402dee <_lseek_r+0x1a>
  402df6:	6033      	str	r3, [r6, #0]
  402df8:	bd70      	pop	{r4, r5, r6, pc}
  402dfa:	bf00      	nop
  402dfc:	20000944 	.word	0x20000944

00402e00 <_read_r>:
  402e00:	b570      	push	{r4, r5, r6, lr}
  402e02:	460d      	mov	r5, r1
  402e04:	4c08      	ldr	r4, [pc, #32]	; (402e28 <_read_r+0x28>)
  402e06:	4611      	mov	r1, r2
  402e08:	4606      	mov	r6, r0
  402e0a:	461a      	mov	r2, r3
  402e0c:	4628      	mov	r0, r5
  402e0e:	2300      	movs	r3, #0
  402e10:	6023      	str	r3, [r4, #0]
  402e12:	f7fd f9bb 	bl	40018c <_read>
  402e16:	1c43      	adds	r3, r0, #1
  402e18:	d000      	beq.n	402e1c <_read_r+0x1c>
  402e1a:	bd70      	pop	{r4, r5, r6, pc}
  402e1c:	6823      	ldr	r3, [r4, #0]
  402e1e:	2b00      	cmp	r3, #0
  402e20:	d0fb      	beq.n	402e1a <_read_r+0x1a>
  402e22:	6033      	str	r3, [r6, #0]
  402e24:	bd70      	pop	{r4, r5, r6, pc}
  402e26:	bf00      	nop
  402e28:	20000944 	.word	0x20000944
  402e2c:	00000001 	.word	0x00000001
  402e30:	00000002 	.word	0x00000002
  402e34:	00000004 	.word	0x00000004
  402e38:	00000008 	.word	0x00000008
  402e3c:	00000010 	.word	0x00000010
  402e40:	00000020 	.word	0x00000020
  402e44:	00000040 	.word	0x00000040
  402e48:	00000080 	.word	0x00000080
  402e4c:	00000100 	.word	0x00000100
  402e50:	00000200 	.word	0x00000200
  402e54:	00000400 	.word	0x00000400
  402e58:	50202d2d 	.word	0x50202d2d
  402e5c:	4c204d57 	.word	0x4c204d57
  402e60:	45204445 	.word	0x45204445
  402e64:	706d6178 	.word	0x706d6178
  402e68:	2d20656c 	.word	0x2d20656c
  402e6c:	2d0a0d2d 	.word	0x2d0a0d2d
  402e70:	4153202d 	.word	0x4153202d
  402e74:	2d53344d 	.word	0x2d53344d
  402e78:	20324b45 	.word	0x20324b45
  402e7c:	0a0d2d2d 	.word	0x0a0d2d2d
  402e80:	43202d2d 	.word	0x43202d2d
  402e84:	69706d6f 	.word	0x69706d6f
  402e88:	3a64656c 	.word	0x3a64656c
  402e8c:	72704120 	.word	0x72704120
  402e90:	20333220 	.word	0x20333220
  402e94:	38313032 	.word	0x38313032
  402e98:	3a323220 	.word	0x3a323220
  402e9c:	303a3132 	.word	0x303a3132
  402ea0:	2d2d2039 	.word	0x2d2d2039
  402ea4:	0000000d 	.word	0x0000000d
  402ea8:	00000043 	.word	0x00000043

00402eac <_global_impure_ptr>:
  402eac:	20000008 0000000a                       ... ....

00402eb4 <_init>:
  402eb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  402eb6:	bf00      	nop
  402eb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
  402eba:	bc08      	pop	{r3}
  402ebc:	469e      	mov	lr, r3
  402ebe:	4770      	bx	lr

00402ec0 <__init_array_start>:
  402ec0:	004015e5 	.word	0x004015e5

00402ec4 <__frame_dummy_init_array_entry>:
  402ec4:	004000f1                                ..@.

00402ec8 <_fini>:
  402ec8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  402eca:	bf00      	nop
  402ecc:	bcf8      	pop	{r3, r4, r5, r6, r7}
  402ece:	bc08      	pop	{r3}
  402ed0:	469e      	mov	lr, r3
  402ed2:	4770      	bx	lr

00402ed4 <__fini_array_start>:
  402ed4:	004000cd 	.word	0x004000cd
