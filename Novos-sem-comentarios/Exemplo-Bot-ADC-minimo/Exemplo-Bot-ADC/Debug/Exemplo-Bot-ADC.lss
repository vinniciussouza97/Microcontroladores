
Exemplo-Bot-ADC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00006fa8  00400000  00400000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00406fa8  00406fa8  00016fa8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     0000088c  20000000  00406fb0  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          000004b0  2000088c  0040783c  0002088c  2**2
                  ALLOC
  4 .stack        00003004  20000d3c  00407cec  0002088c  2**0
                  ALLOC
  5 .ARM.attributes 0000002a  00000000  00000000  0002088c  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  000208b6  2**0
                  CONTENTS, READONLY
  7 .debug_info   0000dc33  00000000  00000000  0002090f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000020a5  00000000  00000000  0002e542  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000604b  00000000  00000000  000305e7  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 000009f8  00000000  00000000  00036632  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000009b0  00000000  00000000  0003702a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  000072a0  00000000  00000000  000379da  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000c239  00000000  00000000  0003ec7a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000595f6  00000000  00000000  0004aeb3  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00001f08  00000000  00000000  000a44ac  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <_sfixed>:
  400000:	20003d40 	.word	0x20003d40
  400004:	00401555 	.word	0x00401555
  400008:	00401551 	.word	0x00401551
  40000c:	00401551 	.word	0x00401551
  400010:	00401551 	.word	0x00401551
  400014:	00401551 	.word	0x00401551
  400018:	00401551 	.word	0x00401551
	...
  40002c:	00401551 	.word	0x00401551
  400030:	00401551 	.word	0x00401551
  400034:	00000000 	.word	0x00000000
  400038:	00401551 	.word	0x00401551
  40003c:	00401551 	.word	0x00401551
  400040:	00401551 	.word	0x00401551
  400044:	00401551 	.word	0x00401551
  400048:	00401551 	.word	0x00401551
  40004c:	00401551 	.word	0x00401551
  400050:	00401551 	.word	0x00401551
  400054:	00401551 	.word	0x00401551
  400058:	00401551 	.word	0x00401551
  40005c:	00401551 	.word	0x00401551
  400060:	00401551 	.word	0x00401551
  400064:	00401551 	.word	0x00401551
  400068:	00000000 	.word	0x00000000
  40006c:	004010b9 	.word	0x004010b9
  400070:	004010cd 	.word	0x004010cd
  400074:	004010e1 	.word	0x004010e1
  400078:	00401551 	.word	0x00401551
  40007c:	00401551 	.word	0x00401551
	...
  400088:	00401551 	.word	0x00401551
  40008c:	00401551 	.word	0x00401551
  400090:	00401551 	.word	0x00401551
  400094:	00401551 	.word	0x00401551
  400098:	00401551 	.word	0x00401551
  40009c:	0040185d 	.word	0x0040185d
  4000a0:	00401551 	.word	0x00401551
  4000a4:	00401551 	.word	0x00401551
  4000a8:	00401551 	.word	0x00401551
  4000ac:	00401551 	.word	0x00401551
  4000b0:	00401551 	.word	0x00401551
  4000b4:	004017f5 	.word	0x004017f5
  4000b8:	00401551 	.word	0x00401551
  4000bc:	00401551 	.word	0x00401551
  4000c0:	00401551 	.word	0x00401551
  4000c4:	00401551 	.word	0x00401551
  4000c8:	00401551 	.word	0x00401551

004000cc <__do_global_dtors_aux>:
  4000cc:	b510      	push	{r4, lr}
  4000ce:	4c05      	ldr	r4, [pc, #20]	; (4000e4 <__do_global_dtors_aux+0x18>)
  4000d0:	7823      	ldrb	r3, [r4, #0]
  4000d2:	b933      	cbnz	r3, 4000e2 <__do_global_dtors_aux+0x16>
  4000d4:	4b04      	ldr	r3, [pc, #16]	; (4000e8 <__do_global_dtors_aux+0x1c>)
  4000d6:	b113      	cbz	r3, 4000de <__do_global_dtors_aux+0x12>
  4000d8:	4804      	ldr	r0, [pc, #16]	; (4000ec <__do_global_dtors_aux+0x20>)
  4000da:	f3af 8000 	nop.w
  4000de:	2301      	movs	r3, #1
  4000e0:	7023      	strb	r3, [r4, #0]
  4000e2:	bd10      	pop	{r4, pc}
  4000e4:	2000088c 	.word	0x2000088c
  4000e8:	00000000 	.word	0x00000000
  4000ec:	00406fb0 	.word	0x00406fb0

004000f0 <frame_dummy>:
  4000f0:	4b08      	ldr	r3, [pc, #32]	; (400114 <frame_dummy+0x24>)
  4000f2:	b510      	push	{r4, lr}
  4000f4:	b11b      	cbz	r3, 4000fe <frame_dummy+0xe>
  4000f6:	4908      	ldr	r1, [pc, #32]	; (400118 <frame_dummy+0x28>)
  4000f8:	4808      	ldr	r0, [pc, #32]	; (40011c <frame_dummy+0x2c>)
  4000fa:	f3af 8000 	nop.w
  4000fe:	4808      	ldr	r0, [pc, #32]	; (400120 <frame_dummy+0x30>)
  400100:	6803      	ldr	r3, [r0, #0]
  400102:	b903      	cbnz	r3, 400106 <frame_dummy+0x16>
  400104:	bd10      	pop	{r4, pc}
  400106:	4b07      	ldr	r3, [pc, #28]	; (400124 <frame_dummy+0x34>)
  400108:	2b00      	cmp	r3, #0
  40010a:	d0fb      	beq.n	400104 <frame_dummy+0x14>
  40010c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  400110:	4718      	bx	r3
  400112:	bf00      	nop
  400114:	00000000 	.word	0x00000000
  400118:	20000890 	.word	0x20000890
  40011c:	00406fb0 	.word	0x00406fb0
  400120:	00406fb0 	.word	0x00406fb0
  400124:	00000000 	.word	0x00000000

00400128 <aat31xx_set_backlight>:
 * \param ul_level backlight level.
 *
 * \note pin BOARD_AAT31XX_SET_GPIO must be configured before calling aat31xx_set_backlight.
 */
void aat31xx_set_backlight(uint32_t ul_level)
{
  400128:	b470      	push	{r4, r5, r6}
  40012a:	b083      	sub	sp, #12
	volatile uint32_t ul_delay;
	uint32_t i;

#ifdef CONF_BOARD_AAT3155
	ul_level = AAT31XX_MAX_BACKLIGHT_LEVEL - ul_level + 1;
  40012c:	f1c0 0011 	rsb	r0, r0, #17
#ifdef CONF_BOARD_AAT3193
	ul_level = AAT31XX_MAX_BACKLIGHT_LEVEL - ul_level + 1;
#endif

	/* Ensure valid level */
	ul_level = (ul_level > AAT31XX_MAX_BACKLIGHT_LEVEL) ? AAT31XX_MAX_BACKLIGHT_LEVEL : ul_level;
  400130:	2810      	cmp	r0, #16
  400132:	bf28      	it	cs
  400134:	2010      	movcs	r0, #16
	ul_level = (ul_level < AAT31XX_MIN_BACKLIGHT_LEVEL) ? AAT31XX_MIN_BACKLIGHT_LEVEL : ul_level;
  400136:	2800      	cmp	r0, #0
  400138:	bf08      	it	eq
  40013a:	2001      	moveq	r0, #1
 * \param ul_level backlight level.
 *
 * \note pin BOARD_AAT31XX_SET_GPIO must be configured before calling aat31xx_set_backlight.
 */
void aat31xx_set_backlight(uint32_t ul_level)
{
  40013c:	2100      	movs	r1, #0
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  40013e:	4e10      	ldr	r6, [pc, #64]	; (400180 <aat31xx_set_backlight+0x58>)
  400140:	f44f 5500 	mov.w	r5, #8192	; 0x2000
	ul_level = (ul_level < AAT31XX_MIN_BACKLIGHT_LEVEL) ? AAT31XX_MIN_BACKLIGHT_LEVEL : ul_level;

	/* Set new backlight level */
	for (i = 0; i < ul_level; i++) {
		ioport_set_pin_level(BOARD_AAT31XX_SET_GPIO, IOPORT_PIN_LEVEL_LOW);
		ul_delay = DELAY_PULSE;
  400144:	2418      	movs	r4, #24
  400146:	6375      	str	r5, [r6, #52]	; 0x34
  400148:	9401      	str	r4, [sp, #4]
		while (ul_delay--) {
  40014a:	9b01      	ldr	r3, [sp, #4]
  40014c:	1e5a      	subs	r2, r3, #1
  40014e:	9201      	str	r2, [sp, #4]
  400150:	2b00      	cmp	r3, #0
  400152:	d1fa      	bne.n	40014a <aat31xx_set_backlight+0x22>
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  400154:	6335      	str	r5, [r6, #48]	; 0x30
		}

		ioport_set_pin_level(BOARD_AAT31XX_SET_GPIO, IOPORT_PIN_LEVEL_HIGH);

		ul_delay = DELAY_PULSE;
  400156:	9401      	str	r4, [sp, #4]
		while (ul_delay--) {
  400158:	9b01      	ldr	r3, [sp, #4]
  40015a:	1e5a      	subs	r2, r3, #1
  40015c:	9201      	str	r2, [sp, #4]
  40015e:	2b00      	cmp	r3, #0
  400160:	d1fa      	bne.n	400158 <aat31xx_set_backlight+0x30>
	/* Ensure valid level */
	ul_level = (ul_level > AAT31XX_MAX_BACKLIGHT_LEVEL) ? AAT31XX_MAX_BACKLIGHT_LEVEL : ul_level;
	ul_level = (ul_level < AAT31XX_MIN_BACKLIGHT_LEVEL) ? AAT31XX_MIN_BACKLIGHT_LEVEL : ul_level;

	/* Set new backlight level */
	for (i = 0; i < ul_level; i++) {
  400162:	3101      	adds	r1, #1
  400164:	4281      	cmp	r1, r0
  400166:	d3ee      	bcc.n	400146 <aat31xx_set_backlight+0x1e>
		ul_delay = DELAY_PULSE;
		while (ul_delay--) {
		}
	}

	ul_delay = DELAY_ENABLE;
  400168:	f44f 3300 	mov.w	r3, #131072	; 0x20000
  40016c:	9301      	str	r3, [sp, #4]
	while (ul_delay--) {
  40016e:	9b01      	ldr	r3, [sp, #4]
  400170:	1e5a      	subs	r2, r3, #1
  400172:	9201      	str	r2, [sp, #4]
  400174:	2b00      	cmp	r3, #0
  400176:	d1fa      	bne.n	40016e <aat31xx_set_backlight+0x46>
	}
}
  400178:	b003      	add	sp, #12
  40017a:	bc70      	pop	{r4, r5, r6}
  40017c:	4770      	bx	lr
  40017e:	bf00      	nop
  400180:	400e1200 	.word	0x400e1200

00400184 <aat31xx_disable_backlight>:

/**
 * \brief Switch off backlight.
 */
void aat31xx_disable_backlight(void)
{
  400184:	b082      	sub	sp, #8
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  400186:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  40018a:	4b06      	ldr	r3, [pc, #24]	; (4001a4 <aat31xx_disable_backlight+0x20>)
  40018c:	635a      	str	r2, [r3, #52]	; 0x34
	volatile uint32_t ul_delay;

	ioport_set_pin_level(BOARD_AAT31XX_SET_GPIO, IOPORT_PIN_LEVEL_LOW);

	ul_delay = DELAY_DISABLE;
  40018e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
  400192:	9301      	str	r3, [sp, #4]
	while (ul_delay--) {
  400194:	9b01      	ldr	r3, [sp, #4]
  400196:	1e5a      	subs	r2, r3, #1
  400198:	9201      	str	r2, [sp, #4]
  40019a:	2b00      	cmp	r3, #0
  40019c:	d1fa      	bne.n	400194 <aat31xx_disable_backlight+0x10>
	}
}
  40019e:	b002      	add	sp, #8
  4001a0:	4770      	bx	lr
  4001a2:	bf00      	nop
  4001a4:	400e1200 	.word	0x400e1200

004001a8 <smc_set_setup_timing>:
 * \param ul_setup_timing Setup timing for NWE, NCS, NRD.
 */
void smc_set_setup_timing(Smc *p_smc, uint32_t ul_cs,
		uint32_t ul_setup_timing)
{
	p_smc->SMC_CS_NUMBER[ul_cs].SMC_SETUP = ul_setup_timing;
  4001a8:	0109      	lsls	r1, r1, #4
  4001aa:	5042      	str	r2, [r0, r1]
  4001ac:	4770      	bx	lr
  4001ae:	bf00      	nop

004001b0 <smc_set_pulse_timing>:
 * \param ul_pulse_timing Pulse timing for NWE,NCS,NRD.
 */
void smc_set_pulse_timing(Smc *p_smc, uint32_t ul_cs,
		uint32_t ul_pulse_timing)
{
	p_smc->SMC_CS_NUMBER[ul_cs].SMC_PULSE = ul_pulse_timing;
  4001b0:	eb00 1101 	add.w	r1, r0, r1, lsl #4
  4001b4:	604a      	str	r2, [r1, #4]
  4001b6:	4770      	bx	lr

004001b8 <smc_set_cycle_timing>:
 * \param ul_cycle_timing Cycle timing for NWE and NRD.
 */
void smc_set_cycle_timing(Smc *p_smc, uint32_t ul_cs,
		uint32_t ul_cycle_timing)
{
	p_smc->SMC_CS_NUMBER[ul_cs].SMC_CYCLE = ul_cycle_timing;
  4001b8:	eb00 1101 	add.w	r1, r0, r1, lsl #4
  4001bc:	608a      	str	r2, [r1, #8]
  4001be:	4770      	bx	lr

004001c0 <smc_set_mode>:
 * \param ul_cs Chip select number to be set.
 * \param ul_mode SMC mode.
 */
void smc_set_mode(Smc *p_smc, uint32_t ul_cs, uint32_t ul_mode)
{
	p_smc->SMC_CS_NUMBER[ul_cs].SMC_MODE = ul_mode;
  4001c0:	eb00 1101 	add.w	r1, r0, r1, lsl #4
  4001c4:	60ca      	str	r2, [r1, #12]
  4001c6:	4770      	bx	lr

004001c8 <ili93xx_write_ram_prepare>:
/**
 * \brief Prepare to write GRAM data for ili93xx.
 */
static void ili93xx_write_ram_prepare(void)
{
	if (g_uc_device_type == DEVICE_TYPE_ILI9325) {
  4001c8:	4b0a      	ldr	r3, [pc, #40]	; (4001f4 <ili93xx_write_ram_prepare+0x2c>)
  4001ca:	781b      	ldrb	r3, [r3, #0]
  4001cc:	2b01      	cmp	r3, #1
  4001ce:	d106      	bne.n	4001de <ili93xx_write_ram_prepare+0x16>
/** Define EBI access for ILI93xx 8-bit System Interface.*/
#if defined(BOARD_ILI93XX_ADDR) && defined (BOARD_ILI93XX_RS)
static inline void LCD_IR(uint8_t lcd_index)
{
	/** ILI93XX index register address */
	*((volatile uint8_t *)(BOARD_ILI93XX_ADDR)) = lcd_index;
  4001d0:	f04f 43c2 	mov.w	r3, #1627389952	; 0x61000000
  4001d4:	2200      	movs	r2, #0
  4001d6:	701a      	strb	r2, [r3, #0]
  4001d8:	2222      	movs	r2, #34	; 0x22
  4001da:	701a      	strb	r2, [r3, #0]
  4001dc:	4770      	bx	lr
		/** Write Data to GRAM (R22h) */
		LCD_IR(0);
		LCD_IR(ILI9325_GRAM_DATA_REG);
	} else if (g_uc_device_type == DEVICE_TYPE_ILI9341) {
  4001de:	2b02      	cmp	r3, #2
  4001e0:	d107      	bne.n	4001f2 <ili93xx_write_ram_prepare+0x2a>
  4001e2:	f04f 43c2 	mov.w	r3, #1627389952	; 0x61000000
  4001e6:	222c      	movs	r2, #44	; 0x2c
  4001e8:	701a      	strb	r2, [r3, #0]
  4001ea:	2200      	movs	r2, #0
  4001ec:	701a      	strb	r2, [r3, #0]
  4001ee:	223c      	movs	r2, #60	; 0x3c
  4001f0:	701a      	strb	r2, [r3, #0]
  4001f2:	4770      	bx	lr
  4001f4:	20000c68 	.word	0x20000c68

004001f8 <ili93xx_write_ram>:
 *
 * \param ul_color 24-bits RGB color.
 */
static void ili93xx_write_ram(ili93xx_color_t ul_color)
{
	LCD_WD((ul_color >> 16) & 0xFF);
  4001f8:	f3c0 4207 	ubfx	r2, r0, #16, #8
}

static inline void LCD_WD(uint8_t lcd_data)
{
	*((volatile uint8_t *)((BOARD_ILI93XX_ADDR) | (BOARD_ILI93XX_RS))) =
  4001fc:	4b03      	ldr	r3, [pc, #12]	; (40020c <ili93xx_write_ram+0x14>)
  4001fe:	701a      	strb	r2, [r3, #0]
	LCD_WD((ul_color >> 8) & 0xFF);
  400200:	f3c0 2207 	ubfx	r2, r0, #8, #8
  400204:	701a      	strb	r2, [r3, #0]
	LCD_WD(ul_color & 0xFF);
  400206:	b2c0      	uxtb	r0, r0
  400208:	7018      	strb	r0, [r3, #0]
  40020a:	4770      	bx	lr
  40020c:	61000002 	.word	0x61000002

00400210 <ili93xx_write_ram_buffer>:
 * \param p_ul_buf data buffer.
 * \param ul_size size in pixels.
 */
static void ili93xx_write_ram_buffer(const ili93xx_color_t *p_ul_buf,
		uint32_t ul_size)
{
  400210:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  400214:	4607      	mov	r7, r0
  400216:	4688      	mov	r8, r1
	uint32_t ul_addr;
	for (ul_addr = 0; ul_addr < (ul_size - ul_size % 8); ul_addr += 8) {
  400218:	f031 0907 	bics.w	r9, r1, #7
  40021c:	d018      	beq.n	400250 <ili93xx_write_ram_buffer+0x40>
  40021e:	4604      	mov	r4, r0
  400220:	2600      	movs	r6, #0
		ili93xx_write_ram(p_ul_buf[ul_addr]);
  400222:	4d12      	ldr	r5, [pc, #72]	; (40026c <ili93xx_write_ram_buffer+0x5c>)
  400224:	f857 0026 	ldr.w	r0, [r7, r6, lsl #2]
  400228:	47a8      	blx	r5
		ili93xx_write_ram(p_ul_buf[ul_addr + 1]);
  40022a:	6860      	ldr	r0, [r4, #4]
  40022c:	47a8      	blx	r5
		ili93xx_write_ram(p_ul_buf[ul_addr + 2]);
  40022e:	68a0      	ldr	r0, [r4, #8]
  400230:	47a8      	blx	r5
		ili93xx_write_ram(p_ul_buf[ul_addr + 3]);
  400232:	68e0      	ldr	r0, [r4, #12]
  400234:	47a8      	blx	r5
		ili93xx_write_ram(p_ul_buf[ul_addr + 4]);
  400236:	6920      	ldr	r0, [r4, #16]
  400238:	47a8      	blx	r5
		ili93xx_write_ram(p_ul_buf[ul_addr + 5]);
  40023a:	6960      	ldr	r0, [r4, #20]
  40023c:	47a8      	blx	r5
		ili93xx_write_ram(p_ul_buf[ul_addr + 6]);
  40023e:	69a0      	ldr	r0, [r4, #24]
  400240:	47a8      	blx	r5
		ili93xx_write_ram(p_ul_buf[ul_addr + 7]);
  400242:	69e0      	ldr	r0, [r4, #28]
  400244:	47a8      	blx	r5
 */
static void ili93xx_write_ram_buffer(const ili93xx_color_t *p_ul_buf,
		uint32_t ul_size)
{
	uint32_t ul_addr;
	for (ul_addr = 0; ul_addr < (ul_size - ul_size % 8); ul_addr += 8) {
  400246:	3608      	adds	r6, #8
  400248:	3420      	adds	r4, #32
  40024a:	454e      	cmp	r6, r9
  40024c:	d3ea      	bcc.n	400224 <ili93xx_write_ram_buffer+0x14>
  40024e:	e000      	b.n	400252 <ili93xx_write_ram_buffer+0x42>
  400250:	2600      	movs	r6, #0
		ili93xx_write_ram(p_ul_buf[ul_addr + 4]);
		ili93xx_write_ram(p_ul_buf[ul_addr + 5]);
		ili93xx_write_ram(p_ul_buf[ul_addr + 6]);
		ili93xx_write_ram(p_ul_buf[ul_addr + 7]);
	}
	for (; ul_addr < ul_size; ul_addr++) {
  400252:	45b0      	cmp	r8, r6
  400254:	d908      	bls.n	400268 <ili93xx_write_ram_buffer+0x58>
  400256:	eb07 0486 	add.w	r4, r7, r6, lsl #2
		ili93xx_write_ram(p_ul_buf[ul_addr]);
  40025a:	4d04      	ldr	r5, [pc, #16]	; (40026c <ili93xx_write_ram_buffer+0x5c>)
  40025c:	f854 0b04 	ldr.w	r0, [r4], #4
  400260:	47a8      	blx	r5
		ili93xx_write_ram(p_ul_buf[ul_addr + 4]);
		ili93xx_write_ram(p_ul_buf[ul_addr + 5]);
		ili93xx_write_ram(p_ul_buf[ul_addr + 6]);
		ili93xx_write_ram(p_ul_buf[ul_addr + 7]);
	}
	for (; ul_addr < ul_size; ul_addr++) {
  400262:	3601      	adds	r6, #1
  400264:	45b0      	cmp	r8, r6
  400266:	d8f9      	bhi.n	40025c <ili93xx_write_ram_buffer+0x4c>
  400268:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40026c:	004001f9 	.word	0x004001f9

00400270 <ili93xx_write_register_word>:
/** Define EBI access for ILI93xx 8-bit System Interface.*/
#if defined(BOARD_ILI93XX_ADDR) && defined (BOARD_ILI93XX_RS)
static inline void LCD_IR(uint8_t lcd_index)
{
	/** ILI93XX index register address */
	*((volatile uint8_t *)(BOARD_ILI93XX_ADDR)) = lcd_index;
  400270:	f04f 43c2 	mov.w	r3, #1627389952	; 0x61000000
  400274:	2200      	movs	r2, #0
  400276:	701a      	strb	r2, [r3, #0]
  400278:	7018      	strb	r0, [r3, #0]
 */
static void ili93xx_write_register_word(uint8_t uc_reg, uint16_t us_data)
{
	LCD_IR(0);
	LCD_IR(uc_reg);
	LCD_WD((us_data >> 8) & 0xFF);
  40027a:	0a0a      	lsrs	r2, r1, #8
}

static inline void LCD_WD(uint8_t lcd_data)
{
	*((volatile uint8_t *)((BOARD_ILI93XX_ADDR) | (BOARD_ILI93XX_RS))) =
  40027c:	3302      	adds	r3, #2
  40027e:	701a      	strb	r2, [r3, #0]
	LCD_WD(us_data & 0xFF);
  400280:	b2c9      	uxtb	r1, r1
  400282:	7019      	strb	r1, [r3, #0]
  400284:	4770      	bx	lr
  400286:	bf00      	nop

00400288 <ili93xx_write_register>:
 * \param uc_reg register address.
 * \param us_data data to be written.
 */
static void ili93xx_write_register(uint8_t uc_reg, uint8_t *p_data,
		uint8_t uc_datacnt)
{
  400288:	b410      	push	{r4}
/** Define EBI access for ILI93xx 8-bit System Interface.*/
#if defined(BOARD_ILI93XX_ADDR) && defined (BOARD_ILI93XX_RS)
static inline void LCD_IR(uint8_t lcd_index)
{
	/** ILI93XX index register address */
	*((volatile uint8_t *)(BOARD_ILI93XX_ADDR)) = lcd_index;
  40028a:	f04f 43c2 	mov.w	r3, #1627389952	; 0x61000000
  40028e:	2400      	movs	r4, #0
  400290:	701c      	strb	r4, [r3, #0]
  400292:	7018      	strb	r0, [r3, #0]
	LCD_IR(0);
	LCD_IR(uc_reg);
	for (uint8_t i = 0; i < uc_datacnt; i++) {
  400294:	b14a      	cbz	r2, 4002aa <ili93xx_write_register+0x22>
  400296:	1e4b      	subs	r3, r1, #1
  400298:	1e50      	subs	r0, r2, #1
  40029a:	fa51 f180 	uxtab	r1, r1, r0
}

static inline void LCD_WD(uint8_t lcd_data)
{
	*((volatile uint8_t *)((BOARD_ILI93XX_ADDR) | (BOARD_ILI93XX_RS))) =
  40029e:	4804      	ldr	r0, [pc, #16]	; (4002b0 <ili93xx_write_register+0x28>)
		LCD_WD(p_data[i]);
  4002a0:	f813 2f01 	ldrb.w	r2, [r3, #1]!
  4002a4:	7002      	strb	r2, [r0, #0]
static void ili93xx_write_register(uint8_t uc_reg, uint8_t *p_data,
		uint8_t uc_datacnt)
{
	LCD_IR(0);
	LCD_IR(uc_reg);
	for (uint8_t i = 0; i < uc_datacnt; i++) {
  4002a6:	428b      	cmp	r3, r1
  4002a8:	d1fa      	bne.n	4002a0 <ili93xx_write_register+0x18>
		LCD_WD(p_data[i]);
	}
}
  4002aa:	bc10      	pop	{r4}
  4002ac:	4770      	bx	lr
  4002ae:	bf00      	nop
  4002b0:	61000002 	.word	0x61000002

004002b4 <ili93xx_delay>:

/**
 * \brief Delay function.
 */
static void ili93xx_delay(uint32_t ul_ms)
{
  4002b4:	b082      	sub	sp, #8
	volatile uint32_t i;

	for (i = 0; i < ul_ms; i++) {
  4002b6:	2300      	movs	r3, #0
  4002b8:	9301      	str	r3, [sp, #4]
  4002ba:	9b01      	ldr	r3, [sp, #4]
  4002bc:	4298      	cmp	r0, r3
  4002be:	d911      	bls.n	4002e4 <ili93xx_delay+0x30>
		for (i = 0; i < 100000; i++) {
  4002c0:	2100      	movs	r1, #0
  4002c2:	4a09      	ldr	r2, [pc, #36]	; (4002e8 <ili93xx_delay+0x34>)
  4002c4:	9101      	str	r1, [sp, #4]
  4002c6:	9b01      	ldr	r3, [sp, #4]
  4002c8:	4293      	cmp	r3, r2
  4002ca:	d805      	bhi.n	4002d8 <ili93xx_delay+0x24>
  4002cc:	9b01      	ldr	r3, [sp, #4]
  4002ce:	3301      	adds	r3, #1
  4002d0:	9301      	str	r3, [sp, #4]
  4002d2:	9b01      	ldr	r3, [sp, #4]
  4002d4:	4293      	cmp	r3, r2
  4002d6:	d9f9      	bls.n	4002cc <ili93xx_delay+0x18>
 */
static void ili93xx_delay(uint32_t ul_ms)
{
	volatile uint32_t i;

	for (i = 0; i < ul_ms; i++) {
  4002d8:	9b01      	ldr	r3, [sp, #4]
  4002da:	3301      	adds	r3, #1
  4002dc:	9301      	str	r3, [sp, #4]
  4002de:	9b01      	ldr	r3, [sp, #4]
  4002e0:	4283      	cmp	r3, r0
  4002e2:	d3ef      	bcc.n	4002c4 <ili93xx_delay+0x10>
		for (i = 0; i < 100000; i++) {
		}
	}
}
  4002e4:	b002      	add	sp, #8
  4002e6:	4770      	bx	lr
  4002e8:	0001869f 	.word	0x0001869f

004002ec <ili93xx_check_box_coordinates>:
 * \param p_ul_x2 X coordinate of lower-right corner on LCD.
 * \param p_ul_y2 Y coordinate of lower-right corner on LCD.
 */
static void ili93xx_check_box_coordinates(uint32_t *p_ul_x1, uint32_t *p_ul_y1,
		uint32_t *p_ul_x2, uint32_t *p_ul_y2)
{
  4002ec:	b430      	push	{r4, r5}
	uint32_t dw;

	if (*p_ul_x1 >= g_ul_lcd_x_length) {
  4002ee:	4c15      	ldr	r4, [pc, #84]	; (400344 <ili93xx_check_box_coordinates+0x58>)
  4002f0:	6824      	ldr	r4, [r4, #0]
  4002f2:	6805      	ldr	r5, [r0, #0]
  4002f4:	42a5      	cmp	r5, r4
		*p_ul_x1 = g_ul_lcd_x_length - 1;
  4002f6:	bf24      	itt	cs
  4002f8:	f104 35ff 	addcs.w	r5, r4, #4294967295
  4002fc:	6005      	strcs	r5, [r0, #0]
	}

	if (*p_ul_x2 >= g_ul_lcd_x_length) {
  4002fe:	6815      	ldr	r5, [r2, #0]
  400300:	42ac      	cmp	r4, r5
		*p_ul_x2 = g_ul_lcd_x_length - 1;
  400302:	bf9c      	itt	ls
  400304:	f104 34ff 	addls.w	r4, r4, #4294967295
  400308:	6014      	strls	r4, [r2, #0]
	}

	if (*p_ul_y1 >= g_ul_lcd_y_length) {
  40030a:	4c0f      	ldr	r4, [pc, #60]	; (400348 <ili93xx_check_box_coordinates+0x5c>)
  40030c:	6824      	ldr	r4, [r4, #0]
  40030e:	680d      	ldr	r5, [r1, #0]
  400310:	42a5      	cmp	r5, r4
		*p_ul_y1 = g_ul_lcd_y_length - 1;
  400312:	bf24      	itt	cs
  400314:	f104 35ff 	addcs.w	r5, r4, #4294967295
  400318:	600d      	strcs	r5, [r1, #0]
	}

	if (*p_ul_y2 >= g_ul_lcd_y_length) {
  40031a:	681d      	ldr	r5, [r3, #0]
  40031c:	42ac      	cmp	r4, r5
		*p_ul_y2 = g_ul_lcd_y_length - 1;
  40031e:	bf9c      	itt	ls
  400320:	f104 34ff 	addls.w	r4, r4, #4294967295
  400324:	601c      	strls	r4, [r3, #0]
	}

	if (*p_ul_x1 > *p_ul_x2) {
  400326:	6804      	ldr	r4, [r0, #0]
  400328:	6815      	ldr	r5, [r2, #0]
  40032a:	42ac      	cmp	r4, r5
		dw = *p_ul_x1;
		*p_ul_x1 = *p_ul_x2;
  40032c:	bf84      	itt	hi
  40032e:	6005      	strhi	r5, [r0, #0]
		*p_ul_x2 = dw;
  400330:	6014      	strhi	r4, [r2, #0]
	}

	if (*p_ul_y1 > *p_ul_y2) {
  400332:	680a      	ldr	r2, [r1, #0]
  400334:	6818      	ldr	r0, [r3, #0]
  400336:	4282      	cmp	r2, r0
		dw = *p_ul_y1;
		*p_ul_y1 = *p_ul_y2;
  400338:	bf84      	itt	hi
  40033a:	6008      	strhi	r0, [r1, #0]
		*p_ul_y2 = dw;
  40033c:	601a      	strhi	r2, [r3, #0]
	}
}
  40033e:	bc30      	pop	{r4, r5}
  400340:	4770      	bx	lr
  400342:	bf00      	nop
  400344:	20000000 	.word	0x20000000
  400348:	20000004 	.word	0x20000004

0040034c <ili93xx_device_type_identify>:
 *        ILI9341 device ID locates in Read ID4 (RD3h) register.
 *
 * \return 0 if secceed in identifying device; otherwise fails.
 */
uint8_t ili93xx_device_type_identify(void)
{
  40034c:	b082      	sub	sp, #8
/** Define EBI access for ILI93xx 8-bit System Interface.*/
#if defined(BOARD_ILI93XX_ADDR) && defined (BOARD_ILI93XX_RS)
static inline void LCD_IR(uint8_t lcd_index)
{
	/** ILI93XX index register address */
	*((volatile uint8_t *)(BOARD_ILI93XX_ADDR)) = lcd_index;
  40034e:	f04f 43c2 	mov.w	r3, #1627389952	; 0x61000000
  400352:	2200      	movs	r2, #0
  400354:	701a      	strb	r2, [r3, #0]
  400356:	22d3      	movs	r2, #211	; 0xd3
  400358:	701a      	strb	r2, [r3, #0]
																lcd_data;
}

static inline uint8_t LCD_RD(void)
{
	return *((volatile uint8_t *)((BOARD_ILI93XX_ADDR) |(BOARD_ILI93XX_RS)));
  40035a:	3302      	adds	r3, #2
  40035c:	781a      	ldrb	r2, [r3, #0]
{
	LCD_IR(0);
	LCD_IR(uc_reg);

	for (uint8_t i = 0; i < uc_datacnt; i++) {
		p_data[i] = LCD_RD();
  40035e:	f88d 2000 	strb.w	r2, [sp]
  400362:	781a      	ldrb	r2, [r3, #0]
  400364:	f88d 2001 	strb.w	r2, [sp, #1]
  400368:	781a      	ldrb	r2, [r3, #0]
  40036a:	f88d 2002 	strb.w	r2, [sp, #2]
  40036e:	781b      	ldrb	r3, [r3, #0]
  400370:	b2db      	uxtb	r3, r3
  400372:	f88d 3003 	strb.w	r3, [sp, #3]

	/** Read ID4 (RD4h) register to get device code for ILI9341*/
	ili93xx_read_register(ILI9341_CMD_READ_ID4, paratable, 4);
	chipid = ((uint16_t)paratable[2] << 8) + paratable[3];

	if (chipid == ILI9341_DEVICE_CODE) {
  400376:	b2d2      	uxtb	r2, r2
  400378:	eb03 2302 	add.w	r3, r3, r2, lsl #8
  40037c:	b29b      	uxth	r3, r3
  40037e:	f249 3241 	movw	r2, #37697	; 0x9341
  400382:	4293      	cmp	r3, r2
  400384:	d104      	bne.n	400390 <ili93xx_device_type_identify+0x44>
		g_uc_device_type = DEVICE_TYPE_ILI9341;
  400386:	2202      	movs	r2, #2
  400388:	4b0e      	ldr	r3, [pc, #56]	; (4003c4 <ili93xx_device_type_identify+0x78>)
  40038a:	701a      	strb	r2, [r3, #0]
		return 0;
  40038c:	2000      	movs	r0, #0
  40038e:	e017      	b.n	4003c0 <ili93xx_device_type_identify+0x74>
/** Define EBI access for ILI93xx 8-bit System Interface.*/
#if defined(BOARD_ILI93XX_ADDR) && defined (BOARD_ILI93XX_RS)
static inline void LCD_IR(uint8_t lcd_index)
{
	/** ILI93XX index register address */
	*((volatile uint8_t *)(BOARD_ILI93XX_ADDR)) = lcd_index;
  400390:	f04f 43c2 	mov.w	r3, #1627389952	; 0x61000000
  400394:	2200      	movs	r2, #0
  400396:	701a      	strb	r2, [r3, #0]
  400398:	701a      	strb	r2, [r3, #0]
																lcd_data;
}

static inline uint8_t LCD_RD(void)
{
	return *((volatile uint8_t *)((BOARD_ILI93XX_ADDR) |(BOARD_ILI93XX_RS)));
  40039a:	3302      	adds	r3, #2
  40039c:	781a      	ldrb	r2, [r3, #0]
{
	LCD_IR(0);
	LCD_IR(uc_reg);

	for (uint8_t i = 0; i < uc_datacnt; i++) {
		p_data[i] = LCD_RD();
  40039e:	f88d 2000 	strb.w	r2, [sp]
  4003a2:	781b      	ldrb	r3, [r3, #0]
	}

	/** Driver Code Read (R00h) for ILI9325*/
	ili93xx_read_register(ILI9325_DEVICE_CODE_REG, paratable, 2);
	chipid = ((uint16_t)paratable[0] << 8) + paratable[1];
	if (chipid == ILI9325_DEVICE_CODE) {
  4003a4:	b2d2      	uxtb	r2, r2
  4003a6:	eb03 2302 	add.w	r3, r3, r2, lsl #8
  4003aa:	b29b      	uxth	r3, r3
  4003ac:	f249 3225 	movw	r2, #37669	; 0x9325
  4003b0:	4293      	cmp	r3, r2
  4003b2:	d104      	bne.n	4003be <ili93xx_device_type_identify+0x72>
		g_uc_device_type = DEVICE_TYPE_ILI9325;
  4003b4:	2201      	movs	r2, #1
  4003b6:	4b03      	ldr	r3, [pc, #12]	; (4003c4 <ili93xx_device_type_identify+0x78>)
  4003b8:	701a      	strb	r2, [r3, #0]
		return 0;
  4003ba:	2000      	movs	r0, #0
  4003bc:	e000      	b.n	4003c0 <ili93xx_device_type_identify+0x74>
	}

	return 1;
  4003be:	2001      	movs	r0, #1
}
  4003c0:	b002      	add	sp, #8
  4003c2:	4770      	bx	lr
  4003c4:	20000c68 	.word	0x20000c68

004003c8 <ili93xx_display_on>:

/**
 * \brief Turn on the LCD.
 */
void ili93xx_display_on(void)
{
  4003c8:	b508      	push	{r3, lr}
	if (g_uc_device_type == DEVICE_TYPE_ILI9325) {
  4003ca:	4b09      	ldr	r3, [pc, #36]	; (4003f0 <ili93xx_display_on+0x28>)
  4003cc:	781b      	ldrb	r3, [r3, #0]
  4003ce:	2b01      	cmp	r3, #1
  4003d0:	d105      	bne.n	4003de <ili93xx_display_on+0x16>
		ili93xx_write_register_word(ILI9325_DISP_CTRL1,
  4003d2:	f240 1133 	movw	r1, #307	; 0x133
  4003d6:	2007      	movs	r0, #7
  4003d8:	4b06      	ldr	r3, [pc, #24]	; (4003f4 <ili93xx_display_on+0x2c>)
  4003da:	4798      	blx	r3
  4003dc:	bd08      	pop	{r3, pc}
				ILI9325_DISP_CTRL1_BASEE |
				ILI9325_DISP_CTRL1_GON |
				ILI9325_DISP_CTRL1_DTE |
				ILI9325_DISP_CTRL1_D(0x03));
	} else if (g_uc_device_type == DEVICE_TYPE_ILI9341) {
  4003de:	2b02      	cmp	r3, #2
  4003e0:	d104      	bne.n	4003ec <ili93xx_display_on+0x24>
		ili93xx_write_register(ILI9341_CMD_DISPLAY_ON, NULL, 0);
  4003e2:	2200      	movs	r2, #0
  4003e4:	4611      	mov	r1, r2
  4003e6:	2029      	movs	r0, #41	; 0x29
  4003e8:	4b03      	ldr	r3, [pc, #12]	; (4003f8 <ili93xx_display_on+0x30>)
  4003ea:	4798      	blx	r3
  4003ec:	bd08      	pop	{r3, pc}
  4003ee:	bf00      	nop
  4003f0:	20000c68 	.word	0x20000c68
  4003f4:	00400271 	.word	0x00400271
  4003f8:	00400289 	.word	0x00400289

004003fc <ili93xx_set_foreground_color>:
 * \brief Set foreground color.
 *
 * \param ul_color foreground color.
 */
void ili93xx_set_foreground_color(ili93xx_color_t ul_color)
{
  4003fc:	4a04      	ldr	r2, [pc, #16]	; (400410 <ili93xx_set_foreground_color+0x14>)
  4003fe:	1f13      	subs	r3, r2, #4
  400400:	f502 726f 	add.w	r2, r2, #956	; 0x3bc
	uint32_t i;

	/** Fill the cache with selected color */
	for (i = 0; i < LCD_DATA_CACHE_SIZE; ++i) {
		g_ul_pixel_cache[i] = ul_color;
  400404:	f843 0f04 	str.w	r0, [r3, #4]!
void ili93xx_set_foreground_color(ili93xx_color_t ul_color)
{
	uint32_t i;

	/** Fill the cache with selected color */
	for (i = 0; i < LCD_DATA_CACHE_SIZE; ++i) {
  400408:	4293      	cmp	r3, r2
  40040a:	d1fb      	bne.n	400404 <ili93xx_set_foreground_color+0x8>
		g_ul_pixel_cache[i] = ul_color;
	}
}
  40040c:	4770      	bx	lr
  40040e:	bf00      	nop
  400410:	200008a8 	.word	0x200008a8

00400414 <ili93xx_set_window>:
 * \param ul_width The width of the window.
 * \param ul_height The height of the window.
 */
void ili93xx_set_window(uint32_t ul_x, uint32_t ul_y, uint32_t ul_width,
		uint32_t ul_height)
{
  400414:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400418:	b082      	sub	sp, #8
  40041a:	460c      	mov	r4, r1
  40041c:	4617      	mov	r7, r2
  40041e:	461e      	mov	r6, r3
	Assert(ul_x <= (g_ul_lcd_x_length - 1));
	Assert(ul_y <= (g_ul_lcd_y_length - 1));
	Assert(ul_width <= (g_ul_lcd_x_length - ul_x));
	Assert(ul_height <= (g_ul_lcd_y_length - ul_y));
	if (g_uc_device_type == DEVICE_TYPE_ILI9325) {
  400420:	4b23      	ldr	r3, [pc, #140]	; (4004b0 <ili93xx_set_window+0x9c>)
  400422:	781b      	ldrb	r3, [r3, #0]
  400424:	2b01      	cmp	r3, #1
  400426:	d114      	bne.n	400452 <ili93xx_set_window+0x3e>
		/** Set Horizontal Address Start Position */
		ili93xx_write_register_word(ILI9325_HORIZONTAL_ADDR_START,
  400428:	b285      	uxth	r5, r0
  40042a:	4629      	mov	r1, r5
  40042c:	2050      	movs	r0, #80	; 0x50
  40042e:	f8df 8088 	ldr.w	r8, [pc, #136]	; 4004b8 <ili93xx_set_window+0xa4>
  400432:	47c0      	blx	r8
				(uint16_t)ul_x);

		/** Set Horizontal Address End Position */
		ili93xx_write_register_word(ILI9325_HORIZONTAL_ADDR_END,
  400434:	1e78      	subs	r0, r7, #1
  400436:	1829      	adds	r1, r5, r0
  400438:	b289      	uxth	r1, r1
  40043a:	2051      	movs	r0, #81	; 0x51
  40043c:	47c0      	blx	r8
				(uint16_t)(ul_x + ul_width - 1));

		/** Set Vertical Address Start Position */
		ili93xx_write_register_word(ILI9325_VERTICAL_ADDR_START,
  40043e:	b2a4      	uxth	r4, r4
  400440:	4621      	mov	r1, r4
  400442:	2052      	movs	r0, #82	; 0x52
  400444:	47c0      	blx	r8
				(uint16_t)ul_y);

		/** Set Vertical Address End Position */
		ili93xx_write_register_word(ILI9325_VERTICAL_ADDR_END,
  400446:	1e71      	subs	r1, r6, #1
  400448:	4421      	add	r1, r4
  40044a:	b289      	uxth	r1, r1
  40044c:	2053      	movs	r0, #83	; 0x53
  40044e:	47c0      	blx	r8
  400450:	e02a      	b.n	4004a8 <ili93xx_set_window+0x94>
				(uint16_t)(ul_y + ul_height - 1));
	} else if (g_uc_device_type == DEVICE_TYPE_ILI9341) {
  400452:	2b02      	cmp	r3, #2
  400454:	d128      	bne.n	4004a8 <ili93xx_set_window+0x94>
		uint8_t paratable[4];

		/** Set Column Address Position */
		paratable[0] = (ul_x >> 8) & 0xFF;
  400456:	0a03      	lsrs	r3, r0, #8
  400458:	f88d 3004 	strb.w	r3, [sp, #4]
		paratable[1] = ul_x & 0xFF;
  40045c:	b2c3      	uxtb	r3, r0
  40045e:	f88d 3005 	strb.w	r3, [sp, #5]
		paratable[2] = ((ul_x + ul_width - 1) >> 8) & 0xFF;
  400462:	3a01      	subs	r2, #1
  400464:	4410      	add	r0, r2
  400466:	0a00      	lsrs	r0, r0, #8
  400468:	f88d 0006 	strb.w	r0, [sp, #6]
		paratable[3] = (ul_x + ul_width - 1) & 0xFF;
  40046c:	4617      	mov	r7, r2
  40046e:	441f      	add	r7, r3
  400470:	f88d 7007 	strb.w	r7, [sp, #7]
		ili93xx_write_register(ILI9341_CMD_COLUMN_ADDRESS_SET,
  400474:	2204      	movs	r2, #4
  400476:	eb0d 0102 	add.w	r1, sp, r2
  40047a:	202a      	movs	r0, #42	; 0x2a
  40047c:	4d0d      	ldr	r5, [pc, #52]	; (4004b4 <ili93xx_set_window+0xa0>)
  40047e:	47a8      	blx	r5
				paratable, 4);

		/** Set Page Address Position */
		paratable[0] = (ul_y >> 8) & 0xFF;
  400480:	0a23      	lsrs	r3, r4, #8
  400482:	f88d 3004 	strb.w	r3, [sp, #4]
		paratable[1] = ul_y & 0xFF;
  400486:	b2e3      	uxtb	r3, r4
  400488:	f88d 3005 	strb.w	r3, [sp, #5]
		paratable[2] = ((ul_y + ul_height - 1) >> 8) & 0xFF;
  40048c:	1e72      	subs	r2, r6, #1
  40048e:	4414      	add	r4, r2
  400490:	0a24      	lsrs	r4, r4, #8
  400492:	f88d 4006 	strb.w	r4, [sp, #6]
		paratable[3] = (ul_y + ul_height - 1) & 0xFF;
  400496:	4616      	mov	r6, r2
  400498:	441e      	add	r6, r3
  40049a:	f88d 6007 	strb.w	r6, [sp, #7]
		ili93xx_write_register(ILI9341_CMD_PAGE_ADDRESS_SET,
  40049e:	2204      	movs	r2, #4
  4004a0:	eb0d 0102 	add.w	r1, sp, r2
  4004a4:	202b      	movs	r0, #43	; 0x2b
  4004a6:	47a8      	blx	r5
				       paratable, 4);
	}
}
  4004a8:	b002      	add	sp, #8
  4004aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4004ae:	bf00      	nop
  4004b0:	20000c68 	.word	0x20000c68
  4004b4:	00400289 	.word	0x00400289
  4004b8:	00400271 	.word	0x00400271

004004bc <ili93xx_set_cursor_position>:
 *
 * \param us_x X coordinate of upper-left corner on LCD.
 * \param us_y Y coordinate of upper-left corner on LCD.
 */
void ili93xx_set_cursor_position(uint16_t us_x, uint16_t us_y)
{
  4004bc:	b538      	push	{r3, r4, r5, lr}
	if (g_uc_device_type == DEVICE_TYPE_ILI9325) {
  4004be:	4b06      	ldr	r3, [pc, #24]	; (4004d8 <ili93xx_set_cursor_position+0x1c>)
  4004c0:	781b      	ldrb	r3, [r3, #0]
  4004c2:	2b01      	cmp	r3, #1
  4004c4:	d107      	bne.n	4004d6 <ili93xx_set_cursor_position+0x1a>
  4004c6:	460c      	mov	r4, r1
  4004c8:	4601      	mov	r1, r0
		/** GRAM Horizontal/Vertical Address Set (R20h, R21h) */
		ili93xx_write_register_word(ILI9325_HORIZONTAL_GRAM_ADDR_SET, us_x);
  4004ca:	2020      	movs	r0, #32
  4004cc:	4d03      	ldr	r5, [pc, #12]	; (4004dc <ili93xx_set_cursor_position+0x20>)
  4004ce:	47a8      	blx	r5
		ili93xx_write_register_word(ILI9325_VERTICAL_GRAM_ADDR_SET, us_y);
  4004d0:	4621      	mov	r1, r4
  4004d2:	2021      	movs	r0, #33	; 0x21
  4004d4:	47a8      	blx	r5
  4004d6:	bd38      	pop	{r3, r4, r5, pc}
  4004d8:	20000c68 	.word	0x20000c68
  4004dc:	00400271 	.word	0x00400271

004004e0 <ili93xx_init>:
 * \param p_opt pointer to ILI93xx option structure.
 *
 * \return 0 if initialization succeeds, otherwise fails.
 */
uint32_t ili93xx_init(struct ili93xx_opt_t *p_opt)
{
  4004e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  4004e4:	b083      	sub	sp, #12
  4004e6:	4606      	mov	r6, r0
	uint8_t paratable[6];

	/** Identify the LCD driver device*/
	if (ili93xx_device_type_identify() != 0) {
  4004e8:	4bac      	ldr	r3, [pc, #688]	; (40079c <ili93xx_init+0x2bc>)
  4004ea:	4798      	blx	r3
  4004ec:	2800      	cmp	r0, #0
  4004ee:	f040 814f 	bne.w	400790 <ili93xx_init+0x2b0>
		return 1;
	}

	g_ul_lcd_x_length = ILI93XX_LCD_WIDTH;
  4004f2:	22f0      	movs	r2, #240	; 0xf0
  4004f4:	4baa      	ldr	r3, [pc, #680]	; (4007a0 <ili93xx_init+0x2c0>)
  4004f6:	601a      	str	r2, [r3, #0]
	g_ul_lcd_y_length = ILI93XX_LCD_HEIGHT;
  4004f8:	f44f 72a0 	mov.w	r2, #320	; 0x140
  4004fc:	4ba9      	ldr	r3, [pc, #676]	; (4007a4 <ili93xx_init+0x2c4>)
  4004fe:	601a      	str	r2, [r3, #0]

	if (g_uc_device_type == DEVICE_TYPE_ILI9325) {
  400500:	4ba9      	ldr	r3, [pc, #676]	; (4007a8 <ili93xx_init+0x2c8>)
  400502:	781b      	ldrb	r3, [r3, #0]
  400504:	2b01      	cmp	r3, #1
  400506:	f040 80b1 	bne.w	40066c <ili93xx_init+0x18c>
		/** Turn off LCD */
		ili93xx_write_register_word(ILI9325_DISP_CTRL1, ILI9325_DISP_CTRL1_GON |
  40050a:	2133      	movs	r1, #51	; 0x33
  40050c:	2007      	movs	r0, #7
  40050e:	4ca7      	ldr	r4, [pc, #668]	; (4007ac <ili93xx_init+0x2cc>)
  400510:	47a0      	blx	r4
				ILI9325_DISP_CTRL1_DTE | ILI9325_DISP_CTRL1_D(0x03));

		/** Start initial sequence */
		/** Disable sleep and standby mode*/
		ili93xx_write_register_word(ILI9325_POWER_CTRL1, 0x0000);
  400512:	2100      	movs	r1, #0
  400514:	2010      	movs	r0, #16
  400516:	47a0      	blx	r4
		/** Start internal OSC */
		ili93xx_write_register_word(ILI9325_START_OSC_CTRL,
  400518:	2101      	movs	r1, #1
  40051a:	2000      	movs	r0, #0
  40051c:	47a0      	blx	r4
				ILI9325_START_OSC_CTRL_EN);
		/** Set SS bit and direction output from S720 to S1 */
		ili93xx_write_register_word(ILI9325_DRIVER_OUTPUT_CTRL1,
  40051e:	f44f 7180 	mov.w	r1, #256	; 0x100
  400522:	2001      	movs	r0, #1
  400524:	47a0      	blx	r4
				ILI9325_DRIVER_OUTPUT_CTRL1_SS);
		/** Set 1 line inversion */
		ili93xx_write_register_word(ILI9325_LCD_DRIVING_CTRL,
  400526:	f44f 61e0 	mov.w	r1, #1792	; 0x700
  40052a:	2002      	movs	r0, #2
  40052c:	47a0      	blx	r4
				ILI9325_LCD_DRIVING_CTRL_BIT10 | ILI9325_LCD_DRIVING_CTRL_EOR
				| ILI9325_LCD_DRIVING_CTRL_BC0);
		/** Disable resizing feature */
		ili93xx_write_register_word(ILI9325_RESIZE_CTRL, 0x0000);
  40052e:	2100      	movs	r1, #0
  400530:	2004      	movs	r0, #4
  400532:	47a0      	blx	r4
		/** Set the back porch and front porch */
		ili93xx_write_register_word(ILI9325_DISP_CTRL2,
  400534:	f240 2107 	movw	r1, #519	; 0x207
  400538:	2008      	movs	r0, #8
  40053a:	47a0      	blx	r4
				ILI9325_DISP_CTRL2_BP(
				0x07) | ILI9325_DISP_CTRL2_FP(0x02));
		/** Set non-display area refresh cycle ISC[3:0] */
		ili93xx_write_register_word(ILI9325_DISP_CTRL3, 0x0000);
  40053c:	2100      	movs	r1, #0
  40053e:	2009      	movs	r0, #9
  400540:	47a0      	blx	r4
		/** Disable FMARK function */
		ili93xx_write_register_word(ILI9325_DISP_CTRL4, 0x0000);
  400542:	2100      	movs	r1, #0
  400544:	200a      	movs	r0, #10
  400546:	47a0      	blx	r4
		/** 18-bit RGB interface and writing display data by system
		 *interface */
		ili93xx_write_register_word(ILI9325_RGB_DISP_INTERFACE_CTRL1,
  400548:	2100      	movs	r1, #0
  40054a:	200c      	movs	r0, #12
  40054c:	47a0      	blx	r4
				0x0000);
		/** Set the output position of frame cycle */
		ili93xx_write_register_word(ILI9325_FRAME_MAKER_POS, 0x0000);
  40054e:	2100      	movs	r1, #0
  400550:	200d      	movs	r0, #13
  400552:	47a0      	blx	r4
		/** RGB interface polarity */
		ili93xx_write_register_word(ILI9325_RGB_DISP_INTERFACE_CTRL2,
  400554:	2100      	movs	r1, #0
  400556:	200f      	movs	r0, #15
  400558:	47a0      	blx	r4
				0x0000);

		/** Power on sequence */
		/** Disable sleep and standby mode */
		ili93xx_write_register_word(ILI9325_POWER_CTRL1, 0x0000);
  40055a:	2100      	movs	r1, #0
  40055c:	2010      	movs	r0, #16
  40055e:	47a0      	blx	r4

		/**
		 * Selects the operating frequency of the step-up circuit 1,2
		 * and Sets the ratio factor of Vci.
		 */
		ili93xx_write_register_word(ILI9325_POWER_CTRL2, 0x0000);
  400560:	2100      	movs	r1, #0
  400562:	2011      	movs	r0, #17
  400564:	47a0      	blx	r4
		/** Set VREG1OUT voltage */
		ili93xx_write_register_word(ILI9325_POWER_CTRL3, 0x0000);
  400566:	2100      	movs	r1, #0
  400568:	2012      	movs	r0, #18
  40056a:	47a0      	blx	r4
		/** Set VCOM amplitude */
		ili93xx_write_register_word(ILI9325_POWER_CTRL4, 0x0000);
  40056c:	2100      	movs	r1, #0
  40056e:	2013      	movs	r0, #19
  400570:	47a0      	blx	r4
		ili93xx_delay(200);
  400572:	20c8      	movs	r0, #200	; 0xc8
  400574:	4d8e      	ldr	r5, [pc, #568]	; (4007b0 <ili93xx_init+0x2d0>)
  400576:	47a8      	blx	r5

		/**
		 * Adjusts the constant current and Sets the factor used
		 * in the step-up circuits.
		 */
		ili93xx_write_register_word(ILI9325_POWER_CTRL1,
  400578:	f241 2190 	movw	r1, #4752	; 0x1290
  40057c:	2010      	movs	r0, #16
  40057e:	47a0      	blx	r4

		/**
		 * Select the operating frequency of the step-up circuit 1,2 and
		 * Sets the ratio factor of Vci
		 */
		ili93xx_write_register_word(ILI9325_POWER_CTRL2,
  400580:	f240 2127 	movw	r1, #551	; 0x227
  400584:	2011      	movs	r0, #17
  400586:	47a0      	blx	r4
				ILI9325_POWER_CTRL2_DC1(0x02) |
				ILI9325_POWER_CTRL2_DC0(0x02) | ILI9325_POWER_CTRL2_VC(0x07));
		ili93xx_delay(50);
  400588:	2032      	movs	r0, #50	; 0x32
  40058a:	47a8      	blx	r5
		/** Internal reference voltage= Vci */
		ili93xx_write_register_word(ILI9325_POWER_CTRL3,
  40058c:	211b      	movs	r1, #27
  40058e:	2012      	movs	r0, #18
  400590:	47a0      	blx	r4
				ILI9325_POWER_CTRL3_PON | ILI9325_POWER_CTRL3_VRH(0x0B));
		ili93xx_delay(50);
  400592:	2032      	movs	r0, #50	; 0x32
  400594:	47a8      	blx	r5
		/** Set VDV[4:0] for VCOM amplitude */
		ili93xx_write_register_word(ILI9325_POWER_CTRL4,
  400596:	f44f 5188 	mov.w	r1, #4352	; 0x1100
  40059a:	2013      	movs	r0, #19
  40059c:	47a0      	blx	r4
				ILI9325_POWER_CTRL4_VDV(0x11));
		/** Set VCM[5:0] for VCOMH */
		ili93xx_write_register_word(ILI9325_POWER_CTRL7,
  40059e:	2119      	movs	r1, #25
  4005a0:	2029      	movs	r0, #41	; 0x29
  4005a2:	47a0      	blx	r4
				ILI9325_POWER_CTRL7_VCM(0x19));
		/** Set Frame Rate */
		ili93xx_write_register_word(ILI9325_FRAME_RATE_AND_COLOR_CTRL,
  4005a4:	210d      	movs	r1, #13
  4005a6:	202b      	movs	r0, #43	; 0x2b
  4005a8:	47a0      	blx	r4
				ILI9325_FRAME_RATE_AND_COLOR_CTRL_FRS(0x0D));
		ili93xx_delay(50);
  4005aa:	2032      	movs	r0, #50	; 0x32
  4005ac:	47a8      	blx	r5

		/** Adjust the Gamma Curve */
		ili93xx_write_register_word(ILI9325_GAMMA_CTL1, 0x0000);
  4005ae:	2100      	movs	r1, #0
  4005b0:	2030      	movs	r0, #48	; 0x30
  4005b2:	47a0      	blx	r4
		ili93xx_write_register_word(ILI9325_GAMMA_CTL2,
  4005b4:	f44f 7101 	mov.w	r1, #516	; 0x204
  4005b8:	2031      	movs	r0, #49	; 0x31
  4005ba:	47a0      	blx	r4
				ILI9325_GAMMA_CTL2_KP3(0x02) |
				ILI9325_GAMMA_CTL2_KP2(0x04));
		ili93xx_write_register_word(ILI9325_GAMMA_CTL3,
  4005bc:	f44f 7100 	mov.w	r1, #512	; 0x200
  4005c0:	2032      	movs	r0, #50	; 0x32
  4005c2:	47a0      	blx	r4
				ILI9325_GAMMA_CTL3_KP5(0x02) |
				ILI9325_GAMMA_CTL3_KP4(0x00));
		ili93xx_write_register_word(ILI9325_GAMMA_CTL4,
  4005c4:	2107      	movs	r1, #7
  4005c6:	2035      	movs	r0, #53	; 0x35
  4005c8:	47a0      	blx	r4
				ILI9325_GAMMA_CTL4_RP1(0x00) |
				ILI9325_GAMMA_CTL4_RP0(0x07));
		ili93xx_write_register_word(ILI9325_GAMMA_CTL5,
  4005ca:	f241 4104 	movw	r1, #5124	; 0x1404
  4005ce:	2036      	movs	r0, #54	; 0x36
  4005d0:	47a0      	blx	r4
				ILI9325_GAMMA_CTL5_VRP1(0x14) |
				ILI9325_GAMMA_CTL5_VRP0(0x04));
		ili93xx_write_register_word(ILI9325_GAMMA_CTL6,
  4005d2:	f240 7105 	movw	r1, #1797	; 0x705
  4005d6:	2037      	movs	r0, #55	; 0x37
  4005d8:	47a0      	blx	r4
				ILI9325_GAMMA_CTL6_KN1(0x07) |
				ILI9325_GAMMA_CTL6_KN0(0x05));
		ili93xx_write_register_word(ILI9325_GAMMA_CTL7,
  4005da:	f240 3105 	movw	r1, #773	; 0x305
  4005de:	2038      	movs	r0, #56	; 0x38
  4005e0:	47a0      	blx	r4
				ILI9325_GAMMA_CTL7_KN3(0x03) |
				ILI9325_GAMMA_CTL7_KN2(0x05));
		ili93xx_write_register_word(ILI9325_GAMMA_CTL8,
  4005e2:	f240 7107 	movw	r1, #1799	; 0x707
  4005e6:	2039      	movs	r0, #57	; 0x39
  4005e8:	47a0      	blx	r4
				ILI9325_GAMMA_CTL8_KN5(0x07) |
				ILI9325_GAMMA_CTL8_KN4(0x07));
		ili93xx_write_register_word(ILI9325_GAMMA_CTL9,
  4005ea:	f240 7101 	movw	r1, #1793	; 0x701
  4005ee:	203c      	movs	r0, #60	; 0x3c
  4005f0:	47a0      	blx	r4
				ILI9325_GAMMA_CTL9_RN1(0x07) |
				ILI9325_GAMMA_CTL9_RN0(0x01));
		ili93xx_write_register_word(ILI9325_GAMMA_CTL10,
  4005f2:	210e      	movs	r1, #14
  4005f4:	203d      	movs	r0, #61	; 0x3d
  4005f6:	47a0      	blx	r4
		 * DFM Set the mode of transferring data to the internal RAM
		 * when TRI = 1.
		 * I/D[1:0] = 11 Horizontal : increment Vertical : increment,
		 * AM=0:Horizontal
		 */
		ili93xx_write_register_word(ILI9325_ENTRY_MODE,
  4005f8:	f24d 0110 	movw	r1, #53264	; 0xd010
  4005fc:	2003      	movs	r0, #3
  4005fe:	47a0      	blx	r4
				ILI9325_ENTRY_MODE_ID(0x01) | ILI9325_ENTRY_MODE_BGR);
		/**
		 * Sets the number of lines to drive the LCD at an interval of 8
		 * lines. The scan direction is from G320 to G1
		 */
		ili93xx_write_register_word(ILI9325_DRIVER_OUTPUT_CTRL2,
  400600:	f44f 4127 	mov.w	r1, #42752	; 0xa700
  400604:	2060      	movs	r0, #96	; 0x60
  400606:	47a0      	blx	r4
				ILI9325_DRIVER_OUTPUT_CTRL2_GS |
				ILI9325_DRIVER_OUTPUT_CTRL2_NL(0x27));

		/** Vertical Scrolling */
		/** Disable scrolling and enable the grayscale inversion */
		ili93xx_write_register_word(ILI9325_BASE_IMG_DISP_CTRL,
  400608:	2101      	movs	r1, #1
  40060a:	2061      	movs	r0, #97	; 0x61
  40060c:	47a0      	blx	r4
				ILI9325_BASE_IMG_DISP_CTRL_REV);
		ili93xx_write_register_word(ILI9325_VERTICAL_SCROLL_CTRL,
  40060e:	2100      	movs	r1, #0
  400610:	206a      	movs	r0, #106	; 0x6a
  400612:	47a0      	blx	r4
				0x0000);

		/** Disable Partial Display */
		ili93xx_write_register_word(ILI9325_PARTIAL_IMG1_DISP_POS,
  400614:	2100      	movs	r1, #0
  400616:	2080      	movs	r0, #128	; 0x80
  400618:	47a0      	blx	r4
				0x0000);
		ili93xx_write_register_word(
  40061a:	2100      	movs	r1, #0
  40061c:	2081      	movs	r0, #129	; 0x81
  40061e:	47a0      	blx	r4
				ILI9325_PARTIAL_IMG1_AREA_START_LINE,
				0x0000);
		ili93xx_write_register_word(ILI9325_PARTIAL_IMG1_AREA_END_LINE,
  400620:	2100      	movs	r1, #0
  400622:	2082      	movs	r0, #130	; 0x82
  400624:	47a0      	blx	r4
				0x0000);
		ili93xx_write_register_word(ILI9325_PARTIAL_IMG2_DISP_POS,
  400626:	2100      	movs	r1, #0
  400628:	2083      	movs	r0, #131	; 0x83
  40062a:	47a0      	blx	r4
				0x0000);
		ili93xx_write_register_word(
  40062c:	2100      	movs	r1, #0
  40062e:	2084      	movs	r0, #132	; 0x84
  400630:	47a0      	blx	r4
				ILI9325_PARTIAL_IMG2_AREA_START_LINE,
				0x0000);
		ili93xx_write_register_word(ILI9325_PARTIAL_IMG2_AREA_END_LINE,
  400632:	2100      	movs	r1, #0
  400634:	2085      	movs	r0, #133	; 0x85
  400636:	47a0      	blx	r4
				0x0000);

		/** Panel Control */
		ili93xx_write_register_word(ILI9325_PANEL_INTERFACE_CTRL1,
  400638:	2110      	movs	r1, #16
  40063a:	2090      	movs	r0, #144	; 0x90
  40063c:	47a0      	blx	r4
				ILI9325_PANEL_INTERFACE_CTRL1_RTNI(0x10));
		ili93xx_write_register_word(ILI9325_PANEL_INTERFACE_CTRL2,
  40063e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
  400642:	2092      	movs	r0, #146	; 0x92
  400644:	47a0      	blx	r4
				ILI9325_PANEL_INTERFACE_CTRL2_NOWI(0x06));
		ili93xx_write_register_word(ILI9325_PANEL_INTERFACE_CTRL4,
  400646:	f44f 7188 	mov.w	r1, #272	; 0x110
  40064a:	2095      	movs	r0, #149	; 0x95
  40064c:	47a0      	blx	r4
				ILI9325_PANEL_INTERFACE_CTRL4_DIVE(0x01) |
				ILI9325_PANEL_INTERFACE_CTRL4_RTNE(0x10));

		ili93xx_set_window(0, 0, p_opt->ul_width, p_opt->ul_height);
  40064e:	6873      	ldr	r3, [r6, #4]
  400650:	6832      	ldr	r2, [r6, #0]
  400652:	2100      	movs	r1, #0
  400654:	4608      	mov	r0, r1
  400656:	4c57      	ldr	r4, [pc, #348]	; (4007b4 <ili93xx_init+0x2d4>)
  400658:	47a0      	blx	r4
		ili93xx_set_foreground_color(p_opt->foreground_color);
  40065a:	68b0      	ldr	r0, [r6, #8]
  40065c:	4b56      	ldr	r3, [pc, #344]	; (4007b8 <ili93xx_init+0x2d8>)
  40065e:	4798      	blx	r3
		ili93xx_set_cursor_position(0, 0);
  400660:	2100      	movs	r1, #0
  400662:	4608      	mov	r0, r1
  400664:	4b55      	ldr	r3, [pc, #340]	; (4007bc <ili93xx_init+0x2dc>)
  400666:	4798      	blx	r3
	} else {
		/** exit with return value 1 if device type is not supported.*/
		return 1;
	}

	return 0;
  400668:	2000      	movs	r0, #0
  40066a:	e094      	b.n	400796 <ili93xx_init+0x2b6>
				ILI9325_PANEL_INTERFACE_CTRL4_RTNE(0x10));

		ili93xx_set_window(0, 0, p_opt->ul_width, p_opt->ul_height);
		ili93xx_set_foreground_color(p_opt->foreground_color);
		ili93xx_set_cursor_position(0, 0);
	} else if (g_uc_device_type == DEVICE_TYPE_ILI9341) {
  40066c:	2b02      	cmp	r3, #2
  40066e:	f040 8091 	bne.w	400794 <ili93xx_init+0x2b4>
		/** init for ILI9341 **/
		/** power control A configuration*/
		paratable[0] = 0x39;
  400672:	2339      	movs	r3, #57	; 0x39
  400674:	f88d 3000 	strb.w	r3, [sp]
		paratable[1] = 0x2C;
  400678:	232c      	movs	r3, #44	; 0x2c
  40067a:	f88d 3001 	strb.w	r3, [sp, #1]
		paratable[2] = 0x00;
  40067e:	2400      	movs	r4, #0
  400680:	f88d 4002 	strb.w	r4, [sp, #2]
		paratable[3] = 0x34;
  400684:	2334      	movs	r3, #52	; 0x34
  400686:	f88d 3003 	strb.w	r3, [sp, #3]
		paratable[4] = 0x02;
  40068a:	2702      	movs	r7, #2
  40068c:	f88d 7004 	strb.w	r7, [sp, #4]
		ili93xx_write_register(ILI9341_CMD_POWER_CONTROL_A, paratable, 5);
  400690:	2205      	movs	r2, #5
  400692:	4669      	mov	r1, sp
  400694:	20cb      	movs	r0, #203	; 0xcb
  400696:	4d4a      	ldr	r5, [pc, #296]	; (4007c0 <ili93xx_init+0x2e0>)
  400698:	47a8      	blx	r5

		/** power control B configuration */
		paratable[0] = 0;
  40069a:	f88d 4000 	strb.w	r4, [sp]
		paratable[1] = 0xAA;
  40069e:	23aa      	movs	r3, #170	; 0xaa
  4006a0:	f88d 3001 	strb.w	r3, [sp, #1]
		paratable[2] = 0xB0;
  4006a4:	23b0      	movs	r3, #176	; 0xb0
  4006a6:	f88d 3002 	strb.w	r3, [sp, #2]
		ili93xx_write_register(ILI9341_CMD_POWER_CONTROL_B, paratable, 3);
  4006aa:	2203      	movs	r2, #3
  4006ac:	4669      	mov	r1, sp
  4006ae:	20cf      	movs	r0, #207	; 0xcf
  4006b0:	47a8      	blx	r5

		/** Pump Ratio Control configuration */
		paratable[0] = 0x30;
  4006b2:	2330      	movs	r3, #48	; 0x30
  4006b4:	f88d 3000 	strb.w	r3, [sp]
		ili93xx_write_register(ILI9341_CMD_PUMP_RATIO_CONTROL,
  4006b8:	2201      	movs	r2, #1
  4006ba:	4669      	mov	r1, sp
  4006bc:	20f7      	movs	r0, #247	; 0xf7
  4006be:	47a8      	blx	r5
				paratable, 1);

		/** Power Control 1 configuration*/
		paratable[0] = 0x25;
  4006c0:	2325      	movs	r3, #37	; 0x25
  4006c2:	f88d 3000 	strb.w	r3, [sp]
		ili93xx_write_register(ILI9341_CMD_POWER_CONTROL_1, paratable, 1);
  4006c6:	2201      	movs	r2, #1
  4006c8:	4669      	mov	r1, sp
  4006ca:	20c0      	movs	r0, #192	; 0xc0
  4006cc:	47a8      	blx	r5

		/** Power Control 2 configuration*/
		paratable[0] = 0x11;
  4006ce:	f04f 0911 	mov.w	r9, #17
  4006d2:	f88d 9000 	strb.w	r9, [sp]
		ili93xx_write_register(ILI9341_CMD_POWER_CONTROL_2, paratable, 1);
  4006d6:	2201      	movs	r2, #1
  4006d8:	4669      	mov	r1, sp
  4006da:	20c1      	movs	r0, #193	; 0xc1
  4006dc:	47a8      	blx	r5

		/** VOM Control 1 configuration*/
		paratable[0] = 0x5C;
  4006de:	235c      	movs	r3, #92	; 0x5c
  4006e0:	f88d 3000 	strb.w	r3, [sp]
		paratable[1] = 0x4C;
  4006e4:	234c      	movs	r3, #76	; 0x4c
  4006e6:	f88d 3001 	strb.w	r3, [sp, #1]
		ili93xx_write_register(ILI9341_CMD_VCOM_CONTROL_1, paratable, 2);
  4006ea:	463a      	mov	r2, r7
  4006ec:	4669      	mov	r1, sp
  4006ee:	20c5      	movs	r0, #197	; 0xc5
  4006f0:	47a8      	blx	r5

		/** VOM control 2 configuration*/
		paratable[0] = 0x94;
  4006f2:	2394      	movs	r3, #148	; 0x94
  4006f4:	f88d 3000 	strb.w	r3, [sp]
		ili93xx_write_register(ILI9341_CMD_VCOM_CONTROL_2, paratable, 1);
  4006f8:	2201      	movs	r2, #1
  4006fa:	4669      	mov	r1, sp
  4006fc:	20c7      	movs	r0, #199	; 0xc7
  4006fe:	47a8      	blx	r5

		/** Driver Timing Control A configuration*/
		paratable[0] = 0x85;
  400700:	2385      	movs	r3, #133	; 0x85
  400702:	f88d 3000 	strb.w	r3, [sp]
		paratable[1] = 0x01;
  400706:	f04f 0801 	mov.w	r8, #1
  40070a:	f88d 8001 	strb.w	r8, [sp, #1]
		paratable[2] = 0x78;
  40070e:	2378      	movs	r3, #120	; 0x78
  400710:	f88d 3002 	strb.w	r3, [sp, #2]
		ili93xx_write_register(ILI9341_CMD_DRIVER_TIMING_CTL_A, paratable, 3);
  400714:	2203      	movs	r2, #3
  400716:	4669      	mov	r1, sp
  400718:	20e8      	movs	r0, #232	; 0xe8
  40071a:	47a8      	blx	r5

		/** Driver Timing Control B configuration*/
		paratable[0] = 0x00;
  40071c:	f88d 4000 	strb.w	r4, [sp]
		paratable[1] = 0x00;
  400720:	f88d 4001 	strb.w	r4, [sp, #1]
		ili93xx_write_register(ILI9341_CMD_DRIVER_TIMING_CTL_B, paratable, 2);
  400724:	463a      	mov	r2, r7
  400726:	4669      	mov	r1, sp
  400728:	20ea      	movs	r0, #234	; 0xea
  40072a:	47a8      	blx	r5

		/** Memory Access Control configuration*/
		paratable[0] = ILI9341_CMD_MEMORY_ACCESS_CONTROL_MX |
  40072c:	2348      	movs	r3, #72	; 0x48
  40072e:	f88d 3000 	strb.w	r3, [sp]
				ILI9341_CMD_MEMORY_ACCESS_CONTROL_BGR;
		ili93xx_write_register(ILI9341_CMD_MEMORY_ACCESS_CONTROL,
  400732:	4642      	mov	r2, r8
  400734:	4669      	mov	r1, sp
  400736:	2036      	movs	r0, #54	; 0x36
  400738:	47a8      	blx	r5
				paratable, 1);

		/** Colmod Pixel Format Set configuation*/
		paratable[0] = 0x06;
  40073a:	2306      	movs	r3, #6
  40073c:	f88d 3000 	strb.w	r3, [sp]
		ili93xx_write_register(ILI9341_CMD_PIXEL_FORMAT_SET, paratable, 1);
  400740:	4642      	mov	r2, r8
  400742:	4669      	mov	r1, sp
  400744:	203a      	movs	r0, #58	; 0x3a
  400746:	47a8      	blx	r5

		/** Display Function Control */
		paratable[0] = 0x02;
  400748:	f88d 7000 	strb.w	r7, [sp]
		paratable[1] = 0x82;
  40074c:	2382      	movs	r3, #130	; 0x82
  40074e:	f88d 3001 	strb.w	r3, [sp, #1]
		paratable[2] = 0x27;
  400752:	2327      	movs	r3, #39	; 0x27
  400754:	f88d 3002 	strb.w	r3, [sp, #2]
		paratable[3] = 0x00;
  400758:	f88d 4003 	strb.w	r4, [sp, #3]
		ili93xx_write_register(ILI9341_CMD_DISPLAY_FUNCTION_CTL, paratable, 4);
  40075c:	2204      	movs	r2, #4
  40075e:	4669      	mov	r1, sp
  400760:	20b6      	movs	r0, #182	; 0xb6
  400762:	47a8      	blx	r5
		
		/** set window area*/
		ili93xx_set_window(0, 0, p_opt->ul_width, p_opt->ul_height);
  400764:	6873      	ldr	r3, [r6, #4]
  400766:	6832      	ldr	r2, [r6, #0]
  400768:	4621      	mov	r1, r4
  40076a:	4620      	mov	r0, r4
  40076c:	4f11      	ldr	r7, [pc, #68]	; (4007b4 <ili93xx_init+0x2d4>)
  40076e:	47b8      	blx	r7
		ili93xx_set_foreground_color(p_opt->foreground_color);
  400770:	68b0      	ldr	r0, [r6, #8]
  400772:	4b11      	ldr	r3, [pc, #68]	; (4007b8 <ili93xx_init+0x2d8>)
  400774:	4798      	blx	r3
		/** Leave sleep mode*/
		ili93xx_write_register(ILI9341_CMD_SLEEP_OUT, paratable, 0);
  400776:	4622      	mov	r2, r4
  400778:	4669      	mov	r1, sp
  40077a:	4648      	mov	r0, r9
  40077c:	47a8      	blx	r5
		ili93xx_delay(10);
  40077e:	200a      	movs	r0, #10
  400780:	4b0b      	ldr	r3, [pc, #44]	; (4007b0 <ili93xx_init+0x2d0>)
  400782:	4798      	blx	r3
		/** Display on*/
		ili93xx_write_register(ILI9341_CMD_DISPLAY_ON, paratable, 0);
  400784:	4622      	mov	r2, r4
  400786:	4669      	mov	r1, sp
  400788:	2029      	movs	r0, #41	; 0x29
  40078a:	47a8      	blx	r5
	} else {
		/** exit with return value 1 if device type is not supported.*/
		return 1;
	}

	return 0;
  40078c:	4620      	mov	r0, r4
  40078e:	e002      	b.n	400796 <ili93xx_init+0x2b6>
{
	uint8_t paratable[6];

	/** Identify the LCD driver device*/
	if (ili93xx_device_type_identify() != 0) {
		return 1;
  400790:	2001      	movs	r0, #1
  400792:	e000      	b.n	400796 <ili93xx_init+0x2b6>
		ili93xx_delay(10);
		/** Display on*/
		ili93xx_write_register(ILI9341_CMD_DISPLAY_ON, paratable, 0);
	} else {
		/** exit with return value 1 if device type is not supported.*/
		return 1;
  400794:	2001      	movs	r0, #1
	}

	return 0;
}
  400796:	b003      	add	sp, #12
  400798:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  40079c:	0040034d 	.word	0x0040034d
  4007a0:	20000000 	.word	0x20000000
  4007a4:	20000004 	.word	0x20000004
  4007a8:	20000c68 	.word	0x20000c68
  4007ac:	00400271 	.word	0x00400271
  4007b0:	004002b5 	.word	0x004002b5
  4007b4:	00400415 	.word	0x00400415
  4007b8:	004003fd 	.word	0x004003fd
  4007bc:	004004bd 	.word	0x004004bd
  4007c0:	00400289 	.word	0x00400289

004007c4 <ili93xx_draw_pixel>:
 * \param ul_y Y coordinate of pixel.
 *
 * \return 0 if succeeds, otherwise fails.
 */
uint32_t ili93xx_draw_pixel(uint32_t ul_x, uint32_t ul_y)
{
  4007c4:	b510      	push	{r4, lr}
	if ((ul_x >= g_ul_lcd_x_length) || (ul_y >= g_ul_lcd_y_length)) {
  4007c6:	4b16      	ldr	r3, [pc, #88]	; (400820 <ili93xx_draw_pixel+0x5c>)
  4007c8:	681b      	ldr	r3, [r3, #0]
  4007ca:	4283      	cmp	r3, r0
  4007cc:	d921      	bls.n	400812 <ili93xx_draw_pixel+0x4e>
  4007ce:	4b15      	ldr	r3, [pc, #84]	; (400824 <ili93xx_draw_pixel+0x60>)
  4007d0:	681b      	ldr	r3, [r3, #0]
  4007d2:	428b      	cmp	r3, r1
  4007d4:	d91f      	bls.n	400816 <ili93xx_draw_pixel+0x52>
		return 1;
	}

	if (g_uc_device_type == DEVICE_TYPE_ILI9325) {
  4007d6:	4b14      	ldr	r3, [pc, #80]	; (400828 <ili93xx_draw_pixel+0x64>)
  4007d8:	781b      	ldrb	r3, [r3, #0]
  4007da:	2b01      	cmp	r3, #1
  4007dc:	d10b      	bne.n	4007f6 <ili93xx_draw_pixel+0x32>
		/** Set cursor */
		ili93xx_set_cursor_position(ul_x, ul_y);
  4007de:	b289      	uxth	r1, r1
  4007e0:	b280      	uxth	r0, r0
  4007e2:	4b12      	ldr	r3, [pc, #72]	; (40082c <ili93xx_draw_pixel+0x68>)
  4007e4:	4798      	blx	r3
		/** Prepare to write in GRAM */
		ili93xx_write_ram_prepare();
  4007e6:	4b12      	ldr	r3, [pc, #72]	; (400830 <ili93xx_draw_pixel+0x6c>)
  4007e8:	4798      	blx	r3
		ili93xx_write_ram(*g_ul_pixel_cache);
  4007ea:	4b12      	ldr	r3, [pc, #72]	; (400834 <ili93xx_draw_pixel+0x70>)
  4007ec:	6818      	ldr	r0, [r3, #0]
  4007ee:	4b12      	ldr	r3, [pc, #72]	; (400838 <ili93xx_draw_pixel+0x74>)
  4007f0:	4798      	blx	r3
		/** Prepare to write in GRAM */
		ili93xx_write_ram_prepare();
		ili93xx_write_ram(*g_ul_pixel_cache);
	}

	return 0;
  4007f2:	2000      	movs	r0, #0
  4007f4:	bd10      	pop	{r4, pc}
		/** Set cursor */
		ili93xx_set_cursor_position(ul_x, ul_y);
		/** Prepare to write in GRAM */
		ili93xx_write_ram_prepare();
		ili93xx_write_ram(*g_ul_pixel_cache);
	} else if (g_uc_device_type == DEVICE_TYPE_ILI9341) {
  4007f6:	2b02      	cmp	r3, #2
  4007f8:	d10f      	bne.n	40081a <ili93xx_draw_pixel+0x56>
		ili93xx_set_window(ul_x, ul_y, 0, 0);
  4007fa:	2300      	movs	r3, #0
  4007fc:	461a      	mov	r2, r3
  4007fe:	4c0f      	ldr	r4, [pc, #60]	; (40083c <ili93xx_draw_pixel+0x78>)
  400800:	47a0      	blx	r4
		/** Prepare to write in GRAM */
		ili93xx_write_ram_prepare();
  400802:	4b0b      	ldr	r3, [pc, #44]	; (400830 <ili93xx_draw_pixel+0x6c>)
  400804:	4798      	blx	r3
		ili93xx_write_ram(*g_ul_pixel_cache);
  400806:	4b0b      	ldr	r3, [pc, #44]	; (400834 <ili93xx_draw_pixel+0x70>)
  400808:	6818      	ldr	r0, [r3, #0]
  40080a:	4b0b      	ldr	r3, [pc, #44]	; (400838 <ili93xx_draw_pixel+0x74>)
  40080c:	4798      	blx	r3
	}

	return 0;
  40080e:	2000      	movs	r0, #0
  400810:	bd10      	pop	{r4, pc}
 * \return 0 if succeeds, otherwise fails.
 */
uint32_t ili93xx_draw_pixel(uint32_t ul_x, uint32_t ul_y)
{
	if ((ul_x >= g_ul_lcd_x_length) || (ul_y >= g_ul_lcd_y_length)) {
		return 1;
  400812:	2001      	movs	r0, #1
  400814:	bd10      	pop	{r4, pc}
  400816:	2001      	movs	r0, #1
  400818:	bd10      	pop	{r4, pc}
		/** Prepare to write in GRAM */
		ili93xx_write_ram_prepare();
		ili93xx_write_ram(*g_ul_pixel_cache);
	}

	return 0;
  40081a:	2000      	movs	r0, #0
}
  40081c:	bd10      	pop	{r4, pc}
  40081e:	bf00      	nop
  400820:	20000000 	.word	0x20000000
  400824:	20000004 	.word	0x20000004
  400828:	20000c68 	.word	0x20000c68
  40082c:	004004bd 	.word	0x004004bd
  400830:	004001c9 	.word	0x004001c9
  400834:	200008a8 	.word	0x200008a8
  400838:	004001f9 	.word	0x004001f9
  40083c:	00400415 	.word	0x00400415

00400840 <ili93xx_draw_filled_rectangle>:
 * \param ul_x2 X coordinate of lower-right corner on LCD.
 * \param ul_y2 Y coordinate of lower-right corner on LCD.
 */
void ili93xx_draw_filled_rectangle(uint32_t ul_x1, uint32_t ul_y1,
		uint32_t ul_x2, uint32_t ul_y2)
{
  400840:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400844:	b084      	sub	sp, #16
  400846:	9003      	str	r0, [sp, #12]
  400848:	9102      	str	r1, [sp, #8]
  40084a:	9201      	str	r2, [sp, #4]
  40084c:	aa04      	add	r2, sp, #16
  40084e:	f842 3d10 	str.w	r3, [r2, #-16]!
	uint32_t size, blocks;

	/** Swap coordinates if necessary */
	ili93xx_check_box_coordinates(&ul_x1, &ul_y1, &ul_x2, &ul_y2);
  400852:	4613      	mov	r3, r2
  400854:	aa01      	add	r2, sp, #4
  400856:	a902      	add	r1, sp, #8
  400858:	a803      	add	r0, sp, #12
  40085a:	4c21      	ldr	r4, [pc, #132]	; (4008e0 <ili93xx_draw_filled_rectangle+0xa0>)
  40085c:	47a0      	blx	r4

	/** Determine the refresh window area */
	ili93xx_set_window(ul_x1, ul_y1, (ul_x2 - ul_x1) + 1,
  40085e:	9803      	ldr	r0, [sp, #12]
			(ul_y2 - ul_y1) + 1);
  400860:	9902      	ldr	r1, [sp, #8]

	/** Swap coordinates if necessary */
	ili93xx_check_box_coordinates(&ul_x1, &ul_y1, &ul_x2, &ul_y2);

	/** Determine the refresh window area */
	ili93xx_set_window(ul_x1, ul_y1, (ul_x2 - ul_x1) + 1,
  400862:	9b00      	ldr	r3, [sp, #0]
  400864:	3301      	adds	r3, #1
  400866:	9a01      	ldr	r2, [sp, #4]
  400868:	3201      	adds	r2, #1
  40086a:	1a5b      	subs	r3, r3, r1
  40086c:	1a12      	subs	r2, r2, r0
  40086e:	4c1d      	ldr	r4, [pc, #116]	; (4008e4 <ili93xx_draw_filled_rectangle+0xa4>)
  400870:	47a0      	blx	r4
			(ul_y2 - ul_y1) + 1);

	/** Set cursor */
	ili93xx_set_cursor_position(ul_x1, ul_y1);
  400872:	f8bd 1008 	ldrh.w	r1, [sp, #8]
  400876:	f8bd 000c 	ldrh.w	r0, [sp, #12]
  40087a:	4b1b      	ldr	r3, [pc, #108]	; (4008e8 <ili93xx_draw_filled_rectangle+0xa8>)
  40087c:	4798      	blx	r3

	/** Prepare to write in Graphic RAM */
	ili93xx_write_ram_prepare();
  40087e:	4b1b      	ldr	r3, [pc, #108]	; (4008ec <ili93xx_draw_filled_rectangle+0xac>)
  400880:	4798      	blx	r3

	size = (ul_x2 - ul_x1 + 1) * (ul_y2 - ul_y1 + 1);
  400882:	9a03      	ldr	r2, [sp, #12]
  400884:	9b01      	ldr	r3, [sp, #4]
  400886:	1a9a      	subs	r2, r3, r2
  400888:	9b00      	ldr	r3, [sp, #0]
  40088a:	f103 0801 	add.w	r8, r3, #1
  40088e:	9b02      	ldr	r3, [sp, #8]
  400890:	ebc3 0808 	rsb	r8, r3, r8
  400894:	fb02 8808 	mla	r8, r2, r8, r8

	/** Send pixels blocks => one SPI IT / block */
	blocks = size / LCD_DATA_CACHE_SIZE;
  400898:	4c15      	ldr	r4, [pc, #84]	; (4008f0 <ili93xx_draw_filled_rectangle+0xb0>)
  40089a:	fba4 3408 	umull	r3, r4, r4, r8
	while (blocks--) {
  40089e:	09e4      	lsrs	r4, r4, #7
  4008a0:	d007      	beq.n	4008b2 <ili93xx_draw_filled_rectangle+0x72>
		ili93xx_write_ram_buffer(g_ul_pixel_cache,
  4008a2:	4f14      	ldr	r7, [pc, #80]	; (4008f4 <ili93xx_draw_filled_rectangle+0xb4>)
  4008a4:	26f0      	movs	r6, #240	; 0xf0
  4008a6:	4d14      	ldr	r5, [pc, #80]	; (4008f8 <ili93xx_draw_filled_rectangle+0xb8>)
  4008a8:	4631      	mov	r1, r6
  4008aa:	4638      	mov	r0, r7
  4008ac:	47a8      	blx	r5

	size = (ul_x2 - ul_x1 + 1) * (ul_y2 - ul_y1 + 1);

	/** Send pixels blocks => one SPI IT / block */
	blocks = size / LCD_DATA_CACHE_SIZE;
	while (blocks--) {
  4008ae:	3c01      	subs	r4, #1
  4008b0:	d1fa      	bne.n	4008a8 <ili93xx_draw_filled_rectangle+0x68>
		ili93xx_write_ram_buffer(g_ul_pixel_cache,
								LCD_DATA_CACHE_SIZE);
	}

	/** Send remaining pixels */
	ili93xx_write_ram_buffer(g_ul_pixel_cache,
  4008b2:	490f      	ldr	r1, [pc, #60]	; (4008f0 <ili93xx_draw_filled_rectangle+0xb0>)
  4008b4:	fba1 3108 	umull	r3, r1, r1, r8
  4008b8:	09c9      	lsrs	r1, r1, #7
  4008ba:	ebc1 1101 	rsb	r1, r1, r1, lsl #4
  4008be:	eba8 1101 	sub.w	r1, r8, r1, lsl #4
  4008c2:	480c      	ldr	r0, [pc, #48]	; (4008f4 <ili93xx_draw_filled_rectangle+0xb4>)
  4008c4:	4b0c      	ldr	r3, [pc, #48]	; (4008f8 <ili93xx_draw_filled_rectangle+0xb8>)
  4008c6:	4798      	blx	r3
					size % LCD_DATA_CACHE_SIZE);

	/** Reset the refresh window area */
	ili93xx_set_window(0, 0, g_ul_lcd_x_length, g_ul_lcd_y_length);
  4008c8:	4b0c      	ldr	r3, [pc, #48]	; (4008fc <ili93xx_draw_filled_rectangle+0xbc>)
  4008ca:	681b      	ldr	r3, [r3, #0]
  4008cc:	4a0c      	ldr	r2, [pc, #48]	; (400900 <ili93xx_draw_filled_rectangle+0xc0>)
  4008ce:	6812      	ldr	r2, [r2, #0]
  4008d0:	2100      	movs	r1, #0
  4008d2:	4608      	mov	r0, r1
  4008d4:	4c03      	ldr	r4, [pc, #12]	; (4008e4 <ili93xx_draw_filled_rectangle+0xa4>)
  4008d6:	47a0      	blx	r4
}
  4008d8:	b004      	add	sp, #16
  4008da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4008de:	bf00      	nop
  4008e0:	004002ed 	.word	0x004002ed
  4008e4:	00400415 	.word	0x00400415
  4008e8:	004004bd 	.word	0x004004bd
  4008ec:	004001c9 	.word	0x004001c9
  4008f0:	88888889 	.word	0x88888889
  4008f4:	200008a8 	.word	0x200008a8
  4008f8:	00400211 	.word	0x00400211
  4008fc:	20000004 	.word	0x20000004
  400900:	20000000 	.word	0x20000000

00400904 <ili93xx_draw_string>:
 * \param ul_x X coordinate of string top-left corner.
 * \param ul_y Y coordinate of string top-left corner.
 * \param p_str String to display.
 */
void ili93xx_draw_string(uint32_t ul_x, uint32_t ul_y, const uint8_t *p_str)
{
  400904:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  400908:	b085      	sub	sp, #20
  40090a:	9003      	str	r0, [sp, #12]
  40090c:	9202      	str	r2, [sp, #8]
	uint32_t xorg = ul_x;

	while (*p_str != 0) {
  40090e:	7813      	ldrb	r3, [r2, #0]
  400910:	2b00      	cmp	r3, #0
  400912:	d045      	beq.n	4009a0 <ili93xx_draw_string+0x9c>
  400914:	468a      	mov	sl, r1
  400916:	9001      	str	r0, [sp, #4]
		 * Draw pixel on screen depending on the corresponding bit value
		 * from the charset
		 */
		for (row = 0; row < 8; row++) {
			if ((p_uc_charset10x14[offset0] >> (7 - row)) & 0x1) {
				ili93xx_draw_pixel(ul_x + col, ul_y + row);
  400918:	f8df 8090 	ldr.w	r8, [pc, #144]	; 4009ac <ili93xx_draw_string+0xa8>
{
	uint32_t xorg = ul_x;

	while (*p_str != 0) {
		/** If newline, jump to the next line (font height + 2) */
		if (*p_str == '\n') {
  40091c:	2b0a      	cmp	r3, #10
  40091e:	d104      	bne.n	40092a <ili93xx_draw_string+0x26>
			ul_y += gfont.height + 2;
  400920:	f10a 0a10 	add.w	sl, sl, #16
			ul_x = xorg;
  400924:	9b03      	ldr	r3, [sp, #12]
  400926:	9301      	str	r3, [sp, #4]
  400928:	e034      	b.n	400994 <ili93xx_draw_string+0x90>
  40092a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  40092e:	4e1e      	ldr	r6, [pc, #120]	; (4009a8 <ili93xx_draw_string+0xa4>)
  400930:	eb06 0383 	add.w	r3, r6, r3, lsl #2
  400934:	f2a3 267f 	subw	r6, r3, #639	; 0x27f
  400938:	9f01      	ldr	r7, [sp, #4]
  40093a:	463b      	mov	r3, r7
  40093c:	330a      	adds	r3, #10
  40093e:	9300      	str	r3, [sp, #0]
		 * Draw pixel on screen depending on the corresponding bit value
		 * from the charset
		 */
		for (row = 0; row < 8; row++) {
			if ((p_uc_charset10x14[offset0] >> (7 - row)) & 0x1) {
				ili93xx_draw_pixel(ul_x + col, ul_y + row);
  400940:	f10a 0907 	add.w	r9, sl, #7

	/**
	 * Compute offset according of the specified ASCII character
	 *  Note: the first 32 characters of the ASCII table are not handled
	 */
	offset = ((uint32_t)uc_c - 0x20) * 20;
  400944:	2407      	movs	r4, #7
  400946:	46b3      	mov	fp, r6
  400948:	465d      	mov	r5, fp
		/**
		 * Draw pixel on screen depending on the corresponding bit value
		 * from the charset
		 */
		for (row = 0; row < 8; row++) {
			if ((p_uc_charset10x14[offset0] >> (7 - row)) & 0x1) {
  40094a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
  40094e:	4123      	asrs	r3, r4
  400950:	f013 0f01 	tst.w	r3, #1
  400954:	d003      	beq.n	40095e <ili93xx_draw_string+0x5a>
				ili93xx_draw_pixel(ul_x + col, ul_y + row);
  400956:	ebc4 0109 	rsb	r1, r4, r9
  40095a:	4638      	mov	r0, r7
  40095c:	47c0      	blx	r8
  40095e:	3c01      	subs	r4, #1

		/**
		 * Draw pixel on screen depending on the corresponding bit value
		 * from the charset
		 */
		for (row = 0; row < 8; row++) {
  400960:	f1b4 3fff 	cmp.w	r4, #4294967295
  400964:	d1f0      	bne.n	400948 <ili93xx_draw_string+0x44>
  400966:	2407      	movs	r4, #7
			}
		}

		for (row = 0; row < 6; row++) {
			if ((p_uc_charset10x14[offset1] >> (7 - row)) & 0x1) {
				ili93xx_draw_pixel(ul_x + col, ul_y + row + 8);
  400968:	f10a 0b0f 	add.w	fp, sl, #15
				ili93xx_draw_pixel(ul_x + col, ul_y + row);
			}
		}

		for (row = 0; row < 6; row++) {
			if ((p_uc_charset10x14[offset1] >> (7 - row)) & 0x1) {
  40096c:	782b      	ldrb	r3, [r5, #0]
  40096e:	4123      	asrs	r3, r4
  400970:	f013 0f01 	tst.w	r3, #1
  400974:	d003      	beq.n	40097e <ili93xx_draw_string+0x7a>
				ili93xx_draw_pixel(ul_x + col, ul_y + row + 8);
  400976:	ebc4 010b 	rsb	r1, r4, fp
  40097a:	4638      	mov	r0, r7
  40097c:	47c0      	blx	r8
  40097e:	3c01      	subs	r4, #1
			if ((p_uc_charset10x14[offset0] >> (7 - row)) & 0x1) {
				ili93xx_draw_pixel(ul_x + col, ul_y + row);
			}
		}

		for (row = 0; row < 6; row++) {
  400980:	2c01      	cmp	r4, #1
  400982:	d1f3      	bne.n	40096c <ili93xx_draw_string+0x68>
  400984:	3602      	adds	r6, #2
  400986:	3701      	adds	r7, #1
	 * Compute offset according of the specified ASCII character
	 *  Note: the first 32 characters of the ASCII table are not handled
	 */
	offset = ((uint32_t)uc_c - 0x20) * 20;

	for (col = 0; col < 10; col++) {
  400988:	9b00      	ldr	r3, [sp, #0]
  40098a:	42bb      	cmp	r3, r7
  40098c:	d1da      	bne.n	400944 <ili93xx_draw_string+0x40>
			/**
			 * Draw the character and place cursor right after (font
			 * width + 2)
			 */
			ili93xx_draw_char(ul_x, ul_y, *p_str);
			ul_x += gfont.width + 2;
  40098e:	9b01      	ldr	r3, [sp, #4]
  400990:	330c      	adds	r3, #12
  400992:	9301      	str	r3, [sp, #4]
 */
void ili93xx_draw_string(uint32_t ul_x, uint32_t ul_y, const uint8_t *p_str)
{
	uint32_t xorg = ul_x;

	while (*p_str != 0) {
  400994:	9a02      	ldr	r2, [sp, #8]
  400996:	f812 3f01 	ldrb.w	r3, [r2, #1]!
  40099a:	9202      	str	r2, [sp, #8]
  40099c:	2b00      	cmp	r3, #0
  40099e:	d1bd      	bne.n	40091c <ili93xx_draw_string+0x18>
			ul_x += gfont.width + 2;
		}

		p_str++;
	}
}
  4009a0:	b005      	add	sp, #20
  4009a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4009a6:	bf00      	nop
  4009a8:	00406670 	.word	0x00406670
  4009ac:	004007c5 	.word	0x004007c5

004009b0 <adc_init>:
 *
 * \return 0 on success.
 */
uint32_t adc_init(Adc *p_adc, const uint32_t ul_mck,
		const uint32_t ul_adc_clock, const enum adc_startup_time startup)
{
  4009b0:	b430      	push	{r4, r5}
	uint32_t ul_prescal;

	/*  Reset the controller. */
	p_adc->ADC_CR = ADC_CR_SWRST;
  4009b2:	2401      	movs	r4, #1
  4009b4:	6004      	str	r4, [r0, #0]

	/* Reset Mode Register. */
	p_adc->ADC_MR = 0;
  4009b6:	2500      	movs	r5, #0
  4009b8:	6045      	str	r5, [r0, #4]

	/* Reset PDC transfer. */
	p_adc->ADC_PTCR = (ADC_PTCR_RXTDIS | ADC_PTCR_TXTDIS);
  4009ba:	f240 2402 	movw	r4, #514	; 0x202
  4009be:	f8c0 4120 	str.w	r4, [r0, #288]	; 0x120
	p_adc->ADC_RCR = 0;
  4009c2:	f8c0 5104 	str.w	r5, [r0, #260]	; 0x104
	p_adc->ADC_RNCR = 0;
  4009c6:	f8c0 5114 	str.w	r5, [r0, #276]	; 0x114

	ul_prescal = ul_mck / (2 * ul_adc_clock) - 1;
	p_adc->ADC_MR |= ADC_MR_PRESCAL(ul_prescal) | startup;
  4009ca:	6844      	ldr	r4, [r0, #4]
  4009cc:	0052      	lsls	r2, r2, #1
  4009ce:	fbb1 f1f2 	udiv	r1, r1, r2
  4009d2:	1e4a      	subs	r2, r1, #1
  4009d4:	0212      	lsls	r2, r2, #8
  4009d6:	b292      	uxth	r2, r2
  4009d8:	4323      	orrs	r3, r4
  4009da:	431a      	orrs	r2, r3
  4009dc:	6042      	str	r2, [r0, #4]
	return 0;
}
  4009de:	4628      	mov	r0, r5
  4009e0:	bc30      	pop	{r4, r5}
  4009e2:	4770      	bx	lr

004009e4 <adc_configure_trigger>:
 *
 */
void adc_configure_trigger(Adc *p_adc, const enum adc_trigger_t trigger,
		uint8_t uc_freerun)
{
	p_adc->ADC_MR |= trigger | ((uc_freerun << 7) & ADC_MR_FREERUN);
  4009e4:	6843      	ldr	r3, [r0, #4]
  4009e6:	01d2      	lsls	r2, r2, #7
  4009e8:	b2d2      	uxtb	r2, r2
  4009ea:	4319      	orrs	r1, r3
  4009ec:	4311      	orrs	r1, r2
  4009ee:	6041      	str	r1, [r0, #4]
  4009f0:	4770      	bx	lr
  4009f2:	bf00      	nop

004009f4 <adc_configure_timing>:
 * \param uc_settling Analog settling time = (uc_settling + 1) / ADC clock.
 * \param uc_transfer Data transfer time = (uc_transfer * 2 + 3) / ADC clock.
 */
void adc_configure_timing(Adc *p_adc, const uint8_t uc_tracking,
		const enum adc_settling_time_t settling,const uint8_t uc_transfer)
{
  4009f4:	b410      	push	{r4}
	p_adc->ADC_MR |= ADC_MR_TRANSFER(uc_transfer)
  4009f6:	6844      	ldr	r4, [r0, #4]
  4009f8:	0609      	lsls	r1, r1, #24
  4009fa:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
  4009fe:	4322      	orrs	r2, r4
  400a00:	430a      	orrs	r2, r1
  400a02:	071b      	lsls	r3, r3, #28
  400a04:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
  400a08:	4313      	orrs	r3, r2
  400a0a:	6043      	str	r3, [r0, #4]
			| settling | ADC_MR_TRACKTIM(uc_tracking);
}
  400a0c:	bc10      	pop	{r4}
  400a0e:	4770      	bx	lr

00400a10 <adc_start>:
 * \param p_adc Pointer to an ADC instance.
 */

void adc_start(Adc *p_adc)
{
	p_adc->ADC_CR = ADC_CR_START;
  400a10:	2302      	movs	r3, #2
  400a12:	6003      	str	r3, [r0, #0]
  400a14:	4770      	bx	lr
  400a16:	bf00      	nop

00400a18 <adc_enable_channel>:
 * \param p_adc Pointer to an ADC instance.
 * \param adc_ch ADC channel number.
 */
void adc_enable_channel(Adc *p_adc, const enum adc_channel_num_t adc_ch)
{
	p_adc->ADC_CHER = 1 << adc_ch;
  400a18:	2301      	movs	r3, #1
  400a1a:	fa03 f101 	lsl.w	r1, r3, r1
  400a1e:	6101      	str	r1, [r0, #16]
  400a20:	4770      	bx	lr
  400a22:	bf00      	nop

00400a24 <adc_get_latest_value>:
 *
 * \return ADC latest value.
 */
uint32_t adc_get_latest_value(const Adc *p_adc)
{
	return p_adc->ADC_LCDR;
  400a24:	6a00      	ldr	r0, [r0, #32]
}
  400a26:	4770      	bx	lr

00400a28 <adc_enable_interrupt>:
 * \param p_adc Pointer to an ADC instance.
 * \param ul_source Interrupts to be enabled.
 */
void adc_enable_interrupt(Adc *p_adc, const uint32_t ul_source)
{
	p_adc->ADC_IER = ul_source;
  400a28:	6241      	str	r1, [r0, #36]	; 0x24
  400a2a:	4770      	bx	lr

00400a2c <adc_get_status>:
 *
 * \return ADC status structure.
 */
uint32_t adc_get_status(const Adc *p_adc)
{
	return p_adc->ADC_ISR;
  400a2c:	6b00      	ldr	r0, [r0, #48]	; 0x30
}
  400a2e:	4770      	bx	lr

00400a30 <tc_init>:
 */
void tc_init(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_mode)
{
  400a30:	b410      	push	{r4}

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  400a32:	0189      	lsls	r1, r1, #6
  400a34:	1843      	adds	r3, r0, r1

	/*  Disable TC clock. */
	tc_channel->TC_CCR = TC_CCR_CLKDIS;
  400a36:	2402      	movs	r4, #2
  400a38:	5044      	str	r4, [r0, r1]

	/*  Disable interrupts. */
	tc_channel->TC_IDR = 0xFFFFFFFF;
  400a3a:	f04f 31ff 	mov.w	r1, #4294967295
  400a3e:	6299      	str	r1, [r3, #40]	; 0x28

	/*  Clear status register. */
	tc_channel->TC_SR;
  400a40:	6a19      	ldr	r1, [r3, #32]

	/*  Set mode. */
	tc_channel->TC_CMR = ul_mode;
  400a42:	605a      	str	r2, [r3, #4]
}
  400a44:	bc10      	pop	{r4}
  400a46:	4770      	bx	lr

00400a48 <tc_start>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKEN | TC_CCR_SWTRG;
  400a48:	0189      	lsls	r1, r1, #6
  400a4a:	2305      	movs	r3, #5
  400a4c:	5043      	str	r3, [r0, r1]
  400a4e:	4770      	bx	lr

00400a50 <tc_write_rc>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_RC = ul_value;
  400a50:	eb00 1181 	add.w	r1, r0, r1, lsl #6
  400a54:	61ca      	str	r2, [r1, #28]
  400a56:	4770      	bx	lr

00400a58 <tc_enable_interrupt>:

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  400a58:	eb00 1181 	add.w	r1, r0, r1, lsl #6
	tc_channel->TC_IER = ul_sources;
  400a5c:	624a      	str	r2, [r1, #36]	; 0x24
  400a5e:	4770      	bx	lr

00400a60 <tc_get_status>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
			
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  400a60:	eb00 1181 	add.w	r1, r0, r1, lsl #6
	return tc_channel->TC_SR;
  400a64:	6a08      	ldr	r0, [r1, #32]
}
  400a66:	4770      	bx	lr

00400a68 <tc_find_mck_divisor>:
		uint32_t ul_freq,
		uint32_t ul_mck,
		uint32_t *p_uldiv,
		uint32_t *p_ultcclks,
		uint32_t ul_boardmck)
{
  400a68:	b4f0      	push	{r4, r5, r6, r7}
  400a6a:	b086      	sub	sp, #24
	const uint32_t divisors[5] = { 2, 8, 32, 128,
  400a6c:	2402      	movs	r4, #2
  400a6e:	9401      	str	r4, [sp, #4]
  400a70:	2408      	movs	r4, #8
  400a72:	9402      	str	r4, [sp, #8]
  400a74:	2420      	movs	r4, #32
  400a76:	9403      	str	r4, [sp, #12]
  400a78:	2480      	movs	r4, #128	; 0x80
  400a7a:	9404      	str	r4, [sp, #16]
  400a7c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  400a7e:	0be4      	lsrs	r4, r4, #15
  400a80:	9405      	str	r4, [sp, #20]
	for (ul_index = 0;
			ul_index < (sizeof(divisors) / sizeof(divisors[0]));
			ul_index++) {
		ul_high = ul_mck / divisors[ul_index];
		ul_low  = ul_high / TC_DIV_FACTOR;
		if (ul_freq > ul_high) {
  400a82:	ebb0 0f51 	cmp.w	r0, r1, lsr #1
  400a86:	d81c      	bhi.n	400ac2 <tc_find_mck_divisor+0x5a>
  400a88:	0c4c      	lsrs	r4, r1, #17
			return 0;
		} else if (ul_freq >= ul_low) {
  400a8a:	42a0      	cmp	r0, r4
  400a8c:	d21f      	bcs.n	400ace <tc_find_mck_divisor+0x66>
  400a8e:	ae01      	add	r6, sp, #4
	uint32_t ul_high, ul_low;

	/*  Satisfy frequency bound. */
	for (ul_index = 0;
			ul_index < (sizeof(divisors) / sizeof(divisors[0]));
			ul_index++) {
  400a90:	2501      	movs	r5, #1
		ul_high = ul_mck / divisors[ul_index];
  400a92:	f856 4f04 	ldr.w	r4, [r6, #4]!
  400a96:	fbb1 f4f4 	udiv	r4, r1, r4
		ul_low  = ul_high / TC_DIV_FACTOR;
  400a9a:	0c27      	lsrs	r7, r4, #16
		if (ul_freq > ul_high) {
  400a9c:	4284      	cmp	r4, r0
  400a9e:	d312      	bcc.n	400ac6 <tc_find_mck_divisor+0x5e>
			return 0;
		} else if (ul_freq >= ul_low) {
  400aa0:	4287      	cmp	r7, r0
  400aa2:	d915      	bls.n	400ad0 <tc_find_mck_divisor+0x68>
	uint32_t ul_high, ul_low;

	/*  Satisfy frequency bound. */
	for (ul_index = 0;
			ul_index < (sizeof(divisors) / sizeof(divisors[0]));
			ul_index++) {
  400aa4:	3501      	adds	r5, #1
			ul_boardmck / FREQ_SLOW_CLOCK_EXT };
	uint32_t ul_index;
	uint32_t ul_high, ul_low;

	/*  Satisfy frequency bound. */
	for (ul_index = 0;
  400aa6:	2d05      	cmp	r5, #5
  400aa8:	d1f3      	bne.n	400a92 <tc_find_mck_divisor+0x2a>
		} else if (ul_freq >= ul_low) {
			break;
		}
	}
	if (ul_index >= (sizeof(divisors) / sizeof(divisors[0]))) {
		return 0;
  400aaa:	2000      	movs	r0, #0
  400aac:	e013      	b.n	400ad6 <tc_find_mck_divisor+0x6e>
	}

	/*  Store results. */
	if (p_uldiv) {
		*p_uldiv = divisors[ul_index];
  400aae:	a906      	add	r1, sp, #24
  400ab0:	eb01 0185 	add.w	r1, r1, r5, lsl #2
  400ab4:	f851 1c14 	ldr.w	r1, [r1, #-20]
  400ab8:	6011      	str	r1, [r2, #0]
	}

	if (p_ultcclks) {
  400aba:	b133      	cbz	r3, 400aca <tc_find_mck_divisor+0x62>
		*p_ultcclks = ul_index;
  400abc:	601d      	str	r5, [r3, #0]
	}

	return 1;
  400abe:	2001      	movs	r0, #1
  400ac0:	e009      	b.n	400ad6 <tc_find_mck_divisor+0x6e>
			ul_index < (sizeof(divisors) / sizeof(divisors[0]));
			ul_index++) {
		ul_high = ul_mck / divisors[ul_index];
		ul_low  = ul_high / TC_DIV_FACTOR;
		if (ul_freq > ul_high) {
			return 0;
  400ac2:	2000      	movs	r0, #0
  400ac4:	e007      	b.n	400ad6 <tc_find_mck_divisor+0x6e>
  400ac6:	2000      	movs	r0, #0
  400ac8:	e005      	b.n	400ad6 <tc_find_mck_divisor+0x6e>

	if (p_ultcclks) {
		*p_ultcclks = ul_index;
	}

	return 1;
  400aca:	2001      	movs	r0, #1
  400acc:	e003      	b.n	400ad6 <tc_find_mck_divisor+0x6e>
			ul_boardmck / FREQ_SLOW_CLOCK_EXT };
	uint32_t ul_index;
	uint32_t ul_high, ul_low;

	/*  Satisfy frequency bound. */
	for (ul_index = 0;
  400ace:	2500      	movs	r5, #0
	if (ul_index >= (sizeof(divisors) / sizeof(divisors[0]))) {
		return 0;
	}

	/*  Store results. */
	if (p_uldiv) {
  400ad0:	2a00      	cmp	r2, #0
  400ad2:	d1ec      	bne.n	400aae <tc_find_mck_divisor+0x46>
  400ad4:	e7f1      	b.n	400aba <tc_find_mck_divisor+0x52>
	if (p_ultcclks) {
		*p_ultcclks = ul_index;
	}

	return 1;
}
  400ad6:	b006      	add	sp, #24
  400ad8:	bcf0      	pop	{r4, r5, r6, r7}
  400ada:	4770      	bx	lr

00400adc <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  400adc:	b510      	push	{r4, lr}
	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  400ade:	480e      	ldr	r0, [pc, #56]	; (400b18 <sysclk_init+0x3c>)
  400ae0:	4b0e      	ldr	r3, [pc, #56]	; (400b1c <sysclk_init+0x40>)
  400ae2:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  400ae4:	213e      	movs	r1, #62	; 0x3e
  400ae6:	2000      	movs	r0, #0
  400ae8:	4b0d      	ldr	r3, [pc, #52]	; (400b20 <sysclk_init+0x44>)
  400aea:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  400aec:	4c0d      	ldr	r4, [pc, #52]	; (400b24 <sysclk_init+0x48>)
  400aee:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  400af0:	2800      	cmp	r0, #0
  400af2:	d0fc      	beq.n	400aee <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  400af4:	4b0c      	ldr	r3, [pc, #48]	; (400b28 <sysclk_init+0x4c>)
  400af6:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  400af8:	4a0c      	ldr	r2, [pc, #48]	; (400b2c <sysclk_init+0x50>)
  400afa:	4b0d      	ldr	r3, [pc, #52]	; (400b30 <sysclk_init+0x54>)
  400afc:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
  400afe:	4c0d      	ldr	r4, [pc, #52]	; (400b34 <sysclk_init+0x58>)
  400b00:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  400b02:	2800      	cmp	r0, #0
  400b04:	d0fc      	beq.n	400b00 <sysclk_init+0x24>

		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  400b06:	2010      	movs	r0, #16
  400b08:	4b0b      	ldr	r3, [pc, #44]	; (400b38 <sysclk_init+0x5c>)
  400b0a:	4798      	blx	r3
		pmc_switch_mck_to_pllbck(CONFIG_SYSCLK_PRES);
	}
#endif

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  400b0c:	4b0b      	ldr	r3, [pc, #44]	; (400b3c <sysclk_init+0x60>)
  400b0e:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  400b10:	4801      	ldr	r0, [pc, #4]	; (400b18 <sysclk_init+0x3c>)
  400b12:	4b02      	ldr	r3, [pc, #8]	; (400b1c <sysclk_init+0x40>)
  400b14:	4798      	blx	r3
  400b16:	bd10      	pop	{r4, pc}
  400b18:	07270e00 	.word	0x07270e00
  400b1c:	00401719 	.word	0x00401719
  400b20:	0040115d 	.word	0x0040115d
  400b24:	004011b1 	.word	0x004011b1
  400b28:	004011c1 	.word	0x004011c1
  400b2c:	20133f01 	.word	0x20133f01
  400b30:	400e0400 	.word	0x400e0400
  400b34:	004011d1 	.word	0x004011d1
  400b38:	004010f5 	.word	0x004010f5
  400b3c:	00401605 	.word	0x00401605

00400b40 <board_init>:
#include "conf_board.h"
#include "gpio.h"
#include "ioport.h"

void board_init(void)
{
  400b40:	b538      	push	{r3, r4, r5, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  400b42:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  400b46:	4b46      	ldr	r3, [pc, #280]	; (400c60 <board_init+0x120>)
  400b48:	605a      	str	r2, [r3, #4]
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  400b4a:	200b      	movs	r0, #11
  400b4c:	4c45      	ldr	r4, [pc, #276]	; (400c64 <board_init+0x124>)
  400b4e:	47a0      	blx	r4
  400b50:	200c      	movs	r0, #12
  400b52:	47a0      	blx	r4
  400b54:	200d      	movs	r0, #13
  400b56:	47a0      	blx	r4
	 * Here IOPORT must be initialized for others to use before setting up IO.
	 */
	ioport_init();

	/* Configure LED pins */
	gpio_configure_pin(LED0_GPIO, LED0_FLAGS);
  400b58:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  400b5c:	2013      	movs	r0, #19
  400b5e:	4c42      	ldr	r4, [pc, #264]	; (400c68 <board_init+0x128>)
  400b60:	47a0      	blx	r4
	gpio_configure_pin(LED1_GPIO, LED1_FLAGS);
  400b62:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  400b66:	2014      	movs	r0, #20
  400b68:	47a0      	blx	r4

	/* Configure Push Button pins */
	gpio_configure_pin(GPIO_PUSH_BUTTON_1, GPIO_PUSH_BUTTON_1_FLAGS);
  400b6a:	4940      	ldr	r1, [pc, #256]	; (400c6c <board_init+0x12c>)
  400b6c:	2023      	movs	r0, #35	; 0x23
  400b6e:	47a0      	blx	r4
	gpio_configure_pin(GPIO_PUSH_BUTTON_2, GPIO_PUSH_BUTTON_2_FLAGS);
  400b70:	493f      	ldr	r1, [pc, #252]	; (400c70 <board_init+0x130>)
  400b72:	204c      	movs	r0, #76	; 0x4c
  400b74:	47a0      	blx	r4

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	gpio_configure_group(PINS_UART0_PIO, PINS_UART0, PINS_UART0_FLAGS);
  400b76:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  400b7a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
  400b7e:	483d      	ldr	r0, [pc, #244]	; (400c74 <board_init+0x134>)
  400b80:	4b3d      	ldr	r3, [pc, #244]	; (400c78 <board_init+0x138>)
  400b82:	4798      	blx	r3
#endif

	/* Configure ADC example pins */
#ifdef CONF_BOARD_ADC
	/* TC TIOA configuration */
	gpio_configure_pin(PIN_TC0_TIOA0,PIN_TC0_TIOA0_FLAGS);
  400b84:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400b88:	2000      	movs	r0, #0
  400b8a:	47a0      	blx	r4

	/* ADC Trigger configuration */
	gpio_configure_pin(PINS_ADC_TRIG, PINS_ADC_TRIG_FLAG);
  400b8c:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400b90:	2008      	movs	r0, #8
  400b92:	47a0      	blx	r4

	/* PWMH0 configuration */
	gpio_configure_pin(PIN_PWMC_PWMH0_TRIG, PIN_PWMC_PWMH0_TRIG_FLAG);
  400b94:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400b98:	2052      	movs	r0, #82	; 0x52
  400b9a:	47a0      	blx	r4
	gpio_configure_pin(TWI1_CLK_GPIO, TWI1_CLK_FLAGS);
#endif

	/* Configure SPI pins */
#ifdef CONF_BOARD_SPI
	gpio_configure_pin(SPI_MISO_GPIO, SPI_MISO_FLAGS);
  400b9c:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400ba0:	200c      	movs	r0, #12
  400ba2:	47a0      	blx	r4
	gpio_configure_pin(SPI_MOSI_GPIO, SPI_MOSI_FLAGS);
  400ba4:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400ba8:	200d      	movs	r0, #13
  400baa:	47a0      	blx	r4
	gpio_configure_pin(SPI_SPCK_GPIO, SPI_SPCK_FLAGS);
  400bac:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400bb0:	200e      	movs	r0, #14
  400bb2:	47a0      	blx	r4
	 * Hence a different PIN should be selected using the CONF_BOARD_SPI_NPCS_GPIO and
	 * CONF_BOARD_SPI_NPCS_FLAGS macros.
	 */

#  ifdef CONF_BOARD_SPI_NPCS0
	gpio_configure_pin(SPI_NPCS0_GPIO, SPI_NPCS0_FLAGS);
  400bb4:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400bb8:	200b      	movs	r0, #11
  400bba:	47a0      	blx	r4
#  endif
#endif /* CONF_BOARD_SPI */

#ifdef CONF_BOARD_USART_RXD
	/* Configure USART RXD pin */
	gpio_configure_pin(PIN_USART1_RXD_IDX, PIN_USART1_RXD_FLAGS);
  400bbc:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400bc0:	2015      	movs	r0, #21
  400bc2:	47a0      	blx	r4
#endif

#ifdef CONF_BOARD_USART_TXD
	/* Configure USART TXD pin */
	gpio_configure_pin(PIN_USART1_TXD_IDX, PIN_USART1_TXD_FLAGS);
  400bc4:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400bc8:	2016      	movs	r0, #22
  400bca:	47a0      	blx	r4
	gpio_configure_pin(PIN_USART1_SCK_IDX, PIN_USART1_SCK_FLAGS);
#endif

#ifdef CONF_BOARD_ADM3312_EN
	/* Configure ADM33312 enable pin */
	gpio_configure_pin(PIN_USART1_EN_IDX, PIN_USART1_EN_FLAGS);
  400bcc:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
  400bd0:	2017      	movs	r0, #23
  400bd2:	47a0      	blx	r4
	gpio_set_pin_low(PIN_USART1_EN_IDX);
  400bd4:	2017      	movs	r0, #23
  400bd6:	4b29      	ldr	r3, [pc, #164]	; (400c7c <board_init+0x13c>)
  400bd8:	4798      	blx	r3
	gpio_set_pin_low(PIN_RE_IDX);
#endif

#if defined(CONF_BOARD_ILI9325) || defined(CONF_BOARD_ILI93XX)
	/* Configure LCD EBI pins */
	gpio_configure_pin(PIN_EBI_DATA_BUS_D0, PIN_EBI_DATA_BUS_FLAGS);
  400bda:	4d29      	ldr	r5, [pc, #164]	; (400c80 <board_init+0x140>)
  400bdc:	4629      	mov	r1, r5
  400bde:	2040      	movs	r0, #64	; 0x40
  400be0:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_DATA_BUS_D1, PIN_EBI_DATA_BUS_FLAGS);
  400be2:	4629      	mov	r1, r5
  400be4:	2041      	movs	r0, #65	; 0x41
  400be6:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_DATA_BUS_D2, PIN_EBI_DATA_BUS_FLAGS);
  400be8:	4629      	mov	r1, r5
  400bea:	2042      	movs	r0, #66	; 0x42
  400bec:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_DATA_BUS_D3, PIN_EBI_DATA_BUS_FLAGS);
  400bee:	4629      	mov	r1, r5
  400bf0:	2043      	movs	r0, #67	; 0x43
  400bf2:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_DATA_BUS_D4, PIN_EBI_DATA_BUS_FLAGS);
  400bf4:	4629      	mov	r1, r5
  400bf6:	2044      	movs	r0, #68	; 0x44
  400bf8:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_DATA_BUS_D5, PIN_EBI_DATA_BUS_FLAGS);
  400bfa:	4629      	mov	r1, r5
  400bfc:	2045      	movs	r0, #69	; 0x45
  400bfe:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_DATA_BUS_D6, PIN_EBI_DATA_BUS_FLAGS);
  400c00:	4629      	mov	r1, r5
  400c02:	2046      	movs	r0, #70	; 0x46
  400c04:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_DATA_BUS_D7, PIN_EBI_DATA_BUS_FLAGS);
  400c06:	4629      	mov	r1, r5
  400c08:	2047      	movs	r0, #71	; 0x47
  400c0a:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_NRD, PIN_EBI_NRD_FLAGS);
  400c0c:	4629      	mov	r1, r5
  400c0e:	204b      	movs	r0, #75	; 0x4b
  400c10:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_NWE, PIN_EBI_NWE_FLAGS);
  400c12:	4629      	mov	r1, r5
  400c14:	2048      	movs	r0, #72	; 0x48
  400c16:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_NCS1, PIN_EBI_NCS1_FLAGS);
  400c18:	4629      	mov	r1, r5
  400c1a:	204f      	movs	r0, #79	; 0x4f
  400c1c:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_LCD_RS, PIN_EBI_LCD_RS_FLAGS);
  400c1e:	4629      	mov	r1, r5
  400c20:	2053      	movs	r0, #83	; 0x53
  400c22:	47a0      	blx	r4
#endif

#ifdef CONF_BOARD_AAT3155
	/* Configure Backlight control pin */
	gpio_configure_pin(BOARD_AAT31XX_SET_GPIO, BOARD_AAT31XX_SET_FLAGS);
  400c24:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
  400c28:	204d      	movs	r0, #77	; 0x4d
  400c2a:	47a0      	blx	r4
#endif

#ifdef CONF_BOARD_ADS7843
	/* Configure Touchscreen SPI pins */
	gpio_configure_pin(BOARD_ADS7843_IRQ_GPIO,BOARD_ADS7843_IRQ_FLAGS);
  400c2c:	f105 5500 	add.w	r5, r5, #536870912	; 0x20000000
  400c30:	4629      	mov	r1, r5
  400c32:	2010      	movs	r0, #16
  400c34:	47a0      	blx	r4
	gpio_configure_pin(BOARD_ADS7843_BUSY_GPIO, BOARD_ADS7843_BUSY_FLAGS);
  400c36:	4629      	mov	r1, r5
  400c38:	2011      	movs	r0, #17
  400c3a:	47a0      	blx	r4
	gpio_configure_pin(SPI_MISO_GPIO, SPI_MISO_FLAGS);
  400c3c:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400c40:	200c      	movs	r0, #12
  400c42:	47a0      	blx	r4
	gpio_configure_pin(SPI_MOSI_GPIO, SPI_MOSI_FLAGS);
  400c44:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400c48:	200d      	movs	r0, #13
  400c4a:	47a0      	blx	r4
	gpio_configure_pin(SPI_SPCK_GPIO, SPI_SPCK_FLAGS);
  400c4c:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400c50:	200e      	movs	r0, #14
  400c52:	47a0      	blx	r4
	gpio_configure_pin(SPI_NPCS0_GPIO, SPI_NPCS0_FLAGS);
  400c54:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400c58:	200b      	movs	r0, #11
  400c5a:	47a0      	blx	r4
  400c5c:	bd38      	pop	{r3, r4, r5, pc}
  400c5e:	bf00      	nop
  400c60:	400e1450 	.word	0x400e1450
  400c64:	004011ed 	.word	0x004011ed
  400c68:	00400de5 	.word	0x00400de5
  400c6c:	28000079 	.word	0x28000079
  400c70:	28000059 	.word	0x28000059
  400c74:	400e0e00 	.word	0x400e0e00
  400c78:	00400f09 	.word	0x00400f09
  400c7c:	00400dc9 	.word	0x00400dc9
  400c80:	08000001 	.word	0x08000001

00400c84 <pio_set_debounce_filter>:
void pio_set_debounce_filter(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_cut_off)
{
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	/* Set Debouncing, 0 bit field no effect */
	p_pio->PIO_IFSCER = ul_mask;
  400c84:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
	/*
	 * The debouncing filter can filter a pulse of less than 1/2 Period of a
	 * programmable Divided Slow Clock:
	 * Tdiv_slclk = ((DIV+1)*2).Tslow_clock
	 */
	p_pio->PIO_SCDR = PIO_SCDR_DIV((FREQ_SLOW_CLOCK_EXT /
  400c88:	0052      	lsls	r2, r2, #1
  400c8a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  400c8e:	fbb3 f2f2 	udiv	r2, r3, r2
  400c92:	3a01      	subs	r2, #1
  400c94:	f3c2 020d 	ubfx	r2, r2, #0, #14
  400c98:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
  400c9c:	4770      	bx	lr
  400c9e:	bf00      	nop

00400ca0 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  400ca0:	6442      	str	r2, [r0, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  400ca2:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  400ca6:	d02f      	beq.n	400d08 <pio_set_peripheral+0x68>
  400ca8:	d807      	bhi.n	400cba <pio_set_peripheral+0x1a>
  400caa:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  400cae:	d014      	beq.n	400cda <pio_set_peripheral+0x3a>
  400cb0:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  400cb4:	d01e      	beq.n	400cf4 <pio_set_peripheral+0x54>
  400cb6:	b939      	cbnz	r1, 400cc8 <pio_set_peripheral+0x28>
  400cb8:	4770      	bx	lr
  400cba:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  400cbe:	d036      	beq.n	400d2e <pio_set_peripheral+0x8e>
  400cc0:	d804      	bhi.n	400ccc <pio_set_peripheral+0x2c>
  400cc2:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  400cc6:	d029      	beq.n	400d1c <pio_set_peripheral+0x7c>
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  400cc8:	6042      	str	r2, [r0, #4]
  400cca:	4770      	bx	lr

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  400ccc:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  400cd0:	d02d      	beq.n	400d2e <pio_set_peripheral+0x8e>
  400cd2:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  400cd6:	d02a      	beq.n	400d2e <pio_set_peripheral+0x8e>
  400cd8:	e7f6      	b.n	400cc8 <pio_set_peripheral+0x28>
 * \param ul_type PIO type.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set_peripheral(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask)
{
  400cda:	b410      	push	{r4}
	p_pio->PIO_IDR = ul_mask;

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABCDSR[0];
  400cdc:	6f04      	ldr	r4, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  400cde:	6f01      	ldr	r1, [r0, #112]	; 0x70
  400ce0:	43d3      	mvns	r3, r2
  400ce2:	4021      	ands	r1, r4
  400ce4:	4019      	ands	r1, r3
  400ce6:	6701      	str	r1, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  400ce8:	6f44      	ldr	r4, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  400cea:	6f41      	ldr	r1, [r0, #116]	; 0x74
  400cec:	4021      	ands	r1, r4
  400cee:	400b      	ands	r3, r1
  400cf0:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  400cf2:	e01a      	b.n	400d2a <pio_set_peripheral+0x8a>
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  400cf4:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  400cf6:	4313      	orrs	r3, r2
  400cf8:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  400cfa:	6f41      	ldr	r1, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  400cfc:	6f43      	ldr	r3, [r0, #116]	; 0x74
  400cfe:	400b      	ands	r3, r1
  400d00:	ea23 0302 	bic.w	r3, r3, r2
  400d04:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  400d06:	e7df      	b.n	400cc8 <pio_set_peripheral+0x28>
#if (!SAMG)
	case PIO_PERIPH_C:
		ul_sr = p_pio->PIO_ABCDSR[0];
  400d08:	6f01      	ldr	r1, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  400d0a:	6f03      	ldr	r3, [r0, #112]	; 0x70
  400d0c:	400b      	ands	r3, r1
  400d0e:	ea23 0302 	bic.w	r3, r3, r2
  400d12:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  400d14:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  400d16:	4313      	orrs	r3, r2
  400d18:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  400d1a:	e7d5      	b.n	400cc8 <pio_set_peripheral+0x28>
	case PIO_PERIPH_D:
		ul_sr = p_pio->PIO_ABCDSR[0];
  400d1c:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  400d1e:	4313      	orrs	r3, r2
  400d20:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  400d22:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  400d24:	4313      	orrs	r3, r2
  400d26:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  400d28:	e7ce      	b.n	400cc8 <pio_set_peripheral+0x28>
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  400d2a:	6042      	str	r2, [r0, #4]
}
  400d2c:	bc10      	pop	{r4}
  400d2e:	4770      	bx	lr

00400d30 <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  400d30:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  400d32:	f012 0f01 	tst.w	r2, #1
		p_pio->PIO_PUER = ul_mask;
  400d36:	bf14      	ite	ne
  400d38:	6641      	strne	r1, [r0, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  400d3a:	6601      	streq	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  400d3c:	f012 0f0a 	tst.w	r2, #10
		p_pio->PIO_IFER = ul_mask;
  400d40:	bf14      	ite	ne
  400d42:	6201      	strne	r1, [r0, #32]
	} else {
		p_pio->PIO_IFDR = ul_mask;
  400d44:	6241      	streq	r1, [r0, #36]	; 0x24
	}

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
  400d46:	f012 0f02 	tst.w	r2, #2
  400d4a:	d002      	beq.n	400d52 <pio_set_input+0x22>
		p_pio->PIO_IFSCDR = ul_mask;
  400d4c:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
  400d50:	e004      	b.n	400d5c <pio_set_input+0x2c>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
  400d52:	f012 0f08 	tst.w	r2, #8
			p_pio->PIO_IFSCER = ul_mask;
  400d56:	bf18      	it	ne
  400d58:	f8c0 1084 	strne.w	r1, [r0, #132]	; 0x84
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
  400d5c:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
  400d5e:	6001      	str	r1, [r0, #0]
  400d60:	4770      	bx	lr
  400d62:	bf00      	nop

00400d64 <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
  400d64:	b410      	push	{r4}
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  400d66:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  400d68:	9c01      	ldr	r4, [sp, #4]
  400d6a:	b10c      	cbz	r4, 400d70 <pio_set_output+0xc>
		p_pio->PIO_PUER = ul_mask;
  400d6c:	6641      	str	r1, [r0, #100]	; 0x64
  400d6e:	e000      	b.n	400d72 <pio_set_output+0xe>
	} else {
		p_pio->PIO_PUDR = ul_mask;
  400d70:	6601      	str	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
  400d72:	b10b      	cbz	r3, 400d78 <pio_set_output+0x14>
		p_pio->PIO_MDER = ul_mask;
  400d74:	6501      	str	r1, [r0, #80]	; 0x50
  400d76:	e000      	b.n	400d7a <pio_set_output+0x16>
	} else {
		p_pio->PIO_MDDR = ul_mask;
  400d78:	6541      	str	r1, [r0, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
  400d7a:	b10a      	cbz	r2, 400d80 <pio_set_output+0x1c>
		p_pio->PIO_SODR = ul_mask;
  400d7c:	6301      	str	r1, [r0, #48]	; 0x30
  400d7e:	e000      	b.n	400d82 <pio_set_output+0x1e>
	} else {
		p_pio->PIO_CODR = ul_mask;
  400d80:	6341      	str	r1, [r0, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
  400d82:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
  400d84:	6001      	str	r1, [r0, #0]
}
  400d86:	bc10      	pop	{r4}
  400d88:	4770      	bx	lr
  400d8a:	bf00      	nop

00400d8c <pio_configure_interrupt>:
 */
void pio_configure_interrupt(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_attr)
{
	/* Configure additional interrupt mode registers. */
	if (ul_attr & PIO_IT_AIME) {
  400d8c:	f012 0f10 	tst.w	r2, #16
  400d90:	d010      	beq.n	400db4 <pio_configure_interrupt+0x28>
		/* Enable additional interrupt mode. */
		p_pio->PIO_AIMER = ul_mask;
  400d92:	f8c0 10b0 	str.w	r1, [r0, #176]	; 0xb0

		/* If bit field of the selected pin is 1, set as
		   Rising Edge/High level detection event. */
		if (ul_attr & PIO_IT_RE_OR_HL) {
  400d96:	f012 0f20 	tst.w	r2, #32
			/* Rising Edge or High Level */
			p_pio->PIO_REHLSR = ul_mask;
  400d9a:	bf14      	ite	ne
  400d9c:	f8c0 10d4 	strne.w	r1, [r0, #212]	; 0xd4
		} else {
			/* Falling Edge or Low Level */
			p_pio->PIO_FELLSR = ul_mask;
  400da0:	f8c0 10d0 	streq.w	r1, [r0, #208]	; 0xd0
		}

		/* If bit field of the selected pin is 1, set as
		   edge detection source. */
		if (ul_attr & PIO_IT_EDGE) {
  400da4:	f012 0f40 	tst.w	r2, #64	; 0x40
			/* Edge select */
			p_pio->PIO_ESR = ul_mask;
  400da8:	bf14      	ite	ne
  400daa:	f8c0 10c0 	strne.w	r1, [r0, #192]	; 0xc0
		} else {
			/* Level select */
			p_pio->PIO_LSR = ul_mask;
  400dae:	f8c0 10c4 	streq.w	r1, [r0, #196]	; 0xc4
  400db2:	4770      	bx	lr
		}
	} else {
		/* Disable additional interrupt mode. */
		p_pio->PIO_AIMDR = ul_mask;
  400db4:	f8c0 10b4 	str.w	r1, [r0, #180]	; 0xb4
  400db8:	4770      	bx	lr
  400dba:	bf00      	nop

00400dbc <pio_enable_interrupt>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_enable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IER = ul_mask;
  400dbc:	6401      	str	r1, [r0, #64]	; 0x40
  400dbe:	4770      	bx	lr

00400dc0 <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  400dc0:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  400dc2:	4770      	bx	lr

00400dc4 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  400dc4:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  400dc6:	4770      	bx	lr

00400dc8 <pio_set_pin_low>:
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  400dc8:	0943      	lsrs	r3, r0, #5
  400dca:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  400dce:	f203 7307 	addw	r3, r3, #1799	; 0x707
  400dd2:	025b      	lsls	r3, r3, #9
void pio_set_pin_low(uint32_t ul_pin)
{
	Pio *p_pio = pio_get_pin_group(ul_pin);

	/* Value to be driven on the I/O line: 0. */
	p_pio->PIO_CODR = 1 << (ul_pin & 0x1F);
  400dd4:	f000 001f 	and.w	r0, r0, #31
  400dd8:	2201      	movs	r2, #1
  400dda:	fa02 f000 	lsl.w	r0, r2, r0
  400dde:	6358      	str	r0, [r3, #52]	; 0x34
  400de0:	4770      	bx	lr
  400de2:	bf00      	nop

00400de4 <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
  400de4:	b570      	push	{r4, r5, r6, lr}
  400de6:	b082      	sub	sp, #8
  400de8:	460d      	mov	r5, r1
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  400dea:	0943      	lsrs	r3, r0, #5
  400dec:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  400df0:	f203 7307 	addw	r3, r3, #1799	; 0x707
  400df4:	025c      	lsls	r4, r3, #9
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
	Pio *p_pio = pio_get_pin_group(ul_pin);

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
  400df6:	f001 43f0 	and.w	r3, r1, #2013265920	; 0x78000000
  400dfa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  400dfe:	d047      	beq.n	400e90 <pio_configure_pin+0xac>
  400e00:	d809      	bhi.n	400e16 <pio_configure_pin+0x32>
  400e02:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  400e06:	d021      	beq.n	400e4c <pio_configure_pin+0x68>
  400e08:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  400e0c:	d02f      	beq.n	400e6e <pio_configure_pin+0x8a>
  400e0e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  400e12:	d16f      	bne.n	400ef4 <pio_configure_pin+0x110>
  400e14:	e009      	b.n	400e2a <pio_configure_pin+0x46>
  400e16:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  400e1a:	d055      	beq.n	400ec8 <pio_configure_pin+0xe4>
  400e1c:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  400e20:	d052      	beq.n	400ec8 <pio_configure_pin+0xe4>
  400e22:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  400e26:	d044      	beq.n	400eb2 <pio_configure_pin+0xce>
  400e28:	e064      	b.n	400ef4 <pio_configure_pin+0x110>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
  400e2a:	f000 001f 	and.w	r0, r0, #31
  400e2e:	2601      	movs	r6, #1
  400e30:	4086      	lsls	r6, r0
  400e32:	4632      	mov	r2, r6
  400e34:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400e38:	4620      	mov	r0, r4
  400e3a:	4b30      	ldr	r3, [pc, #192]	; (400efc <pio_configure_pin+0x118>)
  400e3c:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  400e3e:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  400e42:	bf14      	ite	ne
  400e44:	6666      	strne	r6, [r4, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  400e46:	6626      	streq	r6, [r4, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  400e48:	2001      	movs	r0, #1
  400e4a:	e054      	b.n	400ef6 <pio_configure_pin+0x112>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
  400e4c:	f000 001f 	and.w	r0, r0, #31
  400e50:	2601      	movs	r6, #1
  400e52:	4086      	lsls	r6, r0
  400e54:	4632      	mov	r2, r6
  400e56:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400e5a:	4620      	mov	r0, r4
  400e5c:	4b27      	ldr	r3, [pc, #156]	; (400efc <pio_configure_pin+0x118>)
  400e5e:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  400e60:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  400e64:	bf14      	ite	ne
  400e66:	6666      	strne	r6, [r4, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  400e68:	6626      	streq	r6, [r4, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  400e6a:	2001      	movs	r0, #1
  400e6c:	e043      	b.n	400ef6 <pio_configure_pin+0x112>
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	case PIO_TYPE_PIO_PERIPH_C:
		pio_set_peripheral(p_pio, PIO_PERIPH_C, (1 << (ul_pin & 0x1F)));
  400e6e:	f000 001f 	and.w	r0, r0, #31
  400e72:	2601      	movs	r6, #1
  400e74:	4086      	lsls	r6, r0
  400e76:	4632      	mov	r2, r6
  400e78:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  400e7c:	4620      	mov	r0, r4
  400e7e:	4b1f      	ldr	r3, [pc, #124]	; (400efc <pio_configure_pin+0x118>)
  400e80:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  400e82:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  400e86:	bf14      	ite	ne
  400e88:	6666      	strne	r6, [r4, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  400e8a:	6626      	streq	r6, [r4, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  400e8c:	2001      	movs	r0, #1
  400e8e:	e032      	b.n	400ef6 <pio_configure_pin+0x112>
		pio_set_peripheral(p_pio, PIO_PERIPH_C, (1 << (ul_pin & 0x1F)));
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_D:
		pio_set_peripheral(p_pio, PIO_PERIPH_D, (1 << (ul_pin & 0x1F)));
  400e90:	f000 001f 	and.w	r0, r0, #31
  400e94:	2601      	movs	r6, #1
  400e96:	4086      	lsls	r6, r0
  400e98:	4632      	mov	r2, r6
  400e9a:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  400e9e:	4620      	mov	r0, r4
  400ea0:	4b16      	ldr	r3, [pc, #88]	; (400efc <pio_configure_pin+0x118>)
  400ea2:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  400ea4:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  400ea8:	bf14      	ite	ne
  400eaa:	6666      	strne	r6, [r4, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  400eac:	6626      	streq	r6, [r4, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  400eae:	2001      	movs	r0, #1
  400eb0:	e021      	b.n	400ef6 <pio_configure_pin+0x112>
				(ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
  400eb2:	f000 011f 	and.w	r1, r0, #31
  400eb6:	2601      	movs	r6, #1
  400eb8:	462a      	mov	r2, r5
  400eba:	fa06 f101 	lsl.w	r1, r6, r1
  400ebe:	4620      	mov	r0, r4
  400ec0:	4b0f      	ldr	r3, [pc, #60]	; (400f00 <pio_configure_pin+0x11c>)
  400ec2:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
  400ec4:	4630      	mov	r0, r6
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;
  400ec6:	e016      	b.n	400ef6 <pio_configure_pin+0x112>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  400ec8:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
  400ecc:	f000 011f 	and.w	r1, r0, #31
  400ed0:	2601      	movs	r6, #1
  400ed2:	ea05 0306 	and.w	r3, r5, r6
  400ed6:	9300      	str	r3, [sp, #0]
  400ed8:	f3c5 0380 	ubfx	r3, r5, #2, #1
  400edc:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
  400ee0:	bf14      	ite	ne
  400ee2:	2200      	movne	r2, #0
  400ee4:	2201      	moveq	r2, #1
  400ee6:	fa06 f101 	lsl.w	r1, r6, r1
  400eea:	4620      	mov	r0, r4
  400eec:	4c05      	ldr	r4, [pc, #20]	; (400f04 <pio_configure_pin+0x120>)
  400eee:	47a0      	blx	r4

	default:
		return 0;
	}

	return 1;
  400ef0:	4630      	mov	r0, r6
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
  400ef2:	e000      	b.n	400ef6 <pio_configure_pin+0x112>

	default:
		return 0;
  400ef4:	2000      	movs	r0, #0
	}

	return 1;
}
  400ef6:	b002      	add	sp, #8
  400ef8:	bd70      	pop	{r4, r5, r6, pc}
  400efa:	bf00      	nop
  400efc:	00400ca1 	.word	0x00400ca1
  400f00:	00400d31 	.word	0x00400d31
  400f04:	00400d65 	.word	0x00400d65

00400f08 <pio_configure_pin_group>:
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin_group(Pio *p_pio,
		uint32_t ul_mask, const uint32_t ul_flags)
{
  400f08:	b570      	push	{r4, r5, r6, lr}
  400f0a:	b082      	sub	sp, #8
  400f0c:	4605      	mov	r5, r0
  400f0e:	460e      	mov	r6, r1
  400f10:	4614      	mov	r4, r2
	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
  400f12:	f002 43f0 	and.w	r3, r2, #2013265920	; 0x78000000
  400f16:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  400f1a:	d038      	beq.n	400f8e <pio_configure_pin_group+0x86>
  400f1c:	d809      	bhi.n	400f32 <pio_configure_pin_group+0x2a>
  400f1e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  400f22:	d01c      	beq.n	400f5e <pio_configure_pin_group+0x56>
  400f24:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  400f28:	d025      	beq.n	400f76 <pio_configure_pin_group+0x6e>
  400f2a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  400f2e:	d150      	bne.n	400fd2 <pio_configure_pin_group+0xca>
  400f30:	e009      	b.n	400f46 <pio_configure_pin_group+0x3e>
  400f32:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  400f36:	d03a      	beq.n	400fae <pio_configure_pin_group+0xa6>
  400f38:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  400f3c:	d037      	beq.n	400fae <pio_configure_pin_group+0xa6>
  400f3e:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  400f42:	d030      	beq.n	400fa6 <pio_configure_pin_group+0x9e>
  400f44:	e045      	b.n	400fd2 <pio_configure_pin_group+0xca>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
  400f46:	460a      	mov	r2, r1
  400f48:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400f4c:	4b22      	ldr	r3, [pc, #136]	; (400fd8 <pio_configure_pin_group+0xd0>)
  400f4e:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  400f50:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
  400f54:	bf14      	ite	ne
  400f56:	666e      	strne	r6, [r5, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  400f58:	662e      	streq	r6, [r5, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  400f5a:	2001      	movs	r0, #1
  400f5c:	e03a      	b.n	400fd4 <pio_configure_pin_group+0xcc>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
  400f5e:	460a      	mov	r2, r1
  400f60:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400f64:	4b1c      	ldr	r3, [pc, #112]	; (400fd8 <pio_configure_pin_group+0xd0>)
  400f66:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  400f68:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
  400f6c:	bf14      	ite	ne
  400f6e:	666e      	strne	r6, [r5, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  400f70:	662e      	streq	r6, [r5, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  400f72:	2001      	movs	r0, #1
  400f74:	e02e      	b.n	400fd4 <pio_configure_pin_group+0xcc>
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	case PIO_TYPE_PIO_PERIPH_C:
		pio_set_peripheral(p_pio, PIO_PERIPH_C, ul_mask);
  400f76:	460a      	mov	r2, r1
  400f78:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  400f7c:	4b16      	ldr	r3, [pc, #88]	; (400fd8 <pio_configure_pin_group+0xd0>)
  400f7e:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  400f80:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
  400f84:	bf14      	ite	ne
  400f86:	666e      	strne	r6, [r5, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  400f88:	662e      	streq	r6, [r5, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  400f8a:	2001      	movs	r0, #1
  400f8c:	e022      	b.n	400fd4 <pio_configure_pin_group+0xcc>
	case PIO_TYPE_PIO_PERIPH_C:
		pio_set_peripheral(p_pio, PIO_PERIPH_C, ul_mask);
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_D:
		pio_set_peripheral(p_pio, PIO_PERIPH_D, ul_mask);
  400f8e:	460a      	mov	r2, r1
  400f90:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  400f94:	4b10      	ldr	r3, [pc, #64]	; (400fd8 <pio_configure_pin_group+0xd0>)
  400f96:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  400f98:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
  400f9c:	bf14      	ite	ne
  400f9e:	666e      	strne	r6, [r5, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  400fa0:	662e      	streq	r6, [r5, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  400fa2:	2001      	movs	r0, #1
  400fa4:	e016      	b.n	400fd4 <pio_configure_pin_group+0xcc>
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
  400fa6:	4b0d      	ldr	r3, [pc, #52]	; (400fdc <pio_configure_pin_group+0xd4>)
  400fa8:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
  400faa:	2001      	movs	r0, #1
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;
  400fac:	e012      	b.n	400fd4 <pio_configure_pin_group+0xcc>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
  400fae:	f004 5260 	and.w	r2, r4, #939524096	; 0x38000000
  400fb2:	f004 0301 	and.w	r3, r4, #1
  400fb6:	9300      	str	r3, [sp, #0]
  400fb8:	f3c4 0380 	ubfx	r3, r4, #2, #1
  400fbc:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
  400fc0:	bf14      	ite	ne
  400fc2:	2200      	movne	r2, #0
  400fc4:	2201      	moveq	r2, #1
  400fc6:	4631      	mov	r1, r6
  400fc8:	4628      	mov	r0, r5
  400fca:	4c05      	ldr	r4, [pc, #20]	; (400fe0 <pio_configure_pin_group+0xd8>)
  400fcc:	47a0      	blx	r4

	default:
		return 0;
	}

	return 1;
  400fce:	2001      	movs	r0, #1
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
  400fd0:	e000      	b.n	400fd4 <pio_configure_pin_group+0xcc>

	default:
		return 0;
  400fd2:	2000      	movs	r0, #0
	}

	return 1;
}
  400fd4:	b002      	add	sp, #8
  400fd6:	bd70      	pop	{r4, r5, r6, pc}
  400fd8:	00400ca1 	.word	0x00400ca1
  400fdc:	00400d31 	.word	0x00400d31
  400fe0:	00400d65 	.word	0x00400d65

00400fe4 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  400fe4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  400fe8:	4681      	mov	r9, r0
  400fea:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  400fec:	4b12      	ldr	r3, [pc, #72]	; (401038 <pio_handler_process+0x54>)
  400fee:	4798      	blx	r3
  400ff0:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  400ff2:	4648      	mov	r0, r9
  400ff4:	4b11      	ldr	r3, [pc, #68]	; (40103c <pio_handler_process+0x58>)
  400ff6:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
  400ff8:	4005      	ands	r5, r0
  400ffa:	d013      	beq.n	401024 <pio_handler_process+0x40>
  400ffc:	4c10      	ldr	r4, [pc, #64]	; (401040 <pio_handler_process+0x5c>)
  400ffe:	f104 0660 	add.w	r6, r4, #96	; 0x60
		/* Find triggering source */
		i = 0;
		while (status != 0) {
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
  401002:	6823      	ldr	r3, [r4, #0]
  401004:	4543      	cmp	r3, r8
  401006:	d108      	bne.n	40101a <pio_handler_process+0x36>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  401008:	6861      	ldr	r1, [r4, #4]
  40100a:	4229      	tst	r1, r5
  40100c:	d005      	beq.n	40101a <pio_handler_process+0x36>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  40100e:	68e3      	ldr	r3, [r4, #12]
  401010:	4640      	mov	r0, r8
  401012:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
  401014:	6863      	ldr	r3, [r4, #4]
  401016:	ea25 0503 	bic.w	r5, r5, r3
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
  40101a:	42b4      	cmp	r4, r6
  40101c:	d002      	beq.n	401024 <pio_handler_process+0x40>
  40101e:	3410      	adds	r4, #16

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
  401020:	2d00      	cmp	r5, #0
  401022:	d1ee      	bne.n	401002 <pio_handler_process+0x1e>
		}
	}

	/* Check capture events */
#if (SAM3S || SAM4S || SAM4E)
	if (pio_capture_enable_flag) {
  401024:	4b07      	ldr	r3, [pc, #28]	; (401044 <pio_handler_process+0x60>)
  401026:	681b      	ldr	r3, [r3, #0]
  401028:	b123      	cbz	r3, 401034 <pio_handler_process+0x50>
		if (pio_capture_handler) {
  40102a:	4b07      	ldr	r3, [pc, #28]	; (401048 <pio_handler_process+0x64>)
  40102c:	681b      	ldr	r3, [r3, #0]
  40102e:	b10b      	cbz	r3, 401034 <pio_handler_process+0x50>
			pio_capture_handler(p_pio);
  401030:	4648      	mov	r0, r9
  401032:	4798      	blx	r3
  401034:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  401038:	00400dc1 	.word	0x00400dc1
  40103c:	00400dc5 	.word	0x00400dc5
  401040:	20000c74 	.word	0x20000c74
  401044:	20000d24 	.word	0x20000d24
  401048:	20000c70 	.word	0x20000c70

0040104c <pio_handler_set>:
 *
 * \return 0 if successful, 1 if the maximum number of sources has been defined.
 */
uint32_t pio_handler_set(Pio *p_pio, uint32_t ul_id, uint32_t ul_mask,
		uint32_t ul_attr, void (*p_handler) (uint32_t, uint32_t))
{
  40104c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint8_t i;
	struct s_interrupt_source *pSource;

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
  40104e:	4c17      	ldr	r4, [pc, #92]	; (4010ac <pio_handler_set+0x60>)
  401050:	6826      	ldr	r6, [r4, #0]
  401052:	2e06      	cmp	r6, #6
  401054:	d828      	bhi.n	4010a8 <pio_handler_set+0x5c>
  401056:	f04f 0c00 	mov.w	ip, #0
  40105a:	4664      	mov	r4, ip
		return 1;

    /* Check interrupt for this pin, if already defined, redefine it. */
	for (i = 0; i <= gs_ul_nb_sources; i++) {
		pSource = &(gs_interrupt_sources[i]);
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
  40105c:	4f14      	ldr	r7, [pc, #80]	; (4010b0 <pio_handler_set+0x64>)
	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
		return 1;

    /* Check interrupt for this pin, if already defined, redefine it. */
	for (i = 0; i <= gs_ul_nb_sources; i++) {
		pSource = &(gs_interrupt_sources[i]);
  40105e:	46a6      	mov	lr, r4
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
  401060:	0125      	lsls	r5, r4, #4
  401062:	597d      	ldr	r5, [r7, r5]
  401064:	428d      	cmp	r5, r1
  401066:	d104      	bne.n	401072 <pio_handler_set+0x26>
  401068:	eb07 1504 	add.w	r5, r7, r4, lsl #4
  40106c:	686d      	ldr	r5, [r5, #4]
  40106e:	4295      	cmp	r5, r2
  401070:	d004      	beq.n	40107c <pio_handler_set+0x30>

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
		return 1;

    /* Check interrupt for this pin, if already defined, redefine it. */
	for (i = 0; i <= gs_ul_nb_sources; i++) {
  401072:	3401      	adds	r4, #1
  401074:	b2e4      	uxtb	r4, r4
  401076:	46a4      	mov	ip, r4
  401078:	42a6      	cmp	r6, r4
  40107a:	d2f0      	bcs.n	40105e <pio_handler_set+0x12>
			break;
		}
	}

	/* Define new source */
	pSource->id = ul_id;
  40107c:	4d0c      	ldr	r5, [pc, #48]	; (4010b0 <pio_handler_set+0x64>)
  40107e:	ea4f 1e0e 	mov.w	lr, lr, lsl #4
  401082:	eb05 040e 	add.w	r4, r5, lr
  401086:	f845 100e 	str.w	r1, [r5, lr]
	pSource->mask = ul_mask;
  40108a:	6062      	str	r2, [r4, #4]
	pSource->attr = ul_attr;
  40108c:	60a3      	str	r3, [r4, #8]
	pSource->handler = p_handler;
  40108e:	9906      	ldr	r1, [sp, #24]
  401090:	60e1      	str	r1, [r4, #12]
	if (i == gs_ul_nb_sources + 1) {
  401092:	3601      	adds	r6, #1
  401094:	4566      	cmp	r6, ip
		gs_ul_nb_sources++;
  401096:	bf04      	itt	eq
  401098:	4904      	ldreq	r1, [pc, #16]	; (4010ac <pio_handler_set+0x60>)
  40109a:	600e      	streq	r6, [r1, #0]
  40109c:	4611      	mov	r1, r2
	}

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);
  40109e:	461a      	mov	r2, r3
  4010a0:	4b04      	ldr	r3, [pc, #16]	; (4010b4 <pio_handler_set+0x68>)
  4010a2:	4798      	blx	r3

	return 0;
  4010a4:	2000      	movs	r0, #0
  4010a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
{
    uint8_t i;
	struct s_interrupt_source *pSource;

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
		return 1;
  4010a8:	2001      	movs	r0, #1

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);

	return 0;
}
  4010aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4010ac:	20000c6c 	.word	0x20000c6c
  4010b0:	20000c74 	.word	0x20000c74
  4010b4:	00400d8d 	.word	0x00400d8d

004010b8 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  4010b8:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
  4010ba:	210b      	movs	r1, #11
  4010bc:	4801      	ldr	r0, [pc, #4]	; (4010c4 <PIOA_Handler+0xc>)
  4010be:	4b02      	ldr	r3, [pc, #8]	; (4010c8 <PIOA_Handler+0x10>)
  4010c0:	4798      	blx	r3
  4010c2:	bd08      	pop	{r3, pc}
  4010c4:	400e0e00 	.word	0x400e0e00
  4010c8:	00400fe5 	.word	0x00400fe5

004010cc <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  4010cc:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  4010ce:	210c      	movs	r1, #12
  4010d0:	4801      	ldr	r0, [pc, #4]	; (4010d8 <PIOB_Handler+0xc>)
  4010d2:	4b02      	ldr	r3, [pc, #8]	; (4010dc <PIOB_Handler+0x10>)
  4010d4:	4798      	blx	r3
  4010d6:	bd08      	pop	{r3, pc}
  4010d8:	400e1000 	.word	0x400e1000
  4010dc:	00400fe5 	.word	0x00400fe5

004010e0 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  4010e0:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
  4010e2:	210d      	movs	r1, #13
  4010e4:	4801      	ldr	r0, [pc, #4]	; (4010ec <PIOC_Handler+0xc>)
  4010e6:	4b02      	ldr	r3, [pc, #8]	; (4010f0 <PIOC_Handler+0x10>)
  4010e8:	4798      	blx	r3
  4010ea:	bd08      	pop	{r3, pc}
  4010ec:	400e1200 	.word	0x400e1200
  4010f0:	00400fe5 	.word	0x00400fe5

004010f4 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  4010f4:	4a18      	ldr	r2, [pc, #96]	; (401158 <pmc_switch_mck_to_pllack+0x64>)
  4010f6:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4010f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  4010fc:	4318      	orrs	r0, r3
  4010fe:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  401100:	6e93      	ldr	r3, [r2, #104]	; 0x68
  401102:	f013 0f08 	tst.w	r3, #8
  401106:	d003      	beq.n	401110 <pmc_switch_mck_to_pllack+0x1c>
  401108:	e009      	b.n	40111e <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  40110a:	3b01      	subs	r3, #1
  40110c:	d103      	bne.n	401116 <pmc_switch_mck_to_pllack+0x22>
  40110e:	e01e      	b.n	40114e <pmc_switch_mck_to_pllack+0x5a>
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  401110:	f44f 6300 	mov.w	r3, #2048	; 0x800
  401114:	4910      	ldr	r1, [pc, #64]	; (401158 <pmc_switch_mck_to_pllack+0x64>)
  401116:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  401118:	f012 0f08 	tst.w	r2, #8
  40111c:	d0f5      	beq.n	40110a <pmc_switch_mck_to_pllack+0x16>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  40111e:	4a0e      	ldr	r2, [pc, #56]	; (401158 <pmc_switch_mck_to_pllack+0x64>)
  401120:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401122:	f023 0303 	bic.w	r3, r3, #3
  401126:	f043 0302 	orr.w	r3, r3, #2
  40112a:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  40112c:	6e90      	ldr	r0, [r2, #104]	; 0x68
  40112e:	f010 0008 	ands.w	r0, r0, #8
  401132:	d004      	beq.n	40113e <pmc_switch_mck_to_pllack+0x4a>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
  401134:	2000      	movs	r0, #0
  401136:	4770      	bx	lr
	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
  401138:	3b01      	subs	r3, #1
  40113a:	d103      	bne.n	401144 <pmc_switch_mck_to_pllack+0x50>
  40113c:	e009      	b.n	401152 <pmc_switch_mck_to_pllack+0x5e>
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  40113e:	f44f 6300 	mov.w	r3, #2048	; 0x800
  401142:	4905      	ldr	r1, [pc, #20]	; (401158 <pmc_switch_mck_to_pllack+0x64>)
  401144:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  401146:	f012 0f08 	tst.w	r2, #8
  40114a:	d0f5      	beq.n	401138 <pmc_switch_mck_to_pllack+0x44>
  40114c:	4770      	bx	lr

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
  40114e:	2001      	movs	r0, #1
  401150:	4770      	bx	lr
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
  401152:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  401154:	4770      	bx	lr
  401156:	bf00      	nop
  401158:	400e0400 	.word	0x400e0400

0040115c <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  40115c:	b138      	cbz	r0, 40116e <pmc_switch_mainck_to_xtal+0x12>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  40115e:	4911      	ldr	r1, [pc, #68]	; (4011a4 <pmc_switch_mainck_to_xtal+0x48>)
  401160:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  401162:	4a11      	ldr	r2, [pc, #68]	; (4011a8 <pmc_switch_mainck_to_xtal+0x4c>)
  401164:	401a      	ands	r2, r3
  401166:	4b11      	ldr	r3, [pc, #68]	; (4011ac <pmc_switch_mainck_to_xtal+0x50>)
  401168:	4313      	orrs	r3, r2
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  40116a:	620b      	str	r3, [r1, #32]
  40116c:	4770      	bx	lr
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  40116e:	480d      	ldr	r0, [pc, #52]	; (4011a4 <pmc_switch_mainck_to_xtal+0x48>)
  401170:	6a02      	ldr	r2, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  401172:	0209      	lsls	r1, r1, #8
  401174:	b289      	uxth	r1, r1
  401176:	f422 135c 	bic.w	r3, r2, #3604480	; 0x370000
  40117a:	f023 0303 	bic.w	r3, r3, #3
  40117e:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  401182:	f043 0301 	orr.w	r3, r3, #1
  401186:	430b      	orrs	r3, r1
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  401188:	6203      	str	r3, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  40118a:	4602      	mov	r2, r0
  40118c:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40118e:	f013 0f01 	tst.w	r3, #1
  401192:	d0fb      	beq.n	40118c <pmc_switch_mainck_to_xtal+0x30>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  401194:	4a03      	ldr	r2, [pc, #12]	; (4011a4 <pmc_switch_mainck_to_xtal+0x48>)
  401196:	6a13      	ldr	r3, [r2, #32]
  401198:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
  40119c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  4011a0:	6213      	str	r3, [r2, #32]
  4011a2:	4770      	bx	lr
  4011a4:	400e0400 	.word	0x400e0400
  4011a8:	fec8fffc 	.word	0xfec8fffc
  4011ac:	01370002 	.word	0x01370002

004011b0 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  4011b0:	4b02      	ldr	r3, [pc, #8]	; (4011bc <pmc_osc_is_ready_mainck+0xc>)
  4011b2:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  4011b4:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  4011b8:	4770      	bx	lr
  4011ba:	bf00      	nop
  4011bc:	400e0400 	.word	0x400e0400

004011c0 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  4011c0:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  4011c4:	4b01      	ldr	r3, [pc, #4]	; (4011cc <pmc_disable_pllack+0xc>)
  4011c6:	629a      	str	r2, [r3, #40]	; 0x28
  4011c8:	4770      	bx	lr
  4011ca:	bf00      	nop
  4011cc:	400e0400 	.word	0x400e0400

004011d0 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  4011d0:	4b02      	ldr	r3, [pc, #8]	; (4011dc <pmc_is_locked_pllack+0xc>)
  4011d2:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  4011d4:	f000 0002 	and.w	r0, r0, #2
  4011d8:	4770      	bx	lr
  4011da:	bf00      	nop
  4011dc:	400e0400 	.word	0x400e0400

004011e0 <pmc_disable_pllbck>:
/**
 * \brief Disable PLLB clock.
 */
void pmc_disable_pllbck(void)
{
	PMC->CKGR_PLLBR = CKGR_PLLBR_MULB(0);
  4011e0:	2200      	movs	r2, #0
  4011e2:	4b01      	ldr	r3, [pc, #4]	; (4011e8 <pmc_disable_pllbck+0x8>)
  4011e4:	62da      	str	r2, [r3, #44]	; 0x2c
  4011e6:	4770      	bx	lr
  4011e8:	400e0400 	.word	0x400e0400

004011ec <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
  4011ec:	2822      	cmp	r0, #34	; 0x22
  4011ee:	d81e      	bhi.n	40122e <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
  4011f0:	281f      	cmp	r0, #31
  4011f2:	d80c      	bhi.n	40120e <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  4011f4:	4b11      	ldr	r3, [pc, #68]	; (40123c <pmc_enable_periph_clk+0x50>)
  4011f6:	699a      	ldr	r2, [r3, #24]
  4011f8:	2301      	movs	r3, #1
  4011fa:	4083      	lsls	r3, r0
  4011fc:	4393      	bics	r3, r2
  4011fe:	d018      	beq.n	401232 <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
  401200:	2301      	movs	r3, #1
  401202:	fa03 f000 	lsl.w	r0, r3, r0
  401206:	4b0d      	ldr	r3, [pc, #52]	; (40123c <pmc_enable_periph_clk+0x50>)
  401208:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  40120a:	2000      	movs	r0, #0
  40120c:	4770      	bx	lr
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
  40120e:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  401210:	4b0a      	ldr	r3, [pc, #40]	; (40123c <pmc_enable_periph_clk+0x50>)
  401212:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  401216:	2301      	movs	r3, #1
  401218:	4083      	lsls	r3, r0
  40121a:	4393      	bics	r3, r2
  40121c:	d00b      	beq.n	401236 <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
  40121e:	2301      	movs	r3, #1
  401220:	fa03 f000 	lsl.w	r0, r3, r0
  401224:	4b05      	ldr	r3, [pc, #20]	; (40123c <pmc_enable_periph_clk+0x50>)
  401226:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
		}
#endif
	}

	return 0;
  40122a:	2000      	movs	r0, #0
  40122c:	4770      	bx	lr
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
		return 1;
  40122e:	2001      	movs	r0, #1
  401230:	4770      	bx	lr
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  401232:	2000      	movs	r0, #0
  401234:	4770      	bx	lr
  401236:	2000      	movs	r0, #0
}
  401238:	4770      	bx	lr
  40123a:	bf00      	nop
  40123c:	400e0400 	.word	0x400e0400

00401240 <pmc_set_flash_in_wait_mode>:
 * \param ul_flash_state PMC_WAIT_MODE_FLASH_STANDBY flash in standby mode,
 * PMC_WAIT_MODE_FLASH_DEEP_POWERDOWN flash in deep power down mode.
 */
void pmc_set_flash_in_wait_mode(uint32_t ul_flash_state)
{
	ul_flash_in_wait_mode = ul_flash_state;
  401240:	4b01      	ldr	r3, [pc, #4]	; (401248 <pmc_set_flash_in_wait_mode+0x8>)
  401242:	6018      	str	r0, [r3, #0]
  401244:	4770      	bx	lr
  401246:	bf00      	nop
  401248:	2000000c 	.word	0x2000000c

0040124c <pmc_enable_waitmode>:
void pmc_enable_waitmode(void)
{
	uint32_t i;

	/* Flash in wait mode */
	i = PMC->PMC_FSMR;
  40124c:	4a11      	ldr	r2, [pc, #68]	; (401294 <pmc_enable_waitmode+0x48>)
  40124e:	6f13      	ldr	r3, [r2, #112]	; 0x70
	i &= ~PMC_FSMR_FLPM_Msk;
  401250:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
#if !(SAMV71 || SAMV70 || SAME70 || SAMS70)
	i |= ul_flash_in_wait_mode;
  401254:	4b10      	ldr	r3, [pc, #64]	; (401298 <pmc_enable_waitmode+0x4c>)
  401256:	681b      	ldr	r3, [r3, #0]
  401258:	430b      	orrs	r3, r1
#else
	i |= PMC_WAIT_MODE_FLASH_IDLE;
#endif
	PMC->PMC_FSMR = i;
  40125a:	6713      	str	r3, [r2, #112]	; 0x70

	/* Set the WAITMODE bit = 1 */
	PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_WAITMODE;
  40125c:	6a13      	ldr	r3, [r2, #32]
  40125e:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  401262:	f043 0304 	orr.w	r3, r3, #4
  401266:	6213      	str	r3, [r2, #32]

	/* Waiting for Master Clock Ready MCKRDY = 1 */
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  401268:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40126a:	f013 0f08 	tst.w	r3, #8
  40126e:	d0fb      	beq.n	401268 <pmc_enable_waitmode+0x1c>
  401270:	f44f 73fa 	mov.w	r3, #500	; 0x1f4

    No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
  401274:	bf00      	nop

	/* Waiting for MOSCRCEN bit cleared is strongly recommended
	 * to ensure that the core will not execute undesired instructions
	 */
	for (i = 0; i < 500; i++) {
  401276:	3b01      	subs	r3, #1
  401278:	d1fc      	bne.n	401274 <pmc_enable_waitmode+0x28>
		__NOP();
	}
	while (!(PMC->CKGR_MOR & CKGR_MOR_MOSCRCEN));
  40127a:	4a06      	ldr	r2, [pc, #24]	; (401294 <pmc_enable_waitmode+0x48>)
  40127c:	6a13      	ldr	r3, [r2, #32]
  40127e:	f013 0f08 	tst.w	r3, #8
  401282:	d0fb      	beq.n	40127c <pmc_enable_waitmode+0x30>

#if (!SAMG)
	/* Restore Flash in idle mode */
	i = PMC->PMC_FSMR;
  401284:	4a03      	ldr	r2, [pc, #12]	; (401294 <pmc_enable_waitmode+0x48>)
  401286:	6f13      	ldr	r3, [r2, #112]	; 0x70
	i &= ~PMC_FSMR_FLPM_Msk;
  401288:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
	i |= PMC_WAIT_MODE_FLASH_IDLE;
  40128c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
	PMC->PMC_FSMR = i;
  401290:	6713      	str	r3, [r2, #112]	; 0x70
  401292:	4770      	bx	lr
  401294:	400e0400 	.word	0x400e0400
  401298:	2000000c 	.word	0x2000000c

0040129c <pmc_sleep>:
static volatile bool b_is_sleep_clock_used = false;
/** Callback invoked once when clocks are restored */
static pmc_callback_wakeup_clocks_restored_t callback_clocks_restored = NULL;

void pmc_sleep(int sleep_mode)
{
  40129c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	switch (sleep_mode) {
  4012a0:	1e43      	subs	r3, r0, #1
  4012a2:	2b04      	cmp	r3, #4
  4012a4:	f200 8134 	bhi.w	401510 <pmc_sleep+0x274>
  4012a8:	e8df f013 	tbh	[pc, r3, lsl #1]
  4012ac:	00050005 	.word	0x00050005
  4012b0:	00130013 	.word	0x00130013
  4012b4:	0123      	.short	0x0123
	case SAM_PM_SMODE_SLEEP_WFI:
	case SAM_PM_SMODE_SLEEP_WFE:
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAM4CM || SAM4CP || SAMG || SAMV71 || SAMV70 || SAMS70 || SAME70)
		SCB->SCR &= (uint32_t)~SCR_SLEEPDEEP;
  4012b6:	4a97      	ldr	r2, [pc, #604]	; (401514 <pmc_sleep+0x278>)
  4012b8:	6913      	ldr	r3, [r2, #16]
  4012ba:	f023 0304 	bic.w	r3, r3, #4
  4012be:	6113      	str	r3, [r2, #16]
		cpu_irq_enable();
  4012c0:	2201      	movs	r2, #1
  4012c2:	4b95      	ldr	r3, [pc, #596]	; (401518 <pmc_sleep+0x27c>)
  4012c4:	701a      	strb	r2, [r3, #0]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  4012c6:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
  4012ca:	b662      	cpsie	i
    Wait For Interrupt is a hint instruction that suspends execution
    until one of a number of events occurs.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __WFI(void)
{
  __ASM volatile ("wfi");
  4012cc:	bf30      	wfi
  4012ce:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4012d2:	4604      	mov	r4, r0
#if defined(EFC1)
		uint32_t fmr1;
#endif
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAM4CM || SAM4CP || SAMG || SAMV71 || SAMV70 || SAMS70 || SAME70)
		(sleep_mode == SAM_PM_SMODE_WAIT_FAST) ?
				pmc_set_flash_in_wait_mode(PMC_FSMR_FLPM_FLASH_STANDBY) :
  4012d4:	2803      	cmp	r0, #3
  4012d6:	bf0c      	ite	eq
  4012d8:	2000      	moveq	r0, #0
				pmc_set_flash_in_wait_mode(PMC_FSMR_FLPM_FLASH_DEEP_POWERDOWN);
  4012da:	f44f 1000 	movne.w	r0, #2097152	; 0x200000
  4012de:	4b8f      	ldr	r3, [pc, #572]	; (40151c <pmc_sleep+0x280>)
  4012e0:	4798      	blx	r3
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
  4012e2:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  4012e4:	f3bf 8f5f 	dmb	sy
#endif
		cpu_irq_disable();
  4012e8:	2200      	movs	r2, #0
  4012ea:	4b8b      	ldr	r3, [pc, #556]	; (401518 <pmc_sleep+0x27c>)
  4012ec:	701a      	strb	r2, [r3, #0]
		b_is_sleep_clock_used = true;
  4012ee:	2201      	movs	r2, #1
  4012f0:	4b8b      	ldr	r3, [pc, #556]	; (401520 <pmc_sleep+0x284>)
  4012f2:	701a      	strb	r2, [r3, #0]
#if defined(EFC1)
		uint32_t *p_fmr_setting1,
#endif
		const bool disable_xtal)
{
	uint32_t mor  = PMC->CKGR_MOR;
  4012f4:	4b8b      	ldr	r3, [pc, #556]	; (401524 <pmc_sleep+0x288>)
  4012f6:	f8d3 8020 	ldr.w	r8, [r3, #32]
	uint32_t mckr = PMC->PMC_MCKR;
  4012fa:	6b1d      	ldr	r5, [r3, #48]	; 0x30
	uint32_t fmr  = EFC0->EEFC_FMR;
  4012fc:	4a8a      	ldr	r2, [pc, #552]	; (401528 <pmc_sleep+0x28c>)
  4012fe:	f8d2 a000 	ldr.w	sl, [r2]
# if defined(EFC1)
	uint32_t fmr1 = EFC1->EEFC_FMR;
  401302:	f502 7200 	add.w	r2, r2, #512	; 0x200
  401306:	f8d2 9000 	ldr.w	r9, [r2]

	if (p_osc_setting) {
		*p_osc_setting = mor;
	}
	if (p_pll0_setting) {
		*p_pll0_setting = PMC->CKGR_PLLAR;
  40130a:	6a9f      	ldr	r7, [r3, #40]	; 0x28
	}
	if (p_pll1_setting) {
#if (SAM3S || SAM4S || SAM4C || SAM4CM || SAM4CP)
		*p_pll1_setting = PMC->CKGR_PLLBR;
  40130c:	f8d3 b02c 	ldr.w	fp, [r3, #44]	; 0x2c
		*p_fmr_setting1 = fmr1;
	}
#endif

	/* Enable FAST RC */
	PMC->CKGR_MOR = CKGR_MOR_KEY_PASSWD | mor | CKGR_MOR_MOSCRCEN;
  401310:	f448 125c 	orr.w	r2, r8, #3604480	; 0x370000
  401314:	f042 0208 	orr.w	r2, r2, #8
  401318:	621a      	str	r2, [r3, #32]
	/* if MCK source is PLL, switch to mainck */
	if ((mckr & PMC_MCKR_CSS_Msk) > PMC_MCKR_CSS_MAIN_CLK) {
  40131a:	f005 0603 	and.w	r6, r5, #3
  40131e:	2e01      	cmp	r6, #1
  401320:	d90a      	bls.n	401338 <pmc_sleep+0x9c>
		/* MCK -> MAINCK */
		mckr = (mckr & (~PMC_MCKR_CSS_Msk)) | PMC_MCKR_CSS_MAIN_CLK;
  401322:	f025 0103 	bic.w	r1, r5, #3
  401326:	f041 0101 	orr.w	r1, r1, #1
		PMC->PMC_MCKR = mckr;
  40132a:	6319      	str	r1, [r3, #48]	; 0x30
		while(!(PMC->PMC_SR & PMC_SR_MCKRDY));
  40132c:	461a      	mov	r2, r3
  40132e:	6e93      	ldr	r3, [r2, #104]	; 0x68
  401330:	f013 0f08 	tst.w	r3, #8
  401334:	d0fb      	beq.n	40132e <pmc_sleep+0x92>
  401336:	e000      	b.n	40133a <pmc_sleep+0x9e>
		uint32_t *p_fmr_setting1,
#endif
		const bool disable_xtal)
{
	uint32_t mor  = PMC->CKGR_MOR;
	uint32_t mckr = PMC->PMC_MCKR;
  401338:	4629      	mov	r1, r5
		mckr = (mckr & (~PMC_MCKR_CSS_Msk)) | PMC_MCKR_CSS_MAIN_CLK;
		PMC->PMC_MCKR = mckr;
		while(!(PMC->PMC_SR & PMC_SR_MCKRDY));
	}
	/* MCK prescale -> 1 */
	if (mckr & PMC_MCKR_PRES_Msk) {
  40133a:	f011 0f70 	tst.w	r1, #112	; 0x70
  40133e:	d008      	beq.n	401352 <pmc_sleep+0xb6>
		mckr = (mckr & (~PMC_MCKR_PRES_Msk));
  401340:	f021 0170 	bic.w	r1, r1, #112	; 0x70
		PMC->PMC_MCKR = mckr;
  401344:	4b77      	ldr	r3, [pc, #476]	; (401524 <pmc_sleep+0x288>)
  401346:	6319      	str	r1, [r3, #48]	; 0x30
		while(!(PMC->PMC_SR & PMC_SR_MCKRDY));
  401348:	461a      	mov	r2, r3
  40134a:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40134c:	f013 0f08 	tst.w	r3, #8
  401350:	d0fb      	beq.n	40134a <pmc_sleep+0xae>
	}
	/* Disable PLLs */
	pmc_disable_pllack();
  401352:	4b76      	ldr	r3, [pc, #472]	; (40152c <pmc_sleep+0x290>)
  401354:	4798      	blx	r3
#if (SAM3S || SAM4S || SAM4C || SAM4CM || SAM4CP)
	pmc_disable_pllbck();
  401356:	4b76      	ldr	r3, [pc, #472]	; (401530 <pmc_sleep+0x294>)
  401358:	4798      	blx	r3
	pmc_disable_upll_clock();
#endif

	/* Prepare for entering WAIT mode */
	/* Wait fast RC ready */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  40135a:	4a72      	ldr	r2, [pc, #456]	; (401524 <pmc_sleep+0x288>)
  40135c:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40135e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
  401362:	d0fb      	beq.n	40135c <pmc_sleep+0xc0>
	EFC0->EEFC_FMR = (fmr & (~EEFC_FMR_FWS_Msk)) | EEFC_FMR_FWS(1);

	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCSEL) | CKGR_MOR_MOSCRCF_24_MHz |
			CKGR_MOR_KEY_PASSWD;
#else
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCSEL) |
  401364:	4a6f      	ldr	r2, [pc, #444]	; (401524 <pmc_sleep+0x288>)
  401366:	6a13      	ldr	r3, [r2, #32]
  401368:	f023 739b 	bic.w	r3, r3, #20316160	; 0x1360000
  40136c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
  401370:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  401374:	6213      	str	r3, [r2, #32]
			CKGR_MOR_KEY_PASSWD;
#endif
	while (!(PMC->PMC_SR & PMC_SR_MOSCSELS));
  401376:	6e93      	ldr	r3, [r2, #104]	; 0x68
  401378:	f413 3f80 	tst.w	r3, #65536	; 0x10000
  40137c:	d0fb      	beq.n	401376 <pmc_sleep+0xda>

#if (!SAMG)
	/* FWS update */
	EFC0->EEFC_FMR = fmr & (~EEFC_FMR_FWS_Msk);
  40137e:	f42a 6370 	bic.w	r3, sl, #3840	; 0xf00
  401382:	4a69      	ldr	r2, [pc, #420]	; (401528 <pmc_sleep+0x28c>)
  401384:	6013      	str	r3, [r2, #0]
#if defined(EFC1)
	EFC1->EEFC_FMR = fmr1 & (~EEFC_FMR_FWS_Msk);
  401386:	f429 6370 	bic.w	r3, r9, #3840	; 0xf00
  40138a:	f502 7200 	add.w	r2, r2, #512	; 0x200
  40138e:	6013      	str	r3, [r2, #0]
#endif
#endif

	/* Disable XTALs */
	if (disable_xtal) {
  401390:	2c04      	cmp	r4, #4
  401392:	d109      	bne.n	4013a8 <pmc_sleep+0x10c>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  401394:	f5a2 6200 	sub.w	r2, r2, #2048	; 0x800
  401398:	6a13      	ldr	r3, [r2, #32]
  40139a:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
  40139e:	f023 0301 	bic.w	r3, r3, #1
  4013a2:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  4013a6:	6213      	str	r3, [r2, #32]
				&fmr1,
#endif
				(sleep_mode == SAM_PM_SMODE_WAIT));

		/* Enter wait mode */
		cpu_irq_enable();
  4013a8:	4c5b      	ldr	r4, [pc, #364]	; (401518 <pmc_sleep+0x27c>)
  4013aa:	2301      	movs	r3, #1
  4013ac:	7023      	strb	r3, [r4, #0]
  4013ae:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
  4013b2:	b662      	cpsie	i

		pmc_enable_waitmode();
  4013b4:	4b5f      	ldr	r3, [pc, #380]	; (401534 <pmc_sleep+0x298>)
  4013b6:	4798      	blx	r3
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
  4013b8:	b672      	cpsid	i
  4013ba:	f3bf 8f5f 	dmb	sy

		cpu_irq_disable();
  4013be:	2300      	movs	r3, #0
  4013c0:	7023      	strb	r3, [r4, #0]
{
	uint32_t mckr;
	uint32_t pll_sr = 0;

	/* Switch mainck to external xtal */
	if (CKGR_MOR_MOSCXTBY == (osc_setting & CKGR_MOR_MOSCXTBY)) {
  4013c2:	f018 0f02 	tst.w	r8, #2
  4013c6:	d00f      	beq.n	4013e8 <pmc_sleep+0x14c>
		/* Bypass mode */
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  4013c8:	4a56      	ldr	r2, [pc, #344]	; (401524 <pmc_sleep+0x288>)
  4013ca:	6a13      	ldr	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  4013cc:	495a      	ldr	r1, [pc, #360]	; (401538 <pmc_sleep+0x29c>)
  4013ce:	4019      	ands	r1, r3
  4013d0:	4b5a      	ldr	r3, [pc, #360]	; (40153c <pmc_sleep+0x2a0>)
  4013d2:	430b      	orrs	r3, r1
	uint32_t pll_sr = 0;

	/* Switch mainck to external xtal */
	if (CKGR_MOR_MOSCXTBY == (osc_setting & CKGR_MOR_MOSCXTBY)) {
		/* Bypass mode */
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  4013d4:	6213      	str	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCEN &
  4013d6:	6a13      	ldr	r3, [r2, #32]
					~CKGR_MOR_MOSCRCF_Msk)
				| CKGR_MOR_KEY_PASSWD;
  4013d8:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
  4013dc:	f023 0378 	bic.w	r3, r3, #120	; 0x78
  4013e0:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
	if (CKGR_MOR_MOSCXTBY == (osc_setting & CKGR_MOR_MOSCXTBY)) {
		/* Bypass mode */
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCEN &
  4013e4:	6213      	str	r3, [r2, #32]
  4013e6:	e02f      	b.n	401448 <pmc_sleep+0x1ac>
					~CKGR_MOR_MOSCRCF_Msk)
				| CKGR_MOR_KEY_PASSWD;
	} else if (CKGR_MOR_MOSCXTEN == (osc_setting & CKGR_MOR_MOSCXTEN)) {
  4013e8:	f018 0f01 	tst.w	r8, #1
  4013ec:	d02c      	beq.n	401448 <pmc_sleep+0x1ac>
		/* Enable External XTAL */
		if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCXTEN)) {
  4013ee:	4b4d      	ldr	r3, [pc, #308]	; (401524 <pmc_sleep+0x288>)
  4013f0:	6a1b      	ldr	r3, [r3, #32]
  4013f2:	f013 0f01 	tst.w	r3, #1
  4013f6:	d10e      	bne.n	401416 <pmc_sleep+0x17a>
			PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  4013f8:	4a4a      	ldr	r2, [pc, #296]	; (401524 <pmc_sleep+0x288>)
  4013fa:	6a13      	ldr	r3, [r2, #32]
					CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN;
  4013fc:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
  401400:	f023 0303 	bic.w	r3, r3, #3
  401404:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  401408:	f043 0301 	orr.w	r3, r3, #1
					~CKGR_MOR_MOSCRCF_Msk)
				| CKGR_MOR_KEY_PASSWD;
	} else if (CKGR_MOR_MOSCXTEN == (osc_setting & CKGR_MOR_MOSCXTEN)) {
		/* Enable External XTAL */
		if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCXTEN)) {
			PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  40140c:	6213      	str	r3, [r2, #32]
					CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN;
			/* Wait the Xtal to stabilize */
			while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  40140e:	6e93      	ldr	r3, [r2, #104]	; 0x68
  401410:	f013 0f01 	tst.w	r3, #1
  401414:	d0fb      	beq.n	40140e <pmc_sleep+0x172>
		}
		/* Select External XTAL */
		if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
  401416:	4b43      	ldr	r3, [pc, #268]	; (401524 <pmc_sleep+0x288>)
  401418:	6a1b      	ldr	r3, [r3, #32]
  40141a:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  40141e:	d10a      	bne.n	401436 <pmc_sleep+0x19a>
			PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  401420:	4a40      	ldr	r2, [pc, #256]	; (401524 <pmc_sleep+0x288>)
  401422:	6a13      	ldr	r3, [r2, #32]
  401424:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
  401428:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  40142c:	6213      	str	r3, [r2, #32]
			while (!(PMC->PMC_SR & PMC_SR_MOSCSELS));
  40142e:	6e93      	ldr	r3, [r2, #104]	; 0x68
  401430:	f413 3f80 	tst.w	r3, #65536	; 0x10000
  401434:	d0fb      	beq.n	40142e <pmc_sleep+0x192>
		}
		/* Disable Fast RC */
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCEN &
  401436:	4a3b      	ldr	r2, [pc, #236]	; (401524 <pmc_sleep+0x288>)
  401438:	6a13      	ldr	r3, [r2, #32]
						~CKGR_MOR_MOSCRCF_Msk)
					| CKGR_MOR_KEY_PASSWD;
  40143a:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
  40143e:	f023 0378 	bic.w	r3, r3, #120	; 0x78
  401442:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
		if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
			PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
			while (!(PMC->PMC_SR & PMC_SR_MOSCSELS));
		}
		/* Disable Fast RC */
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCEN &
  401446:	6213      	str	r3, [r2, #32]
						~CKGR_MOR_MOSCRCF_Msk)
					| CKGR_MOR_KEY_PASSWD;
	}

	if (pll0_setting & CKGR_PLLAR_MULA_Msk) {
  401448:	4b3d      	ldr	r3, [pc, #244]	; (401540 <pmc_sleep+0x2a4>)
  40144a:	403b      	ands	r3, r7
  40144c:	b12b      	cbz	r3, 40145a <pmc_sleep+0x1be>
#if (SAM4C || SAM4CM || SAMG || SAM4CP)
		PMC->CKGR_PLLAR = pll0_setting;
#else
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | pll0_setting;
  40144e:	f047 5700 	orr.w	r7, r7, #536870912	; 0x20000000
  401452:	4b34      	ldr	r3, [pc, #208]	; (401524 <pmc_sleep+0x288>)
  401454:	629f      	str	r7, [r3, #40]	; 0x28
#endif
		pll_sr |= PMC_SR_LOCKA;
  401456:	2202      	movs	r2, #2
  401458:	e000      	b.n	40145c <pmc_sleep+0x1c0>
		, const uint32_t fmr_setting1
#endif
		)
{
	uint32_t mckr;
	uint32_t pll_sr = 0;
  40145a:	2200      	movs	r2, #0
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | pll0_setting;
#endif
		pll_sr |= PMC_SR_LOCKA;
	}
#if (SAM3S || SAM4S || SAM4C || SAM4CM || SAM4CP)
	if (pll1_setting & CKGR_PLLBR_MULB_Msk) {
  40145c:	4b38      	ldr	r3, [pc, #224]	; (401540 <pmc_sleep+0x2a4>)
  40145e:	ea0b 0303 	and.w	r3, fp, r3
  401462:	b123      	cbz	r3, 40146e <pmc_sleep+0x1d2>
		PMC->CKGR_PLLBR = pll1_setting;
  401464:	4b2f      	ldr	r3, [pc, #188]	; (401524 <pmc_sleep+0x288>)
  401466:	f8c3 b02c 	str.w	fp, [r3, #44]	; 0x2c
		pll_sr |= PMC_SR_LOCKB;
  40146a:	f042 0204 	orr.w	r2, r2, #4
	}
#else
	UNUSED(pll1_setting);
#endif
	/* Wait MCK source ready */
	switch(mck_setting & PMC_MCKR_CSS_Msk) {
  40146e:	2e02      	cmp	r6, #2
  401470:	d002      	beq.n	401478 <pmc_sleep+0x1dc>
  401472:	2e03      	cmp	r6, #3
  401474:	d006      	beq.n	401484 <pmc_sleep+0x1e8>
  401476:	e00a      	b.n	40148e <pmc_sleep+0x1f2>
	case PMC_MCKR_CSS_PLLA_CLK:
		while (!(PMC->PMC_SR & PMC_SR_LOCKA));
  401478:	492a      	ldr	r1, [pc, #168]	; (401524 <pmc_sleep+0x288>)
  40147a:	6e8b      	ldr	r3, [r1, #104]	; 0x68
  40147c:	f013 0f02 	tst.w	r3, #2
  401480:	d0fb      	beq.n	40147a <pmc_sleep+0x1de>
  401482:	e004      	b.n	40148e <pmc_sleep+0x1f2>
		break;
#if (SAM3S || SAM4S || SAM4C || SAM4CM || SAM4CP)
	case PMC_MCKR_CSS_PLLB_CLK:
		while (!(PMC->PMC_SR & PMC_SR_LOCKB));
  401484:	4927      	ldr	r1, [pc, #156]	; (401524 <pmc_sleep+0x288>)
  401486:	6e8b      	ldr	r3, [r1, #104]	; 0x68
  401488:	f013 0f04 	tst.w	r3, #4
  40148c:	d0fb      	beq.n	401486 <pmc_sleep+0x1ea>
		break;
#endif
	}

	/* Switch to faster clock */
	mckr = PMC->PMC_MCKR;
  40148e:	4825      	ldr	r0, [pc, #148]	; (401524 <pmc_sleep+0x288>)
  401490:	6b03      	ldr	r3, [r0, #48]	; 0x30

	/* Set PRES */
	PMC->PMC_MCKR = (mckr & ~PMC_MCKR_PRES_Msk)
		| (mck_setting & PMC_MCKR_PRES_Msk);
  401492:	f023 0170 	bic.w	r1, r3, #112	; 0x70
  401496:	f005 0370 	and.w	r3, r5, #112	; 0x70
  40149a:	430b      	orrs	r3, r1

	/* Switch to faster clock */
	mckr = PMC->PMC_MCKR;

	/* Set PRES */
	PMC->PMC_MCKR = (mckr & ~PMC_MCKR_PRES_Msk)
  40149c:	6303      	str	r3, [r0, #48]	; 0x30
		| (mck_setting & PMC_MCKR_PRES_Msk);
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  40149e:	4601      	mov	r1, r0
  4014a0:	6e8b      	ldr	r3, [r1, #104]	; 0x68
  4014a2:	f013 0f08 	tst.w	r3, #8
  4014a6:	d0fb      	beq.n	4014a0 <pmc_sleep+0x204>

	/* Restore flash wait states */
	EFC0->EEFC_FMR = fmr_setting;
  4014a8:	4b1f      	ldr	r3, [pc, #124]	; (401528 <pmc_sleep+0x28c>)
  4014aa:	f8c3 a000 	str.w	sl, [r3]
#if defined(EFC1)
	EFC1->EEFC_FMR = fmr_setting1;
  4014ae:	f503 7300 	add.w	r3, r3, #512	; 0x200
  4014b2:	f8c3 9000 	str.w	r9, [r3]
#endif

	/* Set CSS and others */
	PMC->PMC_MCKR = mck_setting;
  4014b6:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
  4014ba:	631d      	str	r5, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  4014bc:	4619      	mov	r1, r3
  4014be:	6e8b      	ldr	r3, [r1, #104]	; 0x68
  4014c0:	f013 0f08 	tst.w	r3, #8
  4014c4:	d0fb      	beq.n	4014be <pmc_sleep+0x222>

	/* Waiting all restored PLLs ready */
	while (!(PMC->PMC_SR & pll_sr));
  4014c6:	4917      	ldr	r1, [pc, #92]	; (401524 <pmc_sleep+0x288>)
  4014c8:	6e8b      	ldr	r3, [r1, #104]	; 0x68
  4014ca:	4213      	tst	r3, r2
  4014cc:	d0fc      	beq.n	4014c8 <pmc_sleep+0x22c>

#if (SAM4C || SAM4CM || SAM4CP)
		/* Restore the sub-system 1 */
		PMC->PMC_SCER = cpclk_backup | PMC_SCER_CPKEY_PASSWD;
#endif
		b_is_sleep_clock_used = false;
  4014ce:	2200      	movs	r2, #0
  4014d0:	4b13      	ldr	r3, [pc, #76]	; (401520 <pmc_sleep+0x284>)
  4014d2:	701a      	strb	r2, [r3, #0]
		if (callback_clocks_restored) {
  4014d4:	4b1b      	ldr	r3, [pc, #108]	; (401544 <pmc_sleep+0x2a8>)
  4014d6:	681b      	ldr	r3, [r3, #0]
  4014d8:	b11b      	cbz	r3, 4014e2 <pmc_sleep+0x246>
			callback_clocks_restored();
  4014da:	4798      	blx	r3
			callback_clocks_restored = NULL;
  4014dc:	2200      	movs	r2, #0
  4014de:	4b19      	ldr	r3, [pc, #100]	; (401544 <pmc_sleep+0x2a8>)
  4014e0:	601a      	str	r2, [r3, #0]
		}
		cpu_irq_enable();
  4014e2:	2201      	movs	r2, #1
  4014e4:	4b0c      	ldr	r3, [pc, #48]	; (401518 <pmc_sleep+0x27c>)
  4014e6:	701a      	strb	r2, [r3, #0]
  4014e8:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
  4014ec:	b662      	cpsie	i
  4014ee:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

		break;
	}
#if (!(SAMG51 || SAMG53 || SAMG54))
	case SAM_PM_SMODE_BACKUP:
		SCB->SCR |= SCR_SLEEPDEEP;
  4014f2:	4a08      	ldr	r2, [pc, #32]	; (401514 <pmc_sleep+0x278>)
  4014f4:	6913      	ldr	r3, [r2, #16]
  4014f6:	f043 0304 	orr.w	r3, r3, #4
  4014fa:	6113      	str	r3, [r2, #16]
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAMS70 || SAME70)
		SUPC->SUPC_CR = SUPC_CR_KEY_PASSWD | SUPC_CR_VROFF_STOP_VREG;
  4014fc:	4a12      	ldr	r2, [pc, #72]	; (401548 <pmc_sleep+0x2ac>)
  4014fe:	4b13      	ldr	r3, [pc, #76]	; (40154c <pmc_sleep+0x2b0>)
  401500:	601a      	str	r2, [r3, #0]
		cpu_irq_enable();
  401502:	2201      	movs	r2, #1
  401504:	4b04      	ldr	r3, [pc, #16]	; (401518 <pmc_sleep+0x27c>)
  401506:	701a      	strb	r2, [r3, #0]
  401508:	f3bf 8f5f 	dmb	sy
  40150c:	b662      	cpsie	i
    Wait For Interrupt is a hint instruction that suspends execution
    until one of a number of events occurs.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __WFI(void)
{
  __ASM volatile ("wfi");
  40150e:	bf30      	wfi
  401510:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401514:	e000ed00 	.word	0xe000ed00
  401518:	20000008 	.word	0x20000008
  40151c:	00401241 	.word	0x00401241
  401520:	20000ce8 	.word	0x20000ce8
  401524:	400e0400 	.word	0x400e0400
  401528:	400e0a00 	.word	0x400e0a00
  40152c:	004011c1 	.word	0x004011c1
  401530:	004011e1 	.word	0x004011e1
  401534:	0040124d 	.word	0x0040124d
  401538:	fec8fffc 	.word	0xfec8fffc
  40153c:	01370002 	.word	0x01370002
  401540:	07ff0000 	.word	0x07ff0000
  401544:	20000ce4 	.word	0x20000ce4
  401548:	a5000004 	.word	0xa5000004
  40154c:	400e1410 	.word	0x400e1410

00401550 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  401550:	e7fe      	b.n	401550 <Dummy_Handler>
  401552:	bf00      	nop

00401554 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  401554:	b508      	push	{r3, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc > pDest) {
  401556:	4b20      	ldr	r3, [pc, #128]	; (4015d8 <Reset_Handler+0x84>)
  401558:	4a20      	ldr	r2, [pc, #128]	; (4015dc <Reset_Handler+0x88>)
  40155a:	429a      	cmp	r2, r3
  40155c:	d912      	bls.n	401584 <Reset_Handler+0x30>
		for (; pDest < &_erelocate;) {
  40155e:	4b20      	ldr	r3, [pc, #128]	; (4015e0 <Reset_Handler+0x8c>)
  401560:	4a1d      	ldr	r2, [pc, #116]	; (4015d8 <Reset_Handler+0x84>)
  401562:	429a      	cmp	r2, r3
  401564:	d21e      	bcs.n	4015a4 <Reset_Handler+0x50>
  401566:	4611      	mov	r1, r2
  401568:	3b01      	subs	r3, #1
  40156a:	1a9b      	subs	r3, r3, r2
  40156c:	f023 0303 	bic.w	r3, r3, #3
  401570:	3304      	adds	r3, #4
  401572:	4a1a      	ldr	r2, [pc, #104]	; (4015dc <Reset_Handler+0x88>)
  401574:	4413      	add	r3, r2
			*pDest++ = *pSrc++;
  401576:	f852 0b04 	ldr.w	r0, [r2], #4
  40157a:	f841 0b04 	str.w	r0, [r1], #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc > pDest) {
		for (; pDest < &_erelocate;) {
  40157e:	429a      	cmp	r2, r3
  401580:	d1f9      	bne.n	401576 <Reset_Handler+0x22>
  401582:	e00f      	b.n	4015a4 <Reset_Handler+0x50>
			*pDest++ = *pSrc++;
		}
	} else if (pSrc < pDest) {
  401584:	4b14      	ldr	r3, [pc, #80]	; (4015d8 <Reset_Handler+0x84>)
  401586:	4a15      	ldr	r2, [pc, #84]	; (4015dc <Reset_Handler+0x88>)
  401588:	429a      	cmp	r2, r3
  40158a:	d20b      	bcs.n	4015a4 <Reset_Handler+0x50>
		uint32_t nb_bytes = (uint32_t)&_erelocate - (uint32_t)&_srelocate;
  40158c:	4b14      	ldr	r3, [pc, #80]	; (4015e0 <Reset_Handler+0x8c>)
  40158e:	4a12      	ldr	r2, [pc, #72]	; (4015d8 <Reset_Handler+0x84>)
  401590:	1a9a      	subs	r2, r3, r2
  401592:	4814      	ldr	r0, [pc, #80]	; (4015e4 <Reset_Handler+0x90>)
		pSrc = (uint32_t*)((uint32_t)pSrc + nb_bytes) - 1;
  401594:	1811      	adds	r1, r2, r0
		pDest = (uint32_t*)((uint32_t)pDest + nb_bytes) - 1;
		for (;nb_bytes;nb_bytes -= 4) {
  401596:	b12a      	cbz	r2, 4015a4 <Reset_Handler+0x50>
			*pDest-- = *pSrc--;
  401598:	f851 2904 	ldr.w	r2, [r1], #-4
  40159c:	f843 2d04 	str.w	r2, [r3, #-4]!
		}
	} else if (pSrc < pDest) {
		uint32_t nb_bytes = (uint32_t)&_erelocate - (uint32_t)&_srelocate;
		pSrc = (uint32_t*)((uint32_t)pSrc + nb_bytes) - 1;
		pDest = (uint32_t*)((uint32_t)pDest + nb_bytes) - 1;
		for (;nb_bytes;nb_bytes -= 4) {
  4015a0:	4281      	cmp	r1, r0
  4015a2:	d1f9      	bne.n	401598 <Reset_Handler+0x44>

    No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
  4015a4:	bf00      	nop
		}
	}
	__NOP();

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  4015a6:	4b10      	ldr	r3, [pc, #64]	; (4015e8 <Reset_Handler+0x94>)
  4015a8:	4a10      	ldr	r2, [pc, #64]	; (4015ec <Reset_Handler+0x98>)
  4015aa:	429a      	cmp	r2, r3
  4015ac:	d20b      	bcs.n	4015c6 <Reset_Handler+0x72>
  4015ae:	1d13      	adds	r3, r2, #4
  4015b0:	4a0f      	ldr	r2, [pc, #60]	; (4015f0 <Reset_Handler+0x9c>)
  4015b2:	1ad2      	subs	r2, r2, r3
  4015b4:	f022 0203 	bic.w	r2, r2, #3
  4015b8:	441a      	add	r2, r3
  4015ba:	3b04      	subs	r3, #4
		*pDest++ = 0;
  4015bc:	2100      	movs	r1, #0
  4015be:	f843 1b04 	str.w	r1, [r3], #4
		}
	}
	__NOP();

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  4015c2:	429a      	cmp	r2, r3
  4015c4:	d1fb      	bne.n	4015be <Reset_Handler+0x6a>
		*pDest++ = 0;
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc);
  4015c6:	4b0b      	ldr	r3, [pc, #44]	; (4015f4 <Reset_Handler+0xa0>)
  4015c8:	4a0b      	ldr	r2, [pc, #44]	; (4015f8 <Reset_Handler+0xa4>)
  4015ca:	609a      	str	r2, [r3, #8]

	/* Initialize the C library */
	__libc_init_array();
  4015cc:	4b0b      	ldr	r3, [pc, #44]	; (4015fc <Reset_Handler+0xa8>)
  4015ce:	4798      	blx	r3

	/* Branch to main function */
	main();
  4015d0:	4b0b      	ldr	r3, [pc, #44]	; (401600 <Reset_Handler+0xac>)
  4015d2:	4798      	blx	r3
  4015d4:	e7fe      	b.n	4015d4 <Reset_Handler+0x80>
  4015d6:	bf00      	nop
  4015d8:	20000000 	.word	0x20000000
  4015dc:	00406fb0 	.word	0x00406fb0
  4015e0:	2000088c 	.word	0x2000088c
  4015e4:	00406fac 	.word	0x00406fac
  4015e8:	20000d3c 	.word	0x20000d3c
  4015ec:	2000088c 	.word	0x2000088c
  4015f0:	20000d3f 	.word	0x20000d3f
  4015f4:	e000ed00 	.word	0xe000ed00
  4015f8:	00400000 	.word	0x00400000
  4015fc:	00401b09 	.word	0x00401b09
  401600:	00401a29 	.word	0x00401a29

00401604 <SystemCoreClockUpdate>:
 * \brief Get Core Clock Frequency.
 */
void SystemCoreClockUpdate( void )
{
	/* Determine clock frequency according to clock register values */
	switch ( PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk ) {
  401604:	4b3d      	ldr	r3, [pc, #244]	; (4016fc <SystemCoreClockUpdate+0xf8>)
  401606:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401608:	f003 0303 	and.w	r3, r3, #3
  40160c:	2b03      	cmp	r3, #3
  40160e:	d85d      	bhi.n	4016cc <SystemCoreClockUpdate+0xc8>
  401610:	e8df f003 	tbb	[pc, r3]
  401614:	2b2b0e02 	.word	0x2b2b0e02
	case PMC_MCKR_CSS_SLOW_CLK: /* Slow clock */
			if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL ) {
  401618:	4b39      	ldr	r3, [pc, #228]	; (401700 <SystemCoreClockUpdate+0xfc>)
  40161a:	695b      	ldr	r3, [r3, #20]
  40161c:	f013 0f80 	tst.w	r3, #128	; 0x80
				SystemCoreClock = CHIP_FREQ_XTAL_32K;
  401620:	bf14      	ite	ne
  401622:	f44f 4200 	movne.w	r2, #32768	; 0x8000
			} else {
				SystemCoreClock = CHIP_FREQ_SLCK_RC;
  401626:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  40162a:	4b36      	ldr	r3, [pc, #216]	; (401704 <SystemCoreClockUpdate+0x100>)
  40162c:	601a      	str	r2, [r3, #0]
  40162e:	e04d      	b.n	4016cc <SystemCoreClockUpdate+0xc8>
			}
		break;
		
	case PMC_MCKR_CSS_MAIN_CLK: /* Main clock */
		if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  401630:	4b32      	ldr	r3, [pc, #200]	; (4016fc <SystemCoreClockUpdate+0xf8>)
  401632:	6a1b      	ldr	r3, [r3, #32]
  401634:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  401638:	d003      	beq.n	401642 <SystemCoreClockUpdate+0x3e>
			SystemCoreClock = CHIP_FREQ_XTAL;
  40163a:	4a33      	ldr	r2, [pc, #204]	; (401708 <SystemCoreClockUpdate+0x104>)
  40163c:	4b31      	ldr	r3, [pc, #196]	; (401704 <SystemCoreClockUpdate+0x100>)
  40163e:	601a      	str	r2, [r3, #0]
  401640:	e044      	b.n	4016cc <SystemCoreClockUpdate+0xc8>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  401642:	4a32      	ldr	r2, [pc, #200]	; (40170c <SystemCoreClockUpdate+0x108>)
  401644:	4b2f      	ldr	r3, [pc, #188]	; (401704 <SystemCoreClockUpdate+0x100>)
  401646:	601a      	str	r2, [r3, #0]
			
			switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  401648:	4b2c      	ldr	r3, [pc, #176]	; (4016fc <SystemCoreClockUpdate+0xf8>)
  40164a:	6a1b      	ldr	r3, [r3, #32]
  40164c:	f003 0370 	and.w	r3, r3, #112	; 0x70
  401650:	2b10      	cmp	r3, #16
  401652:	d002      	beq.n	40165a <SystemCoreClockUpdate+0x56>
  401654:	2b20      	cmp	r3, #32
  401656:	d004      	beq.n	401662 <SystemCoreClockUpdate+0x5e>
  401658:	e038      	b.n	4016cc <SystemCoreClockUpdate+0xc8>
			case CKGR_MOR_MOSCRCF_4_MHz:
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
			break;
			
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_8MHZ;
  40165a:	4a2d      	ldr	r2, [pc, #180]	; (401710 <SystemCoreClockUpdate+0x10c>)
  40165c:	4b29      	ldr	r3, [pc, #164]	; (401704 <SystemCoreClockUpdate+0x100>)
  40165e:	601a      	str	r2, [r3, #0]
			break;
  401660:	e034      	b.n	4016cc <SystemCoreClockUpdate+0xc8>
			
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
  401662:	4a29      	ldr	r2, [pc, #164]	; (401708 <SystemCoreClockUpdate+0x104>)
  401664:	4b27      	ldr	r3, [pc, #156]	; (401704 <SystemCoreClockUpdate+0x100>)
  401666:	601a      	str	r2, [r3, #0]
			break;
  401668:	e030      	b.n	4016cc <SystemCoreClockUpdate+0xc8>
		}
		break;
		
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_PLLB_CLK:	/* PLLB clock */
			if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  40166a:	4b24      	ldr	r3, [pc, #144]	; (4016fc <SystemCoreClockUpdate+0xf8>)
  40166c:	6a1b      	ldr	r3, [r3, #32]
  40166e:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  401672:	d003      	beq.n	40167c <SystemCoreClockUpdate+0x78>
				SystemCoreClock = CHIP_FREQ_XTAL;
  401674:	4a24      	ldr	r2, [pc, #144]	; (401708 <SystemCoreClockUpdate+0x104>)
  401676:	4b23      	ldr	r3, [pc, #140]	; (401704 <SystemCoreClockUpdate+0x100>)
  401678:	601a      	str	r2, [r3, #0]
  40167a:	e012      	b.n	4016a2 <SystemCoreClockUpdate+0x9e>
			} else {
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  40167c:	4a23      	ldr	r2, [pc, #140]	; (40170c <SystemCoreClockUpdate+0x108>)
  40167e:	4b21      	ldr	r3, [pc, #132]	; (401704 <SystemCoreClockUpdate+0x100>)
  401680:	601a      	str	r2, [r3, #0]
				
				switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  401682:	4b1e      	ldr	r3, [pc, #120]	; (4016fc <SystemCoreClockUpdate+0xf8>)
  401684:	6a1b      	ldr	r3, [r3, #32]
  401686:	f003 0370 	and.w	r3, r3, #112	; 0x70
  40168a:	2b10      	cmp	r3, #16
  40168c:	d002      	beq.n	401694 <SystemCoreClockUpdate+0x90>
  40168e:	2b20      	cmp	r3, #32
  401690:	d004      	beq.n	40169c <SystemCoreClockUpdate+0x98>
  401692:	e006      	b.n	4016a2 <SystemCoreClockUpdate+0x9e>
				case CKGR_MOR_MOSCRCF_4_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
					break;
				
				case CKGR_MOR_MOSCRCF_8_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_8MHZ;
  401694:	4a1e      	ldr	r2, [pc, #120]	; (401710 <SystemCoreClockUpdate+0x10c>)
  401696:	4b1b      	ldr	r3, [pc, #108]	; (401704 <SystemCoreClockUpdate+0x100>)
  401698:	601a      	str	r2, [r3, #0]
					break;
  40169a:	e002      	b.n	4016a2 <SystemCoreClockUpdate+0x9e>
				
				case CKGR_MOR_MOSCRCF_12_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
  40169c:	4a1a      	ldr	r2, [pc, #104]	; (401708 <SystemCoreClockUpdate+0x104>)
  40169e:	4b19      	ldr	r3, [pc, #100]	; (401704 <SystemCoreClockUpdate+0x100>)
  4016a0:	601a      	str	r2, [r3, #0]
				default:
					break;
				}
			}
			
			if ( (uint32_t)(PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) ==
  4016a2:	4b16      	ldr	r3, [pc, #88]	; (4016fc <SystemCoreClockUpdate+0xf8>)
  4016a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4016a6:	f003 0303 	and.w	r3, r3, #3
  4016aa:	2b02      	cmp	r3, #2
					PMC_MCKR_CSS_PLLA_CLK ) {
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
  4016ac:	4a13      	ldr	r2, [pc, #76]	; (4016fc <SystemCoreClockUpdate+0xf8>)
  4016ae:	bf07      	ittee	eq
  4016b0:	6a93      	ldreq	r3, [r2, #40]	; 0x28
						>> CKGR_PLLAR_MULA_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
  4016b2:	6a92      	ldreq	r2, [r2, #40]	; 0x28
						>> CKGR_PLLAR_DIVA_Pos));
			} else {
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
  4016b4:	6ad3      	ldrne	r3, [r2, #44]	; 0x2c
						>> CKGR_PLLBR_MULB_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
  4016b6:	6ad2      	ldrne	r2, [r2, #44]	; 0x2c
  4016b8:	4812      	ldr	r0, [pc, #72]	; (401704 <SystemCoreClockUpdate+0x100>)
  4016ba:	f3c3 410a 	ubfx	r1, r3, #16, #11
  4016be:	6803      	ldr	r3, [r0, #0]
  4016c0:	fb01 3303 	mla	r3, r1, r3, r3
  4016c4:	b2d2      	uxtb	r2, r2
  4016c6:	fbb3 f3f2 	udiv	r3, r3, r2
  4016ca:	6003      	str	r3, [r0, #0]
		
	default:
		break;
	}

	if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 ) {
  4016cc:	4b0b      	ldr	r3, [pc, #44]	; (4016fc <SystemCoreClockUpdate+0xf8>)
  4016ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4016d0:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4016d4:	2b70      	cmp	r3, #112	; 0x70
  4016d6:	d107      	bne.n	4016e8 <SystemCoreClockUpdate+0xe4>
		SystemCoreClock /= 3U;
  4016d8:	4a0a      	ldr	r2, [pc, #40]	; (401704 <SystemCoreClockUpdate+0x100>)
  4016da:	6813      	ldr	r3, [r2, #0]
  4016dc:	490d      	ldr	r1, [pc, #52]	; (401714 <SystemCoreClockUpdate+0x110>)
  4016de:	fba1 1303 	umull	r1, r3, r1, r3
  4016e2:	085b      	lsrs	r3, r3, #1
  4016e4:	6013      	str	r3, [r2, #0]
  4016e6:	4770      	bx	lr
	} else {
		SystemCoreClock >>=
			((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  4016e8:	4b04      	ldr	r3, [pc, #16]	; (4016fc <SystemCoreClockUpdate+0xf8>)
  4016ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
	}

	if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 ) {
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>=
  4016ec:	4905      	ldr	r1, [pc, #20]	; (401704 <SystemCoreClockUpdate+0x100>)
  4016ee:	f3c3 1202 	ubfx	r2, r3, #4, #3
  4016f2:	680b      	ldr	r3, [r1, #0]
  4016f4:	40d3      	lsrs	r3, r2
  4016f6:	600b      	str	r3, [r1, #0]
  4016f8:	4770      	bx	lr
  4016fa:	bf00      	nop
  4016fc:	400e0400 	.word	0x400e0400
  401700:	400e1410 	.word	0x400e1410
  401704:	20000010 	.word	0x20000010
  401708:	00b71b00 	.word	0x00b71b00
  40170c:	003d0900 	.word	0x003d0900
  401710:	007a1200 	.word	0x007a1200
  401714:	aaaaaaab 	.word	0xaaaaaaab

00401718 <system_init_flash>:
				}
			}
		}
	}
#else
	if ( ul_clk < CHIP_FREQ_FWS_0 ) {
  401718:	4b1a      	ldr	r3, [pc, #104]	; (401784 <system_init_flash+0x6c>)
  40171a:	4298      	cmp	r0, r3
  40171c:	d807      	bhi.n	40172e <system_init_flash+0x16>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  40171e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  401722:	4a19      	ldr	r2, [pc, #100]	; (401788 <system_init_flash+0x70>)
  401724:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  401726:	f502 7200 	add.w	r2, r2, #512	; 0x200
  40172a:	6013      	str	r3, [r2, #0]
  40172c:	4770      	bx	lr
	} else {
		if ( ul_clk < CHIP_FREQ_FWS_1 ) {
  40172e:	4b17      	ldr	r3, [pc, #92]	; (40178c <system_init_flash+0x74>)
  401730:	4298      	cmp	r0, r3
  401732:	d806      	bhi.n	401742 <system_init_flash+0x2a>
			EFC0->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  401734:	4b16      	ldr	r3, [pc, #88]	; (401790 <system_init_flash+0x78>)
  401736:	4a14      	ldr	r2, [pc, #80]	; (401788 <system_init_flash+0x70>)
  401738:	6013      	str	r3, [r2, #0]
			EFC1->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  40173a:	f502 7200 	add.w	r2, r2, #512	; 0x200
  40173e:	6013      	str	r3, [r2, #0]
  401740:	4770      	bx	lr
		} else {
			if ( ul_clk < CHIP_FREQ_FWS_2 ) {
  401742:	4b14      	ldr	r3, [pc, #80]	; (401794 <system_init_flash+0x7c>)
  401744:	4298      	cmp	r0, r3
  401746:	d806      	bhi.n	401756 <system_init_flash+0x3e>
				EFC0->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  401748:	4b13      	ldr	r3, [pc, #76]	; (401798 <system_init_flash+0x80>)
  40174a:	4a0f      	ldr	r2, [pc, #60]	; (401788 <system_init_flash+0x70>)
  40174c:	6013      	str	r3, [r2, #0]
				EFC1->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  40174e:	f502 7200 	add.w	r2, r2, #512	; 0x200
  401752:	6013      	str	r3, [r2, #0]
  401754:	4770      	bx	lr
			} else {
				if ( ul_clk < CHIP_FREQ_FWS_3 ) {
  401756:	4b11      	ldr	r3, [pc, #68]	; (40179c <system_init_flash+0x84>)
  401758:	4298      	cmp	r0, r3
  40175a:	d806      	bhi.n	40176a <system_init_flash+0x52>
					EFC0->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  40175c:	4b10      	ldr	r3, [pc, #64]	; (4017a0 <system_init_flash+0x88>)
  40175e:	4a0a      	ldr	r2, [pc, #40]	; (401788 <system_init_flash+0x70>)
  401760:	6013      	str	r3, [r2, #0]
					EFC1->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  401762:	f502 7200 	add.w	r2, r2, #512	; 0x200
  401766:	6013      	str	r3, [r2, #0]
  401768:	4770      	bx	lr
				} else {
					if ( ul_clk < CHIP_FREQ_FWS_4 ) {
  40176a:	4b0e      	ldr	r3, [pc, #56]	; (4017a4 <system_init_flash+0x8c>)
  40176c:	4298      	cmp	r0, r3
						EFC0->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  40176e:	bf94      	ite	ls
  401770:	f04f 2304 	movls.w	r3, #67109888	; 0x4000400
						EFC1->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
					} else {
						EFC0->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  401774:	4b0c      	ldrhi	r3, [pc, #48]	; (4017a8 <system_init_flash+0x90>)
  401776:	4a04      	ldr	r2, [pc, #16]	; (401788 <system_init_flash+0x70>)
  401778:	6013      	str	r3, [r2, #0]
						EFC1->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  40177a:	f502 7200 	add.w	r2, r2, #512	; 0x200
  40177e:	6013      	str	r3, [r2, #0]
  401780:	4770      	bx	lr
  401782:	bf00      	nop
  401784:	01312cff 	.word	0x01312cff
  401788:	400e0a00 	.word	0x400e0a00
  40178c:	026259ff 	.word	0x026259ff
  401790:	04000100 	.word	0x04000100
  401794:	039386ff 	.word	0x039386ff
  401798:	04000200 	.word	0x04000200
  40179c:	04c4b3ff 	.word	0x04c4b3ff
  4017a0:	04000300 	.word	0x04000300
  4017a4:	05f5e0ff 	.word	0x05f5e0ff
  4017a8:	04000500 	.word	0x04000500

004017ac <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
  4017ac:	4b09      	ldr	r3, [pc, #36]	; (4017d4 <_sbrk+0x28>)
  4017ae:	681b      	ldr	r3, [r3, #0]
  4017b0:	b913      	cbnz	r3, 4017b8 <_sbrk+0xc>
		heap = (unsigned char *)&_end;
  4017b2:	4a09      	ldr	r2, [pc, #36]	; (4017d8 <_sbrk+0x2c>)
  4017b4:	4b07      	ldr	r3, [pc, #28]	; (4017d4 <_sbrk+0x28>)
  4017b6:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
  4017b8:	4b06      	ldr	r3, [pc, #24]	; (4017d4 <_sbrk+0x28>)
  4017ba:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
  4017bc:	181a      	adds	r2, r3, r0
  4017be:	4907      	ldr	r1, [pc, #28]	; (4017dc <_sbrk+0x30>)
  4017c0:	4291      	cmp	r1, r2
  4017c2:	db04      	blt.n	4017ce <_sbrk+0x22>
		return (caddr_t) -1;	
	}

	heap += incr;
  4017c4:	4610      	mov	r0, r2
  4017c6:	4a03      	ldr	r2, [pc, #12]	; (4017d4 <_sbrk+0x28>)
  4017c8:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
  4017ca:	4618      	mov	r0, r3
  4017cc:	4770      	bx	lr
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;

	if (((int)prev_heap + incr) > ramend) {
		return (caddr_t) -1;	
  4017ce:	f04f 30ff 	mov.w	r0, #4294967295
	}

	heap += incr;

	return (caddr_t) prev_heap;
}
  4017d2:	4770      	bx	lr
  4017d4:	20000cec 	.word	0x20000cec
  4017d8:	20003d40 	.word	0x20003d40
  4017dc:	20027ffc 	.word	0x20027ffc

004017e0 <push_button_handle>:

/************************************************************************/
/* HANDLERS                                                            */
/************************************************************************/
static void push_button_handle(uint32_t id, uint32_t mask)
{
  4017e0:	b508      	push	{r3, lr}
	adc_start(ADC);
  4017e2:	4802      	ldr	r0, [pc, #8]	; (4017ec <push_button_handle+0xc>)
  4017e4:	4b02      	ldr	r3, [pc, #8]	; (4017f0 <push_button_handle+0x10>)
  4017e6:	4798      	blx	r3
  4017e8:	bd08      	pop	{r3, pc}
  4017ea:	bf00      	nop
  4017ec:	40038000 	.word	0x40038000
  4017f0:	00400a11 	.word	0x00400a11

004017f4 <ADC_Handler>:

/**
* \brief ADC interrupt handler.
*/
void ADC_Handler(void)
{
  4017f4:	b530      	push	{r4, r5, lr}
  4017f6:	b085      	sub	sp, #20
	uint16_t result;

	if ((adc_get_status(ADC) & ADC_ISR_DRDY) == ADC_ISR_DRDY)
  4017f8:	4810      	ldr	r0, [pc, #64]	; (40183c <ADC_Handler+0x48>)
  4017fa:	4b11      	ldr	r3, [pc, #68]	; (401840 <ADC_Handler+0x4c>)
  4017fc:	4798      	blx	r3
  4017fe:	f010 7f80 	tst.w	r0, #16777216	; 0x1000000
  401802:	d018      	beq.n	401836 <ADC_Handler+0x42>
	{
		result = adc_get_latest_value(ADC);
  401804:	480d      	ldr	r0, [pc, #52]	; (40183c <ADC_Handler+0x48>)
  401806:	4b0f      	ldr	r3, [pc, #60]	; (401844 <ADC_Handler+0x50>)
  401808:	4798      	blx	r3
		
		char buffer[10];
		sprintf (buffer, "%d", result);
  40180a:	b282      	uxth	r2, r0
  40180c:	490e      	ldr	r1, [pc, #56]	; (401848 <ADC_Handler+0x54>)
  40180e:	a801      	add	r0, sp, #4
  401810:	4b0e      	ldr	r3, [pc, #56]	; (40184c <ADC_Handler+0x58>)
  401812:	4798      	blx	r3
		
		ili93xx_set_foreground_color(COLOR_WHITE);
  401814:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
  401818:	4c0d      	ldr	r4, [pc, #52]	; (401850 <ADC_Handler+0x5c>)
  40181a:	47a0      	blx	r4
		ili93xx_draw_filled_rectangle(135, 175, 240, 200);
  40181c:	23c8      	movs	r3, #200	; 0xc8
  40181e:	22f0      	movs	r2, #240	; 0xf0
  401820:	21af      	movs	r1, #175	; 0xaf
  401822:	2087      	movs	r0, #135	; 0x87
  401824:	4d0b      	ldr	r5, [pc, #44]	; (401854 <ADC_Handler+0x60>)
  401826:	47a8      	blx	r5
		
		ili93xx_set_foreground_color(COLOR_BLACK);
  401828:	2000      	movs	r0, #0
  40182a:	47a0      	blx	r4
		ili93xx_draw_string(140, 180, (uint8_t*) buffer);
  40182c:	aa01      	add	r2, sp, #4
  40182e:	21b4      	movs	r1, #180	; 0xb4
  401830:	208c      	movs	r0, #140	; 0x8c
  401832:	4b09      	ldr	r3, [pc, #36]	; (401858 <ADC_Handler+0x64>)
  401834:	4798      	blx	r3
	}
}
  401836:	b005      	add	sp, #20
  401838:	bd30      	pop	{r4, r5, pc}
  40183a:	bf00      	nop
  40183c:	40038000 	.word	0x40038000
  401840:	00400a2d 	.word	0x00400a2d
  401844:	00400a25 	.word	0x00400a25
  401848:	00406df0 	.word	0x00406df0
  40184c:	00401bf5 	.word	0x00401bf5
  401850:	004003fd 	.word	0x004003fd
  401854:	00400841 	.word	0x00400841
  401858:	00400905 	.word	0x00400905

0040185c <TC0_Handler>:

void TC_Handler(void)
{
  40185c:	b508      	push	{r3, lr}
	tc_get_status(TC,CHANNEL);
  40185e:	2100      	movs	r1, #0
  401860:	4803      	ldr	r0, [pc, #12]	; (401870 <TC0_Handler+0x14>)
  401862:	4b04      	ldr	r3, [pc, #16]	; (401874 <TC0_Handler+0x18>)
  401864:	4798      	blx	r3
	adc_start(ADC);
  401866:	4804      	ldr	r0, [pc, #16]	; (401878 <TC0_Handler+0x1c>)
  401868:	4b04      	ldr	r3, [pc, #16]	; (40187c <TC0_Handler+0x20>)
  40186a:	4798      	blx	r3
  40186c:	bd08      	pop	{r3, pc}
  40186e:	bf00      	nop
  401870:	40010000 	.word	0x40010000
  401874:	00400a61 	.word	0x00400a61
  401878:	40038000 	.word	0x40038000
  40187c:	00400a11 	.word	0x00400a11

00401880 <configure_lcd>:

/************************************************************************/
/* CONFIGs                                                              */
/************************************************************************/
void configure_lcd()
{
  401880:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	/** Enable peripheral clock */
	pmc_enable_periph_clk(ID_SMC);
  401884:	200a      	movs	r0, #10
  401886:	4b1e      	ldr	r3, [pc, #120]	; (401900 <configure_lcd+0x80>)
  401888:	4798      	blx	r3

	/** Configure SMC interface for Lcd */
	smc_set_setup_timing(SMC, ILI93XX_LCD_CS, SMC_SETUP_NWE_SETUP(2)
  40188a:	4c1e      	ldr	r4, [pc, #120]	; (401904 <configure_lcd+0x84>)
  40188c:	f04f 3202 	mov.w	r2, #33686018	; 0x2020202
  401890:	2101      	movs	r1, #1
  401892:	4620      	mov	r0, r4
  401894:	4b1c      	ldr	r3, [pc, #112]	; (401908 <configure_lcd+0x88>)
  401896:	4798      	blx	r3
	| SMC_SETUP_NCS_WR_SETUP(2)
	| SMC_SETUP_NRD_SETUP(2)
	| SMC_SETUP_NCS_RD_SETUP(2));
	
	smc_set_pulse_timing(SMC, ILI93XX_LCD_CS, SMC_PULSE_NWE_PULSE(4)
  401898:	4a1c      	ldr	r2, [pc, #112]	; (40190c <configure_lcd+0x8c>)
  40189a:	2101      	movs	r1, #1
  40189c:	4620      	mov	r0, r4
  40189e:	4b1c      	ldr	r3, [pc, #112]	; (401910 <configure_lcd+0x90>)
  4018a0:	4798      	blx	r3
	| SMC_PULSE_NCS_WR_PULSE(4)
	| SMC_PULSE_NRD_PULSE(10)
	| SMC_PULSE_NCS_RD_PULSE(10));
	
	smc_set_cycle_timing(SMC, ILI93XX_LCD_CS, SMC_CYCLE_NWE_CYCLE(10)
  4018a2:	4a1c      	ldr	r2, [pc, #112]	; (401914 <configure_lcd+0x94>)
  4018a4:	2101      	movs	r1, #1
  4018a6:	4620      	mov	r0, r4
  4018a8:	4b1b      	ldr	r3, [pc, #108]	; (401918 <configure_lcd+0x98>)
  4018aa:	4798      	blx	r3
	| SMC_CYCLE_NRD_CYCLE(22));
	
	smc_set_mode(SMC, ILI93XX_LCD_CS, SMC_MODE_READ_MODE
  4018ac:	2203      	movs	r2, #3
  4018ae:	2101      	movs	r1, #1
  4018b0:	4620      	mov	r0, r4
  4018b2:	4b1a      	ldr	r3, [pc, #104]	; (40191c <configure_lcd+0x9c>)
  4018b4:	4798      	blx	r3
	| SMC_MODE_WRITE_MODE);

	/** Initialize display parameter */
	g_ili93xx_display_opt.ul_width = ILI93XX_LCD_WIDTH;
  4018b6:	4d1a      	ldr	r5, [pc, #104]	; (401920 <configure_lcd+0xa0>)
  4018b8:	26f0      	movs	r6, #240	; 0xf0
  4018ba:	602e      	str	r6, [r5, #0]
	g_ili93xx_display_opt.ul_height = ILI93XX_LCD_HEIGHT;
  4018bc:	f44f 77a0 	mov.w	r7, #320	; 0x140
  4018c0:	606f      	str	r7, [r5, #4]
	g_ili93xx_display_opt.foreground_color = COLOR_BLACK;
  4018c2:	2400      	movs	r4, #0
  4018c4:	60ac      	str	r4, [r5, #8]
	g_ili93xx_display_opt.background_color = COLOR_WHITE;
  4018c6:	f06f 487f 	mvn.w	r8, #4278190080	; 0xff000000
  4018ca:	f8c5 800c 	str.w	r8, [r5, #12]

	/** Switch off backlight */
	aat31xx_disable_backlight();
  4018ce:	4b15      	ldr	r3, [pc, #84]	; (401924 <configure_lcd+0xa4>)
  4018d0:	4798      	blx	r3

	/** Initialize LCD */
	ili93xx_init(&g_ili93xx_display_opt);
  4018d2:	4628      	mov	r0, r5
  4018d4:	4b14      	ldr	r3, [pc, #80]	; (401928 <configure_lcd+0xa8>)
  4018d6:	4798      	blx	r3

	/** Set backlight level */
	aat31xx_set_backlight(AAT31XX_AVG_BACKLIGHT_LEVEL);
  4018d8:	2008      	movs	r0, #8
  4018da:	4b14      	ldr	r3, [pc, #80]	; (40192c <configure_lcd+0xac>)
  4018dc:	4798      	blx	r3

	ili93xx_set_foreground_color(COLOR_WHITE);
  4018de:	4640      	mov	r0, r8
  4018e0:	4b13      	ldr	r3, [pc, #76]	; (401930 <configure_lcd+0xb0>)
  4018e2:	4798      	blx	r3
	ili93xx_draw_filled_rectangle(0, 0, ILI93XX_LCD_WIDTH,
  4018e4:	463b      	mov	r3, r7
  4018e6:	4632      	mov	r2, r6
  4018e8:	4621      	mov	r1, r4
  4018ea:	4620      	mov	r0, r4
  4018ec:	4d11      	ldr	r5, [pc, #68]	; (401934 <configure_lcd+0xb4>)
  4018ee:	47a8      	blx	r5
	ILI93XX_LCD_HEIGHT);
	/** Turn on LCD */
	ili93xx_display_on();
  4018f0:	4b11      	ldr	r3, [pc, #68]	; (401938 <configure_lcd+0xb8>)
  4018f2:	4798      	blx	r3
	ili93xx_set_cursor_position(0, 0);
  4018f4:	4621      	mov	r1, r4
  4018f6:	4620      	mov	r0, r4
  4018f8:	4b10      	ldr	r3, [pc, #64]	; (40193c <configure_lcd+0xbc>)
  4018fa:	4798      	blx	r3
  4018fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  401900:	004011ed 	.word	0x004011ed
  401904:	400e0000 	.word	0x400e0000
  401908:	004001a9 	.word	0x004001a9
  40190c:	0a0a0404 	.word	0x0a0a0404
  401910:	004001b1 	.word	0x004001b1
  401914:	0016000a 	.word	0x0016000a
  401918:	004001b9 	.word	0x004001b9
  40191c:	004001c1 	.word	0x004001c1
  401920:	20000d28 	.word	0x20000d28
  401924:	00400185 	.word	0x00400185
  401928:	004004e1 	.word	0x004004e1
  40192c:	00400129 	.word	0x00400129
  401930:	004003fd 	.word	0x004003fd
  401934:	00400841 	.word	0x00400841
  401938:	004003c9 	.word	0x004003c9
  40193c:	004004bd 	.word	0x004004bd

00401940 <configure_botao>:
}

void configure_botao(void)
{
  401940:	b530      	push	{r4, r5, lr}
  401942:	b083      	sub	sp, #12
	pmc_enable_periph_clk(ID_PIOB);
  401944:	200c      	movs	r0, #12
  401946:	4b11      	ldr	r3, [pc, #68]	; (40198c <configure_botao+0x4c>)
  401948:	4798      	blx	r3
	
	pio_set_input(PIN_PUSHBUTTON_1_PIO, PIN_PUSHBUTTON_1_MASK, PIN_PUSHBUTTON_1_ATTR);
  40194a:	4c11      	ldr	r4, [pc, #68]	; (401990 <configure_botao+0x50>)
  40194c:	2279      	movs	r2, #121	; 0x79
  40194e:	2108      	movs	r1, #8
  401950:	4620      	mov	r0, r4
  401952:	4b10      	ldr	r3, [pc, #64]	; (401994 <configure_botao+0x54>)
  401954:	4798      	blx	r3
	pio_set_debounce_filter(PIN_PUSHBUTTON_1_PIO, PIN_PUSHBUTTON_1_MASK, 10);
  401956:	220a      	movs	r2, #10
  401958:	2108      	movs	r1, #8
  40195a:	4620      	mov	r0, r4
  40195c:	4b0e      	ldr	r3, [pc, #56]	; (401998 <configure_botao+0x58>)
  40195e:	4798      	blx	r3
	pio_handler_set(PIN_PUSHBUTTON_1_PIO, PIN_PUSHBUTTON_1_ID,PIN_PUSHBUTTON_1_MASK, PIN_PUSHBUTTON_1_ATTR ,push_button_handle);
  401960:	4b0e      	ldr	r3, [pc, #56]	; (40199c <configure_botao+0x5c>)
  401962:	9300      	str	r3, [sp, #0]
  401964:	2379      	movs	r3, #121	; 0x79
  401966:	2208      	movs	r2, #8
  401968:	210c      	movs	r1, #12
  40196a:	4620      	mov	r0, r4
  40196c:	4d0c      	ldr	r5, [pc, #48]	; (4019a0 <configure_botao+0x60>)
  40196e:	47a8      	blx	r5
	pio_enable_interrupt(PIN_PUSHBUTTON_1_PIO, PIN_PUSHBUTTON_1_MASK);
  401970:	2108      	movs	r1, #8
  401972:	4620      	mov	r0, r4
  401974:	4b0b      	ldr	r3, [pc, #44]	; (4019a4 <configure_botao+0x64>)
  401976:	4798      	blx	r3
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
  401978:	4b0b      	ldr	r3, [pc, #44]	; (4019a8 <configure_botao+0x68>)
  40197a:	2250      	movs	r2, #80	; 0x50
  40197c:	f883 230c 	strb.w	r2, [r3, #780]	; 0x30c
    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  401980:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  401984:	601a      	str	r2, [r3, #0]
	NVIC_SetPriority( PIN_PUSHBUTTON_1_ID, 5);
	NVIC_EnableIRQ( PIN_PUSHBUTTON_1_ID);
}
  401986:	b003      	add	sp, #12
  401988:	bd30      	pop	{r4, r5, pc}
  40198a:	bf00      	nop
  40198c:	004011ed 	.word	0x004011ed
  401990:	400e1000 	.word	0x400e1000
  401994:	00400d31 	.word	0x00400d31
  401998:	00400c85 	.word	0x00400c85
  40199c:	004017e1 	.word	0x004017e1
  4019a0:	0040104d 	.word	0x0040104d
  4019a4:	00400dbd 	.word	0x00400dbd
  4019a8:	e000e100 	.word	0xe000e100

004019ac <configure_adc>:


void configure_adc(void)
{
  4019ac:	b538      	push	{r3, r4, r5, lr}
	/* Enable peripheral clock. */
	pmc_enable_periph_clk(ID_ADC);
  4019ae:	201d      	movs	r0, #29
  4019b0:	4b13      	ldr	r3, [pc, #76]	; (401a00 <configure_adc+0x54>)
  4019b2:	4798      	blx	r3
	
	adc_init(ADC, sysclk_get_cpu_hz(), 6400000, STARTUP_TIME);
  4019b4:	4c13      	ldr	r4, [pc, #76]	; (401a04 <configure_adc+0x58>)
  4019b6:	f44f 2380 	mov.w	r3, #262144	; 0x40000
  4019ba:	4a13      	ldr	r2, [pc, #76]	; (401a08 <configure_adc+0x5c>)
  4019bc:	4913      	ldr	r1, [pc, #76]	; (401a0c <configure_adc+0x60>)
  4019be:	4620      	mov	r0, r4
  4019c0:	4d13      	ldr	r5, [pc, #76]	; (401a10 <configure_adc+0x64>)
  4019c2:	47a8      	blx	r5
	adc_configure_timing(ADC, TRACKING_TIME	, ADC_SETTLING_TIME_3, TRANSFER_PERIOD);
  4019c4:	2302      	movs	r3, #2
  4019c6:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
  4019ca:	210f      	movs	r1, #15
  4019cc:	4620      	mov	r0, r4
  4019ce:	4d11      	ldr	r5, [pc, #68]	; (401a14 <configure_adc+0x68>)
  4019d0:	47a8      	blx	r5
	adc_configure_trigger(ADC, ADC_TRIG_SW, 0);
  4019d2:	2200      	movs	r2, #0
  4019d4:	4611      	mov	r1, r2
  4019d6:	4620      	mov	r0, r4
  4019d8:	4b0f      	ldr	r3, [pc, #60]	; (401a18 <configure_adc+0x6c>)
  4019da:	4798      	blx	r3
	adc_enable_channel(ADC, ADC_CHANNEL);
  4019dc:	2105      	movs	r1, #5
  4019de:	4620      	mov	r0, r4
  4019e0:	4b0e      	ldr	r3, [pc, #56]	; (401a1c <configure_adc+0x70>)
  4019e2:	4798      	blx	r3
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
  4019e4:	4b0e      	ldr	r3, [pc, #56]	; (401a20 <configure_adc+0x74>)
  4019e6:	2250      	movs	r2, #80	; 0x50
  4019e8:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  4019ec:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  4019f0:	601a      	str	r2, [r3, #0]
	NVIC_SetPriority(ADC_IRQn, 5);
	NVIC_EnableIRQ(ADC_IRQn);
	adc_enable_interrupt(ADC, ADC_IER_DRDY);
  4019f2:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
  4019f6:	4620      	mov	r0, r4
  4019f8:	4b0a      	ldr	r3, [pc, #40]	; (401a24 <configure_adc+0x78>)
  4019fa:	4798      	blx	r3
  4019fc:	bd38      	pop	{r3, r4, r5, pc}
  4019fe:	bf00      	nop
  401a00:	004011ed 	.word	0x004011ed
  401a04:	40038000 	.word	0x40038000
  401a08:	0061a800 	.word	0x0061a800
  401a0c:	07270e00 	.word	0x07270e00
  401a10:	004009b1 	.word	0x004009b1
  401a14:	004009f5 	.word	0x004009f5
  401a18:	004009e5 	.word	0x004009e5
  401a1c:	00400a19 	.word	0x00400a19
  401a20:	e000e100 	.word	0xe000e100
  401a24:	00400a29 	.word	0x00400a29

00401a28 <main>:

/************************************************************************/
/* MAIN                                                                 */
/************************************************************************/
int main(void)
{
  401a28:	b500      	push	{lr}
  401a2a:	b085      	sub	sp, #20
	sysclk_init();
  401a2c:	4b23      	ldr	r3, [pc, #140]	; (401abc <main+0x94>)
  401a2e:	4798      	blx	r3
	board_init();
  401a30:	4b23      	ldr	r3, [pc, #140]	; (401ac0 <main+0x98>)
  401a32:	4798      	blx	r3

	configure_lcd();
  401a34:	4b23      	ldr	r3, [pc, #140]	; (401ac4 <main+0x9c>)
  401a36:	4798      	blx	r3
	configure_adc();
  401a38:	4b23      	ldr	r3, [pc, #140]	; (401ac8 <main+0xa0>)
  401a3a:	4798      	blx	r3
	configure_botao();
  401a3c:	4b23      	ldr	r3, [pc, #140]	; (401acc <main+0xa4>)
  401a3e:	4798      	blx	r3
	uint32_t ul_div;
	uint32_t ul_tcclks;
	uint32_t counts;
	uint32_t ul_sysclk = sysclk_get_cpu_hz();
	
	pmc_enable_periph_clk(ID_TC);
  401a40:	2017      	movs	r0, #23
  401a42:	4b23      	ldr	r3, [pc, #140]	; (401ad0 <main+0xa8>)
  401a44:	4798      	blx	r3
	
	tc_find_mck_divisor( freq_desejada, ul_sysclk, &ul_div, &ul_tcclks,	BOARD_MCK);
  401a46:	4c23      	ldr	r4, [pc, #140]	; (401ad4 <main+0xac>)
  401a48:	9400      	str	r4, [sp, #0]
  401a4a:	ab03      	add	r3, sp, #12
  401a4c:	aa02      	add	r2, sp, #8
  401a4e:	4621      	mov	r1, r4
  401a50:	200a      	movs	r0, #10
  401a52:	4d21      	ldr	r5, [pc, #132]	; (401ad8 <main+0xb0>)
  401a54:	47a8      	blx	r5
	tc_init(TC, CHANNEL, ul_tcclks | TC_CMR_CPCTRG);
  401a56:	4d21      	ldr	r5, [pc, #132]	; (401adc <main+0xb4>)
  401a58:	9a03      	ldr	r2, [sp, #12]
  401a5a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
  401a5e:	2100      	movs	r1, #0
  401a60:	4628      	mov	r0, r5
  401a62:	4b1f      	ldr	r3, [pc, #124]	; (401ae0 <main+0xb8>)
  401a64:	4798      	blx	r3
	counts = (ul_sysclk/ul_div)/freq_desejada;
	tc_write_rc(TC, CHANNEL, counts);
  401a66:	9a02      	ldr	r2, [sp, #8]
  401a68:	fbb4 f4f2 	udiv	r4, r4, r2
  401a6c:	4a1d      	ldr	r2, [pc, #116]	; (401ae4 <main+0xbc>)
  401a6e:	fba2 3204 	umull	r3, r2, r2, r4
  401a72:	08d2      	lsrs	r2, r2, #3
  401a74:	2100      	movs	r1, #0
  401a76:	4628      	mov	r0, r5
  401a78:	4b1b      	ldr	r3, [pc, #108]	; (401ae8 <main+0xc0>)
  401a7a:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  401a7c:	4b1b      	ldr	r3, [pc, #108]	; (401aec <main+0xc4>)
  401a7e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
  401a82:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
  401a86:	2140      	movs	r1, #64	; 0x40
  401a88:	f883 1317 	strb.w	r1, [r3, #791]	; 0x317
    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  401a8c:	601a      	str	r2, [r3, #0]
	NVIC_ClearPendingIRQ(TC_IRQn);
	NVIC_SetPriority(TC_IRQn, 4);
	NVIC_EnableIRQ(TC_IRQn);
	tc_enable_interrupt(TC,	CHANNEL, TC_IER_CPCS);
  401a8e:	2210      	movs	r2, #16
  401a90:	2100      	movs	r1, #0
  401a92:	4628      	mov	r0, r5
  401a94:	4b16      	ldr	r3, [pc, #88]	; (401af0 <main+0xc8>)
  401a96:	4798      	blx	r3
	tc_start(TC, CHANNEL);
  401a98:	2100      	movs	r1, #0
  401a9a:	4628      	mov	r0, r5
  401a9c:	4b15      	ldr	r3, [pc, #84]	; (401af4 <main+0xcc>)
  401a9e:	4798      	blx	r3
	configure_adc();
	configure_botao();
	tc_config(10);

	/** Draw text on the LCD */
	ili93xx_set_foreground_color(COLOR_BLACK);
  401aa0:	2000      	movs	r0, #0
  401aa2:	4b15      	ldr	r3, [pc, #84]	; (401af8 <main+0xd0>)
  401aa4:	4798      	blx	r3
	ili93xx_draw_string(10, 20, (uint8_t *)"Aula - ADC");
  401aa6:	4a15      	ldr	r2, [pc, #84]	; (401afc <main+0xd4>)
  401aa8:	2114      	movs	r1, #20
  401aaa:	200a      	movs	r0, #10
  401aac:	4b14      	ldr	r3, [pc, #80]	; (401b00 <main+0xd8>)
  401aae:	4798      	blx	r3

	while (1)
	{
		pmc_sleep(SAM_PM_SMODE_SLEEP_WFI);
  401ab0:	2502      	movs	r5, #2
  401ab2:	4c14      	ldr	r4, [pc, #80]	; (401b04 <main+0xdc>)
  401ab4:	4628      	mov	r0, r5
  401ab6:	47a0      	blx	r4
  401ab8:	e7fc      	b.n	401ab4 <main+0x8c>
  401aba:	bf00      	nop
  401abc:	00400add 	.word	0x00400add
  401ac0:	00400b41 	.word	0x00400b41
  401ac4:	00401881 	.word	0x00401881
  401ac8:	004019ad 	.word	0x004019ad
  401acc:	00401941 	.word	0x00401941
  401ad0:	004011ed 	.word	0x004011ed
  401ad4:	07270e00 	.word	0x07270e00
  401ad8:	00400a69 	.word	0x00400a69
  401adc:	40010000 	.word	0x40010000
  401ae0:	00400a31 	.word	0x00400a31
  401ae4:	cccccccd 	.word	0xcccccccd
  401ae8:	00400a51 	.word	0x00400a51
  401aec:	e000e100 	.word	0xe000e100
  401af0:	00400a59 	.word	0x00400a59
  401af4:	00400a49 	.word	0x00400a49
  401af8:	004003fd 	.word	0x004003fd
  401afc:	00406df4 	.word	0x00406df4
  401b00:	00400905 	.word	0x00400905
  401b04:	0040129d 	.word	0x0040129d

00401b08 <__libc_init_array>:
  401b08:	b570      	push	{r4, r5, r6, lr}
  401b0a:	4e0f      	ldr	r6, [pc, #60]	; (401b48 <__libc_init_array+0x40>)
  401b0c:	4d0f      	ldr	r5, [pc, #60]	; (401b4c <__libc_init_array+0x44>)
  401b0e:	1b76      	subs	r6, r6, r5
  401b10:	10b6      	asrs	r6, r6, #2
  401b12:	bf18      	it	ne
  401b14:	2400      	movne	r4, #0
  401b16:	d005      	beq.n	401b24 <__libc_init_array+0x1c>
  401b18:	3401      	adds	r4, #1
  401b1a:	f855 3b04 	ldr.w	r3, [r5], #4
  401b1e:	4798      	blx	r3
  401b20:	42a6      	cmp	r6, r4
  401b22:	d1f9      	bne.n	401b18 <__libc_init_array+0x10>
  401b24:	4e0a      	ldr	r6, [pc, #40]	; (401b50 <__libc_init_array+0x48>)
  401b26:	4d0b      	ldr	r5, [pc, #44]	; (401b54 <__libc_init_array+0x4c>)
  401b28:	1b76      	subs	r6, r6, r5
  401b2a:	f005 fa2b 	bl	406f84 <_init>
  401b2e:	10b6      	asrs	r6, r6, #2
  401b30:	bf18      	it	ne
  401b32:	2400      	movne	r4, #0
  401b34:	d006      	beq.n	401b44 <__libc_init_array+0x3c>
  401b36:	3401      	adds	r4, #1
  401b38:	f855 3b04 	ldr.w	r3, [r5], #4
  401b3c:	4798      	blx	r3
  401b3e:	42a6      	cmp	r6, r4
  401b40:	d1f9      	bne.n	401b36 <__libc_init_array+0x2e>
  401b42:	bd70      	pop	{r4, r5, r6, pc}
  401b44:	bd70      	pop	{r4, r5, r6, pc}
  401b46:	bf00      	nop
  401b48:	00406f90 	.word	0x00406f90
  401b4c:	00406f90 	.word	0x00406f90
  401b50:	00406f98 	.word	0x00406f98
  401b54:	00406f90 	.word	0x00406f90

00401b58 <memset>:
  401b58:	b470      	push	{r4, r5, r6}
  401b5a:	0784      	lsls	r4, r0, #30
  401b5c:	d046      	beq.n	401bec <memset+0x94>
  401b5e:	1e54      	subs	r4, r2, #1
  401b60:	2a00      	cmp	r2, #0
  401b62:	d041      	beq.n	401be8 <memset+0x90>
  401b64:	b2cd      	uxtb	r5, r1
  401b66:	4603      	mov	r3, r0
  401b68:	e002      	b.n	401b70 <memset+0x18>
  401b6a:	1e62      	subs	r2, r4, #1
  401b6c:	b3e4      	cbz	r4, 401be8 <memset+0x90>
  401b6e:	4614      	mov	r4, r2
  401b70:	f803 5b01 	strb.w	r5, [r3], #1
  401b74:	079a      	lsls	r2, r3, #30
  401b76:	d1f8      	bne.n	401b6a <memset+0x12>
  401b78:	2c03      	cmp	r4, #3
  401b7a:	d92e      	bls.n	401bda <memset+0x82>
  401b7c:	b2cd      	uxtb	r5, r1
  401b7e:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  401b82:	2c0f      	cmp	r4, #15
  401b84:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  401b88:	d919      	bls.n	401bbe <memset+0x66>
  401b8a:	f103 0210 	add.w	r2, r3, #16
  401b8e:	4626      	mov	r6, r4
  401b90:	3e10      	subs	r6, #16
  401b92:	2e0f      	cmp	r6, #15
  401b94:	f842 5c10 	str.w	r5, [r2, #-16]
  401b98:	f842 5c0c 	str.w	r5, [r2, #-12]
  401b9c:	f842 5c08 	str.w	r5, [r2, #-8]
  401ba0:	f842 5c04 	str.w	r5, [r2, #-4]
  401ba4:	f102 0210 	add.w	r2, r2, #16
  401ba8:	d8f2      	bhi.n	401b90 <memset+0x38>
  401baa:	f1a4 0210 	sub.w	r2, r4, #16
  401bae:	f022 020f 	bic.w	r2, r2, #15
  401bb2:	f004 040f 	and.w	r4, r4, #15
  401bb6:	3210      	adds	r2, #16
  401bb8:	2c03      	cmp	r4, #3
  401bba:	4413      	add	r3, r2
  401bbc:	d90d      	bls.n	401bda <memset+0x82>
  401bbe:	461e      	mov	r6, r3
  401bc0:	4622      	mov	r2, r4
  401bc2:	3a04      	subs	r2, #4
  401bc4:	2a03      	cmp	r2, #3
  401bc6:	f846 5b04 	str.w	r5, [r6], #4
  401bca:	d8fa      	bhi.n	401bc2 <memset+0x6a>
  401bcc:	1f22      	subs	r2, r4, #4
  401bce:	f022 0203 	bic.w	r2, r2, #3
  401bd2:	3204      	adds	r2, #4
  401bd4:	4413      	add	r3, r2
  401bd6:	f004 0403 	and.w	r4, r4, #3
  401bda:	b12c      	cbz	r4, 401be8 <memset+0x90>
  401bdc:	b2c9      	uxtb	r1, r1
  401bde:	441c      	add	r4, r3
  401be0:	f803 1b01 	strb.w	r1, [r3], #1
  401be4:	42a3      	cmp	r3, r4
  401be6:	d1fb      	bne.n	401be0 <memset+0x88>
  401be8:	bc70      	pop	{r4, r5, r6}
  401bea:	4770      	bx	lr
  401bec:	4614      	mov	r4, r2
  401bee:	4603      	mov	r3, r0
  401bf0:	e7c2      	b.n	401b78 <memset+0x20>
  401bf2:	bf00      	nop

00401bf4 <sprintf>:
  401bf4:	b40e      	push	{r1, r2, r3}
  401bf6:	b5f0      	push	{r4, r5, r6, r7, lr}
  401bf8:	b09c      	sub	sp, #112	; 0x70
  401bfa:	ab21      	add	r3, sp, #132	; 0x84
  401bfc:	490f      	ldr	r1, [pc, #60]	; (401c3c <sprintf+0x48>)
  401bfe:	f853 2b04 	ldr.w	r2, [r3], #4
  401c02:	9301      	str	r3, [sp, #4]
  401c04:	4605      	mov	r5, r0
  401c06:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
  401c0a:	6808      	ldr	r0, [r1, #0]
  401c0c:	9502      	str	r5, [sp, #8]
  401c0e:	f44f 7702 	mov.w	r7, #520	; 0x208
  401c12:	f64f 76ff 	movw	r6, #65535	; 0xffff
  401c16:	a902      	add	r1, sp, #8
  401c18:	9506      	str	r5, [sp, #24]
  401c1a:	f8ad 7014 	strh.w	r7, [sp, #20]
  401c1e:	9404      	str	r4, [sp, #16]
  401c20:	9407      	str	r4, [sp, #28]
  401c22:	f8ad 6016 	strh.w	r6, [sp, #22]
  401c26:	f000 f879 	bl	401d1c <_svfprintf_r>
  401c2a:	9b02      	ldr	r3, [sp, #8]
  401c2c:	2200      	movs	r2, #0
  401c2e:	701a      	strb	r2, [r3, #0]
  401c30:	b01c      	add	sp, #112	; 0x70
  401c32:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  401c36:	b003      	add	sp, #12
  401c38:	4770      	bx	lr
  401c3a:	bf00      	nop
  401c3c:	20000440 	.word	0x20000440

00401c40 <strlen>:
  401c40:	f890 f000 	pld	[r0]
  401c44:	e96d 4502 	strd	r4, r5, [sp, #-8]!
  401c48:	f020 0107 	bic.w	r1, r0, #7
  401c4c:	f06f 0c00 	mvn.w	ip, #0
  401c50:	f010 0407 	ands.w	r4, r0, #7
  401c54:	f891 f020 	pld	[r1, #32]
  401c58:	f040 8049 	bne.w	401cee <strlen+0xae>
  401c5c:	f04f 0400 	mov.w	r4, #0
  401c60:	f06f 0007 	mvn.w	r0, #7
  401c64:	e9d1 2300 	ldrd	r2, r3, [r1]
  401c68:	f891 f040 	pld	[r1, #64]	; 0x40
  401c6c:	f100 0008 	add.w	r0, r0, #8
  401c70:	fa82 f24c 	uadd8	r2, r2, ip
  401c74:	faa4 f28c 	sel	r2, r4, ip
  401c78:	fa83 f34c 	uadd8	r3, r3, ip
  401c7c:	faa2 f38c 	sel	r3, r2, ip
  401c80:	bb4b      	cbnz	r3, 401cd6 <strlen+0x96>
  401c82:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
  401c86:	fa82 f24c 	uadd8	r2, r2, ip
  401c8a:	f100 0008 	add.w	r0, r0, #8
  401c8e:	faa4 f28c 	sel	r2, r4, ip
  401c92:	fa83 f34c 	uadd8	r3, r3, ip
  401c96:	faa2 f38c 	sel	r3, r2, ip
  401c9a:	b9e3      	cbnz	r3, 401cd6 <strlen+0x96>
  401c9c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
  401ca0:	fa82 f24c 	uadd8	r2, r2, ip
  401ca4:	f100 0008 	add.w	r0, r0, #8
  401ca8:	faa4 f28c 	sel	r2, r4, ip
  401cac:	fa83 f34c 	uadd8	r3, r3, ip
  401cb0:	faa2 f38c 	sel	r3, r2, ip
  401cb4:	b97b      	cbnz	r3, 401cd6 <strlen+0x96>
  401cb6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
  401cba:	f101 0120 	add.w	r1, r1, #32
  401cbe:	fa82 f24c 	uadd8	r2, r2, ip
  401cc2:	f100 0008 	add.w	r0, r0, #8
  401cc6:	faa4 f28c 	sel	r2, r4, ip
  401cca:	fa83 f34c 	uadd8	r3, r3, ip
  401cce:	faa2 f38c 	sel	r3, r2, ip
  401cd2:	2b00      	cmp	r3, #0
  401cd4:	d0c6      	beq.n	401c64 <strlen+0x24>
  401cd6:	2a00      	cmp	r2, #0
  401cd8:	bf04      	itt	eq
  401cda:	3004      	addeq	r0, #4
  401cdc:	461a      	moveq	r2, r3
  401cde:	ba12      	rev	r2, r2
  401ce0:	fab2 f282 	clz	r2, r2
  401ce4:	e8fd 4502 	ldrd	r4, r5, [sp], #8
  401ce8:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  401cec:	4770      	bx	lr
  401cee:	e9d1 2300 	ldrd	r2, r3, [r1]
  401cf2:	f004 0503 	and.w	r5, r4, #3
  401cf6:	f1c4 0000 	rsb	r0, r4, #0
  401cfa:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  401cfe:	f014 0f04 	tst.w	r4, #4
  401d02:	f891 f040 	pld	[r1, #64]	; 0x40
  401d06:	fa0c f505 	lsl.w	r5, ip, r5
  401d0a:	ea62 0205 	orn	r2, r2, r5
  401d0e:	bf1c      	itt	ne
  401d10:	ea63 0305 	ornne	r3, r3, r5
  401d14:	4662      	movne	r2, ip
  401d16:	f04f 0400 	mov.w	r4, #0
  401d1a:	e7a9      	b.n	401c70 <strlen+0x30>

00401d1c <_svfprintf_r>:
  401d1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401d20:	b0c1      	sub	sp, #260	; 0x104
  401d22:	460c      	mov	r4, r1
  401d24:	9109      	str	r1, [sp, #36]	; 0x24
  401d26:	4615      	mov	r5, r2
  401d28:	930e      	str	r3, [sp, #56]	; 0x38
  401d2a:	900a      	str	r0, [sp, #40]	; 0x28
  401d2c:	f002 fc5e 	bl	4045ec <_localeconv_r>
  401d30:	6803      	ldr	r3, [r0, #0]
  401d32:	9317      	str	r3, [sp, #92]	; 0x5c
  401d34:	4618      	mov	r0, r3
  401d36:	f7ff ff83 	bl	401c40 <strlen>
  401d3a:	89a3      	ldrh	r3, [r4, #12]
  401d3c:	9016      	str	r0, [sp, #88]	; 0x58
  401d3e:	061e      	lsls	r6, r3, #24
  401d40:	d503      	bpl.n	401d4a <_svfprintf_r+0x2e>
  401d42:	6923      	ldr	r3, [r4, #16]
  401d44:	2b00      	cmp	r3, #0
  401d46:	f001 8119 	beq.w	402f7c <_svfprintf_r+0x1260>
  401d4a:	2300      	movs	r3, #0
  401d4c:	461a      	mov	r2, r3
  401d4e:	9312      	str	r3, [sp, #72]	; 0x48
  401d50:	9325      	str	r3, [sp, #148]	; 0x94
  401d52:	9324      	str	r3, [sp, #144]	; 0x90
  401d54:	9319      	str	r3, [sp, #100]	; 0x64
  401d56:	930b      	str	r3, [sp, #44]	; 0x2c
  401d58:	f8df a464 	ldr.w	sl, [pc, #1124]	; 4021c0 <_svfprintf_r+0x4a4>
  401d5c:	9214      	str	r2, [sp, #80]	; 0x50
  401d5e:	ab30      	add	r3, sp, #192	; 0xc0
  401d60:	9323      	str	r3, [sp, #140]	; 0x8c
  401d62:	4699      	mov	r9, r3
  401d64:	9215      	str	r2, [sp, #84]	; 0x54
  401d66:	46a8      	mov	r8, r5
  401d68:	f898 3000 	ldrb.w	r3, [r8]
  401d6c:	4644      	mov	r4, r8
  401d6e:	b1eb      	cbz	r3, 401dac <_svfprintf_r+0x90>
  401d70:	2b25      	cmp	r3, #37	; 0x25
  401d72:	d102      	bne.n	401d7a <_svfprintf_r+0x5e>
  401d74:	e01a      	b.n	401dac <_svfprintf_r+0x90>
  401d76:	2b25      	cmp	r3, #37	; 0x25
  401d78:	d003      	beq.n	401d82 <_svfprintf_r+0x66>
  401d7a:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  401d7e:	2b00      	cmp	r3, #0
  401d80:	d1f9      	bne.n	401d76 <_svfprintf_r+0x5a>
  401d82:	ebc8 0504 	rsb	r5, r8, r4
  401d86:	b18d      	cbz	r5, 401dac <_svfprintf_r+0x90>
  401d88:	9b24      	ldr	r3, [sp, #144]	; 0x90
  401d8a:	9a25      	ldr	r2, [sp, #148]	; 0x94
  401d8c:	f8c9 8000 	str.w	r8, [r9]
  401d90:	3301      	adds	r3, #1
  401d92:	442a      	add	r2, r5
  401d94:	2b07      	cmp	r3, #7
  401d96:	f8c9 5004 	str.w	r5, [r9, #4]
  401d9a:	9225      	str	r2, [sp, #148]	; 0x94
  401d9c:	9324      	str	r3, [sp, #144]	; 0x90
  401d9e:	f300 80a6 	bgt.w	401eee <_svfprintf_r+0x1d2>
  401da2:	f109 0908 	add.w	r9, r9, #8
  401da6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  401da8:	442b      	add	r3, r5
  401daa:	930b      	str	r3, [sp, #44]	; 0x2c
  401dac:	7823      	ldrb	r3, [r4, #0]
  401dae:	2b00      	cmp	r3, #0
  401db0:	f000 80a6 	beq.w	401f00 <_svfprintf_r+0x1e4>
  401db4:	2300      	movs	r3, #0
  401db6:	461a      	mov	r2, r3
  401db8:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
  401dbc:	4619      	mov	r1, r3
  401dbe:	930c      	str	r3, [sp, #48]	; 0x30
  401dc0:	9307      	str	r3, [sp, #28]
  401dc2:	f04f 3bff 	mov.w	fp, #4294967295
  401dc6:	7863      	ldrb	r3, [r4, #1]
  401dc8:	f104 0801 	add.w	r8, r4, #1
  401dcc:	465d      	mov	r5, fp
  401dce:	f108 0801 	add.w	r8, r8, #1
  401dd2:	f1a3 0020 	sub.w	r0, r3, #32
  401dd6:	2858      	cmp	r0, #88	; 0x58
  401dd8:	f200 8425 	bhi.w	402626 <_svfprintf_r+0x90a>
  401ddc:	e8df f010 	tbh	[pc, r0, lsl #1]
  401de0:	04230388 	.word	0x04230388
  401de4:	03900423 	.word	0x03900423
  401de8:	04230423 	.word	0x04230423
  401dec:	04230423 	.word	0x04230423
  401df0:	04230423 	.word	0x04230423
  401df4:	03a50397 	.word	0x03a50397
  401df8:	005d0423 	.word	0x005d0423
  401dfc:	042300e2 	.word	0x042300e2
  401e00:	010500fe 	.word	0x010500fe
  401e04:	01050105 	.word	0x01050105
  401e08:	01050105 	.word	0x01050105
  401e0c:	01050105 	.word	0x01050105
  401e10:	01050105 	.word	0x01050105
  401e14:	04230423 	.word	0x04230423
  401e18:	04230423 	.word	0x04230423
  401e1c:	04230423 	.word	0x04230423
  401e20:	04230423 	.word	0x04230423
  401e24:	04230423 	.word	0x04230423
  401e28:	02810115 	.word	0x02810115
  401e2c:	02810423 	.word	0x02810423
  401e30:	04230423 	.word	0x04230423
  401e34:	04230423 	.word	0x04230423
  401e38:	042302c6 	.word	0x042302c6
  401e3c:	02cd0423 	.word	0x02cd0423
  401e40:	04230423 	.word	0x04230423
  401e44:	04230423 	.word	0x04230423
  401e48:	02f70423 	.word	0x02f70423
  401e4c:	04230423 	.word	0x04230423
  401e50:	04230325 	.word	0x04230325
  401e54:	04230423 	.word	0x04230423
  401e58:	04230423 	.word	0x04230423
  401e5c:	04230423 	.word	0x04230423
  401e60:	04230423 	.word	0x04230423
  401e64:	03660423 	.word	0x03660423
  401e68:	02810379 	.word	0x02810379
  401e6c:	02810281 	.word	0x02810281
  401e70:	03790381 	.word	0x03790381
  401e74:	04230423 	.word	0x04230423
  401e78:	042303d1 	.word	0x042303d1
  401e7c:	00a303db 	.word	0x00a303db
  401e80:	03ee0064 	.word	0x03ee0064
  401e84:	03f50423 	.word	0x03f50423
  401e88:	03aa0423 	.word	0x03aa0423
  401e8c:	04230423 	.word	0x04230423
  401e90:	03bc      	.short	0x03bc
  401e92:	980c      	ldr	r0, [sp, #48]	; 0x30
  401e94:	930e      	str	r3, [sp, #56]	; 0x38
  401e96:	4240      	negs	r0, r0
  401e98:	900c      	str	r0, [sp, #48]	; 0x30
  401e9a:	9b07      	ldr	r3, [sp, #28]
  401e9c:	f043 0304 	orr.w	r3, r3, #4
  401ea0:	9307      	str	r3, [sp, #28]
  401ea2:	f898 3000 	ldrb.w	r3, [r8]
  401ea6:	e792      	b.n	401dce <_svfprintf_r+0xb2>
  401ea8:	980e      	ldr	r0, [sp, #56]	; 0x38
  401eaa:	46ab      	mov	fp, r5
  401eac:	2100      	movs	r1, #0
  401eae:	6804      	ldr	r4, [r0, #0]
  401eb0:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  401eb4:	1d07      	adds	r7, r0, #4
  401eb6:	9807      	ldr	r0, [sp, #28]
  401eb8:	2330      	movs	r3, #48	; 0x30
  401eba:	2278      	movs	r2, #120	; 0x78
  401ebc:	458b      	cmp	fp, r1
  401ebe:	f88d 3070 	strb.w	r3, [sp, #112]	; 0x70
  401ec2:	f04f 0500 	mov.w	r5, #0
  401ec6:	f88d 2071 	strb.w	r2, [sp, #113]	; 0x71
  401eca:	f040 0302 	orr.w	r3, r0, #2
  401ece:	f2c0 83c7 	blt.w	402660 <_svfprintf_r+0x944>
  401ed2:	f020 0380 	bic.w	r3, r0, #128	; 0x80
  401ed6:	f043 0302 	orr.w	r3, r3, #2
  401eda:	9307      	str	r3, [sp, #28]
  401edc:	ea54 0305 	orrs.w	r3, r4, r5
  401ee0:	970e      	str	r7, [sp, #56]	; 0x38
  401ee2:	f000 8393 	beq.w	40260c <_svfprintf_r+0x8f0>
  401ee6:	460f      	mov	r7, r1
  401ee8:	9211      	str	r2, [sp, #68]	; 0x44
  401eea:	48b3      	ldr	r0, [pc, #716]	; (4021b8 <_svfprintf_r+0x49c>)
  401eec:	e2ce      	b.n	40248c <_svfprintf_r+0x770>
  401eee:	aa23      	add	r2, sp, #140	; 0x8c
  401ef0:	9909      	ldr	r1, [sp, #36]	; 0x24
  401ef2:	980a      	ldr	r0, [sp, #40]	; 0x28
  401ef4:	f003 fc9e 	bl	405834 <__ssprint_r>
  401ef8:	b948      	cbnz	r0, 401f0e <_svfprintf_r+0x1f2>
  401efa:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  401efe:	e752      	b.n	401da6 <_svfprintf_r+0x8a>
  401f00:	9b25      	ldr	r3, [sp, #148]	; 0x94
  401f02:	b123      	cbz	r3, 401f0e <_svfprintf_r+0x1f2>
  401f04:	980a      	ldr	r0, [sp, #40]	; 0x28
  401f06:	9909      	ldr	r1, [sp, #36]	; 0x24
  401f08:	aa23      	add	r2, sp, #140	; 0x8c
  401f0a:	f003 fc93 	bl	405834 <__ssprint_r>
  401f0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
  401f10:	899b      	ldrh	r3, [r3, #12]
  401f12:	f013 0f40 	tst.w	r3, #64	; 0x40
  401f16:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  401f18:	bf18      	it	ne
  401f1a:	f04f 33ff 	movne.w	r3, #4294967295
  401f1e:	4618      	mov	r0, r3
  401f20:	b041      	add	sp, #260	; 0x104
  401f22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401f26:	9311      	str	r3, [sp, #68]	; 0x44
  401f28:	46ab      	mov	fp, r5
  401f2a:	2a00      	cmp	r2, #0
  401f2c:	f041 8223 	bne.w	403376 <_svfprintf_r+0x165a>
  401f30:	9a07      	ldr	r2, [sp, #28]
  401f32:	f012 0320 	ands.w	r3, r2, #32
  401f36:	f000 822e 	beq.w	402396 <_svfprintf_r+0x67a>
  401f3a:	9f0e      	ldr	r7, [sp, #56]	; 0x38
  401f3c:	3707      	adds	r7, #7
  401f3e:	f027 0307 	bic.w	r3, r7, #7
  401f42:	2700      	movs	r7, #0
  401f44:	f103 0108 	add.w	r1, r3, #8
  401f48:	45bb      	cmp	fp, r7
  401f4a:	910e      	str	r1, [sp, #56]	; 0x38
  401f4c:	e9d3 4500 	ldrd	r4, r5, [r3]
  401f50:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
  401f54:	f2c0 8752 	blt.w	402dfc <_svfprintf_r+0x10e0>
  401f58:	f022 0380 	bic.w	r3, r2, #128	; 0x80
  401f5c:	9307      	str	r3, [sp, #28]
  401f5e:	ea54 0305 	orrs.w	r3, r4, r5
  401f62:	f000 8375 	beq.w	402650 <_svfprintf_r+0x934>
  401f66:	ae30      	add	r6, sp, #192	; 0xc0
  401f68:	08e2      	lsrs	r2, r4, #3
  401f6a:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
  401f6e:	08e9      	lsrs	r1, r5, #3
  401f70:	f004 0307 	and.w	r3, r4, #7
  401f74:	460d      	mov	r5, r1
  401f76:	4614      	mov	r4, r2
  401f78:	3330      	adds	r3, #48	; 0x30
  401f7a:	ea54 0205 	orrs.w	r2, r4, r5
  401f7e:	f806 3d01 	strb.w	r3, [r6, #-1]!
  401f82:	d1f1      	bne.n	401f68 <_svfprintf_r+0x24c>
  401f84:	9a07      	ldr	r2, [sp, #28]
  401f86:	07d1      	lsls	r1, r2, #31
  401f88:	f140 8084 	bpl.w	402094 <_svfprintf_r+0x378>
  401f8c:	2b30      	cmp	r3, #48	; 0x30
  401f8e:	f000 8081 	beq.w	402094 <_svfprintf_r+0x378>
  401f92:	2230      	movs	r2, #48	; 0x30
  401f94:	1e73      	subs	r3, r6, #1
  401f96:	f806 2c01 	strb.w	r2, [r6, #-1]
  401f9a:	aa30      	add	r2, sp, #192	; 0xc0
  401f9c:	1ad2      	subs	r2, r2, r3
  401f9e:	920d      	str	r2, [sp, #52]	; 0x34
  401fa0:	461e      	mov	r6, r3
  401fa2:	e07a      	b.n	40209a <_svfprintf_r+0x37e>
  401fa4:	f898 3000 	ldrb.w	r3, [r8]
  401fa8:	2b2a      	cmp	r3, #42	; 0x2a
  401faa:	f108 0401 	add.w	r4, r8, #1
  401fae:	f001 81b1 	beq.w	403314 <_svfprintf_r+0x15f8>
  401fb2:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  401fb6:	2809      	cmp	r0, #9
  401fb8:	bf98      	it	ls
  401fba:	2500      	movls	r5, #0
  401fbc:	f201 8164 	bhi.w	403288 <_svfprintf_r+0x156c>
  401fc0:	f814 3b01 	ldrb.w	r3, [r4], #1
  401fc4:	eb05 0585 	add.w	r5, r5, r5, lsl #2
  401fc8:	eb00 0545 	add.w	r5, r0, r5, lsl #1
  401fcc:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  401fd0:	2809      	cmp	r0, #9
  401fd2:	d9f5      	bls.n	401fc0 <_svfprintf_r+0x2a4>
  401fd4:	ea45 75e5 	orr.w	r5, r5, r5, asr #31
  401fd8:	46a0      	mov	r8, r4
  401fda:	e6fa      	b.n	401dd2 <_svfprintf_r+0xb6>
  401fdc:	9b07      	ldr	r3, [sp, #28]
  401fde:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  401fe2:	9307      	str	r3, [sp, #28]
  401fe4:	f898 3000 	ldrb.w	r3, [r8]
  401fe8:	e6f1      	b.n	401dce <_svfprintf_r+0xb2>
  401fea:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  401fee:	2300      	movs	r3, #0
  401ff0:	461c      	mov	r4, r3
  401ff2:	f818 3b01 	ldrb.w	r3, [r8], #1
  401ff6:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  401ffa:	eb00 0444 	add.w	r4, r0, r4, lsl #1
  401ffe:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  402002:	2809      	cmp	r0, #9
  402004:	d9f5      	bls.n	401ff2 <_svfprintf_r+0x2d6>
  402006:	940c      	str	r4, [sp, #48]	; 0x30
  402008:	e6e3      	b.n	401dd2 <_svfprintf_r+0xb6>
  40200a:	9311      	str	r3, [sp, #68]	; 0x44
  40200c:	46ab      	mov	fp, r5
  40200e:	2a00      	cmp	r2, #0
  402010:	f041 81c9 	bne.w	4033a6 <_svfprintf_r+0x168a>
  402014:	9b07      	ldr	r3, [sp, #28]
  402016:	f043 0310 	orr.w	r3, r3, #16
  40201a:	9307      	str	r3, [sp, #28]
  40201c:	9b07      	ldr	r3, [sp, #28]
  40201e:	0698      	lsls	r0, r3, #26
  402020:	f140 8530 	bpl.w	402a84 <_svfprintf_r+0xd68>
  402024:	9f0e      	ldr	r7, [sp, #56]	; 0x38
  402026:	3707      	adds	r7, #7
  402028:	f027 0707 	bic.w	r7, r7, #7
  40202c:	e9d7 2300 	ldrd	r2, r3, [r7]
  402030:	f107 0108 	add.w	r1, r7, #8
  402034:	910e      	str	r1, [sp, #56]	; 0x38
  402036:	4614      	mov	r4, r2
  402038:	461d      	mov	r5, r3
  40203a:	2a00      	cmp	r2, #0
  40203c:	f173 0300 	sbcs.w	r3, r3, #0
  402040:	f2c0 855b 	blt.w	402afa <_svfprintf_r+0xdde>
  402044:	f1bb 0f00 	cmp.w	fp, #0
  402048:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  40204c:	f2c0 8538 	blt.w	402ac0 <_svfprintf_r+0xda4>
  402050:	9b07      	ldr	r3, [sp, #28]
  402052:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  402056:	9307      	str	r3, [sp, #28]
  402058:	ea54 0305 	orrs.w	r3, r4, r5
  40205c:	f000 81db 	beq.w	402416 <_svfprintf_r+0x6fa>
  402060:	2d00      	cmp	r5, #0
  402062:	bf08      	it	eq
  402064:	2c0a      	cmpeq	r4, #10
  402066:	f0c0 81db 	bcc.w	402420 <_svfprintf_r+0x704>
  40206a:	ae30      	add	r6, sp, #192	; 0xc0
  40206c:	4620      	mov	r0, r4
  40206e:	4629      	mov	r1, r5
  402070:	220a      	movs	r2, #10
  402072:	2300      	movs	r3, #0
  402074:	f004 f970 	bl	406358 <__aeabi_uldivmod>
  402078:	3230      	adds	r2, #48	; 0x30
  40207a:	f806 2d01 	strb.w	r2, [r6, #-1]!
  40207e:	4620      	mov	r0, r4
  402080:	4629      	mov	r1, r5
  402082:	2300      	movs	r3, #0
  402084:	220a      	movs	r2, #10
  402086:	f004 f967 	bl	406358 <__aeabi_uldivmod>
  40208a:	4604      	mov	r4, r0
  40208c:	460d      	mov	r5, r1
  40208e:	ea54 0305 	orrs.w	r3, r4, r5
  402092:	d1eb      	bne.n	40206c <_svfprintf_r+0x350>
  402094:	ab30      	add	r3, sp, #192	; 0xc0
  402096:	1b9b      	subs	r3, r3, r6
  402098:	930d      	str	r3, [sp, #52]	; 0x34
  40209a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40209c:	455b      	cmp	r3, fp
  40209e:	bfb8      	it	lt
  4020a0:	465b      	movlt	r3, fp
  4020a2:	9308      	str	r3, [sp, #32]
  4020a4:	2300      	movs	r3, #0
  4020a6:	9313      	str	r3, [sp, #76]	; 0x4c
  4020a8:	b117      	cbz	r7, 4020b0 <_svfprintf_r+0x394>
  4020aa:	9b08      	ldr	r3, [sp, #32]
  4020ac:	3301      	adds	r3, #1
  4020ae:	9308      	str	r3, [sp, #32]
  4020b0:	9b07      	ldr	r3, [sp, #28]
  4020b2:	f013 0302 	ands.w	r3, r3, #2
  4020b6:	930f      	str	r3, [sp, #60]	; 0x3c
  4020b8:	d002      	beq.n	4020c0 <_svfprintf_r+0x3a4>
  4020ba:	9b08      	ldr	r3, [sp, #32]
  4020bc:	3302      	adds	r3, #2
  4020be:	9308      	str	r3, [sp, #32]
  4020c0:	9b07      	ldr	r3, [sp, #28]
  4020c2:	f013 0384 	ands.w	r3, r3, #132	; 0x84
  4020c6:	9310      	str	r3, [sp, #64]	; 0x40
  4020c8:	f040 82d7 	bne.w	40267a <_svfprintf_r+0x95e>
  4020cc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  4020ce:	9a08      	ldr	r2, [sp, #32]
  4020d0:	1a9d      	subs	r5, r3, r2
  4020d2:	2d00      	cmp	r5, #0
  4020d4:	f340 82d1 	ble.w	40267a <_svfprintf_r+0x95e>
  4020d8:	2d10      	cmp	r5, #16
  4020da:	9925      	ldr	r1, [sp, #148]	; 0x94
  4020dc:	9a24      	ldr	r2, [sp, #144]	; 0x90
  4020de:	4f37      	ldr	r7, [pc, #220]	; (4021bc <_svfprintf_r+0x4a0>)
  4020e0:	dd27      	ble.n	402132 <_svfprintf_r+0x416>
  4020e2:	9618      	str	r6, [sp, #96]	; 0x60
  4020e4:	4648      	mov	r0, r9
  4020e6:	2410      	movs	r4, #16
  4020e8:	46b9      	mov	r9, r7
  4020ea:	9e09      	ldr	r6, [sp, #36]	; 0x24
  4020ec:	462f      	mov	r7, r5
  4020ee:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  4020f0:	e004      	b.n	4020fc <_svfprintf_r+0x3e0>
  4020f2:	3f10      	subs	r7, #16
  4020f4:	2f10      	cmp	r7, #16
  4020f6:	f100 0008 	add.w	r0, r0, #8
  4020fa:	dd16      	ble.n	40212a <_svfprintf_r+0x40e>
  4020fc:	3201      	adds	r2, #1
  4020fe:	4b2f      	ldr	r3, [pc, #188]	; (4021bc <_svfprintf_r+0x4a0>)
  402100:	9224      	str	r2, [sp, #144]	; 0x90
  402102:	3110      	adds	r1, #16
  402104:	2a07      	cmp	r2, #7
  402106:	9125      	str	r1, [sp, #148]	; 0x94
  402108:	e880 0018 	stmia.w	r0, {r3, r4}
  40210c:	ddf1      	ble.n	4020f2 <_svfprintf_r+0x3d6>
  40210e:	aa23      	add	r2, sp, #140	; 0x8c
  402110:	4631      	mov	r1, r6
  402112:	4628      	mov	r0, r5
  402114:	f003 fb8e 	bl	405834 <__ssprint_r>
  402118:	2800      	cmp	r0, #0
  40211a:	f47f aef8 	bne.w	401f0e <_svfprintf_r+0x1f2>
  40211e:	3f10      	subs	r7, #16
  402120:	2f10      	cmp	r7, #16
  402122:	9925      	ldr	r1, [sp, #148]	; 0x94
  402124:	9a24      	ldr	r2, [sp, #144]	; 0x90
  402126:	a830      	add	r0, sp, #192	; 0xc0
  402128:	dce8      	bgt.n	4020fc <_svfprintf_r+0x3e0>
  40212a:	9e18      	ldr	r6, [sp, #96]	; 0x60
  40212c:	463d      	mov	r5, r7
  40212e:	464f      	mov	r7, r9
  402130:	4681      	mov	r9, r0
  402132:	3201      	adds	r2, #1
  402134:	186c      	adds	r4, r5, r1
  402136:	2a07      	cmp	r2, #7
  402138:	9425      	str	r4, [sp, #148]	; 0x94
  40213a:	9224      	str	r2, [sp, #144]	; 0x90
  40213c:	f8c9 7000 	str.w	r7, [r9]
  402140:	f8c9 5004 	str.w	r5, [r9, #4]
  402144:	f300 8428 	bgt.w	402998 <_svfprintf_r+0xc7c>
  402148:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  40214c:	f109 0908 	add.w	r9, r9, #8
  402150:	b177      	cbz	r7, 402170 <_svfprintf_r+0x454>
  402152:	9b24      	ldr	r3, [sp, #144]	; 0x90
  402154:	3301      	adds	r3, #1
  402156:	3401      	adds	r4, #1
  402158:	f10d 016f 	add.w	r1, sp, #111	; 0x6f
  40215c:	2201      	movs	r2, #1
  40215e:	2b07      	cmp	r3, #7
  402160:	9425      	str	r4, [sp, #148]	; 0x94
  402162:	9324      	str	r3, [sp, #144]	; 0x90
  402164:	e889 0006 	stmia.w	r9, {r1, r2}
  402168:	f300 83a0 	bgt.w	4028ac <_svfprintf_r+0xb90>
  40216c:	f109 0908 	add.w	r9, r9, #8
  402170:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  402172:	b16b      	cbz	r3, 402190 <_svfprintf_r+0x474>
  402174:	9b24      	ldr	r3, [sp, #144]	; 0x90
  402176:	3301      	adds	r3, #1
  402178:	3402      	adds	r4, #2
  40217a:	a91c      	add	r1, sp, #112	; 0x70
  40217c:	2202      	movs	r2, #2
  40217e:	2b07      	cmp	r3, #7
  402180:	9425      	str	r4, [sp, #148]	; 0x94
  402182:	9324      	str	r3, [sp, #144]	; 0x90
  402184:	e889 0006 	stmia.w	r9, {r1, r2}
  402188:	f300 839c 	bgt.w	4028c4 <_svfprintf_r+0xba8>
  40218c:	f109 0908 	add.w	r9, r9, #8
  402190:	9b10      	ldr	r3, [sp, #64]	; 0x40
  402192:	2b80      	cmp	r3, #128	; 0x80
  402194:	f000 82d5 	beq.w	402742 <_svfprintf_r+0xa26>
  402198:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40219a:	ebc3 070b 	rsb	r7, r3, fp
  40219e:	2f00      	cmp	r7, #0
  4021a0:	dd39      	ble.n	402216 <_svfprintf_r+0x4fa>
  4021a2:	4a07      	ldr	r2, [pc, #28]	; (4021c0 <_svfprintf_r+0x4a4>)
  4021a4:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4021a6:	920f      	str	r2, [sp, #60]	; 0x3c
  4021a8:	2f10      	cmp	r7, #16
  4021aa:	dd28      	ble.n	4021fe <_svfprintf_r+0x4e2>
  4021ac:	4622      	mov	r2, r4
  4021ae:	f04f 0b10 	mov.w	fp, #16
  4021b2:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  4021b4:	9c09      	ldr	r4, [sp, #36]	; 0x24
  4021b6:	e00a      	b.n	4021ce <_svfprintf_r+0x4b2>
  4021b8:	00406e3c 	.word	0x00406e3c
  4021bc:	00406e5c 	.word	0x00406e5c
  4021c0:	00406e08 	.word	0x00406e08
  4021c4:	3f10      	subs	r7, #16
  4021c6:	2f10      	cmp	r7, #16
  4021c8:	f109 0908 	add.w	r9, r9, #8
  4021cc:	dd16      	ble.n	4021fc <_svfprintf_r+0x4e0>
  4021ce:	3301      	adds	r3, #1
  4021d0:	3210      	adds	r2, #16
  4021d2:	2b07      	cmp	r3, #7
  4021d4:	9225      	str	r2, [sp, #148]	; 0x94
  4021d6:	9324      	str	r3, [sp, #144]	; 0x90
  4021d8:	e889 0c00 	stmia.w	r9, {sl, fp}
  4021dc:	ddf2      	ble.n	4021c4 <_svfprintf_r+0x4a8>
  4021de:	aa23      	add	r2, sp, #140	; 0x8c
  4021e0:	4621      	mov	r1, r4
  4021e2:	4628      	mov	r0, r5
  4021e4:	f003 fb26 	bl	405834 <__ssprint_r>
  4021e8:	2800      	cmp	r0, #0
  4021ea:	f47f ae90 	bne.w	401f0e <_svfprintf_r+0x1f2>
  4021ee:	3f10      	subs	r7, #16
  4021f0:	2f10      	cmp	r7, #16
  4021f2:	9a25      	ldr	r2, [sp, #148]	; 0x94
  4021f4:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4021f6:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  4021fa:	dce8      	bgt.n	4021ce <_svfprintf_r+0x4b2>
  4021fc:	4614      	mov	r4, r2
  4021fe:	3301      	adds	r3, #1
  402200:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  402202:	9324      	str	r3, [sp, #144]	; 0x90
  402204:	443c      	add	r4, r7
  402206:	2b07      	cmp	r3, #7
  402208:	9425      	str	r4, [sp, #148]	; 0x94
  40220a:	e889 0084 	stmia.w	r9, {r2, r7}
  40220e:	f300 8341 	bgt.w	402894 <_svfprintf_r+0xb78>
  402212:	f109 0908 	add.w	r9, r9, #8
  402216:	9b07      	ldr	r3, [sp, #28]
  402218:	05da      	lsls	r2, r3, #23
  40221a:	f100 8230 	bmi.w	40267e <_svfprintf_r+0x962>
  40221e:	9b24      	ldr	r3, [sp, #144]	; 0x90
  402220:	990d      	ldr	r1, [sp, #52]	; 0x34
  402222:	f8c9 6000 	str.w	r6, [r9]
  402226:	3301      	adds	r3, #1
  402228:	440c      	add	r4, r1
  40222a:	2b07      	cmp	r3, #7
  40222c:	9425      	str	r4, [sp, #148]	; 0x94
  40222e:	f8c9 1004 	str.w	r1, [r9, #4]
  402232:	9324      	str	r3, [sp, #144]	; 0x90
  402234:	f300 8318 	bgt.w	402868 <_svfprintf_r+0xb4c>
  402238:	f109 0908 	add.w	r9, r9, #8
  40223c:	9b07      	ldr	r3, [sp, #28]
  40223e:	0759      	lsls	r1, r3, #29
  402240:	d53f      	bpl.n	4022c2 <_svfprintf_r+0x5a6>
  402242:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  402244:	9a08      	ldr	r2, [sp, #32]
  402246:	1a9d      	subs	r5, r3, r2
  402248:	2d00      	cmp	r5, #0
  40224a:	dd3a      	ble.n	4022c2 <_svfprintf_r+0x5a6>
  40224c:	2d10      	cmp	r5, #16
  40224e:	9b24      	ldr	r3, [sp, #144]	; 0x90
  402250:	4fbc      	ldr	r7, [pc, #752]	; (402544 <_svfprintf_r+0x828>)
  402252:	dd23      	ble.n	40229c <_svfprintf_r+0x580>
  402254:	4622      	mov	r2, r4
  402256:	2610      	movs	r6, #16
  402258:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
  40225c:	9c09      	ldr	r4, [sp, #36]	; 0x24
  40225e:	e004      	b.n	40226a <_svfprintf_r+0x54e>
  402260:	3d10      	subs	r5, #16
  402262:	2d10      	cmp	r5, #16
  402264:	f109 0908 	add.w	r9, r9, #8
  402268:	dd17      	ble.n	40229a <_svfprintf_r+0x57e>
  40226a:	3301      	adds	r3, #1
  40226c:	49b5      	ldr	r1, [pc, #724]	; (402544 <_svfprintf_r+0x828>)
  40226e:	9324      	str	r3, [sp, #144]	; 0x90
  402270:	3210      	adds	r2, #16
  402272:	2b07      	cmp	r3, #7
  402274:	9225      	str	r2, [sp, #148]	; 0x94
  402276:	e889 0042 	stmia.w	r9, {r1, r6}
  40227a:	ddf1      	ble.n	402260 <_svfprintf_r+0x544>
  40227c:	aa23      	add	r2, sp, #140	; 0x8c
  40227e:	4621      	mov	r1, r4
  402280:	4658      	mov	r0, fp
  402282:	f003 fad7 	bl	405834 <__ssprint_r>
  402286:	2800      	cmp	r0, #0
  402288:	f47f ae41 	bne.w	401f0e <_svfprintf_r+0x1f2>
  40228c:	3d10      	subs	r5, #16
  40228e:	2d10      	cmp	r5, #16
  402290:	9a25      	ldr	r2, [sp, #148]	; 0x94
  402292:	9b24      	ldr	r3, [sp, #144]	; 0x90
  402294:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  402298:	dce7      	bgt.n	40226a <_svfprintf_r+0x54e>
  40229a:	4614      	mov	r4, r2
  40229c:	3301      	adds	r3, #1
  40229e:	442c      	add	r4, r5
  4022a0:	2b07      	cmp	r3, #7
  4022a2:	9425      	str	r4, [sp, #148]	; 0x94
  4022a4:	9324      	str	r3, [sp, #144]	; 0x90
  4022a6:	f8c9 7000 	str.w	r7, [r9]
  4022aa:	f8c9 5004 	str.w	r5, [r9, #4]
  4022ae:	dd08      	ble.n	4022c2 <_svfprintf_r+0x5a6>
  4022b0:	aa23      	add	r2, sp, #140	; 0x8c
  4022b2:	9909      	ldr	r1, [sp, #36]	; 0x24
  4022b4:	980a      	ldr	r0, [sp, #40]	; 0x28
  4022b6:	f003 fabd 	bl	405834 <__ssprint_r>
  4022ba:	2800      	cmp	r0, #0
  4022bc:	f47f ae27 	bne.w	401f0e <_svfprintf_r+0x1f2>
  4022c0:	9c25      	ldr	r4, [sp, #148]	; 0x94
  4022c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  4022c4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  4022c6:	9908      	ldr	r1, [sp, #32]
  4022c8:	428a      	cmp	r2, r1
  4022ca:	bfac      	ite	ge
  4022cc:	189b      	addge	r3, r3, r2
  4022ce:	185b      	addlt	r3, r3, r1
  4022d0:	930b      	str	r3, [sp, #44]	; 0x2c
  4022d2:	2c00      	cmp	r4, #0
  4022d4:	f040 82d4 	bne.w	402880 <_svfprintf_r+0xb64>
  4022d8:	2300      	movs	r3, #0
  4022da:	9324      	str	r3, [sp, #144]	; 0x90
  4022dc:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  4022e0:	e542      	b.n	401d68 <_svfprintf_r+0x4c>
  4022e2:	9311      	str	r3, [sp, #68]	; 0x44
  4022e4:	46ab      	mov	fp, r5
  4022e6:	2a00      	cmp	r2, #0
  4022e8:	f041 8059 	bne.w	40339e <_svfprintf_r+0x1682>
  4022ec:	9f0e      	ldr	r7, [sp, #56]	; 0x38
  4022ee:	3707      	adds	r7, #7
  4022f0:	f027 0307 	bic.w	r3, r7, #7
  4022f4:	f103 0208 	add.w	r2, r3, #8
  4022f8:	920e      	str	r2, [sp, #56]	; 0x38
  4022fa:	681a      	ldr	r2, [r3, #0]
  4022fc:	9214      	str	r2, [sp, #80]	; 0x50
  4022fe:	685b      	ldr	r3, [r3, #4]
  402300:	9315      	str	r3, [sp, #84]	; 0x54
  402302:	9b15      	ldr	r3, [sp, #84]	; 0x54
  402304:	9d14      	ldr	r5, [sp, #80]	; 0x50
  402306:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
  40230a:	4628      	mov	r0, r5
  40230c:	4621      	mov	r1, r4
  40230e:	f04f 32ff 	mov.w	r2, #4294967295
  402312:	4b8d      	ldr	r3, [pc, #564]	; (402548 <_svfprintf_r+0x82c>)
  402314:	f003 ffe2 	bl	4062dc <__aeabi_dcmpun>
  402318:	2800      	cmp	r0, #0
  40231a:	f040 84c1 	bne.w	402ca0 <_svfprintf_r+0xf84>
  40231e:	4628      	mov	r0, r5
  402320:	4621      	mov	r1, r4
  402322:	f04f 32ff 	mov.w	r2, #4294967295
  402326:	4b88      	ldr	r3, [pc, #544]	; (402548 <_svfprintf_r+0x82c>)
  402328:	f003 ffba 	bl	4062a0 <__aeabi_dcmple>
  40232c:	2800      	cmp	r0, #0
  40232e:	f040 84b7 	bne.w	402ca0 <_svfprintf_r+0xf84>
  402332:	9814      	ldr	r0, [sp, #80]	; 0x50
  402334:	9915      	ldr	r1, [sp, #84]	; 0x54
  402336:	2200      	movs	r2, #0
  402338:	2300      	movs	r3, #0
  40233a:	f003 ffa7 	bl	40628c <__aeabi_dcmplt>
  40233e:	2800      	cmp	r0, #0
  402340:	f040 874b 	bne.w	4031da <_svfprintf_r+0x14be>
  402344:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  402348:	4e80      	ldr	r6, [pc, #512]	; (40254c <_svfprintf_r+0x830>)
  40234a:	4b81      	ldr	r3, [pc, #516]	; (402550 <_svfprintf_r+0x834>)
  40234c:	9907      	ldr	r1, [sp, #28]
  40234e:	f021 0180 	bic.w	r1, r1, #128	; 0x80
  402352:	9107      	str	r1, [sp, #28]
  402354:	9911      	ldr	r1, [sp, #68]	; 0x44
  402356:	2203      	movs	r2, #3
  402358:	f04f 0b00 	mov.w	fp, #0
  40235c:	9208      	str	r2, [sp, #32]
  40235e:	2947      	cmp	r1, #71	; 0x47
  402360:	bfd8      	it	le
  402362:	461e      	movle	r6, r3
  402364:	920d      	str	r2, [sp, #52]	; 0x34
  402366:	f8cd b04c 	str.w	fp, [sp, #76]	; 0x4c
  40236a:	e69d      	b.n	4020a8 <_svfprintf_r+0x38c>
  40236c:	9b07      	ldr	r3, [sp, #28]
  40236e:	f043 0308 	orr.w	r3, r3, #8
  402372:	9307      	str	r3, [sp, #28]
  402374:	f898 3000 	ldrb.w	r3, [r8]
  402378:	e529      	b.n	401dce <_svfprintf_r+0xb2>
  40237a:	9311      	str	r3, [sp, #68]	; 0x44
  40237c:	46ab      	mov	fp, r5
  40237e:	2a00      	cmp	r2, #0
  402380:	f041 8009 	bne.w	403396 <_svfprintf_r+0x167a>
  402384:	9b07      	ldr	r3, [sp, #28]
  402386:	f043 0310 	orr.w	r3, r3, #16
  40238a:	9307      	str	r3, [sp, #28]
  40238c:	9a07      	ldr	r2, [sp, #28]
  40238e:	f012 0320 	ands.w	r3, r2, #32
  402392:	f47f add2 	bne.w	401f3a <_svfprintf_r+0x21e>
  402396:	9907      	ldr	r1, [sp, #28]
  402398:	f011 0210 	ands.w	r2, r1, #16
  40239c:	f000 8507 	beq.w	402dae <_svfprintf_r+0x1092>
  4023a0:	980e      	ldr	r0, [sp, #56]	; 0x38
  4023a2:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
  4023a6:	f1bb 0f00 	cmp.w	fp, #0
  4023aa:	6804      	ldr	r4, [r0, #0]
  4023ac:	f100 0704 	add.w	r7, r0, #4
  4023b0:	f04f 0500 	mov.w	r5, #0
  4023b4:	f2c0 8521 	blt.w	402dfa <_svfprintf_r+0x10de>
  4023b8:	460a      	mov	r2, r1
  4023ba:	f022 0280 	bic.w	r2, r2, #128	; 0x80
  4023be:	9207      	str	r2, [sp, #28]
  4023c0:	ea54 0205 	orrs.w	r2, r4, r5
  4023c4:	970e      	str	r7, [sp, #56]	; 0x38
  4023c6:	f000 8143 	beq.w	402650 <_svfprintf_r+0x934>
  4023ca:	461f      	mov	r7, r3
  4023cc:	e5cb      	b.n	401f66 <_svfprintf_r+0x24a>
  4023ce:	9311      	str	r3, [sp, #68]	; 0x44
  4023d0:	46ab      	mov	fp, r5
  4023d2:	2a00      	cmp	r2, #0
  4023d4:	f040 87d7 	bne.w	403386 <_svfprintf_r+0x166a>
  4023d8:	9b07      	ldr	r3, [sp, #28]
  4023da:	f043 0310 	orr.w	r3, r3, #16
  4023de:	9307      	str	r3, [sp, #28]
  4023e0:	9a07      	ldr	r2, [sp, #28]
  4023e2:	f012 0320 	ands.w	r3, r2, #32
  4023e6:	f000 8332 	beq.w	402a4e <_svfprintf_r+0xd32>
  4023ea:	9f0e      	ldr	r7, [sp, #56]	; 0x38
  4023ec:	3707      	adds	r7, #7
  4023ee:	f027 0307 	bic.w	r3, r7, #7
  4023f2:	2700      	movs	r7, #0
  4023f4:	f103 0108 	add.w	r1, r3, #8
  4023f8:	45bb      	cmp	fp, r7
  4023fa:	910e      	str	r1, [sp, #56]	; 0x38
  4023fc:	e9d3 4500 	ldrd	r4, r5, [r3]
  402400:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
  402404:	f2c0 835c 	blt.w	402ac0 <_svfprintf_r+0xda4>
  402408:	f022 0380 	bic.w	r3, r2, #128	; 0x80
  40240c:	9307      	str	r3, [sp, #28]
  40240e:	ea54 0305 	orrs.w	r3, r4, r5
  402412:	f47f ae25 	bne.w	402060 <_svfprintf_r+0x344>
  402416:	f1bb 0f00 	cmp.w	fp, #0
  40241a:	f000 80fe 	beq.w	40261a <_svfprintf_r+0x8fe>
  40241e:	2400      	movs	r4, #0
  402420:	ae40      	add	r6, sp, #256	; 0x100
  402422:	3430      	adds	r4, #48	; 0x30
  402424:	f806 4d41 	strb.w	r4, [r6, #-65]!
  402428:	e634      	b.n	402094 <_svfprintf_r+0x378>
  40242a:	9311      	str	r3, [sp, #68]	; 0x44
  40242c:	46ab      	mov	fp, r5
  40242e:	2a00      	cmp	r2, #0
  402430:	f040 87a5 	bne.w	40337e <_svfprintf_r+0x1662>
  402434:	9b07      	ldr	r3, [sp, #28]
  402436:	4847      	ldr	r0, [pc, #284]	; (402554 <_svfprintf_r+0x838>)
  402438:	069d      	lsls	r5, r3, #26
  40243a:	f140 8097 	bpl.w	40256c <_svfprintf_r+0x850>
  40243e:	9f0e      	ldr	r7, [sp, #56]	; 0x38
  402440:	3707      	adds	r7, #7
  402442:	f027 0307 	bic.w	r3, r7, #7
  402446:	e9d3 4500 	ldrd	r4, r5, [r3]
  40244a:	f103 0208 	add.w	r2, r3, #8
  40244e:	920e      	str	r2, [sp, #56]	; 0x38
  402450:	9a07      	ldr	r2, [sp, #28]
  402452:	f012 0701 	ands.w	r7, r2, #1
  402456:	f000 8241 	beq.w	4028dc <_svfprintf_r+0xbc0>
  40245a:	ea54 0305 	orrs.w	r3, r4, r5
  40245e:	f000 84f5 	beq.w	402e4c <_svfprintf_r+0x1130>
  402462:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
  402466:	f88d 2071 	strb.w	r2, [sp, #113]	; 0x71
  40246a:	2700      	movs	r7, #0
  40246c:	9a07      	ldr	r2, [sp, #28]
  40246e:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
  402472:	2330      	movs	r3, #48	; 0x30
  402474:	45bb      	cmp	fp, r7
  402476:	f88d 3070 	strb.w	r3, [sp, #112]	; 0x70
  40247a:	f042 0302 	orr.w	r3, r2, #2
  40247e:	f2c0 86a9 	blt.w	4031d4 <_svfprintf_r+0x14b8>
  402482:	f022 0380 	bic.w	r3, r2, #128	; 0x80
  402486:	f043 0302 	orr.w	r3, r3, #2
  40248a:	9307      	str	r3, [sp, #28]
  40248c:	ae30      	add	r6, sp, #192	; 0xc0
  40248e:	0923      	lsrs	r3, r4, #4
  402490:	f004 010f 	and.w	r1, r4, #15
  402494:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
  402498:	092a      	lsrs	r2, r5, #4
  40249a:	461c      	mov	r4, r3
  40249c:	4615      	mov	r5, r2
  40249e:	5c43      	ldrb	r3, [r0, r1]
  4024a0:	f806 3d01 	strb.w	r3, [r6, #-1]!
  4024a4:	ea54 0305 	orrs.w	r3, r4, r5
  4024a8:	d1f1      	bne.n	40248e <_svfprintf_r+0x772>
  4024aa:	e5f3      	b.n	402094 <_svfprintf_r+0x378>
  4024ac:	990e      	ldr	r1, [sp, #56]	; 0x38
  4024ae:	9311      	str	r3, [sp, #68]	; 0x44
  4024b0:	680a      	ldr	r2, [r1, #0]
  4024b2:	f88d 2098 	strb.w	r2, [sp, #152]	; 0x98
  4024b6:	2300      	movs	r3, #0
  4024b8:	460a      	mov	r2, r1
  4024ba:	461f      	mov	r7, r3
  4024bc:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
  4024c0:	3204      	adds	r2, #4
  4024c2:	2301      	movs	r3, #1
  4024c4:	9308      	str	r3, [sp, #32]
  4024c6:	46bb      	mov	fp, r7
  4024c8:	9713      	str	r7, [sp, #76]	; 0x4c
  4024ca:	920e      	str	r2, [sp, #56]	; 0x38
  4024cc:	930d      	str	r3, [sp, #52]	; 0x34
  4024ce:	ae26      	add	r6, sp, #152	; 0x98
  4024d0:	e5ee      	b.n	4020b0 <_svfprintf_r+0x394>
  4024d2:	9311      	str	r3, [sp, #68]	; 0x44
  4024d4:	46ab      	mov	fp, r5
  4024d6:	2a00      	cmp	r2, #0
  4024d8:	f43f ada0 	beq.w	40201c <_svfprintf_r+0x300>
  4024dc:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  4024e0:	e59c      	b.n	40201c <_svfprintf_r+0x300>
  4024e2:	9b07      	ldr	r3, [sp, #28]
  4024e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4024e8:	9307      	str	r3, [sp, #28]
  4024ea:	f898 3000 	ldrb.w	r3, [r8]
  4024ee:	e46e      	b.n	401dce <_svfprintf_r+0xb2>
  4024f0:	f898 3000 	ldrb.w	r3, [r8]
  4024f4:	2900      	cmp	r1, #0
  4024f6:	f47f ac6a 	bne.w	401dce <_svfprintf_r+0xb2>
  4024fa:	2201      	movs	r2, #1
  4024fc:	2120      	movs	r1, #32
  4024fe:	e466      	b.n	401dce <_svfprintf_r+0xb2>
  402500:	9b07      	ldr	r3, [sp, #28]
  402502:	f043 0301 	orr.w	r3, r3, #1
  402506:	9307      	str	r3, [sp, #28]
  402508:	f898 3000 	ldrb.w	r3, [r8]
  40250c:	e45f      	b.n	401dce <_svfprintf_r+0xb2>
  40250e:	9c0e      	ldr	r4, [sp, #56]	; 0x38
  402510:	6823      	ldr	r3, [r4, #0]
  402512:	930c      	str	r3, [sp, #48]	; 0x30
  402514:	4618      	mov	r0, r3
  402516:	2800      	cmp	r0, #0
  402518:	4623      	mov	r3, r4
  40251a:	f103 0304 	add.w	r3, r3, #4
  40251e:	f6ff acb8 	blt.w	401e92 <_svfprintf_r+0x176>
  402522:	930e      	str	r3, [sp, #56]	; 0x38
  402524:	f898 3000 	ldrb.w	r3, [r8]
  402528:	e451      	b.n	401dce <_svfprintf_r+0xb2>
  40252a:	f898 3000 	ldrb.w	r3, [r8]
  40252e:	2201      	movs	r2, #1
  402530:	212b      	movs	r1, #43	; 0x2b
  402532:	e44c      	b.n	401dce <_svfprintf_r+0xb2>
  402534:	9311      	str	r3, [sp, #68]	; 0x44
  402536:	46ab      	mov	fp, r5
  402538:	2a00      	cmp	r2, #0
  40253a:	f43f af51 	beq.w	4023e0 <_svfprintf_r+0x6c4>
  40253e:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  402542:	e74d      	b.n	4023e0 <_svfprintf_r+0x6c4>
  402544:	00406e5c 	.word	0x00406e5c
  402548:	7fefffff 	.word	0x7fefffff
  40254c:	00406e1c 	.word	0x00406e1c
  402550:	00406e18 	.word	0x00406e18
  402554:	00406e28 	.word	0x00406e28
  402558:	9311      	str	r3, [sp, #68]	; 0x44
  40255a:	46ab      	mov	fp, r5
  40255c:	2a00      	cmp	r2, #0
  40255e:	f040 8703 	bne.w	403368 <_svfprintf_r+0x164c>
  402562:	9b07      	ldr	r3, [sp, #28]
  402564:	4899      	ldr	r0, [pc, #612]	; (4027cc <_svfprintf_r+0xab0>)
  402566:	069d      	lsls	r5, r3, #26
  402568:	f53f af69 	bmi.w	40243e <_svfprintf_r+0x722>
  40256c:	9b07      	ldr	r3, [sp, #28]
  40256e:	06dc      	lsls	r4, r3, #27
  402570:	f140 845e 	bpl.w	402e30 <_svfprintf_r+0x1114>
  402574:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  402576:	4613      	mov	r3, r2
  402578:	3304      	adds	r3, #4
  40257a:	6814      	ldr	r4, [r2, #0]
  40257c:	930e      	str	r3, [sp, #56]	; 0x38
  40257e:	2500      	movs	r5, #0
  402580:	e766      	b.n	402450 <_svfprintf_r+0x734>
  402582:	f898 3000 	ldrb.w	r3, [r8]
  402586:	2b6c      	cmp	r3, #108	; 0x6c
  402588:	f000 84e1 	beq.w	402f4e <_svfprintf_r+0x1232>
  40258c:	9807      	ldr	r0, [sp, #28]
  40258e:	f040 0010 	orr.w	r0, r0, #16
  402592:	9007      	str	r0, [sp, #28]
  402594:	e41b      	b.n	401dce <_svfprintf_r+0xb2>
  402596:	2a00      	cmp	r2, #0
  402598:	f040 86db 	bne.w	403352 <_svfprintf_r+0x1636>
  40259c:	9b07      	ldr	r3, [sp, #28]
  40259e:	069b      	lsls	r3, r3, #26
  4025a0:	f140 842f 	bpl.w	402e02 <_svfprintf_r+0x10e6>
  4025a4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  4025a6:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4025a8:	6813      	ldr	r3, [r2, #0]
  4025aa:	17cd      	asrs	r5, r1, #31
  4025ac:	4608      	mov	r0, r1
  4025ae:	3204      	adds	r2, #4
  4025b0:	4629      	mov	r1, r5
  4025b2:	920e      	str	r2, [sp, #56]	; 0x38
  4025b4:	e9c3 0100 	strd	r0, r1, [r3]
  4025b8:	f7ff bbd6 	b.w	401d68 <_svfprintf_r+0x4c>
  4025bc:	9b07      	ldr	r3, [sp, #28]
  4025be:	f043 0320 	orr.w	r3, r3, #32
  4025c2:	9307      	str	r3, [sp, #28]
  4025c4:	f898 3000 	ldrb.w	r3, [r8]
  4025c8:	e401      	b.n	401dce <_svfprintf_r+0xb2>
  4025ca:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  4025cc:	9311      	str	r3, [sp, #68]	; 0x44
  4025ce:	6816      	ldr	r6, [r2, #0]
  4025d0:	2400      	movs	r4, #0
  4025d2:	f88d 406f 	strb.w	r4, [sp, #111]	; 0x6f
  4025d6:	1d17      	adds	r7, r2, #4
  4025d8:	2e00      	cmp	r6, #0
  4025da:	f000 85bd 	beq.w	403158 <_svfprintf_r+0x143c>
  4025de:	2d00      	cmp	r5, #0
  4025e0:	f2c0 850f 	blt.w	403002 <_svfprintf_r+0x12e6>
  4025e4:	462a      	mov	r2, r5
  4025e6:	4621      	mov	r1, r4
  4025e8:	4630      	mov	r0, r6
  4025ea:	f002 fac1 	bl	404b70 <memchr>
  4025ee:	2800      	cmp	r0, #0
  4025f0:	f000 8604 	beq.w	4031fc <_svfprintf_r+0x14e0>
  4025f4:	1b83      	subs	r3, r0, r6
  4025f6:	930d      	str	r3, [sp, #52]	; 0x34
  4025f8:	46a3      	mov	fp, r4
  4025fa:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  4025fe:	970e      	str	r7, [sp, #56]	; 0x38
  402600:	9308      	str	r3, [sp, #32]
  402602:	f8cd b04c 	str.w	fp, [sp, #76]	; 0x4c
  402606:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  40260a:	e54d      	b.n	4020a8 <_svfprintf_r+0x38c>
  40260c:	486f      	ldr	r0, [pc, #444]	; (4027cc <_svfprintf_r+0xab0>)
  40260e:	9211      	str	r2, [sp, #68]	; 0x44
  402610:	f1bb 0f00 	cmp.w	fp, #0
  402614:	f040 8173 	bne.w	4028fe <_svfprintf_r+0xbe2>
  402618:	465f      	mov	r7, fp
  40261a:	f04f 0b00 	mov.w	fp, #0
  40261e:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
  402622:	ae30      	add	r6, sp, #192	; 0xc0
  402624:	e539      	b.n	40209a <_svfprintf_r+0x37e>
  402626:	9311      	str	r3, [sp, #68]	; 0x44
  402628:	2a00      	cmp	r2, #0
  40262a:	f040 86b0 	bne.w	40338e <_svfprintf_r+0x1672>
  40262e:	9a11      	ldr	r2, [sp, #68]	; 0x44
  402630:	2a00      	cmp	r2, #0
  402632:	f43f ac65 	beq.w	401f00 <_svfprintf_r+0x1e4>
  402636:	2300      	movs	r3, #0
  402638:	2101      	movs	r1, #1
  40263a:	461f      	mov	r7, r3
  40263c:	9108      	str	r1, [sp, #32]
  40263e:	f88d 2098 	strb.w	r2, [sp, #152]	; 0x98
  402642:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
  402646:	469b      	mov	fp, r3
  402648:	9313      	str	r3, [sp, #76]	; 0x4c
  40264a:	910d      	str	r1, [sp, #52]	; 0x34
  40264c:	ae26      	add	r6, sp, #152	; 0x98
  40264e:	e52f      	b.n	4020b0 <_svfprintf_r+0x394>
  402650:	f1bb 0f00 	cmp.w	fp, #0
  402654:	f000 85dd 	beq.w	403212 <_svfprintf_r+0x14f6>
  402658:	2700      	movs	r7, #0
  40265a:	2400      	movs	r4, #0
  40265c:	2500      	movs	r5, #0
  40265e:	e482      	b.n	401f66 <_svfprintf_r+0x24a>
  402660:	485a      	ldr	r0, [pc, #360]	; (4027cc <_svfprintf_r+0xab0>)
  402662:	9307      	str	r3, [sp, #28]
  402664:	9211      	str	r2, [sp, #68]	; 0x44
  402666:	ea54 0305 	orrs.w	r3, r4, r5
  40266a:	970e      	str	r7, [sp, #56]	; 0x38
  40266c:	f04f 0700 	mov.w	r7, #0
  402670:	f47f af0c 	bne.w	40248c <_svfprintf_r+0x770>
  402674:	2400      	movs	r4, #0
  402676:	2500      	movs	r5, #0
  402678:	e708      	b.n	40248c <_svfprintf_r+0x770>
  40267a:	9c25      	ldr	r4, [sp, #148]	; 0x94
  40267c:	e568      	b.n	402150 <_svfprintf_r+0x434>
  40267e:	9b11      	ldr	r3, [sp, #68]	; 0x44
  402680:	2b65      	cmp	r3, #101	; 0x65
  402682:	f340 80a9 	ble.w	4027d8 <_svfprintf_r+0xabc>
  402686:	9814      	ldr	r0, [sp, #80]	; 0x50
  402688:	9915      	ldr	r1, [sp, #84]	; 0x54
  40268a:	2200      	movs	r2, #0
  40268c:	2300      	movs	r3, #0
  40268e:	f003 fdf3 	bl	406278 <__aeabi_dcmpeq>
  402692:	2800      	cmp	r0, #0
  402694:	f000 8135 	beq.w	402902 <_svfprintf_r+0xbe6>
  402698:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40269a:	4a4d      	ldr	r2, [pc, #308]	; (4027d0 <_svfprintf_r+0xab4>)
  40269c:	f8c9 2000 	str.w	r2, [r9]
  4026a0:	3301      	adds	r3, #1
  4026a2:	3401      	adds	r4, #1
  4026a4:	2201      	movs	r2, #1
  4026a6:	2b07      	cmp	r3, #7
  4026a8:	9425      	str	r4, [sp, #148]	; 0x94
  4026aa:	9324      	str	r3, [sp, #144]	; 0x90
  4026ac:	f8c9 2004 	str.w	r2, [r9, #4]
  4026b0:	f300 83e6 	bgt.w	402e80 <_svfprintf_r+0x1164>
  4026b4:	f109 0908 	add.w	r9, r9, #8
  4026b8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  4026ba:	9a12      	ldr	r2, [sp, #72]	; 0x48
  4026bc:	4293      	cmp	r3, r2
  4026be:	db03      	blt.n	4026c8 <_svfprintf_r+0x9ac>
  4026c0:	9b07      	ldr	r3, [sp, #28]
  4026c2:	07db      	lsls	r3, r3, #31
  4026c4:	f57f adba 	bpl.w	40223c <_svfprintf_r+0x520>
  4026c8:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4026ca:	9916      	ldr	r1, [sp, #88]	; 0x58
  4026cc:	9a17      	ldr	r2, [sp, #92]	; 0x5c
  4026ce:	f8c9 2000 	str.w	r2, [r9]
  4026d2:	3301      	adds	r3, #1
  4026d4:	440c      	add	r4, r1
  4026d6:	2b07      	cmp	r3, #7
  4026d8:	9425      	str	r4, [sp, #148]	; 0x94
  4026da:	f8c9 1004 	str.w	r1, [r9, #4]
  4026de:	9324      	str	r3, [sp, #144]	; 0x90
  4026e0:	f300 843f 	bgt.w	402f62 <_svfprintf_r+0x1246>
  4026e4:	f109 0908 	add.w	r9, r9, #8
  4026e8:	9b12      	ldr	r3, [sp, #72]	; 0x48
  4026ea:	1e5d      	subs	r5, r3, #1
  4026ec:	2d00      	cmp	r5, #0
  4026ee:	f77f ada5 	ble.w	40223c <_svfprintf_r+0x520>
  4026f2:	4a38      	ldr	r2, [pc, #224]	; (4027d4 <_svfprintf_r+0xab8>)
  4026f4:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4026f6:	920f      	str	r2, [sp, #60]	; 0x3c
  4026f8:	2d10      	cmp	r5, #16
  4026fa:	f340 81e6 	ble.w	402aca <_svfprintf_r+0xdae>
  4026fe:	2610      	movs	r6, #16
  402700:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  402702:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
  402706:	e005      	b.n	402714 <_svfprintf_r+0x9f8>
  402708:	f109 0908 	add.w	r9, r9, #8
  40270c:	3d10      	subs	r5, #16
  40270e:	2d10      	cmp	r5, #16
  402710:	f340 81db 	ble.w	402aca <_svfprintf_r+0xdae>
  402714:	3301      	adds	r3, #1
  402716:	3410      	adds	r4, #16
  402718:	2b07      	cmp	r3, #7
  40271a:	9425      	str	r4, [sp, #148]	; 0x94
  40271c:	9324      	str	r3, [sp, #144]	; 0x90
  40271e:	f8c9 a000 	str.w	sl, [r9]
  402722:	f8c9 6004 	str.w	r6, [r9, #4]
  402726:	ddef      	ble.n	402708 <_svfprintf_r+0x9ec>
  402728:	aa23      	add	r2, sp, #140	; 0x8c
  40272a:	4659      	mov	r1, fp
  40272c:	4638      	mov	r0, r7
  40272e:	f003 f881 	bl	405834 <__ssprint_r>
  402732:	2800      	cmp	r0, #0
  402734:	f47f abeb 	bne.w	401f0e <_svfprintf_r+0x1f2>
  402738:	9c25      	ldr	r4, [sp, #148]	; 0x94
  40273a:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40273c:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  402740:	e7e4      	b.n	40270c <_svfprintf_r+0x9f0>
  402742:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  402744:	9a08      	ldr	r2, [sp, #32]
  402746:	1a9f      	subs	r7, r3, r2
  402748:	2f00      	cmp	r7, #0
  40274a:	f77f ad25 	ble.w	402198 <_svfprintf_r+0x47c>
  40274e:	4a21      	ldr	r2, [pc, #132]	; (4027d4 <_svfprintf_r+0xab8>)
  402750:	9b24      	ldr	r3, [sp, #144]	; 0x90
  402752:	920f      	str	r2, [sp, #60]	; 0x3c
  402754:	2f10      	cmp	r7, #16
  402756:	dd2b      	ble.n	4027b0 <_svfprintf_r+0xa94>
  402758:	464a      	mov	r2, r9
  40275a:	4621      	mov	r1, r4
  40275c:	46b9      	mov	r9, r7
  40275e:	2510      	movs	r5, #16
  402760:	4637      	mov	r7, r6
  402762:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  402764:	9e09      	ldr	r6, [sp, #36]	; 0x24
  402766:	e006      	b.n	402776 <_svfprintf_r+0xa5a>
  402768:	f1a9 0910 	sub.w	r9, r9, #16
  40276c:	f1b9 0f10 	cmp.w	r9, #16
  402770:	f102 0208 	add.w	r2, r2, #8
  402774:	dd18      	ble.n	4027a8 <_svfprintf_r+0xa8c>
  402776:	3301      	adds	r3, #1
  402778:	3110      	adds	r1, #16
  40277a:	2b07      	cmp	r3, #7
  40277c:	9125      	str	r1, [sp, #148]	; 0x94
  40277e:	9324      	str	r3, [sp, #144]	; 0x90
  402780:	f8c2 a000 	str.w	sl, [r2]
  402784:	6055      	str	r5, [r2, #4]
  402786:	ddef      	ble.n	402768 <_svfprintf_r+0xa4c>
  402788:	aa23      	add	r2, sp, #140	; 0x8c
  40278a:	4631      	mov	r1, r6
  40278c:	4620      	mov	r0, r4
  40278e:	f003 f851 	bl	405834 <__ssprint_r>
  402792:	2800      	cmp	r0, #0
  402794:	f47f abbb 	bne.w	401f0e <_svfprintf_r+0x1f2>
  402798:	f1a9 0910 	sub.w	r9, r9, #16
  40279c:	f1b9 0f10 	cmp.w	r9, #16
  4027a0:	9925      	ldr	r1, [sp, #148]	; 0x94
  4027a2:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4027a4:	aa30      	add	r2, sp, #192	; 0xc0
  4027a6:	dce6      	bgt.n	402776 <_svfprintf_r+0xa5a>
  4027a8:	463e      	mov	r6, r7
  4027aa:	460c      	mov	r4, r1
  4027ac:	464f      	mov	r7, r9
  4027ae:	4691      	mov	r9, r2
  4027b0:	3301      	adds	r3, #1
  4027b2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  4027b4:	9324      	str	r3, [sp, #144]	; 0x90
  4027b6:	443c      	add	r4, r7
  4027b8:	2b07      	cmp	r3, #7
  4027ba:	9425      	str	r4, [sp, #148]	; 0x94
  4027bc:	e889 0084 	stmia.w	r9, {r2, r7}
  4027c0:	f300 8245 	bgt.w	402c4e <_svfprintf_r+0xf32>
  4027c4:	f109 0908 	add.w	r9, r9, #8
  4027c8:	e4e6      	b.n	402198 <_svfprintf_r+0x47c>
  4027ca:	bf00      	nop
  4027cc:	00406e3c 	.word	0x00406e3c
  4027d0:	00406e58 	.word	0x00406e58
  4027d4:	00406e08 	.word	0x00406e08
  4027d8:	9b12      	ldr	r3, [sp, #72]	; 0x48
  4027da:	9d24      	ldr	r5, [sp, #144]	; 0x90
  4027dc:	2b01      	cmp	r3, #1
  4027de:	f340 8208 	ble.w	402bf2 <_svfprintf_r+0xed6>
  4027e2:	3501      	adds	r5, #1
  4027e4:	3401      	adds	r4, #1
  4027e6:	2301      	movs	r3, #1
  4027e8:	2d07      	cmp	r5, #7
  4027ea:	9425      	str	r4, [sp, #148]	; 0x94
  4027ec:	9524      	str	r5, [sp, #144]	; 0x90
  4027ee:	f8c9 6000 	str.w	r6, [r9]
  4027f2:	f8c9 3004 	str.w	r3, [r9, #4]
  4027f6:	f300 820d 	bgt.w	402c14 <_svfprintf_r+0xef8>
  4027fa:	f109 0908 	add.w	r9, r9, #8
  4027fe:	9a16      	ldr	r2, [sp, #88]	; 0x58
  402800:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  402802:	f8c9 3000 	str.w	r3, [r9]
  402806:	3501      	adds	r5, #1
  402808:	4414      	add	r4, r2
  40280a:	2d07      	cmp	r5, #7
  40280c:	9425      	str	r4, [sp, #148]	; 0x94
  40280e:	9524      	str	r5, [sp, #144]	; 0x90
  402810:	f8c9 2004 	str.w	r2, [r9, #4]
  402814:	f300 820e 	bgt.w	402c34 <_svfprintf_r+0xf18>
  402818:	f109 0908 	add.w	r9, r9, #8
  40281c:	2300      	movs	r3, #0
  40281e:	9814      	ldr	r0, [sp, #80]	; 0x50
  402820:	9915      	ldr	r1, [sp, #84]	; 0x54
  402822:	2200      	movs	r2, #0
  402824:	f003 fd28 	bl	406278 <__aeabi_dcmpeq>
  402828:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40282a:	2800      	cmp	r0, #0
  40282c:	f040 80c3 	bne.w	4029b6 <_svfprintf_r+0xc9a>
  402830:	3b01      	subs	r3, #1
  402832:	3501      	adds	r5, #1
  402834:	3601      	adds	r6, #1
  402836:	441c      	add	r4, r3
  402838:	2d07      	cmp	r5, #7
  40283a:	9524      	str	r5, [sp, #144]	; 0x90
  40283c:	9425      	str	r4, [sp, #148]	; 0x94
  40283e:	f8c9 6000 	str.w	r6, [r9]
  402842:	f8c9 3004 	str.w	r3, [r9, #4]
  402846:	f300 80f5 	bgt.w	402a34 <_svfprintf_r+0xd18>
  40284a:	f109 0908 	add.w	r9, r9, #8
  40284e:	9a19      	ldr	r2, [sp, #100]	; 0x64
  402850:	f8c9 2004 	str.w	r2, [r9, #4]
  402854:	3501      	adds	r5, #1
  402856:	4414      	add	r4, r2
  402858:	ab1f      	add	r3, sp, #124	; 0x7c
  40285a:	2d07      	cmp	r5, #7
  40285c:	9425      	str	r4, [sp, #148]	; 0x94
  40285e:	9524      	str	r5, [sp, #144]	; 0x90
  402860:	f8c9 3000 	str.w	r3, [r9]
  402864:	f77f ace8 	ble.w	402238 <_svfprintf_r+0x51c>
  402868:	aa23      	add	r2, sp, #140	; 0x8c
  40286a:	9909      	ldr	r1, [sp, #36]	; 0x24
  40286c:	980a      	ldr	r0, [sp, #40]	; 0x28
  40286e:	f002 ffe1 	bl	405834 <__ssprint_r>
  402872:	2800      	cmp	r0, #0
  402874:	f47f ab4b 	bne.w	401f0e <_svfprintf_r+0x1f2>
  402878:	9c25      	ldr	r4, [sp, #148]	; 0x94
  40287a:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  40287e:	e4dd      	b.n	40223c <_svfprintf_r+0x520>
  402880:	aa23      	add	r2, sp, #140	; 0x8c
  402882:	9909      	ldr	r1, [sp, #36]	; 0x24
  402884:	980a      	ldr	r0, [sp, #40]	; 0x28
  402886:	f002 ffd5 	bl	405834 <__ssprint_r>
  40288a:	2800      	cmp	r0, #0
  40288c:	f43f ad24 	beq.w	4022d8 <_svfprintf_r+0x5bc>
  402890:	f7ff bb3d 	b.w	401f0e <_svfprintf_r+0x1f2>
  402894:	aa23      	add	r2, sp, #140	; 0x8c
  402896:	9909      	ldr	r1, [sp, #36]	; 0x24
  402898:	980a      	ldr	r0, [sp, #40]	; 0x28
  40289a:	f002 ffcb 	bl	405834 <__ssprint_r>
  40289e:	2800      	cmp	r0, #0
  4028a0:	f47f ab35 	bne.w	401f0e <_svfprintf_r+0x1f2>
  4028a4:	9c25      	ldr	r4, [sp, #148]	; 0x94
  4028a6:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  4028aa:	e4b4      	b.n	402216 <_svfprintf_r+0x4fa>
  4028ac:	aa23      	add	r2, sp, #140	; 0x8c
  4028ae:	9909      	ldr	r1, [sp, #36]	; 0x24
  4028b0:	980a      	ldr	r0, [sp, #40]	; 0x28
  4028b2:	f002 ffbf 	bl	405834 <__ssprint_r>
  4028b6:	2800      	cmp	r0, #0
  4028b8:	f47f ab29 	bne.w	401f0e <_svfprintf_r+0x1f2>
  4028bc:	9c25      	ldr	r4, [sp, #148]	; 0x94
  4028be:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  4028c2:	e455      	b.n	402170 <_svfprintf_r+0x454>
  4028c4:	aa23      	add	r2, sp, #140	; 0x8c
  4028c6:	9909      	ldr	r1, [sp, #36]	; 0x24
  4028c8:	980a      	ldr	r0, [sp, #40]	; 0x28
  4028ca:	f002 ffb3 	bl	405834 <__ssprint_r>
  4028ce:	2800      	cmp	r0, #0
  4028d0:	f47f ab1d 	bne.w	401f0e <_svfprintf_r+0x1f2>
  4028d4:	9c25      	ldr	r4, [sp, #148]	; 0x94
  4028d6:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  4028da:	e459      	b.n	402190 <_svfprintf_r+0x474>
  4028dc:	f1bb 0f00 	cmp.w	fp, #0
  4028e0:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
  4028e4:	f2c0 82d8 	blt.w	402e98 <_svfprintf_r+0x117c>
  4028e8:	f022 0380 	bic.w	r3, r2, #128	; 0x80
  4028ec:	9307      	str	r3, [sp, #28]
  4028ee:	ea54 0305 	orrs.w	r3, r4, r5
  4028f2:	f47f adcb 	bne.w	40248c <_svfprintf_r+0x770>
  4028f6:	f1bb 0f00 	cmp.w	fp, #0
  4028fa:	f43f ae8d 	beq.w	402618 <_svfprintf_r+0x8fc>
  4028fe:	2700      	movs	r7, #0
  402900:	e6b8      	b.n	402674 <_svfprintf_r+0x958>
  402902:	9d1d      	ldr	r5, [sp, #116]	; 0x74
  402904:	2d00      	cmp	r5, #0
  402906:	f340 82ca 	ble.w	402e9e <_svfprintf_r+0x1182>
  40290a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  40290c:	9a12      	ldr	r2, [sp, #72]	; 0x48
  40290e:	4293      	cmp	r3, r2
  402910:	bfa8      	it	ge
  402912:	4613      	movge	r3, r2
  402914:	2b00      	cmp	r3, #0
  402916:	461d      	mov	r5, r3
  402918:	dd0d      	ble.n	402936 <_svfprintf_r+0xc1a>
  40291a:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40291c:	f8c9 6000 	str.w	r6, [r9]
  402920:	3301      	adds	r3, #1
  402922:	442c      	add	r4, r5
  402924:	2b07      	cmp	r3, #7
  402926:	9425      	str	r4, [sp, #148]	; 0x94
  402928:	f8c9 5004 	str.w	r5, [r9, #4]
  40292c:	9324      	str	r3, [sp, #144]	; 0x90
  40292e:	f300 839c 	bgt.w	40306a <_svfprintf_r+0x134e>
  402932:	f109 0908 	add.w	r9, r9, #8
  402936:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  402938:	2d00      	cmp	r5, #0
  40293a:	bfa8      	it	ge
  40293c:	1b5b      	subge	r3, r3, r5
  40293e:	2b00      	cmp	r3, #0
  402940:	461d      	mov	r5, r3
  402942:	f340 80f6 	ble.w	402b32 <_svfprintf_r+0xe16>
  402946:	4aba      	ldr	r2, [pc, #744]	; (402c30 <_svfprintf_r+0xf14>)
  402948:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40294a:	920f      	str	r2, [sp, #60]	; 0x3c
  40294c:	2d10      	cmp	r5, #16
  40294e:	f340 828a 	ble.w	402e66 <_svfprintf_r+0x114a>
  402952:	4622      	mov	r2, r4
  402954:	2710      	movs	r7, #16
  402956:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
  40295a:	9c09      	ldr	r4, [sp, #36]	; 0x24
  40295c:	e005      	b.n	40296a <_svfprintf_r+0xc4e>
  40295e:	f109 0908 	add.w	r9, r9, #8
  402962:	3d10      	subs	r5, #16
  402964:	2d10      	cmp	r5, #16
  402966:	f340 827d 	ble.w	402e64 <_svfprintf_r+0x1148>
  40296a:	3301      	adds	r3, #1
  40296c:	3210      	adds	r2, #16
  40296e:	2b07      	cmp	r3, #7
  402970:	9225      	str	r2, [sp, #148]	; 0x94
  402972:	9324      	str	r3, [sp, #144]	; 0x90
  402974:	f8c9 a000 	str.w	sl, [r9]
  402978:	f8c9 7004 	str.w	r7, [r9, #4]
  40297c:	ddef      	ble.n	40295e <_svfprintf_r+0xc42>
  40297e:	aa23      	add	r2, sp, #140	; 0x8c
  402980:	4621      	mov	r1, r4
  402982:	4658      	mov	r0, fp
  402984:	f002 ff56 	bl	405834 <__ssprint_r>
  402988:	2800      	cmp	r0, #0
  40298a:	f47f aac0 	bne.w	401f0e <_svfprintf_r+0x1f2>
  40298e:	9a25      	ldr	r2, [sp, #148]	; 0x94
  402990:	9b24      	ldr	r3, [sp, #144]	; 0x90
  402992:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  402996:	e7e4      	b.n	402962 <_svfprintf_r+0xc46>
  402998:	aa23      	add	r2, sp, #140	; 0x8c
  40299a:	9909      	ldr	r1, [sp, #36]	; 0x24
  40299c:	980a      	ldr	r0, [sp, #40]	; 0x28
  40299e:	f002 ff49 	bl	405834 <__ssprint_r>
  4029a2:	2800      	cmp	r0, #0
  4029a4:	f47f aab3 	bne.w	401f0e <_svfprintf_r+0x1f2>
  4029a8:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  4029ac:	9c25      	ldr	r4, [sp, #148]	; 0x94
  4029ae:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  4029b2:	f7ff bbcd 	b.w	402150 <_svfprintf_r+0x434>
  4029b6:	1e5e      	subs	r6, r3, #1
  4029b8:	2e00      	cmp	r6, #0
  4029ba:	f77f af48 	ble.w	40284e <_svfprintf_r+0xb32>
  4029be:	4b9c      	ldr	r3, [pc, #624]	; (402c30 <_svfprintf_r+0xf14>)
  4029c0:	930f      	str	r3, [sp, #60]	; 0x3c
  4029c2:	2e10      	cmp	r6, #16
  4029c4:	dd2c      	ble.n	402a20 <_svfprintf_r+0xd04>
  4029c6:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
  4029ca:	2710      	movs	r7, #16
  4029cc:	46b0      	mov	r8, r6
  4029ce:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
  4029d2:	9e09      	ldr	r6, [sp, #36]	; 0x24
  4029d4:	e006      	b.n	4029e4 <_svfprintf_r+0xcc8>
  4029d6:	f1a8 0810 	sub.w	r8, r8, #16
  4029da:	f1b8 0f10 	cmp.w	r8, #16
  4029de:	f109 0908 	add.w	r9, r9, #8
  4029e2:	dd1a      	ble.n	402a1a <_svfprintf_r+0xcfe>
  4029e4:	3501      	adds	r5, #1
  4029e6:	3410      	adds	r4, #16
  4029e8:	2d07      	cmp	r5, #7
  4029ea:	9425      	str	r4, [sp, #148]	; 0x94
  4029ec:	9524      	str	r5, [sp, #144]	; 0x90
  4029ee:	f8c9 a000 	str.w	sl, [r9]
  4029f2:	f8c9 7004 	str.w	r7, [r9, #4]
  4029f6:	ddee      	ble.n	4029d6 <_svfprintf_r+0xcba>
  4029f8:	aa23      	add	r2, sp, #140	; 0x8c
  4029fa:	4631      	mov	r1, r6
  4029fc:	4658      	mov	r0, fp
  4029fe:	f002 ff19 	bl	405834 <__ssprint_r>
  402a02:	2800      	cmp	r0, #0
  402a04:	f47f aa83 	bne.w	401f0e <_svfprintf_r+0x1f2>
  402a08:	f1a8 0810 	sub.w	r8, r8, #16
  402a0c:	f1b8 0f10 	cmp.w	r8, #16
  402a10:	9c25      	ldr	r4, [sp, #148]	; 0x94
  402a12:	9d24      	ldr	r5, [sp, #144]	; 0x90
  402a14:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  402a18:	dce4      	bgt.n	4029e4 <_svfprintf_r+0xcc8>
  402a1a:	4646      	mov	r6, r8
  402a1c:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
  402a20:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  402a22:	3501      	adds	r5, #1
  402a24:	4434      	add	r4, r6
  402a26:	2d07      	cmp	r5, #7
  402a28:	9425      	str	r4, [sp, #148]	; 0x94
  402a2a:	9524      	str	r5, [sp, #144]	; 0x90
  402a2c:	e889 0048 	stmia.w	r9, {r3, r6}
  402a30:	f77f af0b 	ble.w	40284a <_svfprintf_r+0xb2e>
  402a34:	aa23      	add	r2, sp, #140	; 0x8c
  402a36:	9909      	ldr	r1, [sp, #36]	; 0x24
  402a38:	980a      	ldr	r0, [sp, #40]	; 0x28
  402a3a:	f002 fefb 	bl	405834 <__ssprint_r>
  402a3e:	2800      	cmp	r0, #0
  402a40:	f47f aa65 	bne.w	401f0e <_svfprintf_r+0x1f2>
  402a44:	9c25      	ldr	r4, [sp, #148]	; 0x94
  402a46:	9d24      	ldr	r5, [sp, #144]	; 0x90
  402a48:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  402a4c:	e6ff      	b.n	40284e <_svfprintf_r+0xb32>
  402a4e:	9907      	ldr	r1, [sp, #28]
  402a50:	f011 0210 	ands.w	r2, r1, #16
  402a54:	f000 8108 	beq.w	402c68 <_svfprintf_r+0xf4c>
  402a58:	980e      	ldr	r0, [sp, #56]	; 0x38
  402a5a:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
  402a5e:	f1bb 0f00 	cmp.w	fp, #0
  402a62:	6804      	ldr	r4, [r0, #0]
  402a64:	f100 0704 	add.w	r7, r0, #4
  402a68:	f04f 0500 	mov.w	r5, #0
  402a6c:	db26      	blt.n	402abc <_svfprintf_r+0xda0>
  402a6e:	460a      	mov	r2, r1
  402a70:	f022 0280 	bic.w	r2, r2, #128	; 0x80
  402a74:	9207      	str	r2, [sp, #28]
  402a76:	ea54 0205 	orrs.w	r2, r4, r5
  402a7a:	970e      	str	r7, [sp, #56]	; 0x38
  402a7c:	461f      	mov	r7, r3
  402a7e:	f47f aaef 	bne.w	402060 <_svfprintf_r+0x344>
  402a82:	e4c8      	b.n	402416 <_svfprintf_r+0x6fa>
  402a84:	9b07      	ldr	r3, [sp, #28]
  402a86:	06d9      	lsls	r1, r3, #27
  402a88:	d42a      	bmi.n	402ae0 <_svfprintf_r+0xdc4>
  402a8a:	9b07      	ldr	r3, [sp, #28]
  402a8c:	065a      	lsls	r2, r3, #25
  402a8e:	d527      	bpl.n	402ae0 <_svfprintf_r+0xdc4>
  402a90:	990e      	ldr	r1, [sp, #56]	; 0x38
  402a92:	f9b1 4000 	ldrsh.w	r4, [r1]
  402a96:	3104      	adds	r1, #4
  402a98:	17e5      	asrs	r5, r4, #31
  402a9a:	4622      	mov	r2, r4
  402a9c:	462b      	mov	r3, r5
  402a9e:	910e      	str	r1, [sp, #56]	; 0x38
  402aa0:	f7ff bacb 	b.w	40203a <_svfprintf_r+0x31e>
  402aa4:	990e      	ldr	r1, [sp, #56]	; 0x38
  402aa6:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
  402aaa:	f1bb 0f00 	cmp.w	fp, #0
  402aae:	680c      	ldr	r4, [r1, #0]
  402ab0:	f101 0704 	add.w	r7, r1, #4
  402ab4:	f04f 0500 	mov.w	r5, #0
  402ab8:	f280 8247 	bge.w	402f4a <_svfprintf_r+0x122e>
  402abc:	970e      	str	r7, [sp, #56]	; 0x38
  402abe:	461f      	mov	r7, r3
  402ac0:	ea54 0305 	orrs.w	r3, r4, r5
  402ac4:	f47f aacc 	bne.w	402060 <_svfprintf_r+0x344>
  402ac8:	e4aa      	b.n	402420 <_svfprintf_r+0x704>
  402aca:	3301      	adds	r3, #1
  402acc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  402ace:	9324      	str	r3, [sp, #144]	; 0x90
  402ad0:	442c      	add	r4, r5
  402ad2:	2b07      	cmp	r3, #7
  402ad4:	9425      	str	r4, [sp, #148]	; 0x94
  402ad6:	e889 0024 	stmia.w	r9, {r2, r5}
  402ada:	f77f abad 	ble.w	402238 <_svfprintf_r+0x51c>
  402ade:	e6c3      	b.n	402868 <_svfprintf_r+0xb4c>
  402ae0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  402ae2:	6814      	ldr	r4, [r2, #0]
  402ae4:	4613      	mov	r3, r2
  402ae6:	3304      	adds	r3, #4
  402ae8:	17e5      	asrs	r5, r4, #31
  402aea:	4622      	mov	r2, r4
  402aec:	930e      	str	r3, [sp, #56]	; 0x38
  402aee:	2a00      	cmp	r2, #0
  402af0:	462b      	mov	r3, r5
  402af2:	f173 0300 	sbcs.w	r3, r3, #0
  402af6:	f6bf aaa5 	bge.w	402044 <_svfprintf_r+0x328>
  402afa:	4264      	negs	r4, r4
  402afc:	f04f 072d 	mov.w	r7, #45	; 0x2d
  402b00:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
  402b04:	f1bb 0f00 	cmp.w	fp, #0
  402b08:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
  402b0c:	f6ff aaa8 	blt.w	402060 <_svfprintf_r+0x344>
  402b10:	9b07      	ldr	r3, [sp, #28]
  402b12:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  402b16:	9307      	str	r3, [sp, #28]
  402b18:	f7ff baa2 	b.w	402060 <_svfprintf_r+0x344>
  402b1c:	aa23      	add	r2, sp, #140	; 0x8c
  402b1e:	9909      	ldr	r1, [sp, #36]	; 0x24
  402b20:	980a      	ldr	r0, [sp, #40]	; 0x28
  402b22:	f002 fe87 	bl	405834 <__ssprint_r>
  402b26:	2800      	cmp	r0, #0
  402b28:	f47f a9f1 	bne.w	401f0e <_svfprintf_r+0x1f2>
  402b2c:	9c25      	ldr	r4, [sp, #148]	; 0x94
  402b2e:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  402b32:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  402b34:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  402b36:	4432      	add	r2, r6
  402b38:	4617      	mov	r7, r2
  402b3a:	9a12      	ldr	r2, [sp, #72]	; 0x48
  402b3c:	4293      	cmp	r3, r2
  402b3e:	db47      	blt.n	402bd0 <_svfprintf_r+0xeb4>
  402b40:	9a07      	ldr	r2, [sp, #28]
  402b42:	07d5      	lsls	r5, r2, #31
  402b44:	d444      	bmi.n	402bd0 <_svfprintf_r+0xeb4>
  402b46:	9912      	ldr	r1, [sp, #72]	; 0x48
  402b48:	440e      	add	r6, r1
  402b4a:	1bf5      	subs	r5, r6, r7
  402b4c:	1acb      	subs	r3, r1, r3
  402b4e:	429d      	cmp	r5, r3
  402b50:	bfa8      	it	ge
  402b52:	461d      	movge	r5, r3
  402b54:	2d00      	cmp	r5, #0
  402b56:	462e      	mov	r6, r5
  402b58:	dd0d      	ble.n	402b76 <_svfprintf_r+0xe5a>
  402b5a:	9a24      	ldr	r2, [sp, #144]	; 0x90
  402b5c:	f8c9 7000 	str.w	r7, [r9]
  402b60:	3201      	adds	r2, #1
  402b62:	442c      	add	r4, r5
  402b64:	2a07      	cmp	r2, #7
  402b66:	9425      	str	r4, [sp, #148]	; 0x94
  402b68:	f8c9 5004 	str.w	r5, [r9, #4]
  402b6c:	9224      	str	r2, [sp, #144]	; 0x90
  402b6e:	f300 830b 	bgt.w	403188 <_svfprintf_r+0x146c>
  402b72:	f109 0908 	add.w	r9, r9, #8
  402b76:	2e00      	cmp	r6, #0
  402b78:	bfac      	ite	ge
  402b7a:	1b9d      	subge	r5, r3, r6
  402b7c:	461d      	movlt	r5, r3
  402b7e:	2d00      	cmp	r5, #0
  402b80:	f77f ab5c 	ble.w	40223c <_svfprintf_r+0x520>
  402b84:	4a2a      	ldr	r2, [pc, #168]	; (402c30 <_svfprintf_r+0xf14>)
  402b86:	9b24      	ldr	r3, [sp, #144]	; 0x90
  402b88:	920f      	str	r2, [sp, #60]	; 0x3c
  402b8a:	2d10      	cmp	r5, #16
  402b8c:	dd9d      	ble.n	402aca <_svfprintf_r+0xdae>
  402b8e:	2610      	movs	r6, #16
  402b90:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  402b92:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
  402b96:	e004      	b.n	402ba2 <_svfprintf_r+0xe86>
  402b98:	f109 0908 	add.w	r9, r9, #8
  402b9c:	3d10      	subs	r5, #16
  402b9e:	2d10      	cmp	r5, #16
  402ba0:	dd93      	ble.n	402aca <_svfprintf_r+0xdae>
  402ba2:	3301      	adds	r3, #1
  402ba4:	3410      	adds	r4, #16
  402ba6:	2b07      	cmp	r3, #7
  402ba8:	9425      	str	r4, [sp, #148]	; 0x94
  402baa:	9324      	str	r3, [sp, #144]	; 0x90
  402bac:	f8c9 a000 	str.w	sl, [r9]
  402bb0:	f8c9 6004 	str.w	r6, [r9, #4]
  402bb4:	ddf0      	ble.n	402b98 <_svfprintf_r+0xe7c>
  402bb6:	aa23      	add	r2, sp, #140	; 0x8c
  402bb8:	4659      	mov	r1, fp
  402bba:	4638      	mov	r0, r7
  402bbc:	f002 fe3a 	bl	405834 <__ssprint_r>
  402bc0:	2800      	cmp	r0, #0
  402bc2:	f47f a9a4 	bne.w	401f0e <_svfprintf_r+0x1f2>
  402bc6:	9c25      	ldr	r4, [sp, #148]	; 0x94
  402bc8:	9b24      	ldr	r3, [sp, #144]	; 0x90
  402bca:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  402bce:	e7e5      	b.n	402b9c <_svfprintf_r+0xe80>
  402bd0:	9a24      	ldr	r2, [sp, #144]	; 0x90
  402bd2:	9816      	ldr	r0, [sp, #88]	; 0x58
  402bd4:	9917      	ldr	r1, [sp, #92]	; 0x5c
  402bd6:	f8c9 1000 	str.w	r1, [r9]
  402bda:	3201      	adds	r2, #1
  402bdc:	4404      	add	r4, r0
  402bde:	2a07      	cmp	r2, #7
  402be0:	9425      	str	r4, [sp, #148]	; 0x94
  402be2:	f8c9 0004 	str.w	r0, [r9, #4]
  402be6:	9224      	str	r2, [sp, #144]	; 0x90
  402be8:	f300 82a9 	bgt.w	40313e <_svfprintf_r+0x1422>
  402bec:	f109 0908 	add.w	r9, r9, #8
  402bf0:	e7a9      	b.n	402b46 <_svfprintf_r+0xe2a>
  402bf2:	9b07      	ldr	r3, [sp, #28]
  402bf4:	07d8      	lsls	r0, r3, #31
  402bf6:	f53f adf4 	bmi.w	4027e2 <_svfprintf_r+0xac6>
  402bfa:	3501      	adds	r5, #1
  402bfc:	3401      	adds	r4, #1
  402bfe:	2301      	movs	r3, #1
  402c00:	2d07      	cmp	r5, #7
  402c02:	9425      	str	r4, [sp, #148]	; 0x94
  402c04:	9524      	str	r5, [sp, #144]	; 0x90
  402c06:	f8c9 6000 	str.w	r6, [r9]
  402c0a:	f8c9 3004 	str.w	r3, [r9, #4]
  402c0e:	f77f ae1c 	ble.w	40284a <_svfprintf_r+0xb2e>
  402c12:	e70f      	b.n	402a34 <_svfprintf_r+0xd18>
  402c14:	aa23      	add	r2, sp, #140	; 0x8c
  402c16:	9909      	ldr	r1, [sp, #36]	; 0x24
  402c18:	980a      	ldr	r0, [sp, #40]	; 0x28
  402c1a:	f002 fe0b 	bl	405834 <__ssprint_r>
  402c1e:	2800      	cmp	r0, #0
  402c20:	f47f a975 	bne.w	401f0e <_svfprintf_r+0x1f2>
  402c24:	9c25      	ldr	r4, [sp, #148]	; 0x94
  402c26:	9d24      	ldr	r5, [sp, #144]	; 0x90
  402c28:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  402c2c:	e5e7      	b.n	4027fe <_svfprintf_r+0xae2>
  402c2e:	bf00      	nop
  402c30:	00406e08 	.word	0x00406e08
  402c34:	aa23      	add	r2, sp, #140	; 0x8c
  402c36:	9909      	ldr	r1, [sp, #36]	; 0x24
  402c38:	980a      	ldr	r0, [sp, #40]	; 0x28
  402c3a:	f002 fdfb 	bl	405834 <__ssprint_r>
  402c3e:	2800      	cmp	r0, #0
  402c40:	f47f a965 	bne.w	401f0e <_svfprintf_r+0x1f2>
  402c44:	9c25      	ldr	r4, [sp, #148]	; 0x94
  402c46:	9d24      	ldr	r5, [sp, #144]	; 0x90
  402c48:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  402c4c:	e5e6      	b.n	40281c <_svfprintf_r+0xb00>
  402c4e:	aa23      	add	r2, sp, #140	; 0x8c
  402c50:	9909      	ldr	r1, [sp, #36]	; 0x24
  402c52:	980a      	ldr	r0, [sp, #40]	; 0x28
  402c54:	f002 fdee 	bl	405834 <__ssprint_r>
  402c58:	2800      	cmp	r0, #0
  402c5a:	f47f a958 	bne.w	401f0e <_svfprintf_r+0x1f2>
  402c5e:	9c25      	ldr	r4, [sp, #148]	; 0x94
  402c60:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  402c64:	f7ff ba98 	b.w	402198 <_svfprintf_r+0x47c>
  402c68:	9907      	ldr	r1, [sp, #28]
  402c6a:	f011 0340 	ands.w	r3, r1, #64	; 0x40
  402c6e:	f43f af19 	beq.w	402aa4 <_svfprintf_r+0xd88>
  402c72:	980e      	ldr	r0, [sp, #56]	; 0x38
  402c74:	f88d 206f 	strb.w	r2, [sp, #111]	; 0x6f
  402c78:	f1bb 0f00 	cmp.w	fp, #0
  402c7c:	8804      	ldrh	r4, [r0, #0]
  402c7e:	f100 0704 	add.w	r7, r0, #4
  402c82:	f04f 0500 	mov.w	r5, #0
  402c86:	f2c0 81b9 	blt.w	402ffc <_svfprintf_r+0x12e0>
  402c8a:	f021 0380 	bic.w	r3, r1, #128	; 0x80
  402c8e:	9307      	str	r3, [sp, #28]
  402c90:	ea54 0305 	orrs.w	r3, r4, r5
  402c94:	970e      	str	r7, [sp, #56]	; 0x38
  402c96:	4617      	mov	r7, r2
  402c98:	f47f a9e2 	bne.w	402060 <_svfprintf_r+0x344>
  402c9c:	f7ff bbbb 	b.w	402416 <_svfprintf_r+0x6fa>
  402ca0:	9c14      	ldr	r4, [sp, #80]	; 0x50
  402ca2:	4622      	mov	r2, r4
  402ca4:	4620      	mov	r0, r4
  402ca6:	9c15      	ldr	r4, [sp, #84]	; 0x54
  402ca8:	4623      	mov	r3, r4
  402caa:	4621      	mov	r1, r4
  402cac:	f003 fb16 	bl	4062dc <__aeabi_dcmpun>
  402cb0:	2800      	cmp	r0, #0
  402cb2:	f040 8317 	bne.w	4032e4 <_svfprintf_r+0x15c8>
  402cb6:	9b11      	ldr	r3, [sp, #68]	; 0x44
  402cb8:	f1bb 3fff 	cmp.w	fp, #4294967295
  402cbc:	f023 0320 	bic.w	r3, r3, #32
  402cc0:	930d      	str	r3, [sp, #52]	; 0x34
  402cc2:	f000 8270 	beq.w	4031a6 <_svfprintf_r+0x148a>
  402cc6:	2b47      	cmp	r3, #71	; 0x47
  402cc8:	f000 8192 	beq.w	402ff0 <_svfprintf_r+0x12d4>
  402ccc:	9b07      	ldr	r3, [sp, #28]
  402cce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  402cd2:	9310      	str	r3, [sp, #64]	; 0x40
  402cd4:	9b15      	ldr	r3, [sp, #84]	; 0x54
  402cd6:	1e1f      	subs	r7, r3, #0
  402cd8:	9b14      	ldr	r3, [sp, #80]	; 0x50
  402cda:	9308      	str	r3, [sp, #32]
  402cdc:	bfbb      	ittet	lt
  402cde:	463b      	movlt	r3, r7
  402ce0:	f103 4700 	addlt.w	r7, r3, #2147483648	; 0x80000000
  402ce4:	2300      	movge	r3, #0
  402ce6:	232d      	movlt	r3, #45	; 0x2d
  402ce8:	930f      	str	r3, [sp, #60]	; 0x3c
  402cea:	9b11      	ldr	r3, [sp, #68]	; 0x44
  402cec:	2b66      	cmp	r3, #102	; 0x66
  402cee:	f000 825d 	beq.w	4031ac <_svfprintf_r+0x1490>
  402cf2:	2b46      	cmp	r3, #70	; 0x46
  402cf4:	f000 8151 	beq.w	402f9a <_svfprintf_r+0x127e>
  402cf8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  402cfa:	9a08      	ldr	r2, [sp, #32]
  402cfc:	2b45      	cmp	r3, #69	; 0x45
  402cfe:	a821      	add	r0, sp, #132	; 0x84
  402d00:	a91e      	add	r1, sp, #120	; 0x78
  402d02:	bf0c      	ite	eq
  402d04:	f10b 0501 	addeq.w	r5, fp, #1
  402d08:	465d      	movne	r5, fp
  402d0a:	9004      	str	r0, [sp, #16]
  402d0c:	9103      	str	r1, [sp, #12]
  402d0e:	a81d      	add	r0, sp, #116	; 0x74
  402d10:	2102      	movs	r1, #2
  402d12:	463b      	mov	r3, r7
  402d14:	9002      	str	r0, [sp, #8]
  402d16:	9501      	str	r5, [sp, #4]
  402d18:	9100      	str	r1, [sp, #0]
  402d1a:	980a      	ldr	r0, [sp, #40]	; 0x28
  402d1c:	f000 fbf0 	bl	403500 <_dtoa_r>
  402d20:	9b11      	ldr	r3, [sp, #68]	; 0x44
  402d22:	2b67      	cmp	r3, #103	; 0x67
  402d24:	4606      	mov	r6, r0
  402d26:	f040 8290 	bne.w	40324a <_svfprintf_r+0x152e>
  402d2a:	9b07      	ldr	r3, [sp, #28]
  402d2c:	07da      	lsls	r2, r3, #31
  402d2e:	f140 82af 	bpl.w	403290 <_svfprintf_r+0x1574>
  402d32:	1974      	adds	r4, r6, r5
  402d34:	9808      	ldr	r0, [sp, #32]
  402d36:	4639      	mov	r1, r7
  402d38:	2200      	movs	r2, #0
  402d3a:	2300      	movs	r3, #0
  402d3c:	f003 fa9c 	bl	406278 <__aeabi_dcmpeq>
  402d40:	2800      	cmp	r0, #0
  402d42:	f040 8190 	bne.w	403066 <_svfprintf_r+0x134a>
  402d46:	9b21      	ldr	r3, [sp, #132]	; 0x84
  402d48:	429c      	cmp	r4, r3
  402d4a:	d906      	bls.n	402d5a <_svfprintf_r+0x103e>
  402d4c:	2130      	movs	r1, #48	; 0x30
  402d4e:	1c5a      	adds	r2, r3, #1
  402d50:	9221      	str	r2, [sp, #132]	; 0x84
  402d52:	7019      	strb	r1, [r3, #0]
  402d54:	9b21      	ldr	r3, [sp, #132]	; 0x84
  402d56:	429c      	cmp	r4, r3
  402d58:	d8f9      	bhi.n	402d4e <_svfprintf_r+0x1032>
  402d5a:	1b9b      	subs	r3, r3, r6
  402d5c:	9312      	str	r3, [sp, #72]	; 0x48
  402d5e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  402d60:	2b47      	cmp	r3, #71	; 0x47
  402d62:	f000 8179 	beq.w	403058 <_svfprintf_r+0x133c>
  402d66:	9b11      	ldr	r3, [sp, #68]	; 0x44
  402d68:	2b65      	cmp	r3, #101	; 0x65
  402d6a:	f340 827d 	ble.w	403268 <_svfprintf_r+0x154c>
  402d6e:	9b11      	ldr	r3, [sp, #68]	; 0x44
  402d70:	2b66      	cmp	r3, #102	; 0x66
  402d72:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  402d74:	9313      	str	r3, [sp, #76]	; 0x4c
  402d76:	f000 825b 	beq.w	403230 <_svfprintf_r+0x1514>
  402d7a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  402d7c:	9912      	ldr	r1, [sp, #72]	; 0x48
  402d7e:	428a      	cmp	r2, r1
  402d80:	f2c0 8230 	blt.w	4031e4 <_svfprintf_r+0x14c8>
  402d84:	9b07      	ldr	r3, [sp, #28]
  402d86:	07d9      	lsls	r1, r3, #31
  402d88:	f100 8284 	bmi.w	403294 <_svfprintf_r+0x1578>
  402d8c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
  402d90:	920d      	str	r2, [sp, #52]	; 0x34
  402d92:	2267      	movs	r2, #103	; 0x67
  402d94:	9211      	str	r2, [sp, #68]	; 0x44
  402d96:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  402d98:	2a00      	cmp	r2, #0
  402d9a:	f040 8153 	bne.w	403044 <_svfprintf_r+0x1328>
  402d9e:	9308      	str	r3, [sp, #32]
  402da0:	9b10      	ldr	r3, [sp, #64]	; 0x40
  402da2:	9307      	str	r3, [sp, #28]
  402da4:	4693      	mov	fp, r2
  402da6:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  402daa:	f7ff b97d 	b.w	4020a8 <_svfprintf_r+0x38c>
  402dae:	9907      	ldr	r1, [sp, #28]
  402db0:	f011 0340 	ands.w	r3, r1, #64	; 0x40
  402db4:	d015      	beq.n	402de2 <_svfprintf_r+0x10c6>
  402db6:	980e      	ldr	r0, [sp, #56]	; 0x38
  402db8:	f88d 206f 	strb.w	r2, [sp, #111]	; 0x6f
  402dbc:	f1bb 0f00 	cmp.w	fp, #0
  402dc0:	8804      	ldrh	r4, [r0, #0]
  402dc2:	f100 0704 	add.w	r7, r0, #4
  402dc6:	f04f 0500 	mov.w	r5, #0
  402dca:	db16      	blt.n	402dfa <_svfprintf_r+0x10de>
  402dcc:	f021 0380 	bic.w	r3, r1, #128	; 0x80
  402dd0:	9307      	str	r3, [sp, #28]
  402dd2:	ea54 0305 	orrs.w	r3, r4, r5
  402dd6:	970e      	str	r7, [sp, #56]	; 0x38
  402dd8:	f43f ac3a 	beq.w	402650 <_svfprintf_r+0x934>
  402ddc:	4617      	mov	r7, r2
  402dde:	f7ff b8c2 	b.w	401f66 <_svfprintf_r+0x24a>
  402de2:	990e      	ldr	r1, [sp, #56]	; 0x38
  402de4:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
  402de8:	f1bb 0f00 	cmp.w	fp, #0
  402dec:	680c      	ldr	r4, [r1, #0]
  402dee:	f101 0704 	add.w	r7, r1, #4
  402df2:	f04f 0500 	mov.w	r5, #0
  402df6:	f280 80a5 	bge.w	402f44 <_svfprintf_r+0x1228>
  402dfa:	970e      	str	r7, [sp, #56]	; 0x38
  402dfc:	2700      	movs	r7, #0
  402dfe:	f7ff b8b2 	b.w	401f66 <_svfprintf_r+0x24a>
  402e02:	9b07      	ldr	r3, [sp, #28]
  402e04:	06df      	lsls	r7, r3, #27
  402e06:	d40b      	bmi.n	402e20 <_svfprintf_r+0x1104>
  402e08:	9b07      	ldr	r3, [sp, #28]
  402e0a:	065e      	lsls	r6, r3, #25
  402e0c:	d508      	bpl.n	402e20 <_svfprintf_r+0x1104>
  402e0e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  402e10:	6813      	ldr	r3, [r2, #0]
  402e12:	3204      	adds	r2, #4
  402e14:	920e      	str	r2, [sp, #56]	; 0x38
  402e16:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
  402e1a:	801a      	strh	r2, [r3, #0]
  402e1c:	f7fe bfa4 	b.w	401d68 <_svfprintf_r+0x4c>
  402e20:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  402e22:	6813      	ldr	r3, [r2, #0]
  402e24:	3204      	adds	r2, #4
  402e26:	920e      	str	r2, [sp, #56]	; 0x38
  402e28:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  402e2a:	601a      	str	r2, [r3, #0]
  402e2c:	f7fe bf9c 	b.w	401d68 <_svfprintf_r+0x4c>
  402e30:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  402e32:	9b07      	ldr	r3, [sp, #28]
  402e34:	f013 0f40 	tst.w	r3, #64	; 0x40
  402e38:	4613      	mov	r3, r2
  402e3a:	f103 0304 	add.w	r3, r3, #4
  402e3e:	bf0c      	ite	eq
  402e40:	6814      	ldreq	r4, [r2, #0]
  402e42:	8814      	ldrhne	r4, [r2, #0]
  402e44:	930e      	str	r3, [sp, #56]	; 0x38
  402e46:	2500      	movs	r5, #0
  402e48:	f7ff bb02 	b.w	402450 <_svfprintf_r+0x734>
  402e4c:	2700      	movs	r7, #0
  402e4e:	45bb      	cmp	fp, r7
  402e50:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
  402e54:	f6ff ac0e 	blt.w	402674 <_svfprintf_r+0x958>
  402e58:	9b07      	ldr	r3, [sp, #28]
  402e5a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  402e5e:	9307      	str	r3, [sp, #28]
  402e60:	f7ff bbd6 	b.w	402610 <_svfprintf_r+0x8f4>
  402e64:	4614      	mov	r4, r2
  402e66:	3301      	adds	r3, #1
  402e68:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  402e6a:	9324      	str	r3, [sp, #144]	; 0x90
  402e6c:	442c      	add	r4, r5
  402e6e:	2b07      	cmp	r3, #7
  402e70:	9425      	str	r4, [sp, #148]	; 0x94
  402e72:	e889 0024 	stmia.w	r9, {r2, r5}
  402e76:	f73f ae51 	bgt.w	402b1c <_svfprintf_r+0xe00>
  402e7a:	f109 0908 	add.w	r9, r9, #8
  402e7e:	e658      	b.n	402b32 <_svfprintf_r+0xe16>
  402e80:	aa23      	add	r2, sp, #140	; 0x8c
  402e82:	9909      	ldr	r1, [sp, #36]	; 0x24
  402e84:	980a      	ldr	r0, [sp, #40]	; 0x28
  402e86:	f002 fcd5 	bl	405834 <__ssprint_r>
  402e8a:	2800      	cmp	r0, #0
  402e8c:	f47f a83f 	bne.w	401f0e <_svfprintf_r+0x1f2>
  402e90:	9c25      	ldr	r4, [sp, #148]	; 0x94
  402e92:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  402e96:	e40f      	b.n	4026b8 <_svfprintf_r+0x99c>
  402e98:	9f0e      	ldr	r7, [sp, #56]	; 0x38
  402e9a:	f7ff bbe4 	b.w	402666 <_svfprintf_r+0x94a>
  402e9e:	9b24      	ldr	r3, [sp, #144]	; 0x90
  402ea0:	4ab5      	ldr	r2, [pc, #724]	; (403178 <_svfprintf_r+0x145c>)
  402ea2:	f8c9 2000 	str.w	r2, [r9]
  402ea6:	3301      	adds	r3, #1
  402ea8:	3401      	adds	r4, #1
  402eaa:	2201      	movs	r2, #1
  402eac:	2b07      	cmp	r3, #7
  402eae:	9425      	str	r4, [sp, #148]	; 0x94
  402eb0:	9324      	str	r3, [sp, #144]	; 0x90
  402eb2:	f8c9 2004 	str.w	r2, [r9, #4]
  402eb6:	f300 808e 	bgt.w	402fd6 <_svfprintf_r+0x12ba>
  402eba:	f109 0908 	add.w	r9, r9, #8
  402ebe:	b92d      	cbnz	r5, 402ecc <_svfprintf_r+0x11b0>
  402ec0:	9b12      	ldr	r3, [sp, #72]	; 0x48
  402ec2:	b91b      	cbnz	r3, 402ecc <_svfprintf_r+0x11b0>
  402ec4:	9b07      	ldr	r3, [sp, #28]
  402ec6:	07df      	lsls	r7, r3, #31
  402ec8:	f57f a9b8 	bpl.w	40223c <_svfprintf_r+0x520>
  402ecc:	9b24      	ldr	r3, [sp, #144]	; 0x90
  402ece:	9916      	ldr	r1, [sp, #88]	; 0x58
  402ed0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
  402ed2:	f8c9 2000 	str.w	r2, [r9]
  402ed6:	3301      	adds	r3, #1
  402ed8:	440c      	add	r4, r1
  402eda:	2b07      	cmp	r3, #7
  402edc:	9425      	str	r4, [sp, #148]	; 0x94
  402ede:	f8c9 1004 	str.w	r1, [r9, #4]
  402ee2:	9324      	str	r3, [sp, #144]	; 0x90
  402ee4:	f300 81c2 	bgt.w	40326c <_svfprintf_r+0x1550>
  402ee8:	f109 0908 	add.w	r9, r9, #8
  402eec:	426d      	negs	r5, r5
  402eee:	2d00      	cmp	r5, #0
  402ef0:	f340 809b 	ble.w	40302a <_svfprintf_r+0x130e>
  402ef4:	4aa1      	ldr	r2, [pc, #644]	; (40317c <_svfprintf_r+0x1460>)
  402ef6:	920f      	str	r2, [sp, #60]	; 0x3c
  402ef8:	2d10      	cmp	r5, #16
  402efa:	f340 80c3 	ble.w	403084 <_svfprintf_r+0x1368>
  402efe:	4622      	mov	r2, r4
  402f00:	2710      	movs	r7, #16
  402f02:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
  402f06:	9c09      	ldr	r4, [sp, #36]	; 0x24
  402f08:	e005      	b.n	402f16 <_svfprintf_r+0x11fa>
  402f0a:	f109 0908 	add.w	r9, r9, #8
  402f0e:	3d10      	subs	r5, #16
  402f10:	2d10      	cmp	r5, #16
  402f12:	f340 80b6 	ble.w	403082 <_svfprintf_r+0x1366>
  402f16:	3301      	adds	r3, #1
  402f18:	3210      	adds	r2, #16
  402f1a:	2b07      	cmp	r3, #7
  402f1c:	9225      	str	r2, [sp, #148]	; 0x94
  402f1e:	9324      	str	r3, [sp, #144]	; 0x90
  402f20:	f8c9 a000 	str.w	sl, [r9]
  402f24:	f8c9 7004 	str.w	r7, [r9, #4]
  402f28:	ddef      	ble.n	402f0a <_svfprintf_r+0x11ee>
  402f2a:	aa23      	add	r2, sp, #140	; 0x8c
  402f2c:	4621      	mov	r1, r4
  402f2e:	4658      	mov	r0, fp
  402f30:	f002 fc80 	bl	405834 <__ssprint_r>
  402f34:	2800      	cmp	r0, #0
  402f36:	f47e afea 	bne.w	401f0e <_svfprintf_r+0x1f2>
  402f3a:	9a25      	ldr	r2, [sp, #148]	; 0x94
  402f3c:	9b24      	ldr	r3, [sp, #144]	; 0x90
  402f3e:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  402f42:	e7e4      	b.n	402f0e <_svfprintf_r+0x11f2>
  402f44:	9a07      	ldr	r2, [sp, #28]
  402f46:	f7ff ba38 	b.w	4023ba <_svfprintf_r+0x69e>
  402f4a:	9a07      	ldr	r2, [sp, #28]
  402f4c:	e590      	b.n	402a70 <_svfprintf_r+0xd54>
  402f4e:	9b07      	ldr	r3, [sp, #28]
  402f50:	f043 0320 	orr.w	r3, r3, #32
  402f54:	9307      	str	r3, [sp, #28]
  402f56:	f108 0801 	add.w	r8, r8, #1
  402f5a:	f898 3000 	ldrb.w	r3, [r8]
  402f5e:	f7fe bf36 	b.w	401dce <_svfprintf_r+0xb2>
  402f62:	aa23      	add	r2, sp, #140	; 0x8c
  402f64:	9909      	ldr	r1, [sp, #36]	; 0x24
  402f66:	980a      	ldr	r0, [sp, #40]	; 0x28
  402f68:	f002 fc64 	bl	405834 <__ssprint_r>
  402f6c:	2800      	cmp	r0, #0
  402f6e:	f47e afce 	bne.w	401f0e <_svfprintf_r+0x1f2>
  402f72:	9c25      	ldr	r4, [sp, #148]	; 0x94
  402f74:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  402f78:	f7ff bbb6 	b.w	4026e8 <_svfprintf_r+0x9cc>
  402f7c:	2140      	movs	r1, #64	; 0x40
  402f7e:	980a      	ldr	r0, [sp, #40]	; 0x28
  402f80:	f001 fb38 	bl	4045f4 <_malloc_r>
  402f84:	9a09      	ldr	r2, [sp, #36]	; 0x24
  402f86:	6010      	str	r0, [r2, #0]
  402f88:	6110      	str	r0, [r2, #16]
  402f8a:	2800      	cmp	r0, #0
  402f8c:	f000 81e5 	beq.w	40335a <_svfprintf_r+0x163e>
  402f90:	9a09      	ldr	r2, [sp, #36]	; 0x24
  402f92:	2340      	movs	r3, #64	; 0x40
  402f94:	6153      	str	r3, [r2, #20]
  402f96:	f7fe bed8 	b.w	401d4a <_svfprintf_r+0x2e>
  402f9a:	a821      	add	r0, sp, #132	; 0x84
  402f9c:	a91e      	add	r1, sp, #120	; 0x78
  402f9e:	9004      	str	r0, [sp, #16]
  402fa0:	9103      	str	r1, [sp, #12]
  402fa2:	a81d      	add	r0, sp, #116	; 0x74
  402fa4:	2103      	movs	r1, #3
  402fa6:	9002      	str	r0, [sp, #8]
  402fa8:	9a08      	ldr	r2, [sp, #32]
  402faa:	f8cd b004 	str.w	fp, [sp, #4]
  402fae:	463b      	mov	r3, r7
  402fb0:	9100      	str	r1, [sp, #0]
  402fb2:	980a      	ldr	r0, [sp, #40]	; 0x28
  402fb4:	f000 faa4 	bl	403500 <_dtoa_r>
  402fb8:	465d      	mov	r5, fp
  402fba:	4606      	mov	r6, r0
  402fbc:	9b11      	ldr	r3, [sp, #68]	; 0x44
  402fbe:	2b46      	cmp	r3, #70	; 0x46
  402fc0:	eb06 0405 	add.w	r4, r6, r5
  402fc4:	f47f aeb6 	bne.w	402d34 <_svfprintf_r+0x1018>
  402fc8:	7833      	ldrb	r3, [r6, #0]
  402fca:	2b30      	cmp	r3, #48	; 0x30
  402fcc:	f000 817c 	beq.w	4032c8 <_svfprintf_r+0x15ac>
  402fd0:	9d1d      	ldr	r5, [sp, #116]	; 0x74
  402fd2:	442c      	add	r4, r5
  402fd4:	e6ae      	b.n	402d34 <_svfprintf_r+0x1018>
  402fd6:	aa23      	add	r2, sp, #140	; 0x8c
  402fd8:	9909      	ldr	r1, [sp, #36]	; 0x24
  402fda:	980a      	ldr	r0, [sp, #40]	; 0x28
  402fdc:	f002 fc2a 	bl	405834 <__ssprint_r>
  402fe0:	2800      	cmp	r0, #0
  402fe2:	f47e af94 	bne.w	401f0e <_svfprintf_r+0x1f2>
  402fe6:	9d1d      	ldr	r5, [sp, #116]	; 0x74
  402fe8:	9c25      	ldr	r4, [sp, #148]	; 0x94
  402fea:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  402fee:	e766      	b.n	402ebe <_svfprintf_r+0x11a2>
  402ff0:	f1bb 0f00 	cmp.w	fp, #0
  402ff4:	bf08      	it	eq
  402ff6:	f04f 0b01 	moveq.w	fp, #1
  402ffa:	e667      	b.n	402ccc <_svfprintf_r+0xfb0>
  402ffc:	970e      	str	r7, [sp, #56]	; 0x38
  402ffe:	4617      	mov	r7, r2
  403000:	e55e      	b.n	402ac0 <_svfprintf_r+0xda4>
  403002:	4630      	mov	r0, r6
  403004:	f7fe fe1c 	bl	401c40 <strlen>
  403008:	46a3      	mov	fp, r4
  40300a:	4603      	mov	r3, r0
  40300c:	900d      	str	r0, [sp, #52]	; 0x34
  40300e:	f7ff baf4 	b.w	4025fa <_svfprintf_r+0x8de>
  403012:	aa23      	add	r2, sp, #140	; 0x8c
  403014:	9909      	ldr	r1, [sp, #36]	; 0x24
  403016:	980a      	ldr	r0, [sp, #40]	; 0x28
  403018:	f002 fc0c 	bl	405834 <__ssprint_r>
  40301c:	2800      	cmp	r0, #0
  40301e:	f47e af76 	bne.w	401f0e <_svfprintf_r+0x1f2>
  403022:	9c25      	ldr	r4, [sp, #148]	; 0x94
  403024:	9b24      	ldr	r3, [sp, #144]	; 0x90
  403026:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  40302a:	9912      	ldr	r1, [sp, #72]	; 0x48
  40302c:	f8c9 6000 	str.w	r6, [r9]
  403030:	3301      	adds	r3, #1
  403032:	440c      	add	r4, r1
  403034:	2b07      	cmp	r3, #7
  403036:	9425      	str	r4, [sp, #148]	; 0x94
  403038:	9324      	str	r3, [sp, #144]	; 0x90
  40303a:	f8c9 1004 	str.w	r1, [r9, #4]
  40303e:	f77f a8fb 	ble.w	402238 <_svfprintf_r+0x51c>
  403042:	e411      	b.n	402868 <_svfprintf_r+0xb4c>
  403044:	272d      	movs	r7, #45	; 0x2d
  403046:	9308      	str	r3, [sp, #32]
  403048:	9b10      	ldr	r3, [sp, #64]	; 0x40
  40304a:	9307      	str	r3, [sp, #28]
  40304c:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
  403050:	f04f 0b00 	mov.w	fp, #0
  403054:	f7ff b829 	b.w	4020aa <_svfprintf_r+0x38e>
  403058:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  40305a:	1cdd      	adds	r5, r3, #3
  40305c:	db1e      	blt.n	40309c <_svfprintf_r+0x1380>
  40305e:	459b      	cmp	fp, r3
  403060:	db1c      	blt.n	40309c <_svfprintf_r+0x1380>
  403062:	9313      	str	r3, [sp, #76]	; 0x4c
  403064:	e689      	b.n	402d7a <_svfprintf_r+0x105e>
  403066:	4623      	mov	r3, r4
  403068:	e677      	b.n	402d5a <_svfprintf_r+0x103e>
  40306a:	aa23      	add	r2, sp, #140	; 0x8c
  40306c:	9909      	ldr	r1, [sp, #36]	; 0x24
  40306e:	980a      	ldr	r0, [sp, #40]	; 0x28
  403070:	f002 fbe0 	bl	405834 <__ssprint_r>
  403074:	2800      	cmp	r0, #0
  403076:	f47e af4a 	bne.w	401f0e <_svfprintf_r+0x1f2>
  40307a:	9c25      	ldr	r4, [sp, #148]	; 0x94
  40307c:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  403080:	e459      	b.n	402936 <_svfprintf_r+0xc1a>
  403082:	4614      	mov	r4, r2
  403084:	3301      	adds	r3, #1
  403086:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  403088:	9324      	str	r3, [sp, #144]	; 0x90
  40308a:	442c      	add	r4, r5
  40308c:	2b07      	cmp	r3, #7
  40308e:	9425      	str	r4, [sp, #148]	; 0x94
  403090:	e889 0024 	stmia.w	r9, {r2, r5}
  403094:	dcbd      	bgt.n	403012 <_svfprintf_r+0x12f6>
  403096:	f109 0908 	add.w	r9, r9, #8
  40309a:	e7c6      	b.n	40302a <_svfprintf_r+0x130e>
  40309c:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40309e:	3a02      	subs	r2, #2
  4030a0:	9211      	str	r2, [sp, #68]	; 0x44
  4030a2:	3b01      	subs	r3, #1
  4030a4:	2b00      	cmp	r3, #0
  4030a6:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
  4030aa:	931d      	str	r3, [sp, #116]	; 0x74
  4030ac:	bfb8      	it	lt
  4030ae:	425b      	neglt	r3, r3
  4030b0:	f88d 207c 	strb.w	r2, [sp, #124]	; 0x7c
  4030b4:	bfb4      	ite	lt
  4030b6:	222d      	movlt	r2, #45	; 0x2d
  4030b8:	222b      	movge	r2, #43	; 0x2b
  4030ba:	2b09      	cmp	r3, #9
  4030bc:	f88d 207d 	strb.w	r2, [sp, #125]	; 0x7d
  4030c0:	f340 80f1 	ble.w	4032a6 <_svfprintf_r+0x158a>
  4030c4:	f10d 008b 	add.w	r0, sp, #139	; 0x8b
  4030c8:	4604      	mov	r4, r0
  4030ca:	4a2d      	ldr	r2, [pc, #180]	; (403180 <_svfprintf_r+0x1464>)
  4030cc:	fb82 2103 	smull	r2, r1, r2, r3
  4030d0:	17da      	asrs	r2, r3, #31
  4030d2:	ebc2 02a1 	rsb	r2, r2, r1, asr #2
  4030d6:	eb02 0182 	add.w	r1, r2, r2, lsl #2
  4030da:	eba3 0341 	sub.w	r3, r3, r1, lsl #1
  4030de:	f103 0130 	add.w	r1, r3, #48	; 0x30
  4030e2:	2a09      	cmp	r2, #9
  4030e4:	4613      	mov	r3, r2
  4030e6:	f804 1d01 	strb.w	r1, [r4, #-1]!
  4030ea:	dcee      	bgt.n	4030ca <_svfprintf_r+0x13ae>
  4030ec:	4621      	mov	r1, r4
  4030ee:	3330      	adds	r3, #48	; 0x30
  4030f0:	b2da      	uxtb	r2, r3
  4030f2:	f801 2d01 	strb.w	r2, [r1, #-1]!
  4030f6:	4288      	cmp	r0, r1
  4030f8:	f240 813a 	bls.w	403370 <_svfprintf_r+0x1654>
  4030fc:	f10d 017e 	add.w	r1, sp, #126	; 0x7e
  403100:	4623      	mov	r3, r4
  403102:	e001      	b.n	403108 <_svfprintf_r+0x13ec>
  403104:	f813 2b01 	ldrb.w	r2, [r3], #1
  403108:	f801 2b01 	strb.w	r2, [r1], #1
  40310c:	4298      	cmp	r0, r3
  40310e:	d1f9      	bne.n	403104 <_svfprintf_r+0x13e8>
  403110:	1c43      	adds	r3, r0, #1
  403112:	1b1b      	subs	r3, r3, r4
  403114:	f10d 027e 	add.w	r2, sp, #126	; 0x7e
  403118:	4413      	add	r3, r2
  40311a:	aa1f      	add	r2, sp, #124	; 0x7c
  40311c:	1a9b      	subs	r3, r3, r2
  40311e:	9a12      	ldr	r2, [sp, #72]	; 0x48
  403120:	9319      	str	r3, [sp, #100]	; 0x64
  403122:	2a01      	cmp	r2, #1
  403124:	4413      	add	r3, r2
  403126:	930d      	str	r3, [sp, #52]	; 0x34
  403128:	f340 80ea 	ble.w	403300 <_svfprintf_r+0x15e4>
  40312c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40312e:	9a16      	ldr	r2, [sp, #88]	; 0x58
  403130:	4413      	add	r3, r2
  403132:	2200      	movs	r2, #0
  403134:	930d      	str	r3, [sp, #52]	; 0x34
  403136:	9213      	str	r2, [sp, #76]	; 0x4c
  403138:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  40313c:	e62b      	b.n	402d96 <_svfprintf_r+0x107a>
  40313e:	aa23      	add	r2, sp, #140	; 0x8c
  403140:	9909      	ldr	r1, [sp, #36]	; 0x24
  403142:	980a      	ldr	r0, [sp, #40]	; 0x28
  403144:	f002 fb76 	bl	405834 <__ssprint_r>
  403148:	2800      	cmp	r0, #0
  40314a:	f47e aee0 	bne.w	401f0e <_svfprintf_r+0x1f2>
  40314e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  403150:	9c25      	ldr	r4, [sp, #148]	; 0x94
  403152:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  403156:	e4f6      	b.n	402b46 <_svfprintf_r+0xe2a>
  403158:	2d06      	cmp	r5, #6
  40315a:	462b      	mov	r3, r5
  40315c:	bf28      	it	cs
  40315e:	2306      	movcs	r3, #6
  403160:	930d      	str	r3, [sp, #52]	; 0x34
  403162:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  403166:	46b3      	mov	fp, r6
  403168:	970e      	str	r7, [sp, #56]	; 0x38
  40316a:	9613      	str	r6, [sp, #76]	; 0x4c
  40316c:	4637      	mov	r7, r6
  40316e:	9308      	str	r3, [sp, #32]
  403170:	4e04      	ldr	r6, [pc, #16]	; (403184 <_svfprintf_r+0x1468>)
  403172:	f7fe bf99 	b.w	4020a8 <_svfprintf_r+0x38c>
  403176:	bf00      	nop
  403178:	00406e58 	.word	0x00406e58
  40317c:	00406e08 	.word	0x00406e08
  403180:	66666667 	.word	0x66666667
  403184:	00406e50 	.word	0x00406e50
  403188:	aa23      	add	r2, sp, #140	; 0x8c
  40318a:	9909      	ldr	r1, [sp, #36]	; 0x24
  40318c:	980a      	ldr	r0, [sp, #40]	; 0x28
  40318e:	f002 fb51 	bl	405834 <__ssprint_r>
  403192:	2800      	cmp	r0, #0
  403194:	f47e aebb 	bne.w	401f0e <_svfprintf_r+0x1f2>
  403198:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  40319a:	9a12      	ldr	r2, [sp, #72]	; 0x48
  40319c:	9c25      	ldr	r4, [sp, #148]	; 0x94
  40319e:	1ad3      	subs	r3, r2, r3
  4031a0:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  4031a4:	e4e7      	b.n	402b76 <_svfprintf_r+0xe5a>
  4031a6:	f04f 0b06 	mov.w	fp, #6
  4031aa:	e58f      	b.n	402ccc <_svfprintf_r+0xfb0>
  4031ac:	a821      	add	r0, sp, #132	; 0x84
  4031ae:	a91e      	add	r1, sp, #120	; 0x78
  4031b0:	9004      	str	r0, [sp, #16]
  4031b2:	9103      	str	r1, [sp, #12]
  4031b4:	a81d      	add	r0, sp, #116	; 0x74
  4031b6:	2103      	movs	r1, #3
  4031b8:	9002      	str	r0, [sp, #8]
  4031ba:	9a08      	ldr	r2, [sp, #32]
  4031bc:	f8cd b004 	str.w	fp, [sp, #4]
  4031c0:	463b      	mov	r3, r7
  4031c2:	9100      	str	r1, [sp, #0]
  4031c4:	980a      	ldr	r0, [sp, #40]	; 0x28
  4031c6:	f000 f99b 	bl	403500 <_dtoa_r>
  4031ca:	465d      	mov	r5, fp
  4031cc:	4606      	mov	r6, r0
  4031ce:	eb00 040b 	add.w	r4, r0, fp
  4031d2:	e6f9      	b.n	402fc8 <_svfprintf_r+0x12ac>
  4031d4:	9307      	str	r3, [sp, #28]
  4031d6:	f7ff b959 	b.w	40248c <_svfprintf_r+0x770>
  4031da:	272d      	movs	r7, #45	; 0x2d
  4031dc:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
  4031e0:	f7ff b8b2 	b.w	402348 <_svfprintf_r+0x62c>
  4031e4:	9a16      	ldr	r2, [sp, #88]	; 0x58
  4031e6:	9b12      	ldr	r3, [sp, #72]	; 0x48
  4031e8:	4413      	add	r3, r2
  4031ea:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  4031ec:	930d      	str	r3, [sp, #52]	; 0x34
  4031ee:	2a00      	cmp	r2, #0
  4031f0:	dd7e      	ble.n	4032f0 <_svfprintf_r+0x15d4>
  4031f2:	2267      	movs	r2, #103	; 0x67
  4031f4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  4031f8:	9211      	str	r2, [sp, #68]	; 0x44
  4031fa:	e5cc      	b.n	402d96 <_svfprintf_r+0x107a>
  4031fc:	ea25 73e5 	bic.w	r3, r5, r5, asr #31
  403200:	970e      	str	r7, [sp, #56]	; 0x38
  403202:	9308      	str	r3, [sp, #32]
  403204:	950d      	str	r5, [sp, #52]	; 0x34
  403206:	4683      	mov	fp, r0
  403208:	9013      	str	r0, [sp, #76]	; 0x4c
  40320a:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  40320e:	f7fe bf4b 	b.w	4020a8 <_svfprintf_r+0x38c>
  403212:	9b07      	ldr	r3, [sp, #28]
  403214:	07db      	lsls	r3, r3, #31
  403216:	465f      	mov	r7, fp
  403218:	d505      	bpl.n	403226 <_svfprintf_r+0x150a>
  40321a:	ae40      	add	r6, sp, #256	; 0x100
  40321c:	2330      	movs	r3, #48	; 0x30
  40321e:	f806 3d41 	strb.w	r3, [r6, #-65]!
  403222:	f7fe bf37 	b.w	402094 <_svfprintf_r+0x378>
  403226:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
  40322a:	ae30      	add	r6, sp, #192	; 0xc0
  40322c:	f7fe bf35 	b.w	40209a <_svfprintf_r+0x37e>
  403230:	2b00      	cmp	r3, #0
  403232:	dd7d      	ble.n	403330 <_svfprintf_r+0x1614>
  403234:	f1bb 0f00 	cmp.w	fp, #0
  403238:	d13d      	bne.n	4032b6 <_svfprintf_r+0x159a>
  40323a:	9a07      	ldr	r2, [sp, #28]
  40323c:	07d4      	lsls	r4, r2, #31
  40323e:	d43a      	bmi.n	4032b6 <_svfprintf_r+0x159a>
  403240:	461a      	mov	r2, r3
  403242:	920d      	str	r2, [sp, #52]	; 0x34
  403244:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  403248:	e5a5      	b.n	402d96 <_svfprintf_r+0x107a>
  40324a:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40324c:	2b47      	cmp	r3, #71	; 0x47
  40324e:	f47f ad70 	bne.w	402d32 <_svfprintf_r+0x1016>
  403252:	9b07      	ldr	r3, [sp, #28]
  403254:	07db      	lsls	r3, r3, #31
  403256:	f53f aeb1 	bmi.w	402fbc <_svfprintf_r+0x12a0>
  40325a:	9b21      	ldr	r3, [sp, #132]	; 0x84
  40325c:	1b9b      	subs	r3, r3, r6
  40325e:	9312      	str	r3, [sp, #72]	; 0x48
  403260:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  403262:	2b47      	cmp	r3, #71	; 0x47
  403264:	f43f aef8 	beq.w	403058 <_svfprintf_r+0x133c>
  403268:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  40326a:	e71a      	b.n	4030a2 <_svfprintf_r+0x1386>
  40326c:	aa23      	add	r2, sp, #140	; 0x8c
  40326e:	9909      	ldr	r1, [sp, #36]	; 0x24
  403270:	980a      	ldr	r0, [sp, #40]	; 0x28
  403272:	f002 fadf 	bl	405834 <__ssprint_r>
  403276:	2800      	cmp	r0, #0
  403278:	f47e ae49 	bne.w	401f0e <_svfprintf_r+0x1f2>
  40327c:	9d1d      	ldr	r5, [sp, #116]	; 0x74
  40327e:	9c25      	ldr	r4, [sp, #148]	; 0x94
  403280:	9b24      	ldr	r3, [sp, #144]	; 0x90
  403282:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  403286:	e631      	b.n	402eec <_svfprintf_r+0x11d0>
  403288:	46a0      	mov	r8, r4
  40328a:	2500      	movs	r5, #0
  40328c:	f7fe bda1 	b.w	401dd2 <_svfprintf_r+0xb6>
  403290:	9b21      	ldr	r3, [sp, #132]	; 0x84
  403292:	e562      	b.n	402d5a <_svfprintf_r+0x103e>
  403294:	9a16      	ldr	r2, [sp, #88]	; 0x58
  403296:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  403298:	4413      	add	r3, r2
  40329a:	2267      	movs	r2, #103	; 0x67
  40329c:	930d      	str	r3, [sp, #52]	; 0x34
  40329e:	9211      	str	r2, [sp, #68]	; 0x44
  4032a0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  4032a4:	e577      	b.n	402d96 <_svfprintf_r+0x107a>
  4032a6:	3330      	adds	r3, #48	; 0x30
  4032a8:	2230      	movs	r2, #48	; 0x30
  4032aa:	f88d 307f 	strb.w	r3, [sp, #127]	; 0x7f
  4032ae:	f88d 207e 	strb.w	r2, [sp, #126]	; 0x7e
  4032b2:	ab20      	add	r3, sp, #128	; 0x80
  4032b4:	e731      	b.n	40311a <_svfprintf_r+0x13fe>
  4032b6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  4032b8:	9a16      	ldr	r2, [sp, #88]	; 0x58
  4032ba:	189d      	adds	r5, r3, r2
  4032bc:	eb05 030b 	add.w	r3, r5, fp
  4032c0:	930d      	str	r3, [sp, #52]	; 0x34
  4032c2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  4032c6:	e566      	b.n	402d96 <_svfprintf_r+0x107a>
  4032c8:	9808      	ldr	r0, [sp, #32]
  4032ca:	4639      	mov	r1, r7
  4032cc:	2200      	movs	r2, #0
  4032ce:	2300      	movs	r3, #0
  4032d0:	f002 ffd2 	bl	406278 <__aeabi_dcmpeq>
  4032d4:	2800      	cmp	r0, #0
  4032d6:	f47f ae7b 	bne.w	402fd0 <_svfprintf_r+0x12b4>
  4032da:	f1c5 0501 	rsb	r5, r5, #1
  4032de:	951d      	str	r5, [sp, #116]	; 0x74
  4032e0:	442c      	add	r4, r5
  4032e2:	e527      	b.n	402d34 <_svfprintf_r+0x1018>
  4032e4:	4e32      	ldr	r6, [pc, #200]	; (4033b0 <_svfprintf_r+0x1694>)
  4032e6:	4b33      	ldr	r3, [pc, #204]	; (4033b4 <_svfprintf_r+0x1698>)
  4032e8:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  4032ec:	f7ff b82e 	b.w	40234c <_svfprintf_r+0x630>
  4032f0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  4032f2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  4032f4:	f1c3 0301 	rsb	r3, r3, #1
  4032f8:	441a      	add	r2, r3
  4032fa:	4613      	mov	r3, r2
  4032fc:	920d      	str	r2, [sp, #52]	; 0x34
  4032fe:	e778      	b.n	4031f2 <_svfprintf_r+0x14d6>
  403300:	9b07      	ldr	r3, [sp, #28]
  403302:	f013 0301 	ands.w	r3, r3, #1
  403306:	f47f af11 	bne.w	40312c <_svfprintf_r+0x1410>
  40330a:	9313      	str	r3, [sp, #76]	; 0x4c
  40330c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40330e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  403312:	e540      	b.n	402d96 <_svfprintf_r+0x107a>
  403314:	980e      	ldr	r0, [sp, #56]	; 0x38
  403316:	f898 3001 	ldrb.w	r3, [r8, #1]
  40331a:	6805      	ldr	r5, [r0, #0]
  40331c:	3004      	adds	r0, #4
  40331e:	2d00      	cmp	r5, #0
  403320:	900e      	str	r0, [sp, #56]	; 0x38
  403322:	46a0      	mov	r8, r4
  403324:	f6be ad53 	bge.w	401dce <_svfprintf_r+0xb2>
  403328:	f04f 35ff 	mov.w	r5, #4294967295
  40332c:	f7fe bd4f 	b.w	401dce <_svfprintf_r+0xb2>
  403330:	f1bb 0f00 	cmp.w	fp, #0
  403334:	d102      	bne.n	40333c <_svfprintf_r+0x1620>
  403336:	9b07      	ldr	r3, [sp, #28]
  403338:	07d8      	lsls	r0, r3, #31
  40333a:	d507      	bpl.n	40334c <_svfprintf_r+0x1630>
  40333c:	9b16      	ldr	r3, [sp, #88]	; 0x58
  40333e:	1c5d      	adds	r5, r3, #1
  403340:	eb05 030b 	add.w	r3, r5, fp
  403344:	930d      	str	r3, [sp, #52]	; 0x34
  403346:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  40334a:	e524      	b.n	402d96 <_svfprintf_r+0x107a>
  40334c:	2301      	movs	r3, #1
  40334e:	930d      	str	r3, [sp, #52]	; 0x34
  403350:	e521      	b.n	402d96 <_svfprintf_r+0x107a>
  403352:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  403356:	f7ff b921 	b.w	40259c <_svfprintf_r+0x880>
  40335a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  40335c:	230c      	movs	r3, #12
  40335e:	6013      	str	r3, [r2, #0]
  403360:	f04f 30ff 	mov.w	r0, #4294967295
  403364:	f7fe bddc 	b.w	401f20 <_svfprintf_r+0x204>
  403368:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  40336c:	f7ff b8f9 	b.w	402562 <_svfprintf_r+0x846>
  403370:	f10d 037e 	add.w	r3, sp, #126	; 0x7e
  403374:	e6d1      	b.n	40311a <_svfprintf_r+0x13fe>
  403376:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  40337a:	f7fe bdd9 	b.w	401f30 <_svfprintf_r+0x214>
  40337e:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  403382:	f7ff b857 	b.w	402434 <_svfprintf_r+0x718>
  403386:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  40338a:	f7ff b825 	b.w	4023d8 <_svfprintf_r+0x6bc>
  40338e:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  403392:	f7ff b94c 	b.w	40262e <_svfprintf_r+0x912>
  403396:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  40339a:	f7fe bff3 	b.w	402384 <_svfprintf_r+0x668>
  40339e:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  4033a2:	f7fe bfa3 	b.w	4022ec <_svfprintf_r+0x5d0>
  4033a6:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  4033aa:	f7fe be33 	b.w	402014 <_svfprintf_r+0x2f8>
  4033ae:	bf00      	nop
  4033b0:	00406e24 	.word	0x00406e24
  4033b4:	00406e20 	.word	0x00406e20

004033b8 <register_fini>:
  4033b8:	4b02      	ldr	r3, [pc, #8]	; (4033c4 <register_fini+0xc>)
  4033ba:	b113      	cbz	r3, 4033c2 <register_fini+0xa>
  4033bc:	4802      	ldr	r0, [pc, #8]	; (4033c8 <register_fini+0x10>)
  4033be:	f000 b805 	b.w	4033cc <atexit>
  4033c2:	4770      	bx	lr
  4033c4:	00000000 	.word	0x00000000
  4033c8:	00404359 	.word	0x00404359

004033cc <atexit>:
  4033cc:	2300      	movs	r3, #0
  4033ce:	4601      	mov	r1, r0
  4033d0:	461a      	mov	r2, r3
  4033d2:	4618      	mov	r0, r3
  4033d4:	f002 baae 	b.w	405934 <__register_exitproc>

004033d8 <quorem>:
  4033d8:	6902      	ldr	r2, [r0, #16]
  4033da:	690b      	ldr	r3, [r1, #16]
  4033dc:	4293      	cmp	r3, r2
  4033de:	f300 808d 	bgt.w	4034fc <quorem+0x124>
  4033e2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4033e6:	f103 38ff 	add.w	r8, r3, #4294967295
  4033ea:	f101 0714 	add.w	r7, r1, #20
  4033ee:	f100 0b14 	add.w	fp, r0, #20
  4033f2:	f857 2028 	ldr.w	r2, [r7, r8, lsl #2]
  4033f6:	f85b 3028 	ldr.w	r3, [fp, r8, lsl #2]
  4033fa:	ea4f 0488 	mov.w	r4, r8, lsl #2
  4033fe:	b083      	sub	sp, #12
  403400:	3201      	adds	r2, #1
  403402:	fbb3 f9f2 	udiv	r9, r3, r2
  403406:	eb0b 0304 	add.w	r3, fp, r4
  40340a:	9400      	str	r4, [sp, #0]
  40340c:	eb07 0a04 	add.w	sl, r7, r4
  403410:	9301      	str	r3, [sp, #4]
  403412:	f1b9 0f00 	cmp.w	r9, #0
  403416:	d039      	beq.n	40348c <quorem+0xb4>
  403418:	2500      	movs	r5, #0
  40341a:	46bc      	mov	ip, r7
  40341c:	46de      	mov	lr, fp
  40341e:	462b      	mov	r3, r5
  403420:	f85c 6b04 	ldr.w	r6, [ip], #4
  403424:	f8de 2000 	ldr.w	r2, [lr]
  403428:	b2b4      	uxth	r4, r6
  40342a:	fb09 5504 	mla	r5, r9, r4, r5
  40342e:	0c36      	lsrs	r6, r6, #16
  403430:	0c2c      	lsrs	r4, r5, #16
  403432:	fb09 4406 	mla	r4, r9, r6, r4
  403436:	b2ad      	uxth	r5, r5
  403438:	1b5b      	subs	r3, r3, r5
  40343a:	b2a6      	uxth	r6, r4
  40343c:	fa13 f382 	uxtah	r3, r3, r2
  403440:	ebc6 4612 	rsb	r6, r6, r2, lsr #16
  403444:	eb06 4623 	add.w	r6, r6, r3, asr #16
  403448:	b29b      	uxth	r3, r3
  40344a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
  40344e:	45e2      	cmp	sl, ip
  403450:	f84e 3b04 	str.w	r3, [lr], #4
  403454:	ea4f 4514 	mov.w	r5, r4, lsr #16
  403458:	ea4f 4326 	mov.w	r3, r6, asr #16
  40345c:	d2e0      	bcs.n	403420 <quorem+0x48>
  40345e:	9b00      	ldr	r3, [sp, #0]
  403460:	f85b 3003 	ldr.w	r3, [fp, r3]
  403464:	b993      	cbnz	r3, 40348c <quorem+0xb4>
  403466:	9c01      	ldr	r4, [sp, #4]
  403468:	1f23      	subs	r3, r4, #4
  40346a:	459b      	cmp	fp, r3
  40346c:	d20c      	bcs.n	403488 <quorem+0xb0>
  40346e:	f854 3c04 	ldr.w	r3, [r4, #-4]
  403472:	b94b      	cbnz	r3, 403488 <quorem+0xb0>
  403474:	f1a4 0308 	sub.w	r3, r4, #8
  403478:	e002      	b.n	403480 <quorem+0xa8>
  40347a:	681a      	ldr	r2, [r3, #0]
  40347c:	3b04      	subs	r3, #4
  40347e:	b91a      	cbnz	r2, 403488 <quorem+0xb0>
  403480:	459b      	cmp	fp, r3
  403482:	f108 38ff 	add.w	r8, r8, #4294967295
  403486:	d3f8      	bcc.n	40347a <quorem+0xa2>
  403488:	f8c0 8010 	str.w	r8, [r0, #16]
  40348c:	4604      	mov	r4, r0
  40348e:	f001 fec9 	bl	405224 <__mcmp>
  403492:	2800      	cmp	r0, #0
  403494:	db2e      	blt.n	4034f4 <quorem+0x11c>
  403496:	f109 0901 	add.w	r9, r9, #1
  40349a:	465d      	mov	r5, fp
  40349c:	2300      	movs	r3, #0
  40349e:	f857 1b04 	ldr.w	r1, [r7], #4
  4034a2:	6828      	ldr	r0, [r5, #0]
  4034a4:	b28a      	uxth	r2, r1
  4034a6:	1a9a      	subs	r2, r3, r2
  4034a8:	0c09      	lsrs	r1, r1, #16
  4034aa:	fa12 f280 	uxtah	r2, r2, r0
  4034ae:	ebc1 4310 	rsb	r3, r1, r0, lsr #16
  4034b2:	eb03 4322 	add.w	r3, r3, r2, asr #16
  4034b6:	b291      	uxth	r1, r2
  4034b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
  4034bc:	45ba      	cmp	sl, r7
  4034be:	f845 1b04 	str.w	r1, [r5], #4
  4034c2:	ea4f 4323 	mov.w	r3, r3, asr #16
  4034c6:	d2ea      	bcs.n	40349e <quorem+0xc6>
  4034c8:	f85b 2028 	ldr.w	r2, [fp, r8, lsl #2]
  4034cc:	eb0b 0388 	add.w	r3, fp, r8, lsl #2
  4034d0:	b982      	cbnz	r2, 4034f4 <quorem+0x11c>
  4034d2:	1f1a      	subs	r2, r3, #4
  4034d4:	4593      	cmp	fp, r2
  4034d6:	d20b      	bcs.n	4034f0 <quorem+0x118>
  4034d8:	f853 2c04 	ldr.w	r2, [r3, #-4]
  4034dc:	b942      	cbnz	r2, 4034f0 <quorem+0x118>
  4034de:	3b08      	subs	r3, #8
  4034e0:	e002      	b.n	4034e8 <quorem+0x110>
  4034e2:	681a      	ldr	r2, [r3, #0]
  4034e4:	3b04      	subs	r3, #4
  4034e6:	b91a      	cbnz	r2, 4034f0 <quorem+0x118>
  4034e8:	459b      	cmp	fp, r3
  4034ea:	f108 38ff 	add.w	r8, r8, #4294967295
  4034ee:	d3f8      	bcc.n	4034e2 <quorem+0x10a>
  4034f0:	f8c4 8010 	str.w	r8, [r4, #16]
  4034f4:	4648      	mov	r0, r9
  4034f6:	b003      	add	sp, #12
  4034f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4034fc:	2000      	movs	r0, #0
  4034fe:	4770      	bx	lr

00403500 <_dtoa_r>:
  403500:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403504:	6c01      	ldr	r1, [r0, #64]	; 0x40
  403506:	b097      	sub	sp, #92	; 0x5c
  403508:	4681      	mov	r9, r0
  40350a:	9c23      	ldr	r4, [sp, #140]	; 0x8c
  40350c:	4692      	mov	sl, r2
  40350e:	469b      	mov	fp, r3
  403510:	b149      	cbz	r1, 403526 <_dtoa_r+0x26>
  403512:	6c42      	ldr	r2, [r0, #68]	; 0x44
  403514:	604a      	str	r2, [r1, #4]
  403516:	2301      	movs	r3, #1
  403518:	4093      	lsls	r3, r2
  40351a:	608b      	str	r3, [r1, #8]
  40351c:	f001 fca0 	bl	404e60 <_Bfree>
  403520:	2300      	movs	r3, #0
  403522:	f8c9 3040 	str.w	r3, [r9, #64]	; 0x40
  403526:	f1bb 0f00 	cmp.w	fp, #0
  40352a:	46d8      	mov	r8, fp
  40352c:	db33      	blt.n	403596 <_dtoa_r+0x96>
  40352e:	2300      	movs	r3, #0
  403530:	6023      	str	r3, [r4, #0]
  403532:	4ba5      	ldr	r3, [pc, #660]	; (4037c8 <_dtoa_r+0x2c8>)
  403534:	461a      	mov	r2, r3
  403536:	ea08 0303 	and.w	r3, r8, r3
  40353a:	4293      	cmp	r3, r2
  40353c:	d014      	beq.n	403568 <_dtoa_r+0x68>
  40353e:	4650      	mov	r0, sl
  403540:	4659      	mov	r1, fp
  403542:	2200      	movs	r2, #0
  403544:	2300      	movs	r3, #0
  403546:	f002 fe97 	bl	406278 <__aeabi_dcmpeq>
  40354a:	4605      	mov	r5, r0
  40354c:	b348      	cbz	r0, 4035a2 <_dtoa_r+0xa2>
  40354e:	9a22      	ldr	r2, [sp, #136]	; 0x88
  403550:	2301      	movs	r3, #1
  403552:	6013      	str	r3, [r2, #0]
  403554:	9b24      	ldr	r3, [sp, #144]	; 0x90
  403556:	2b00      	cmp	r3, #0
  403558:	f000 80c5 	beq.w	4036e6 <_dtoa_r+0x1e6>
  40355c:	489b      	ldr	r0, [pc, #620]	; (4037cc <_dtoa_r+0x2cc>)
  40355e:	6018      	str	r0, [r3, #0]
  403560:	3801      	subs	r0, #1
  403562:	b017      	add	sp, #92	; 0x5c
  403564:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403568:	9a22      	ldr	r2, [sp, #136]	; 0x88
  40356a:	f242 730f 	movw	r3, #9999	; 0x270f
  40356e:	6013      	str	r3, [r2, #0]
  403570:	f1ba 0f00 	cmp.w	sl, #0
  403574:	f000 80a2 	beq.w	4036bc <_dtoa_r+0x1bc>
  403578:	4895      	ldr	r0, [pc, #596]	; (4037d0 <_dtoa_r+0x2d0>)
  40357a:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40357c:	2b00      	cmp	r3, #0
  40357e:	d0f0      	beq.n	403562 <_dtoa_r+0x62>
  403580:	78c3      	ldrb	r3, [r0, #3]
  403582:	2b00      	cmp	r3, #0
  403584:	f000 80b1 	beq.w	4036ea <_dtoa_r+0x1ea>
  403588:	f100 0308 	add.w	r3, r0, #8
  40358c:	9a24      	ldr	r2, [sp, #144]	; 0x90
  40358e:	6013      	str	r3, [r2, #0]
  403590:	b017      	add	sp, #92	; 0x5c
  403592:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403596:	2301      	movs	r3, #1
  403598:	f02b 4800 	bic.w	r8, fp, #2147483648	; 0x80000000
  40359c:	6023      	str	r3, [r4, #0]
  40359e:	46c3      	mov	fp, r8
  4035a0:	e7c7      	b.n	403532 <_dtoa_r+0x32>
  4035a2:	aa14      	add	r2, sp, #80	; 0x50
  4035a4:	ab15      	add	r3, sp, #84	; 0x54
  4035a6:	9201      	str	r2, [sp, #4]
  4035a8:	9300      	str	r3, [sp, #0]
  4035aa:	4652      	mov	r2, sl
  4035ac:	465b      	mov	r3, fp
  4035ae:	4648      	mov	r0, r9
  4035b0:	f001 fee2 	bl	405378 <__d2b>
  4035b4:	ea5f 5418 	movs.w	r4, r8, lsr #20
  4035b8:	9008      	str	r0, [sp, #32]
  4035ba:	f040 8088 	bne.w	4036ce <_dtoa_r+0x1ce>
  4035be:	9d14      	ldr	r5, [sp, #80]	; 0x50
  4035c0:	9c15      	ldr	r4, [sp, #84]	; 0x54
  4035c2:	442c      	add	r4, r5
  4035c4:	f204 4332 	addw	r3, r4, #1074	; 0x432
  4035c8:	2b20      	cmp	r3, #32
  4035ca:	f340 8291 	ble.w	403af0 <_dtoa_r+0x5f0>
  4035ce:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
  4035d2:	f204 4012 	addw	r0, r4, #1042	; 0x412
  4035d6:	fa08 f803 	lsl.w	r8, r8, r3
  4035da:	fa2a f000 	lsr.w	r0, sl, r0
  4035de:	ea40 0008 	orr.w	r0, r0, r8
  4035e2:	f002 fb6b 	bl	405cbc <__aeabi_ui2d>
  4035e6:	2301      	movs	r3, #1
  4035e8:	3c01      	subs	r4, #1
  4035ea:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
  4035ee:	9310      	str	r3, [sp, #64]	; 0x40
  4035f0:	2200      	movs	r2, #0
  4035f2:	4b78      	ldr	r3, [pc, #480]	; (4037d4 <_dtoa_r+0x2d4>)
  4035f4:	f002 fa24 	bl	405a40 <__aeabi_dsub>
  4035f8:	a36d      	add	r3, pc, #436	; (adr r3, 4037b0 <_dtoa_r+0x2b0>)
  4035fa:	e9d3 2300 	ldrd	r2, r3, [r3]
  4035fe:	f002 fbd3 	bl	405da8 <__aeabi_dmul>
  403602:	a36d      	add	r3, pc, #436	; (adr r3, 4037b8 <_dtoa_r+0x2b8>)
  403604:	e9d3 2300 	ldrd	r2, r3, [r3]
  403608:	f002 fa1c 	bl	405a44 <__adddf3>
  40360c:	4606      	mov	r6, r0
  40360e:	4620      	mov	r0, r4
  403610:	460f      	mov	r7, r1
  403612:	f002 fb63 	bl	405cdc <__aeabi_i2d>
  403616:	a36a      	add	r3, pc, #424	; (adr r3, 4037c0 <_dtoa_r+0x2c0>)
  403618:	e9d3 2300 	ldrd	r2, r3, [r3]
  40361c:	f002 fbc4 	bl	405da8 <__aeabi_dmul>
  403620:	4602      	mov	r2, r0
  403622:	460b      	mov	r3, r1
  403624:	4630      	mov	r0, r6
  403626:	4639      	mov	r1, r7
  403628:	f002 fa0c 	bl	405a44 <__adddf3>
  40362c:	4606      	mov	r6, r0
  40362e:	460f      	mov	r7, r1
  403630:	f002 fe6a 	bl	406308 <__aeabi_d2iz>
  403634:	2200      	movs	r2, #0
  403636:	9004      	str	r0, [sp, #16]
  403638:	2300      	movs	r3, #0
  40363a:	4630      	mov	r0, r6
  40363c:	4639      	mov	r1, r7
  40363e:	f002 fe25 	bl	40628c <__aeabi_dcmplt>
  403642:	2800      	cmp	r0, #0
  403644:	f040 8230 	bne.w	403aa8 <_dtoa_r+0x5a8>
  403648:	9e04      	ldr	r6, [sp, #16]
  40364a:	2e16      	cmp	r6, #22
  40364c:	f200 8229 	bhi.w	403aa2 <_dtoa_r+0x5a2>
  403650:	4b61      	ldr	r3, [pc, #388]	; (4037d8 <_dtoa_r+0x2d8>)
  403652:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
  403656:	e9d3 0100 	ldrd	r0, r1, [r3]
  40365a:	4652      	mov	r2, sl
  40365c:	465b      	mov	r3, fp
  40365e:	f002 fe33 	bl	4062c8 <__aeabi_dcmpgt>
  403662:	2800      	cmp	r0, #0
  403664:	f000 8249 	beq.w	403afa <_dtoa_r+0x5fa>
  403668:	1e73      	subs	r3, r6, #1
  40366a:	9304      	str	r3, [sp, #16]
  40366c:	2300      	movs	r3, #0
  40366e:	930c      	str	r3, [sp, #48]	; 0x30
  403670:	1b2c      	subs	r4, r5, r4
  403672:	1e63      	subs	r3, r4, #1
  403674:	9302      	str	r3, [sp, #8]
  403676:	f100 8232 	bmi.w	403ade <_dtoa_r+0x5de>
  40367a:	2300      	movs	r3, #0
  40367c:	9305      	str	r3, [sp, #20]
  40367e:	9b04      	ldr	r3, [sp, #16]
  403680:	2b00      	cmp	r3, #0
  403682:	f2c0 8223 	blt.w	403acc <_dtoa_r+0x5cc>
  403686:	9a02      	ldr	r2, [sp, #8]
  403688:	930b      	str	r3, [sp, #44]	; 0x2c
  40368a:	4611      	mov	r1, r2
  40368c:	4419      	add	r1, r3
  40368e:	2300      	movs	r3, #0
  403690:	9102      	str	r1, [sp, #8]
  403692:	930a      	str	r3, [sp, #40]	; 0x28
  403694:	9b20      	ldr	r3, [sp, #128]	; 0x80
  403696:	2b09      	cmp	r3, #9
  403698:	d829      	bhi.n	4036ee <_dtoa_r+0x1ee>
  40369a:	2b05      	cmp	r3, #5
  40369c:	f340 8658 	ble.w	404350 <_dtoa_r+0xe50>
  4036a0:	3b04      	subs	r3, #4
  4036a2:	9320      	str	r3, [sp, #128]	; 0x80
  4036a4:	2500      	movs	r5, #0
  4036a6:	9b20      	ldr	r3, [sp, #128]	; 0x80
  4036a8:	3b02      	subs	r3, #2
  4036aa:	2b03      	cmp	r3, #3
  4036ac:	f200 8635 	bhi.w	40431a <_dtoa_r+0xe1a>
  4036b0:	e8df f013 	tbh	[pc, r3, lsl #1]
  4036b4:	0228032c 	.word	0x0228032c
  4036b8:	04590337 	.word	0x04590337
  4036bc:	4b44      	ldr	r3, [pc, #272]	; (4037d0 <_dtoa_r+0x2d0>)
  4036be:	4a47      	ldr	r2, [pc, #284]	; (4037dc <_dtoa_r+0x2dc>)
  4036c0:	f3c8 0013 	ubfx	r0, r8, #0, #20
  4036c4:	2800      	cmp	r0, #0
  4036c6:	bf14      	ite	ne
  4036c8:	4618      	movne	r0, r3
  4036ca:	4610      	moveq	r0, r2
  4036cc:	e755      	b.n	40357a <_dtoa_r+0x7a>
  4036ce:	f3cb 0313 	ubfx	r3, fp, #0, #20
  4036d2:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
  4036d6:	9510      	str	r5, [sp, #64]	; 0x40
  4036d8:	4650      	mov	r0, sl
  4036da:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
  4036de:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
  4036e2:	9d14      	ldr	r5, [sp, #80]	; 0x50
  4036e4:	e784      	b.n	4035f0 <_dtoa_r+0xf0>
  4036e6:	483e      	ldr	r0, [pc, #248]	; (4037e0 <_dtoa_r+0x2e0>)
  4036e8:	e73b      	b.n	403562 <_dtoa_r+0x62>
  4036ea:	1cc3      	adds	r3, r0, #3
  4036ec:	e74e      	b.n	40358c <_dtoa_r+0x8c>
  4036ee:	2100      	movs	r1, #0
  4036f0:	f8c9 1044 	str.w	r1, [r9, #68]	; 0x44
  4036f4:	4648      	mov	r0, r9
  4036f6:	9120      	str	r1, [sp, #128]	; 0x80
  4036f8:	f001 fb8c 	bl	404e14 <_Balloc>
  4036fc:	f04f 33ff 	mov.w	r3, #4294967295
  403700:	9306      	str	r3, [sp, #24]
  403702:	9a20      	ldr	r2, [sp, #128]	; 0x80
  403704:	930d      	str	r3, [sp, #52]	; 0x34
  403706:	2301      	movs	r3, #1
  403708:	9007      	str	r0, [sp, #28]
  40370a:	9221      	str	r2, [sp, #132]	; 0x84
  40370c:	f8c9 0040 	str.w	r0, [r9, #64]	; 0x40
  403710:	9309      	str	r3, [sp, #36]	; 0x24
  403712:	9b15      	ldr	r3, [sp, #84]	; 0x54
  403714:	2b00      	cmp	r3, #0
  403716:	f2c0 80d1 	blt.w	4038bc <_dtoa_r+0x3bc>
  40371a:	9a04      	ldr	r2, [sp, #16]
  40371c:	2a0e      	cmp	r2, #14
  40371e:	f300 80cd 	bgt.w	4038bc <_dtoa_r+0x3bc>
  403722:	4b2d      	ldr	r3, [pc, #180]	; (4037d8 <_dtoa_r+0x2d8>)
  403724:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  403728:	e9d3 3400 	ldrd	r3, r4, [r3]
  40372c:	e9cd 3402 	strd	r3, r4, [sp, #8]
  403730:	9b21      	ldr	r3, [sp, #132]	; 0x84
  403732:	2b00      	cmp	r3, #0
  403734:	f2c0 8300 	blt.w	403d38 <_dtoa_r+0x838>
  403738:	4656      	mov	r6, sl
  40373a:	465f      	mov	r7, fp
  40373c:	4650      	mov	r0, sl
  40373e:	4659      	mov	r1, fp
  403740:	e9dd ab02 	ldrd	sl, fp, [sp, #8]
  403744:	4652      	mov	r2, sl
  403746:	465b      	mov	r3, fp
  403748:	f002 fc58 	bl	405ffc <__aeabi_ddiv>
  40374c:	f002 fddc 	bl	406308 <__aeabi_d2iz>
  403750:	4604      	mov	r4, r0
  403752:	f002 fac3 	bl	405cdc <__aeabi_i2d>
  403756:	4652      	mov	r2, sl
  403758:	465b      	mov	r3, fp
  40375a:	f002 fb25 	bl	405da8 <__aeabi_dmul>
  40375e:	460b      	mov	r3, r1
  403760:	4602      	mov	r2, r0
  403762:	4639      	mov	r1, r7
  403764:	4630      	mov	r0, r6
  403766:	f002 f96b 	bl	405a40 <__aeabi_dsub>
  40376a:	9d07      	ldr	r5, [sp, #28]
  40376c:	f104 0330 	add.w	r3, r4, #48	; 0x30
  403770:	702b      	strb	r3, [r5, #0]
  403772:	9b06      	ldr	r3, [sp, #24]
  403774:	2b01      	cmp	r3, #1
  403776:	4606      	mov	r6, r0
  403778:	460f      	mov	r7, r1
  40377a:	f105 0501 	add.w	r5, r5, #1
  40377e:	d062      	beq.n	403846 <_dtoa_r+0x346>
  403780:	2200      	movs	r2, #0
  403782:	4b18      	ldr	r3, [pc, #96]	; (4037e4 <_dtoa_r+0x2e4>)
  403784:	f002 fb10 	bl	405da8 <__aeabi_dmul>
  403788:	2200      	movs	r2, #0
  40378a:	2300      	movs	r3, #0
  40378c:	4606      	mov	r6, r0
  40378e:	460f      	mov	r7, r1
  403790:	f002 fd72 	bl	406278 <__aeabi_dcmpeq>
  403794:	2800      	cmp	r0, #0
  403796:	d17e      	bne.n	403896 <_dtoa_r+0x396>
  403798:	f8cd 9014 	str.w	r9, [sp, #20]
  40379c:	f8dd a018 	ldr.w	sl, [sp, #24]
  4037a0:	f8dd b01c 	ldr.w	fp, [sp, #28]
  4037a4:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
  4037a8:	e029      	b.n	4037fe <_dtoa_r+0x2fe>
  4037aa:	bf00      	nop
  4037ac:	f3af 8000 	nop.w
  4037b0:	636f4361 	.word	0x636f4361
  4037b4:	3fd287a7 	.word	0x3fd287a7
  4037b8:	8b60c8b3 	.word	0x8b60c8b3
  4037bc:	3fc68a28 	.word	0x3fc68a28
  4037c0:	509f79fb 	.word	0x509f79fb
  4037c4:	3fd34413 	.word	0x3fd34413
  4037c8:	7ff00000 	.word	0x7ff00000
  4037cc:	00406e59 	.word	0x00406e59
  4037d0:	00406e78 	.word	0x00406e78
  4037d4:	3ff80000 	.word	0x3ff80000
  4037d8:	00406e88 	.word	0x00406e88
  4037dc:	00406e6c 	.word	0x00406e6c
  4037e0:	00406e58 	.word	0x00406e58
  4037e4:	40240000 	.word	0x40240000
  4037e8:	f002 fade 	bl	405da8 <__aeabi_dmul>
  4037ec:	2200      	movs	r2, #0
  4037ee:	2300      	movs	r3, #0
  4037f0:	4606      	mov	r6, r0
  4037f2:	460f      	mov	r7, r1
  4037f4:	f002 fd40 	bl	406278 <__aeabi_dcmpeq>
  4037f8:	2800      	cmp	r0, #0
  4037fa:	f040 83b7 	bne.w	403f6c <_dtoa_r+0xa6c>
  4037fe:	4642      	mov	r2, r8
  403800:	464b      	mov	r3, r9
  403802:	4630      	mov	r0, r6
  403804:	4639      	mov	r1, r7
  403806:	f002 fbf9 	bl	405ffc <__aeabi_ddiv>
  40380a:	f002 fd7d 	bl	406308 <__aeabi_d2iz>
  40380e:	4604      	mov	r4, r0
  403810:	f002 fa64 	bl	405cdc <__aeabi_i2d>
  403814:	4642      	mov	r2, r8
  403816:	464b      	mov	r3, r9
  403818:	f002 fac6 	bl	405da8 <__aeabi_dmul>
  40381c:	4602      	mov	r2, r0
  40381e:	460b      	mov	r3, r1
  403820:	4630      	mov	r0, r6
  403822:	4639      	mov	r1, r7
  403824:	f002 f90c 	bl	405a40 <__aeabi_dsub>
  403828:	f104 0e30 	add.w	lr, r4, #48	; 0x30
  40382c:	f805 eb01 	strb.w	lr, [r5], #1
  403830:	ebcb 0e05 	rsb	lr, fp, r5
  403834:	45d6      	cmp	lr, sl
  403836:	4606      	mov	r6, r0
  403838:	460f      	mov	r7, r1
  40383a:	f04f 0200 	mov.w	r2, #0
  40383e:	4bb0      	ldr	r3, [pc, #704]	; (403b00 <_dtoa_r+0x600>)
  403840:	d1d2      	bne.n	4037e8 <_dtoa_r+0x2e8>
  403842:	f8dd 9014 	ldr.w	r9, [sp, #20]
  403846:	4632      	mov	r2, r6
  403848:	463b      	mov	r3, r7
  40384a:	4630      	mov	r0, r6
  40384c:	4639      	mov	r1, r7
  40384e:	f002 f8f9 	bl	405a44 <__adddf3>
  403852:	4606      	mov	r6, r0
  403854:	460f      	mov	r7, r1
  403856:	4602      	mov	r2, r0
  403858:	460b      	mov	r3, r1
  40385a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  40385e:	f002 fd15 	bl	40628c <__aeabi_dcmplt>
  403862:	b940      	cbnz	r0, 403876 <_dtoa_r+0x376>
  403864:	4632      	mov	r2, r6
  403866:	463b      	mov	r3, r7
  403868:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  40386c:	f002 fd04 	bl	406278 <__aeabi_dcmpeq>
  403870:	b188      	cbz	r0, 403896 <_dtoa_r+0x396>
  403872:	07e3      	lsls	r3, r4, #31
  403874:	d50f      	bpl.n	403896 <_dtoa_r+0x396>
  403876:	f815 4c01 	ldrb.w	r4, [r5, #-1]
  40387a:	9a07      	ldr	r2, [sp, #28]
  40387c:	1e6b      	subs	r3, r5, #1
  40387e:	e004      	b.n	40388a <_dtoa_r+0x38a>
  403880:	429a      	cmp	r2, r3
  403882:	f000 842c 	beq.w	4040de <_dtoa_r+0xbde>
  403886:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  40388a:	2c39      	cmp	r4, #57	; 0x39
  40388c:	f103 0501 	add.w	r5, r3, #1
  403890:	d0f6      	beq.n	403880 <_dtoa_r+0x380>
  403892:	3401      	adds	r4, #1
  403894:	701c      	strb	r4, [r3, #0]
  403896:	9908      	ldr	r1, [sp, #32]
  403898:	4648      	mov	r0, r9
  40389a:	f001 fae1 	bl	404e60 <_Bfree>
  40389e:	2200      	movs	r2, #0
  4038a0:	9b04      	ldr	r3, [sp, #16]
  4038a2:	702a      	strb	r2, [r5, #0]
  4038a4:	9a22      	ldr	r2, [sp, #136]	; 0x88
  4038a6:	3301      	adds	r3, #1
  4038a8:	6013      	str	r3, [r2, #0]
  4038aa:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4038ac:	2b00      	cmp	r3, #0
  4038ae:	f000 83a7 	beq.w	404000 <_dtoa_r+0xb00>
  4038b2:	9807      	ldr	r0, [sp, #28]
  4038b4:	601d      	str	r5, [r3, #0]
  4038b6:	b017      	add	sp, #92	; 0x5c
  4038b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4038bc:	9a09      	ldr	r2, [sp, #36]	; 0x24
  4038be:	2a00      	cmp	r2, #0
  4038c0:	f000 8112 	beq.w	403ae8 <_dtoa_r+0x5e8>
  4038c4:	9a20      	ldr	r2, [sp, #128]	; 0x80
  4038c6:	2a01      	cmp	r2, #1
  4038c8:	f340 8258 	ble.w	403d7c <_dtoa_r+0x87c>
  4038cc:	9b06      	ldr	r3, [sp, #24]
  4038ce:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  4038d0:	1e5f      	subs	r7, r3, #1
  4038d2:	42ba      	cmp	r2, r7
  4038d4:	f2c0 8397 	blt.w	404006 <_dtoa_r+0xb06>
  4038d8:	1bd7      	subs	r7, r2, r7
  4038da:	9b06      	ldr	r3, [sp, #24]
  4038dc:	2b00      	cmp	r3, #0
  4038de:	f2c0 848a 	blt.w	4041f6 <_dtoa_r+0xcf6>
  4038e2:	9d05      	ldr	r5, [sp, #20]
  4038e4:	9b06      	ldr	r3, [sp, #24]
  4038e6:	9a05      	ldr	r2, [sp, #20]
  4038e8:	441a      	add	r2, r3
  4038ea:	9205      	str	r2, [sp, #20]
  4038ec:	9a02      	ldr	r2, [sp, #8]
  4038ee:	2101      	movs	r1, #1
  4038f0:	441a      	add	r2, r3
  4038f2:	4648      	mov	r0, r9
  4038f4:	9202      	str	r2, [sp, #8]
  4038f6:	f001 fb4b 	bl	404f90 <__i2b>
  4038fa:	4606      	mov	r6, r0
  4038fc:	b165      	cbz	r5, 403918 <_dtoa_r+0x418>
  4038fe:	9902      	ldr	r1, [sp, #8]
  403900:	2900      	cmp	r1, #0
  403902:	460b      	mov	r3, r1
  403904:	dd08      	ble.n	403918 <_dtoa_r+0x418>
  403906:	42a9      	cmp	r1, r5
  403908:	9a05      	ldr	r2, [sp, #20]
  40390a:	bfa8      	it	ge
  40390c:	462b      	movge	r3, r5
  40390e:	1ad2      	subs	r2, r2, r3
  403910:	1aed      	subs	r5, r5, r3
  403912:	1acb      	subs	r3, r1, r3
  403914:	9205      	str	r2, [sp, #20]
  403916:	9302      	str	r3, [sp, #8]
  403918:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40391a:	2b00      	cmp	r3, #0
  40391c:	f340 82fc 	ble.w	403f18 <_dtoa_r+0xa18>
  403920:	9a09      	ldr	r2, [sp, #36]	; 0x24
  403922:	2a00      	cmp	r2, #0
  403924:	f000 8201 	beq.w	403d2a <_dtoa_r+0x82a>
  403928:	2f00      	cmp	r7, #0
  40392a:	f000 81fe 	beq.w	403d2a <_dtoa_r+0x82a>
  40392e:	4631      	mov	r1, r6
  403930:	463a      	mov	r2, r7
  403932:	4648      	mov	r0, r9
  403934:	f001 fbce 	bl	4050d4 <__pow5mult>
  403938:	f8dd 8020 	ldr.w	r8, [sp, #32]
  40393c:	4601      	mov	r1, r0
  40393e:	4642      	mov	r2, r8
  403940:	4606      	mov	r6, r0
  403942:	4648      	mov	r0, r9
  403944:	f001 fb2e 	bl	404fa4 <__multiply>
  403948:	4641      	mov	r1, r8
  40394a:	4604      	mov	r4, r0
  40394c:	4648      	mov	r0, r9
  40394e:	f001 fa87 	bl	404e60 <_Bfree>
  403952:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  403954:	1bdb      	subs	r3, r3, r7
  403956:	930a      	str	r3, [sp, #40]	; 0x28
  403958:	f040 81e6 	bne.w	403d28 <_dtoa_r+0x828>
  40395c:	2101      	movs	r1, #1
  40395e:	4648      	mov	r0, r9
  403960:	f001 fb16 	bl	404f90 <__i2b>
  403964:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  403966:	4680      	mov	r8, r0
  403968:	2b00      	cmp	r3, #0
  40396a:	f000 8219 	beq.w	403da0 <_dtoa_r+0x8a0>
  40396e:	4601      	mov	r1, r0
  403970:	461a      	mov	r2, r3
  403972:	4648      	mov	r0, r9
  403974:	f001 fbae 	bl	4050d4 <__pow5mult>
  403978:	9b20      	ldr	r3, [sp, #128]	; 0x80
  40397a:	2b01      	cmp	r3, #1
  40397c:	4680      	mov	r8, r0
  40397e:	f340 82f8 	ble.w	403f72 <_dtoa_r+0xa72>
  403982:	2700      	movs	r7, #0
  403984:	f8d8 3010 	ldr.w	r3, [r8, #16]
  403988:	eb08 0383 	add.w	r3, r8, r3, lsl #2
  40398c:	6918      	ldr	r0, [r3, #16]
  40398e:	f001 fab1 	bl	404ef4 <__hi0bits>
  403992:	f1c0 0020 	rsb	r0, r0, #32
  403996:	9a02      	ldr	r2, [sp, #8]
  403998:	4410      	add	r0, r2
  40399a:	f010 001f 	ands.w	r0, r0, #31
  40399e:	f000 81f6 	beq.w	403d8e <_dtoa_r+0x88e>
  4039a2:	f1c0 0320 	rsb	r3, r0, #32
  4039a6:	2b04      	cmp	r3, #4
  4039a8:	f340 84ca 	ble.w	404340 <_dtoa_r+0xe40>
  4039ac:	9b05      	ldr	r3, [sp, #20]
  4039ae:	f1c0 001c 	rsb	r0, r0, #28
  4039b2:	4403      	add	r3, r0
  4039b4:	9305      	str	r3, [sp, #20]
  4039b6:	4613      	mov	r3, r2
  4039b8:	4403      	add	r3, r0
  4039ba:	4405      	add	r5, r0
  4039bc:	9302      	str	r3, [sp, #8]
  4039be:	9b05      	ldr	r3, [sp, #20]
  4039c0:	2b00      	cmp	r3, #0
  4039c2:	dd05      	ble.n	4039d0 <_dtoa_r+0x4d0>
  4039c4:	4621      	mov	r1, r4
  4039c6:	461a      	mov	r2, r3
  4039c8:	4648      	mov	r0, r9
  4039ca:	f001 fbd3 	bl	405174 <__lshift>
  4039ce:	4604      	mov	r4, r0
  4039d0:	9b02      	ldr	r3, [sp, #8]
  4039d2:	2b00      	cmp	r3, #0
  4039d4:	dd05      	ble.n	4039e2 <_dtoa_r+0x4e2>
  4039d6:	4641      	mov	r1, r8
  4039d8:	461a      	mov	r2, r3
  4039da:	4648      	mov	r0, r9
  4039dc:	f001 fbca 	bl	405174 <__lshift>
  4039e0:	4680      	mov	r8, r0
  4039e2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  4039e4:	2b00      	cmp	r3, #0
  4039e6:	f040 827c 	bne.w	403ee2 <_dtoa_r+0x9e2>
  4039ea:	9b06      	ldr	r3, [sp, #24]
  4039ec:	2b00      	cmp	r3, #0
  4039ee:	f340 8295 	ble.w	403f1c <_dtoa_r+0xa1c>
  4039f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4039f4:	2b00      	cmp	r3, #0
  4039f6:	f040 81f5 	bne.w	403de4 <_dtoa_r+0x8e4>
  4039fa:	f8dd b01c 	ldr.w	fp, [sp, #28]
  4039fe:	9f06      	ldr	r7, [sp, #24]
  403a00:	465d      	mov	r5, fp
  403a02:	e002      	b.n	403a0a <_dtoa_r+0x50a>
  403a04:	f001 fa36 	bl	404e74 <__multadd>
  403a08:	4604      	mov	r4, r0
  403a0a:	4641      	mov	r1, r8
  403a0c:	4620      	mov	r0, r4
  403a0e:	f7ff fce3 	bl	4033d8 <quorem>
  403a12:	f100 0a30 	add.w	sl, r0, #48	; 0x30
  403a16:	f805 ab01 	strb.w	sl, [r5], #1
  403a1a:	ebcb 0305 	rsb	r3, fp, r5
  403a1e:	42bb      	cmp	r3, r7
  403a20:	f04f 020a 	mov.w	r2, #10
  403a24:	f04f 0300 	mov.w	r3, #0
  403a28:	4621      	mov	r1, r4
  403a2a:	4648      	mov	r0, r9
  403a2c:	dbea      	blt.n	403a04 <_dtoa_r+0x504>
  403a2e:	9b07      	ldr	r3, [sp, #28]
  403a30:	9a06      	ldr	r2, [sp, #24]
  403a32:	2a01      	cmp	r2, #1
  403a34:	bfac      	ite	ge
  403a36:	189b      	addge	r3, r3, r2
  403a38:	3301      	addlt	r3, #1
  403a3a:	461d      	mov	r5, r3
  403a3c:	f04f 0b00 	mov.w	fp, #0
  403a40:	4621      	mov	r1, r4
  403a42:	2201      	movs	r2, #1
  403a44:	4648      	mov	r0, r9
  403a46:	f001 fb95 	bl	405174 <__lshift>
  403a4a:	4641      	mov	r1, r8
  403a4c:	9008      	str	r0, [sp, #32]
  403a4e:	f001 fbe9 	bl	405224 <__mcmp>
  403a52:	2800      	cmp	r0, #0
  403a54:	f340 830d 	ble.w	404072 <_dtoa_r+0xb72>
  403a58:	f815 2c01 	ldrb.w	r2, [r5, #-1]
  403a5c:	9907      	ldr	r1, [sp, #28]
  403a5e:	1e6b      	subs	r3, r5, #1
  403a60:	e004      	b.n	403a6c <_dtoa_r+0x56c>
  403a62:	428b      	cmp	r3, r1
  403a64:	f000 8278 	beq.w	403f58 <_dtoa_r+0xa58>
  403a68:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
  403a6c:	2a39      	cmp	r2, #57	; 0x39
  403a6e:	f103 0501 	add.w	r5, r3, #1
  403a72:	d0f6      	beq.n	403a62 <_dtoa_r+0x562>
  403a74:	3201      	adds	r2, #1
  403a76:	701a      	strb	r2, [r3, #0]
  403a78:	4641      	mov	r1, r8
  403a7a:	4648      	mov	r0, r9
  403a7c:	f001 f9f0 	bl	404e60 <_Bfree>
  403a80:	2e00      	cmp	r6, #0
  403a82:	f43f af08 	beq.w	403896 <_dtoa_r+0x396>
  403a86:	f1bb 0f00 	cmp.w	fp, #0
  403a8a:	d005      	beq.n	403a98 <_dtoa_r+0x598>
  403a8c:	45b3      	cmp	fp, r6
  403a8e:	d003      	beq.n	403a98 <_dtoa_r+0x598>
  403a90:	4659      	mov	r1, fp
  403a92:	4648      	mov	r0, r9
  403a94:	f001 f9e4 	bl	404e60 <_Bfree>
  403a98:	4631      	mov	r1, r6
  403a9a:	4648      	mov	r0, r9
  403a9c:	f001 f9e0 	bl	404e60 <_Bfree>
  403aa0:	e6f9      	b.n	403896 <_dtoa_r+0x396>
  403aa2:	2301      	movs	r3, #1
  403aa4:	930c      	str	r3, [sp, #48]	; 0x30
  403aa6:	e5e3      	b.n	403670 <_dtoa_r+0x170>
  403aa8:	f8dd 8010 	ldr.w	r8, [sp, #16]
  403aac:	4640      	mov	r0, r8
  403aae:	f002 f915 	bl	405cdc <__aeabi_i2d>
  403ab2:	4602      	mov	r2, r0
  403ab4:	460b      	mov	r3, r1
  403ab6:	4630      	mov	r0, r6
  403ab8:	4639      	mov	r1, r7
  403aba:	f002 fbdd 	bl	406278 <__aeabi_dcmpeq>
  403abe:	2800      	cmp	r0, #0
  403ac0:	f47f adc2 	bne.w	403648 <_dtoa_r+0x148>
  403ac4:	f108 33ff 	add.w	r3, r8, #4294967295
  403ac8:	9304      	str	r3, [sp, #16]
  403aca:	e5bd      	b.n	403648 <_dtoa_r+0x148>
  403acc:	9a05      	ldr	r2, [sp, #20]
  403ace:	9b04      	ldr	r3, [sp, #16]
  403ad0:	1ad2      	subs	r2, r2, r3
  403ad2:	425b      	negs	r3, r3
  403ad4:	930a      	str	r3, [sp, #40]	; 0x28
  403ad6:	2300      	movs	r3, #0
  403ad8:	9205      	str	r2, [sp, #20]
  403ada:	930b      	str	r3, [sp, #44]	; 0x2c
  403adc:	e5da      	b.n	403694 <_dtoa_r+0x194>
  403ade:	425b      	negs	r3, r3
  403ae0:	9305      	str	r3, [sp, #20]
  403ae2:	2300      	movs	r3, #0
  403ae4:	9302      	str	r3, [sp, #8]
  403ae6:	e5ca      	b.n	40367e <_dtoa_r+0x17e>
  403ae8:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  403aea:	9d05      	ldr	r5, [sp, #20]
  403aec:	9e09      	ldr	r6, [sp, #36]	; 0x24
  403aee:	e705      	b.n	4038fc <_dtoa_r+0x3fc>
  403af0:	f1c3 0820 	rsb	r8, r3, #32
  403af4:	fa0a f008 	lsl.w	r0, sl, r8
  403af8:	e573      	b.n	4035e2 <_dtoa_r+0xe2>
  403afa:	900c      	str	r0, [sp, #48]	; 0x30
  403afc:	e5b8      	b.n	403670 <_dtoa_r+0x170>
  403afe:	bf00      	nop
  403b00:	40240000 	.word	0x40240000
  403b04:	2300      	movs	r3, #0
  403b06:	9309      	str	r3, [sp, #36]	; 0x24
  403b08:	9b04      	ldr	r3, [sp, #16]
  403b0a:	9a21      	ldr	r2, [sp, #132]	; 0x84
  403b0c:	4413      	add	r3, r2
  403b0e:	930d      	str	r3, [sp, #52]	; 0x34
  403b10:	3301      	adds	r3, #1
  403b12:	2b00      	cmp	r3, #0
  403b14:	9306      	str	r3, [sp, #24]
  403b16:	f340 8283 	ble.w	404020 <_dtoa_r+0xb20>
  403b1a:	9c06      	ldr	r4, [sp, #24]
  403b1c:	4626      	mov	r6, r4
  403b1e:	2100      	movs	r1, #0
  403b20:	2e17      	cmp	r6, #23
  403b22:	f8c9 1044 	str.w	r1, [r9, #68]	; 0x44
  403b26:	d90b      	bls.n	403b40 <_dtoa_r+0x640>
  403b28:	2201      	movs	r2, #1
  403b2a:	2304      	movs	r3, #4
  403b2c:	005b      	lsls	r3, r3, #1
  403b2e:	f103 0014 	add.w	r0, r3, #20
  403b32:	42b0      	cmp	r0, r6
  403b34:	4611      	mov	r1, r2
  403b36:	f102 0201 	add.w	r2, r2, #1
  403b3a:	d9f7      	bls.n	403b2c <_dtoa_r+0x62c>
  403b3c:	f8c9 1044 	str.w	r1, [r9, #68]	; 0x44
  403b40:	4648      	mov	r0, r9
  403b42:	f001 f967 	bl	404e14 <_Balloc>
  403b46:	2c0e      	cmp	r4, #14
  403b48:	9007      	str	r0, [sp, #28]
  403b4a:	f8c9 0040 	str.w	r0, [r9, #64]	; 0x40
  403b4e:	f63f ade0 	bhi.w	403712 <_dtoa_r+0x212>
  403b52:	2d00      	cmp	r5, #0
  403b54:	f43f addd 	beq.w	403712 <_dtoa_r+0x212>
  403b58:	9904      	ldr	r1, [sp, #16]
  403b5a:	4657      	mov	r7, sl
  403b5c:	46d8      	mov	r8, fp
  403b5e:	2900      	cmp	r1, #0
  403b60:	e9cd 780e 	strd	r7, r8, [sp, #56]	; 0x38
  403b64:	f340 8292 	ble.w	40408c <_dtoa_r+0xb8c>
  403b68:	4b91      	ldr	r3, [pc, #580]	; (403db0 <_dtoa_r+0x8b0>)
  403b6a:	f001 020f 	and.w	r2, r1, #15
  403b6e:	110e      	asrs	r6, r1, #4
  403b70:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  403b74:	06f0      	lsls	r0, r6, #27
  403b76:	e9d3 4500 	ldrd	r4, r5, [r3]
  403b7a:	f140 824c 	bpl.w	404016 <_dtoa_r+0xb16>
  403b7e:	4b8d      	ldr	r3, [pc, #564]	; (403db4 <_dtoa_r+0x8b4>)
  403b80:	4650      	mov	r0, sl
  403b82:	4659      	mov	r1, fp
  403b84:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
  403b88:	f002 fa38 	bl	405ffc <__aeabi_ddiv>
  403b8c:	f006 060f 	and.w	r6, r6, #15
  403b90:	4682      	mov	sl, r0
  403b92:	468b      	mov	fp, r1
  403b94:	f04f 0803 	mov.w	r8, #3
  403b98:	b186      	cbz	r6, 403bbc <_dtoa_r+0x6bc>
  403b9a:	4f86      	ldr	r7, [pc, #536]	; (403db4 <_dtoa_r+0x8b4>)
  403b9c:	07f1      	lsls	r1, r6, #31
  403b9e:	d509      	bpl.n	403bb4 <_dtoa_r+0x6b4>
  403ba0:	4620      	mov	r0, r4
  403ba2:	4629      	mov	r1, r5
  403ba4:	e9d7 2300 	ldrd	r2, r3, [r7]
  403ba8:	f002 f8fe 	bl	405da8 <__aeabi_dmul>
  403bac:	f108 0801 	add.w	r8, r8, #1
  403bb0:	4604      	mov	r4, r0
  403bb2:	460d      	mov	r5, r1
  403bb4:	1076      	asrs	r6, r6, #1
  403bb6:	f107 0708 	add.w	r7, r7, #8
  403bba:	d1ef      	bne.n	403b9c <_dtoa_r+0x69c>
  403bbc:	4622      	mov	r2, r4
  403bbe:	462b      	mov	r3, r5
  403bc0:	4650      	mov	r0, sl
  403bc2:	4659      	mov	r1, fp
  403bc4:	f002 fa1a 	bl	405ffc <__aeabi_ddiv>
  403bc8:	4606      	mov	r6, r0
  403bca:	460f      	mov	r7, r1
  403bcc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  403bce:	b143      	cbz	r3, 403be2 <_dtoa_r+0x6e2>
  403bd0:	2200      	movs	r2, #0
  403bd2:	4b79      	ldr	r3, [pc, #484]	; (403db8 <_dtoa_r+0x8b8>)
  403bd4:	4630      	mov	r0, r6
  403bd6:	4639      	mov	r1, r7
  403bd8:	f002 fb58 	bl	40628c <__aeabi_dcmplt>
  403bdc:	2800      	cmp	r0, #0
  403bde:	f040 8320 	bne.w	404222 <_dtoa_r+0xd22>
  403be2:	4640      	mov	r0, r8
  403be4:	f002 f87a 	bl	405cdc <__aeabi_i2d>
  403be8:	4632      	mov	r2, r6
  403bea:	463b      	mov	r3, r7
  403bec:	f002 f8dc 	bl	405da8 <__aeabi_dmul>
  403bf0:	4b72      	ldr	r3, [pc, #456]	; (403dbc <_dtoa_r+0x8bc>)
  403bf2:	2200      	movs	r2, #0
  403bf4:	f001 ff26 	bl	405a44 <__adddf3>
  403bf8:	9b06      	ldr	r3, [sp, #24]
  403bfa:	4604      	mov	r4, r0
  403bfc:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
  403c00:	2b00      	cmp	r3, #0
  403c02:	f000 81df 	beq.w	403fc4 <_dtoa_r+0xac4>
  403c06:	9b04      	ldr	r3, [sp, #16]
  403c08:	f8dd 8018 	ldr.w	r8, [sp, #24]
  403c0c:	9311      	str	r3, [sp, #68]	; 0x44
  403c0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
  403c10:	2b00      	cmp	r3, #0
  403c12:	f000 8297 	beq.w	404144 <_dtoa_r+0xc44>
  403c16:	4b66      	ldr	r3, [pc, #408]	; (403db0 <_dtoa_r+0x8b0>)
  403c18:	4969      	ldr	r1, [pc, #420]	; (403dc0 <_dtoa_r+0x8c0>)
  403c1a:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
  403c1e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
  403c22:	2000      	movs	r0, #0
  403c24:	f002 f9ea 	bl	405ffc <__aeabi_ddiv>
  403c28:	4622      	mov	r2, r4
  403c2a:	462b      	mov	r3, r5
  403c2c:	f001 ff08 	bl	405a40 <__aeabi_dsub>
  403c30:	4682      	mov	sl, r0
  403c32:	468b      	mov	fp, r1
  403c34:	4630      	mov	r0, r6
  403c36:	4639      	mov	r1, r7
  403c38:	f002 fb66 	bl	406308 <__aeabi_d2iz>
  403c3c:	4604      	mov	r4, r0
  403c3e:	f002 f84d 	bl	405cdc <__aeabi_i2d>
  403c42:	4602      	mov	r2, r0
  403c44:	460b      	mov	r3, r1
  403c46:	4630      	mov	r0, r6
  403c48:	4639      	mov	r1, r7
  403c4a:	f001 fef9 	bl	405a40 <__aeabi_dsub>
  403c4e:	3430      	adds	r4, #48	; 0x30
  403c50:	9d07      	ldr	r5, [sp, #28]
  403c52:	b2e4      	uxtb	r4, r4
  403c54:	4606      	mov	r6, r0
  403c56:	460f      	mov	r7, r1
  403c58:	702c      	strb	r4, [r5, #0]
  403c5a:	4602      	mov	r2, r0
  403c5c:	460b      	mov	r3, r1
  403c5e:	4650      	mov	r0, sl
  403c60:	4659      	mov	r1, fp
  403c62:	3501      	adds	r5, #1
  403c64:	f002 fb30 	bl	4062c8 <__aeabi_dcmpgt>
  403c68:	2800      	cmp	r0, #0
  403c6a:	d14c      	bne.n	403d06 <_dtoa_r+0x806>
  403c6c:	4632      	mov	r2, r6
  403c6e:	463b      	mov	r3, r7
  403c70:	2000      	movs	r0, #0
  403c72:	4951      	ldr	r1, [pc, #324]	; (403db8 <_dtoa_r+0x8b8>)
  403c74:	f001 fee4 	bl	405a40 <__aeabi_dsub>
  403c78:	4602      	mov	r2, r0
  403c7a:	460b      	mov	r3, r1
  403c7c:	4650      	mov	r0, sl
  403c7e:	4659      	mov	r1, fp
  403c80:	f002 fb22 	bl	4062c8 <__aeabi_dcmpgt>
  403c84:	2800      	cmp	r0, #0
  403c86:	f040 830d 	bne.w	4042a4 <_dtoa_r+0xda4>
  403c8a:	f1b8 0f01 	cmp.w	r8, #1
  403c8e:	f340 81b3 	ble.w	403ff8 <_dtoa_r+0xaf8>
  403c92:	9b07      	ldr	r3, [sp, #28]
  403c94:	4498      	add	r8, r3
  403c96:	e00d      	b.n	403cb4 <_dtoa_r+0x7b4>
  403c98:	2000      	movs	r0, #0
  403c9a:	4947      	ldr	r1, [pc, #284]	; (403db8 <_dtoa_r+0x8b8>)
  403c9c:	f001 fed0 	bl	405a40 <__aeabi_dsub>
  403ca0:	4652      	mov	r2, sl
  403ca2:	465b      	mov	r3, fp
  403ca4:	f002 faf2 	bl	40628c <__aeabi_dcmplt>
  403ca8:	2800      	cmp	r0, #0
  403caa:	f040 82fb 	bne.w	4042a4 <_dtoa_r+0xda4>
  403cae:	4545      	cmp	r5, r8
  403cb0:	f000 81a2 	beq.w	403ff8 <_dtoa_r+0xaf8>
  403cb4:	4650      	mov	r0, sl
  403cb6:	4659      	mov	r1, fp
  403cb8:	2200      	movs	r2, #0
  403cba:	4b42      	ldr	r3, [pc, #264]	; (403dc4 <_dtoa_r+0x8c4>)
  403cbc:	f002 f874 	bl	405da8 <__aeabi_dmul>
  403cc0:	2200      	movs	r2, #0
  403cc2:	4b40      	ldr	r3, [pc, #256]	; (403dc4 <_dtoa_r+0x8c4>)
  403cc4:	4682      	mov	sl, r0
  403cc6:	468b      	mov	fp, r1
  403cc8:	4630      	mov	r0, r6
  403cca:	4639      	mov	r1, r7
  403ccc:	f002 f86c 	bl	405da8 <__aeabi_dmul>
  403cd0:	460f      	mov	r7, r1
  403cd2:	4606      	mov	r6, r0
  403cd4:	f002 fb18 	bl	406308 <__aeabi_d2iz>
  403cd8:	4604      	mov	r4, r0
  403cda:	f001 ffff 	bl	405cdc <__aeabi_i2d>
  403cde:	4602      	mov	r2, r0
  403ce0:	460b      	mov	r3, r1
  403ce2:	4630      	mov	r0, r6
  403ce4:	4639      	mov	r1, r7
  403ce6:	f001 feab 	bl	405a40 <__aeabi_dsub>
  403cea:	3430      	adds	r4, #48	; 0x30
  403cec:	b2e4      	uxtb	r4, r4
  403cee:	4652      	mov	r2, sl
  403cf0:	465b      	mov	r3, fp
  403cf2:	f805 4b01 	strb.w	r4, [r5], #1
  403cf6:	4606      	mov	r6, r0
  403cf8:	460f      	mov	r7, r1
  403cfa:	f002 fac7 	bl	40628c <__aeabi_dcmplt>
  403cfe:	4632      	mov	r2, r6
  403d00:	463b      	mov	r3, r7
  403d02:	2800      	cmp	r0, #0
  403d04:	d0c8      	beq.n	403c98 <_dtoa_r+0x798>
  403d06:	9b11      	ldr	r3, [sp, #68]	; 0x44
  403d08:	9304      	str	r3, [sp, #16]
  403d0a:	e5c4      	b.n	403896 <_dtoa_r+0x396>
  403d0c:	2300      	movs	r3, #0
  403d0e:	9309      	str	r3, [sp, #36]	; 0x24
  403d10:	9b21      	ldr	r3, [sp, #132]	; 0x84
  403d12:	2b00      	cmp	r3, #0
  403d14:	f340 8189 	ble.w	40402a <_dtoa_r+0xb2a>
  403d18:	461e      	mov	r6, r3
  403d1a:	461c      	mov	r4, r3
  403d1c:	930d      	str	r3, [sp, #52]	; 0x34
  403d1e:	9306      	str	r3, [sp, #24]
  403d20:	e6fd      	b.n	403b1e <_dtoa_r+0x61e>
  403d22:	2301      	movs	r3, #1
  403d24:	9309      	str	r3, [sp, #36]	; 0x24
  403d26:	e7f3      	b.n	403d10 <_dtoa_r+0x810>
  403d28:	9408      	str	r4, [sp, #32]
  403d2a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  403d2c:	9908      	ldr	r1, [sp, #32]
  403d2e:	4648      	mov	r0, r9
  403d30:	f001 f9d0 	bl	4050d4 <__pow5mult>
  403d34:	4604      	mov	r4, r0
  403d36:	e611      	b.n	40395c <_dtoa_r+0x45c>
  403d38:	9b06      	ldr	r3, [sp, #24]
  403d3a:	2b00      	cmp	r3, #0
  403d3c:	f73f acfc 	bgt.w	403738 <_dtoa_r+0x238>
  403d40:	f040 82da 	bne.w	4042f8 <_dtoa_r+0xdf8>
  403d44:	2200      	movs	r2, #0
  403d46:	4b20      	ldr	r3, [pc, #128]	; (403dc8 <_dtoa_r+0x8c8>)
  403d48:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  403d4c:	f002 f82c 	bl	405da8 <__aeabi_dmul>
  403d50:	4652      	mov	r2, sl
  403d52:	465b      	mov	r3, fp
  403d54:	f002 faae 	bl	4062b4 <__aeabi_dcmpge>
  403d58:	f8dd 8018 	ldr.w	r8, [sp, #24]
  403d5c:	4646      	mov	r6, r8
  403d5e:	2800      	cmp	r0, #0
  403d60:	f000 80f2 	beq.w	403f48 <_dtoa_r+0xa48>
  403d64:	9b21      	ldr	r3, [sp, #132]	; 0x84
  403d66:	9d07      	ldr	r5, [sp, #28]
  403d68:	43db      	mvns	r3, r3
  403d6a:	9304      	str	r3, [sp, #16]
  403d6c:	4641      	mov	r1, r8
  403d6e:	4648      	mov	r0, r9
  403d70:	f001 f876 	bl	404e60 <_Bfree>
  403d74:	2e00      	cmp	r6, #0
  403d76:	f43f ad8e 	beq.w	403896 <_dtoa_r+0x396>
  403d7a:	e68d      	b.n	403a98 <_dtoa_r+0x598>
  403d7c:	9a10      	ldr	r2, [sp, #64]	; 0x40
  403d7e:	2a00      	cmp	r2, #0
  403d80:	f000 8241 	beq.w	404206 <_dtoa_r+0xd06>
  403d84:	f203 4333 	addw	r3, r3, #1075	; 0x433
  403d88:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  403d8a:	9d05      	ldr	r5, [sp, #20]
  403d8c:	e5ab      	b.n	4038e6 <_dtoa_r+0x3e6>
  403d8e:	201c      	movs	r0, #28
  403d90:	9b05      	ldr	r3, [sp, #20]
  403d92:	4403      	add	r3, r0
  403d94:	9305      	str	r3, [sp, #20]
  403d96:	9b02      	ldr	r3, [sp, #8]
  403d98:	4403      	add	r3, r0
  403d9a:	4405      	add	r5, r0
  403d9c:	9302      	str	r3, [sp, #8]
  403d9e:	e60e      	b.n	4039be <_dtoa_r+0x4be>
  403da0:	9b20      	ldr	r3, [sp, #128]	; 0x80
  403da2:	2b01      	cmp	r3, #1
  403da4:	f340 8282 	ble.w	4042ac <_dtoa_r+0xdac>
  403da8:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
  403daa:	2001      	movs	r0, #1
  403dac:	e5f3      	b.n	403996 <_dtoa_r+0x496>
  403dae:	bf00      	nop
  403db0:	00406e88 	.word	0x00406e88
  403db4:	00406f50 	.word	0x00406f50
  403db8:	3ff00000 	.word	0x3ff00000
  403dbc:	401c0000 	.word	0x401c0000
  403dc0:	3fe00000 	.word	0x3fe00000
  403dc4:	40240000 	.word	0x40240000
  403dc8:	40140000 	.word	0x40140000
  403dcc:	4631      	mov	r1, r6
  403dce:	2300      	movs	r3, #0
  403dd0:	220a      	movs	r2, #10
  403dd2:	4648      	mov	r0, r9
  403dd4:	f001 f84e 	bl	404e74 <__multadd>
  403dd8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  403dda:	2b00      	cmp	r3, #0
  403ddc:	4606      	mov	r6, r0
  403dde:	f340 8297 	ble.w	404310 <_dtoa_r+0xe10>
  403de2:	9306      	str	r3, [sp, #24]
  403de4:	2d00      	cmp	r5, #0
  403de6:	dd05      	ble.n	403df4 <_dtoa_r+0x8f4>
  403de8:	4631      	mov	r1, r6
  403dea:	462a      	mov	r2, r5
  403dec:	4648      	mov	r0, r9
  403dee:	f001 f9c1 	bl	405174 <__lshift>
  403df2:	4606      	mov	r6, r0
  403df4:	2f00      	cmp	r7, #0
  403df6:	f040 817c 	bne.w	4040f2 <_dtoa_r+0xbf2>
  403dfa:	9605      	str	r6, [sp, #20]
  403dfc:	9b06      	ldr	r3, [sp, #24]
  403dfe:	9a07      	ldr	r2, [sp, #28]
  403e00:	f8dd b014 	ldr.w	fp, [sp, #20]
  403e04:	3b01      	subs	r3, #1
  403e06:	18d3      	adds	r3, r2, r3
  403e08:	9308      	str	r3, [sp, #32]
  403e0a:	f00a 0301 	and.w	r3, sl, #1
  403e0e:	9309      	str	r3, [sp, #36]	; 0x24
  403e10:	4617      	mov	r7, r2
  403e12:	46c2      	mov	sl, r8
  403e14:	4651      	mov	r1, sl
  403e16:	4620      	mov	r0, r4
  403e18:	f7ff fade 	bl	4033d8 <quorem>
  403e1c:	4631      	mov	r1, r6
  403e1e:	4605      	mov	r5, r0
  403e20:	4620      	mov	r0, r4
  403e22:	f001 f9ff 	bl	405224 <__mcmp>
  403e26:	465a      	mov	r2, fp
  403e28:	9002      	str	r0, [sp, #8]
  403e2a:	4651      	mov	r1, sl
  403e2c:	4648      	mov	r0, r9
  403e2e:	f001 fa19 	bl	405264 <__mdiff>
  403e32:	68c2      	ldr	r2, [r0, #12]
  403e34:	4680      	mov	r8, r0
  403e36:	f105 0330 	add.w	r3, r5, #48	; 0x30
  403e3a:	2a00      	cmp	r2, #0
  403e3c:	d149      	bne.n	403ed2 <_dtoa_r+0x9d2>
  403e3e:	4601      	mov	r1, r0
  403e40:	4620      	mov	r0, r4
  403e42:	9306      	str	r3, [sp, #24]
  403e44:	f001 f9ee 	bl	405224 <__mcmp>
  403e48:	4641      	mov	r1, r8
  403e4a:	9005      	str	r0, [sp, #20]
  403e4c:	4648      	mov	r0, r9
  403e4e:	f001 f807 	bl	404e60 <_Bfree>
  403e52:	9a05      	ldr	r2, [sp, #20]
  403e54:	9b06      	ldr	r3, [sp, #24]
  403e56:	b92a      	cbnz	r2, 403e64 <_dtoa_r+0x964>
  403e58:	9920      	ldr	r1, [sp, #128]	; 0x80
  403e5a:	b919      	cbnz	r1, 403e64 <_dtoa_r+0x964>
  403e5c:	9909      	ldr	r1, [sp, #36]	; 0x24
  403e5e:	2900      	cmp	r1, #0
  403e60:	f000 8236 	beq.w	4042d0 <_dtoa_r+0xdd0>
  403e64:	9902      	ldr	r1, [sp, #8]
  403e66:	2900      	cmp	r1, #0
  403e68:	f2c0 80e4 	blt.w	404034 <_dtoa_r+0xb34>
  403e6c:	d105      	bne.n	403e7a <_dtoa_r+0x97a>
  403e6e:	9920      	ldr	r1, [sp, #128]	; 0x80
  403e70:	b919      	cbnz	r1, 403e7a <_dtoa_r+0x97a>
  403e72:	9909      	ldr	r1, [sp, #36]	; 0x24
  403e74:	2900      	cmp	r1, #0
  403e76:	f000 80dd 	beq.w	404034 <_dtoa_r+0xb34>
  403e7a:	2a00      	cmp	r2, #0
  403e7c:	f300 814d 	bgt.w	40411a <_dtoa_r+0xc1a>
  403e80:	9a08      	ldr	r2, [sp, #32]
  403e82:	703b      	strb	r3, [r7, #0]
  403e84:	f107 0801 	add.w	r8, r7, #1
  403e88:	4297      	cmp	r7, r2
  403e8a:	4645      	mov	r5, r8
  403e8c:	f000 8154 	beq.w	404138 <_dtoa_r+0xc38>
  403e90:	4621      	mov	r1, r4
  403e92:	2300      	movs	r3, #0
  403e94:	220a      	movs	r2, #10
  403e96:	4648      	mov	r0, r9
  403e98:	f000 ffec 	bl	404e74 <__multadd>
  403e9c:	455e      	cmp	r6, fp
  403e9e:	4604      	mov	r4, r0
  403ea0:	4631      	mov	r1, r6
  403ea2:	f04f 0300 	mov.w	r3, #0
  403ea6:	f04f 020a 	mov.w	r2, #10
  403eaa:	4648      	mov	r0, r9
  403eac:	d00b      	beq.n	403ec6 <_dtoa_r+0x9c6>
  403eae:	f000 ffe1 	bl	404e74 <__multadd>
  403eb2:	4659      	mov	r1, fp
  403eb4:	4606      	mov	r6, r0
  403eb6:	2300      	movs	r3, #0
  403eb8:	220a      	movs	r2, #10
  403eba:	4648      	mov	r0, r9
  403ebc:	f000 ffda 	bl	404e74 <__multadd>
  403ec0:	4647      	mov	r7, r8
  403ec2:	4683      	mov	fp, r0
  403ec4:	e7a6      	b.n	403e14 <_dtoa_r+0x914>
  403ec6:	f000 ffd5 	bl	404e74 <__multadd>
  403eca:	4647      	mov	r7, r8
  403ecc:	4606      	mov	r6, r0
  403ece:	4683      	mov	fp, r0
  403ed0:	e7a0      	b.n	403e14 <_dtoa_r+0x914>
  403ed2:	4601      	mov	r1, r0
  403ed4:	4648      	mov	r0, r9
  403ed6:	9305      	str	r3, [sp, #20]
  403ed8:	f000 ffc2 	bl	404e60 <_Bfree>
  403edc:	2201      	movs	r2, #1
  403ede:	9b05      	ldr	r3, [sp, #20]
  403ee0:	e7c0      	b.n	403e64 <_dtoa_r+0x964>
  403ee2:	4641      	mov	r1, r8
  403ee4:	4620      	mov	r0, r4
  403ee6:	f001 f99d 	bl	405224 <__mcmp>
  403eea:	2800      	cmp	r0, #0
  403eec:	f6bf ad7d 	bge.w	4039ea <_dtoa_r+0x4ea>
  403ef0:	4621      	mov	r1, r4
  403ef2:	9c04      	ldr	r4, [sp, #16]
  403ef4:	2300      	movs	r3, #0
  403ef6:	3c01      	subs	r4, #1
  403ef8:	220a      	movs	r2, #10
  403efa:	4648      	mov	r0, r9
  403efc:	9404      	str	r4, [sp, #16]
  403efe:	f000 ffb9 	bl	404e74 <__multadd>
  403f02:	9b09      	ldr	r3, [sp, #36]	; 0x24
  403f04:	4604      	mov	r4, r0
  403f06:	2b00      	cmp	r3, #0
  403f08:	f47f af60 	bne.w	403dcc <_dtoa_r+0x8cc>
  403f0c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  403f0e:	2b00      	cmp	r3, #0
  403f10:	f340 81f6 	ble.w	404300 <_dtoa_r+0xe00>
  403f14:	9306      	str	r3, [sp, #24]
  403f16:	e570      	b.n	4039fa <_dtoa_r+0x4fa>
  403f18:	9c08      	ldr	r4, [sp, #32]
  403f1a:	e51f      	b.n	40395c <_dtoa_r+0x45c>
  403f1c:	9b20      	ldr	r3, [sp, #128]	; 0x80
  403f1e:	2b02      	cmp	r3, #2
  403f20:	f77f ad67 	ble.w	4039f2 <_dtoa_r+0x4f2>
  403f24:	9b06      	ldr	r3, [sp, #24]
  403f26:	2b00      	cmp	r3, #0
  403f28:	f040 8179 	bne.w	40421e <_dtoa_r+0xd1e>
  403f2c:	4641      	mov	r1, r8
  403f2e:	2205      	movs	r2, #5
  403f30:	4648      	mov	r0, r9
  403f32:	f000 ff9f 	bl	404e74 <__multadd>
  403f36:	4601      	mov	r1, r0
  403f38:	4680      	mov	r8, r0
  403f3a:	4620      	mov	r0, r4
  403f3c:	f001 f972 	bl	405224 <__mcmp>
  403f40:	2800      	cmp	r0, #0
  403f42:	9408      	str	r4, [sp, #32]
  403f44:	f77f af0e 	ble.w	403d64 <_dtoa_r+0x864>
  403f48:	9a04      	ldr	r2, [sp, #16]
  403f4a:	9907      	ldr	r1, [sp, #28]
  403f4c:	2331      	movs	r3, #49	; 0x31
  403f4e:	3201      	adds	r2, #1
  403f50:	9204      	str	r2, [sp, #16]
  403f52:	700b      	strb	r3, [r1, #0]
  403f54:	1c4d      	adds	r5, r1, #1
  403f56:	e709      	b.n	403d6c <_dtoa_r+0x86c>
  403f58:	9a04      	ldr	r2, [sp, #16]
  403f5a:	3201      	adds	r2, #1
  403f5c:	9204      	str	r2, [sp, #16]
  403f5e:	9a07      	ldr	r2, [sp, #28]
  403f60:	2331      	movs	r3, #49	; 0x31
  403f62:	7013      	strb	r3, [r2, #0]
  403f64:	e588      	b.n	403a78 <_dtoa_r+0x578>
  403f66:	2301      	movs	r3, #1
  403f68:	9309      	str	r3, [sp, #36]	; 0x24
  403f6a:	e5cd      	b.n	403b08 <_dtoa_r+0x608>
  403f6c:	f8dd 9014 	ldr.w	r9, [sp, #20]
  403f70:	e491      	b.n	403896 <_dtoa_r+0x396>
  403f72:	f1ba 0f00 	cmp.w	sl, #0
  403f76:	f47f ad04 	bne.w	403982 <_dtoa_r+0x482>
  403f7a:	f3cb 0313 	ubfx	r3, fp, #0, #20
  403f7e:	2b00      	cmp	r3, #0
  403f80:	f040 813f 	bne.w	404202 <_dtoa_r+0xd02>
  403f84:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
  403f88:	0d3f      	lsrs	r7, r7, #20
  403f8a:	053f      	lsls	r7, r7, #20
  403f8c:	b137      	cbz	r7, 403f9c <_dtoa_r+0xa9c>
  403f8e:	9b05      	ldr	r3, [sp, #20]
  403f90:	3301      	adds	r3, #1
  403f92:	9305      	str	r3, [sp, #20]
  403f94:	9b02      	ldr	r3, [sp, #8]
  403f96:	3301      	adds	r3, #1
  403f98:	9302      	str	r3, [sp, #8]
  403f9a:	2701      	movs	r7, #1
  403f9c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  403f9e:	2001      	movs	r0, #1
  403fa0:	2b00      	cmp	r3, #0
  403fa2:	f43f acf8 	beq.w	403996 <_dtoa_r+0x496>
  403fa6:	e4ed      	b.n	403984 <_dtoa_r+0x484>
  403fa8:	4640      	mov	r0, r8
  403faa:	f001 fe97 	bl	405cdc <__aeabi_i2d>
  403fae:	4632      	mov	r2, r6
  403fb0:	463b      	mov	r3, r7
  403fb2:	f001 fef9 	bl	405da8 <__aeabi_dmul>
  403fb6:	2200      	movs	r2, #0
  403fb8:	4bbf      	ldr	r3, [pc, #764]	; (4042b8 <_dtoa_r+0xdb8>)
  403fba:	f001 fd43 	bl	405a44 <__adddf3>
  403fbe:	4604      	mov	r4, r0
  403fc0:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
  403fc4:	4630      	mov	r0, r6
  403fc6:	4639      	mov	r1, r7
  403fc8:	2200      	movs	r2, #0
  403fca:	4bbc      	ldr	r3, [pc, #752]	; (4042bc <_dtoa_r+0xdbc>)
  403fcc:	f001 fd38 	bl	405a40 <__aeabi_dsub>
  403fd0:	4622      	mov	r2, r4
  403fd2:	462b      	mov	r3, r5
  403fd4:	4606      	mov	r6, r0
  403fd6:	460f      	mov	r7, r1
  403fd8:	f002 f976 	bl	4062c8 <__aeabi_dcmpgt>
  403fdc:	4680      	mov	r8, r0
  403fde:	2800      	cmp	r0, #0
  403fe0:	f040 8105 	bne.w	4041ee <_dtoa_r+0xcee>
  403fe4:	4622      	mov	r2, r4
  403fe6:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
  403fea:	4630      	mov	r0, r6
  403fec:	4639      	mov	r1, r7
  403fee:	f002 f94d 	bl	40628c <__aeabi_dcmplt>
  403ff2:	b108      	cbz	r0, 403ff8 <_dtoa_r+0xaf8>
  403ff4:	4646      	mov	r6, r8
  403ff6:	e6b5      	b.n	403d64 <_dtoa_r+0x864>
  403ff8:	e9dd ab0e 	ldrd	sl, fp, [sp, #56]	; 0x38
  403ffc:	f7ff bb89 	b.w	403712 <_dtoa_r+0x212>
  404000:	9807      	ldr	r0, [sp, #28]
  404002:	f7ff baae 	b.w	403562 <_dtoa_r+0x62>
  404006:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  404008:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  40400a:	970a      	str	r7, [sp, #40]	; 0x28
  40400c:	1afb      	subs	r3, r7, r3
  40400e:	441a      	add	r2, r3
  404010:	920b      	str	r2, [sp, #44]	; 0x2c
  404012:	2700      	movs	r7, #0
  404014:	e461      	b.n	4038da <_dtoa_r+0x3da>
  404016:	e9dd ab0e 	ldrd	sl, fp, [sp, #56]	; 0x38
  40401a:	f04f 0802 	mov.w	r8, #2
  40401e:	e5bb      	b.n	403b98 <_dtoa_r+0x698>
  404020:	461c      	mov	r4, r3
  404022:	2100      	movs	r1, #0
  404024:	f8c9 1044 	str.w	r1, [r9, #68]	; 0x44
  404028:	e58a      	b.n	403b40 <_dtoa_r+0x640>
  40402a:	2401      	movs	r4, #1
  40402c:	9421      	str	r4, [sp, #132]	; 0x84
  40402e:	940d      	str	r4, [sp, #52]	; 0x34
  404030:	9406      	str	r4, [sp, #24]
  404032:	e7f6      	b.n	404022 <_dtoa_r+0xb22>
  404034:	2a00      	cmp	r2, #0
  404036:	46d0      	mov	r8, sl
  404038:	f8cd b014 	str.w	fp, [sp, #20]
  40403c:	469a      	mov	sl, r3
  40403e:	dd11      	ble.n	404064 <_dtoa_r+0xb64>
  404040:	4621      	mov	r1, r4
  404042:	2201      	movs	r2, #1
  404044:	4648      	mov	r0, r9
  404046:	f001 f895 	bl	405174 <__lshift>
  40404a:	4641      	mov	r1, r8
  40404c:	4604      	mov	r4, r0
  40404e:	f001 f8e9 	bl	405224 <__mcmp>
  404052:	2800      	cmp	r0, #0
  404054:	f340 8149 	ble.w	4042ea <_dtoa_r+0xdea>
  404058:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
  40405c:	f000 8106 	beq.w	40426c <_dtoa_r+0xd6c>
  404060:	f105 0a31 	add.w	sl, r5, #49	; 0x31
  404064:	46b3      	mov	fp, r6
  404066:	f887 a000 	strb.w	sl, [r7]
  40406a:	1c7d      	adds	r5, r7, #1
  40406c:	9e05      	ldr	r6, [sp, #20]
  40406e:	9408      	str	r4, [sp, #32]
  404070:	e502      	b.n	403a78 <_dtoa_r+0x578>
  404072:	d104      	bne.n	40407e <_dtoa_r+0xb7e>
  404074:	f01a 0f01 	tst.w	sl, #1
  404078:	d001      	beq.n	40407e <_dtoa_r+0xb7e>
  40407a:	e4ed      	b.n	403a58 <_dtoa_r+0x558>
  40407c:	4615      	mov	r5, r2
  40407e:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  404082:	2b30      	cmp	r3, #48	; 0x30
  404084:	f105 32ff 	add.w	r2, r5, #4294967295
  404088:	d0f8      	beq.n	40407c <_dtoa_r+0xb7c>
  40408a:	e4f5      	b.n	403a78 <_dtoa_r+0x578>
  40408c:	9b04      	ldr	r3, [sp, #16]
  40408e:	425c      	negs	r4, r3
  404090:	2c00      	cmp	r4, #0
  404092:	f000 80bf 	beq.w	404214 <_dtoa_r+0xd14>
  404096:	4b8a      	ldr	r3, [pc, #552]	; (4042c0 <_dtoa_r+0xdc0>)
  404098:	f004 020f 	and.w	r2, r4, #15
  40409c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  4040a0:	e9d3 2300 	ldrd	r2, r3, [r3]
  4040a4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
  4040a8:	f001 fe7e 	bl	405da8 <__aeabi_dmul>
  4040ac:	1124      	asrs	r4, r4, #4
  4040ae:	4606      	mov	r6, r0
  4040b0:	460f      	mov	r7, r1
  4040b2:	f000 812a 	beq.w	40430a <_dtoa_r+0xe0a>
  4040b6:	4d83      	ldr	r5, [pc, #524]	; (4042c4 <_dtoa_r+0xdc4>)
  4040b8:	f04f 0802 	mov.w	r8, #2
  4040bc:	07e2      	lsls	r2, r4, #31
  4040be:	d509      	bpl.n	4040d4 <_dtoa_r+0xbd4>
  4040c0:	4630      	mov	r0, r6
  4040c2:	4639      	mov	r1, r7
  4040c4:	e9d5 2300 	ldrd	r2, r3, [r5]
  4040c8:	f001 fe6e 	bl	405da8 <__aeabi_dmul>
  4040cc:	f108 0801 	add.w	r8, r8, #1
  4040d0:	4606      	mov	r6, r0
  4040d2:	460f      	mov	r7, r1
  4040d4:	1064      	asrs	r4, r4, #1
  4040d6:	f105 0508 	add.w	r5, r5, #8
  4040da:	d1ef      	bne.n	4040bc <_dtoa_r+0xbbc>
  4040dc:	e576      	b.n	403bcc <_dtoa_r+0x6cc>
  4040de:	9907      	ldr	r1, [sp, #28]
  4040e0:	2230      	movs	r2, #48	; 0x30
  4040e2:	700a      	strb	r2, [r1, #0]
  4040e4:	9a04      	ldr	r2, [sp, #16]
  4040e6:	f815 4c01 	ldrb.w	r4, [r5, #-1]
  4040ea:	3201      	adds	r2, #1
  4040ec:	9204      	str	r2, [sp, #16]
  4040ee:	f7ff bbd0 	b.w	403892 <_dtoa_r+0x392>
  4040f2:	6871      	ldr	r1, [r6, #4]
  4040f4:	4648      	mov	r0, r9
  4040f6:	f000 fe8d 	bl	404e14 <_Balloc>
  4040fa:	6933      	ldr	r3, [r6, #16]
  4040fc:	1c9a      	adds	r2, r3, #2
  4040fe:	4605      	mov	r5, r0
  404100:	0092      	lsls	r2, r2, #2
  404102:	f106 010c 	add.w	r1, r6, #12
  404106:	300c      	adds	r0, #12
  404108:	f000 fd82 	bl	404c10 <memcpy>
  40410c:	4629      	mov	r1, r5
  40410e:	2201      	movs	r2, #1
  404110:	4648      	mov	r0, r9
  404112:	f001 f82f 	bl	405174 <__lshift>
  404116:	9005      	str	r0, [sp, #20]
  404118:	e670      	b.n	403dfc <_dtoa_r+0x8fc>
  40411a:	2b39      	cmp	r3, #57	; 0x39
  40411c:	f8cd b014 	str.w	fp, [sp, #20]
  404120:	46d0      	mov	r8, sl
  404122:	f000 80a3 	beq.w	40426c <_dtoa_r+0xd6c>
  404126:	f103 0a01 	add.w	sl, r3, #1
  40412a:	46b3      	mov	fp, r6
  40412c:	f887 a000 	strb.w	sl, [r7]
  404130:	1c7d      	adds	r5, r7, #1
  404132:	9e05      	ldr	r6, [sp, #20]
  404134:	9408      	str	r4, [sp, #32]
  404136:	e49f      	b.n	403a78 <_dtoa_r+0x578>
  404138:	465a      	mov	r2, fp
  40413a:	46d0      	mov	r8, sl
  40413c:	46b3      	mov	fp, r6
  40413e:	469a      	mov	sl, r3
  404140:	4616      	mov	r6, r2
  404142:	e47d      	b.n	403a40 <_dtoa_r+0x540>
  404144:	495e      	ldr	r1, [pc, #376]	; (4042c0 <_dtoa_r+0xdc0>)
  404146:	f108 3aff 	add.w	sl, r8, #4294967295
  40414a:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
  40414e:	4622      	mov	r2, r4
  404150:	462b      	mov	r3, r5
  404152:	e9d1 0100 	ldrd	r0, r1, [r1]
  404156:	f001 fe27 	bl	405da8 <__aeabi_dmul>
  40415a:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
  40415e:	4639      	mov	r1, r7
  404160:	4630      	mov	r0, r6
  404162:	f002 f8d1 	bl	406308 <__aeabi_d2iz>
  404166:	4604      	mov	r4, r0
  404168:	f001 fdb8 	bl	405cdc <__aeabi_i2d>
  40416c:	4602      	mov	r2, r0
  40416e:	460b      	mov	r3, r1
  404170:	4630      	mov	r0, r6
  404172:	4639      	mov	r1, r7
  404174:	f001 fc64 	bl	405a40 <__aeabi_dsub>
  404178:	9a07      	ldr	r2, [sp, #28]
  40417a:	3430      	adds	r4, #48	; 0x30
  40417c:	f1b8 0f01 	cmp.w	r8, #1
  404180:	4606      	mov	r6, r0
  404182:	460f      	mov	r7, r1
  404184:	7014      	strb	r4, [r2, #0]
  404186:	f102 0501 	add.w	r5, r2, #1
  40418a:	d01e      	beq.n	4041ca <_dtoa_r+0xcca>
  40418c:	9b07      	ldr	r3, [sp, #28]
  40418e:	eb03 0b08 	add.w	fp, r3, r8
  404192:	46a8      	mov	r8, r5
  404194:	2200      	movs	r2, #0
  404196:	4b4c      	ldr	r3, [pc, #304]	; (4042c8 <_dtoa_r+0xdc8>)
  404198:	4630      	mov	r0, r6
  40419a:	4639      	mov	r1, r7
  40419c:	f001 fe04 	bl	405da8 <__aeabi_dmul>
  4041a0:	460f      	mov	r7, r1
  4041a2:	4606      	mov	r6, r0
  4041a4:	f002 f8b0 	bl	406308 <__aeabi_d2iz>
  4041a8:	4604      	mov	r4, r0
  4041aa:	f001 fd97 	bl	405cdc <__aeabi_i2d>
  4041ae:	3430      	adds	r4, #48	; 0x30
  4041b0:	4602      	mov	r2, r0
  4041b2:	460b      	mov	r3, r1
  4041b4:	4630      	mov	r0, r6
  4041b6:	4639      	mov	r1, r7
  4041b8:	f001 fc42 	bl	405a40 <__aeabi_dsub>
  4041bc:	f808 4b01 	strb.w	r4, [r8], #1
  4041c0:	45c3      	cmp	fp, r8
  4041c2:	4606      	mov	r6, r0
  4041c4:	460f      	mov	r7, r1
  4041c6:	d1e5      	bne.n	404194 <_dtoa_r+0xc94>
  4041c8:	4455      	add	r5, sl
  4041ca:	2200      	movs	r2, #0
  4041cc:	4b3f      	ldr	r3, [pc, #252]	; (4042cc <_dtoa_r+0xdcc>)
  4041ce:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
  4041d2:	f001 fc37 	bl	405a44 <__adddf3>
  4041d6:	4632      	mov	r2, r6
  4041d8:	463b      	mov	r3, r7
  4041da:	f002 f857 	bl	40628c <__aeabi_dcmplt>
  4041de:	2800      	cmp	r0, #0
  4041e0:	d04c      	beq.n	40427c <_dtoa_r+0xd7c>
  4041e2:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4041e4:	9304      	str	r3, [sp, #16]
  4041e6:	f815 4c01 	ldrb.w	r4, [r5, #-1]
  4041ea:	f7ff bb46 	b.w	40387a <_dtoa_r+0x37a>
  4041ee:	f04f 0800 	mov.w	r8, #0
  4041f2:	4646      	mov	r6, r8
  4041f4:	e6a8      	b.n	403f48 <_dtoa_r+0xa48>
  4041f6:	9b05      	ldr	r3, [sp, #20]
  4041f8:	9a06      	ldr	r2, [sp, #24]
  4041fa:	1a9d      	subs	r5, r3, r2
  4041fc:	2300      	movs	r3, #0
  4041fe:	f7ff bb72 	b.w	4038e6 <_dtoa_r+0x3e6>
  404202:	2700      	movs	r7, #0
  404204:	e6ca      	b.n	403f9c <_dtoa_r+0xa9c>
  404206:	9b14      	ldr	r3, [sp, #80]	; 0x50
  404208:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  40420a:	9d05      	ldr	r5, [sp, #20]
  40420c:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
  404210:	f7ff bb69 	b.w	4038e6 <_dtoa_r+0x3e6>
  404214:	e9dd 670e 	ldrd	r6, r7, [sp, #56]	; 0x38
  404218:	f04f 0802 	mov.w	r8, #2
  40421c:	e4d6      	b.n	403bcc <_dtoa_r+0x6cc>
  40421e:	9408      	str	r4, [sp, #32]
  404220:	e5a0      	b.n	403d64 <_dtoa_r+0x864>
  404222:	9b06      	ldr	r3, [sp, #24]
  404224:	2b00      	cmp	r3, #0
  404226:	f43f aebf 	beq.w	403fa8 <_dtoa_r+0xaa8>
  40422a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40422c:	2b00      	cmp	r3, #0
  40422e:	f77f aee3 	ble.w	403ff8 <_dtoa_r+0xaf8>
  404232:	2200      	movs	r2, #0
  404234:	4b24      	ldr	r3, [pc, #144]	; (4042c8 <_dtoa_r+0xdc8>)
  404236:	4630      	mov	r0, r6
  404238:	4639      	mov	r1, r7
  40423a:	f001 fdb5 	bl	405da8 <__aeabi_dmul>
  40423e:	4606      	mov	r6, r0
  404240:	460f      	mov	r7, r1
  404242:	f108 0001 	add.w	r0, r8, #1
  404246:	f001 fd49 	bl	405cdc <__aeabi_i2d>
  40424a:	4632      	mov	r2, r6
  40424c:	463b      	mov	r3, r7
  40424e:	f001 fdab 	bl	405da8 <__aeabi_dmul>
  404252:	2200      	movs	r2, #0
  404254:	4b18      	ldr	r3, [pc, #96]	; (4042b8 <_dtoa_r+0xdb8>)
  404256:	f001 fbf5 	bl	405a44 <__adddf3>
  40425a:	9a04      	ldr	r2, [sp, #16]
  40425c:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
  404260:	3a01      	subs	r2, #1
  404262:	4604      	mov	r4, r0
  404264:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
  404268:	9211      	str	r2, [sp, #68]	; 0x44
  40426a:	e4d0      	b.n	403c0e <_dtoa_r+0x70e>
  40426c:	2239      	movs	r2, #57	; 0x39
  40426e:	46b3      	mov	fp, r6
  404270:	9408      	str	r4, [sp, #32]
  404272:	9e05      	ldr	r6, [sp, #20]
  404274:	703a      	strb	r2, [r7, #0]
  404276:	1c7d      	adds	r5, r7, #1
  404278:	f7ff bbf0 	b.w	403a5c <_dtoa_r+0x55c>
  40427c:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
  404280:	2000      	movs	r0, #0
  404282:	4912      	ldr	r1, [pc, #72]	; (4042cc <_dtoa_r+0xdcc>)
  404284:	f001 fbdc 	bl	405a40 <__aeabi_dsub>
  404288:	4632      	mov	r2, r6
  40428a:	463b      	mov	r3, r7
  40428c:	f002 f81c 	bl	4062c8 <__aeabi_dcmpgt>
  404290:	b908      	cbnz	r0, 404296 <_dtoa_r+0xd96>
  404292:	e6b1      	b.n	403ff8 <_dtoa_r+0xaf8>
  404294:	4615      	mov	r5, r2
  404296:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  40429a:	2b30      	cmp	r3, #48	; 0x30
  40429c:	f105 32ff 	add.w	r2, r5, #4294967295
  4042a0:	d0f8      	beq.n	404294 <_dtoa_r+0xd94>
  4042a2:	e530      	b.n	403d06 <_dtoa_r+0x806>
  4042a4:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4042a6:	9304      	str	r3, [sp, #16]
  4042a8:	f7ff bae7 	b.w	40387a <_dtoa_r+0x37a>
  4042ac:	f1ba 0f00 	cmp.w	sl, #0
  4042b0:	f47f ad7a 	bne.w	403da8 <_dtoa_r+0x8a8>
  4042b4:	e661      	b.n	403f7a <_dtoa_r+0xa7a>
  4042b6:	bf00      	nop
  4042b8:	401c0000 	.word	0x401c0000
  4042bc:	40140000 	.word	0x40140000
  4042c0:	00406e88 	.word	0x00406e88
  4042c4:	00406f50 	.word	0x00406f50
  4042c8:	40240000 	.word	0x40240000
  4042cc:	3fe00000 	.word	0x3fe00000
  4042d0:	2b39      	cmp	r3, #57	; 0x39
  4042d2:	f8cd b014 	str.w	fp, [sp, #20]
  4042d6:	46d0      	mov	r8, sl
  4042d8:	f8dd b008 	ldr.w	fp, [sp, #8]
  4042dc:	469a      	mov	sl, r3
  4042de:	d0c5      	beq.n	40426c <_dtoa_r+0xd6c>
  4042e0:	f1bb 0f00 	cmp.w	fp, #0
  4042e4:	f73f aebc 	bgt.w	404060 <_dtoa_r+0xb60>
  4042e8:	e6bc      	b.n	404064 <_dtoa_r+0xb64>
  4042ea:	f47f aebb 	bne.w	404064 <_dtoa_r+0xb64>
  4042ee:	f01a 0f01 	tst.w	sl, #1
  4042f2:	f43f aeb7 	beq.w	404064 <_dtoa_r+0xb64>
  4042f6:	e6af      	b.n	404058 <_dtoa_r+0xb58>
  4042f8:	f04f 0800 	mov.w	r8, #0
  4042fc:	4646      	mov	r6, r8
  4042fe:	e531      	b.n	403d64 <_dtoa_r+0x864>
  404300:	9b20      	ldr	r3, [sp, #128]	; 0x80
  404302:	2b02      	cmp	r3, #2
  404304:	dc21      	bgt.n	40434a <_dtoa_r+0xe4a>
  404306:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  404308:	e604      	b.n	403f14 <_dtoa_r+0xa14>
  40430a:	f04f 0802 	mov.w	r8, #2
  40430e:	e45d      	b.n	403bcc <_dtoa_r+0x6cc>
  404310:	9b20      	ldr	r3, [sp, #128]	; 0x80
  404312:	2b02      	cmp	r3, #2
  404314:	dc19      	bgt.n	40434a <_dtoa_r+0xe4a>
  404316:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  404318:	e563      	b.n	403de2 <_dtoa_r+0x8e2>
  40431a:	2400      	movs	r4, #0
  40431c:	f8c9 4044 	str.w	r4, [r9, #68]	; 0x44
  404320:	4621      	mov	r1, r4
  404322:	4648      	mov	r0, r9
  404324:	f000 fd76 	bl	404e14 <_Balloc>
  404328:	f04f 33ff 	mov.w	r3, #4294967295
  40432c:	9306      	str	r3, [sp, #24]
  40432e:	930d      	str	r3, [sp, #52]	; 0x34
  404330:	2301      	movs	r3, #1
  404332:	9007      	str	r0, [sp, #28]
  404334:	9421      	str	r4, [sp, #132]	; 0x84
  404336:	f8c9 0040 	str.w	r0, [r9, #64]	; 0x40
  40433a:	9309      	str	r3, [sp, #36]	; 0x24
  40433c:	f7ff b9e9 	b.w	403712 <_dtoa_r+0x212>
  404340:	f43f ab3d 	beq.w	4039be <_dtoa_r+0x4be>
  404344:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
  404348:	e522      	b.n	403d90 <_dtoa_r+0x890>
  40434a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40434c:	9306      	str	r3, [sp, #24]
  40434e:	e5e9      	b.n	403f24 <_dtoa_r+0xa24>
  404350:	2501      	movs	r5, #1
  404352:	f7ff b9a8 	b.w	4036a6 <_dtoa_r+0x1a6>
  404356:	bf00      	nop

00404358 <__libc_fini_array>:
  404358:	b538      	push	{r3, r4, r5, lr}
  40435a:	4d07      	ldr	r5, [pc, #28]	; (404378 <__libc_fini_array+0x20>)
  40435c:	4c07      	ldr	r4, [pc, #28]	; (40437c <__libc_fini_array+0x24>)
  40435e:	1b2c      	subs	r4, r5, r4
  404360:	10a4      	asrs	r4, r4, #2
  404362:	d005      	beq.n	404370 <__libc_fini_array+0x18>
  404364:	3c01      	subs	r4, #1
  404366:	f855 3d04 	ldr.w	r3, [r5, #-4]!
  40436a:	4798      	blx	r3
  40436c:	2c00      	cmp	r4, #0
  40436e:	d1f9      	bne.n	404364 <__libc_fini_array+0xc>
  404370:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  404374:	f002 be10 	b.w	406f98 <_fini>
  404378:	00406fa8 	.word	0x00406fa8
  40437c:	00406fa4 	.word	0x00406fa4

00404380 <_malloc_trim_r>:
  404380:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  404382:	4f23      	ldr	r7, [pc, #140]	; (404410 <_malloc_trim_r+0x90>)
  404384:	460c      	mov	r4, r1
  404386:	4606      	mov	r6, r0
  404388:	f000 fd40 	bl	404e0c <__malloc_lock>
  40438c:	68bb      	ldr	r3, [r7, #8]
  40438e:	685d      	ldr	r5, [r3, #4]
  404390:	f025 0503 	bic.w	r5, r5, #3
  404394:	1b29      	subs	r1, r5, r4
  404396:	f601 71ef 	addw	r1, r1, #4079	; 0xfef
  40439a:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  40439e:	f021 010f 	bic.w	r1, r1, #15
  4043a2:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  4043a6:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  4043aa:	db07      	blt.n	4043bc <_malloc_trim_r+0x3c>
  4043ac:	2100      	movs	r1, #0
  4043ae:	4630      	mov	r0, r6
  4043b0:	f001 fa2e 	bl	405810 <_sbrk_r>
  4043b4:	68bb      	ldr	r3, [r7, #8]
  4043b6:	442b      	add	r3, r5
  4043b8:	4298      	cmp	r0, r3
  4043ba:	d004      	beq.n	4043c6 <_malloc_trim_r+0x46>
  4043bc:	4630      	mov	r0, r6
  4043be:	f000 fd27 	bl	404e10 <__malloc_unlock>
  4043c2:	2000      	movs	r0, #0
  4043c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4043c6:	4261      	negs	r1, r4
  4043c8:	4630      	mov	r0, r6
  4043ca:	f001 fa21 	bl	405810 <_sbrk_r>
  4043ce:	3001      	adds	r0, #1
  4043d0:	d00d      	beq.n	4043ee <_malloc_trim_r+0x6e>
  4043d2:	4b10      	ldr	r3, [pc, #64]	; (404414 <_malloc_trim_r+0x94>)
  4043d4:	68ba      	ldr	r2, [r7, #8]
  4043d6:	6819      	ldr	r1, [r3, #0]
  4043d8:	1b2d      	subs	r5, r5, r4
  4043da:	f045 0501 	orr.w	r5, r5, #1
  4043de:	4630      	mov	r0, r6
  4043e0:	1b09      	subs	r1, r1, r4
  4043e2:	6055      	str	r5, [r2, #4]
  4043e4:	6019      	str	r1, [r3, #0]
  4043e6:	f000 fd13 	bl	404e10 <__malloc_unlock>
  4043ea:	2001      	movs	r0, #1
  4043ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4043ee:	2100      	movs	r1, #0
  4043f0:	4630      	mov	r0, r6
  4043f2:	f001 fa0d 	bl	405810 <_sbrk_r>
  4043f6:	68ba      	ldr	r2, [r7, #8]
  4043f8:	1a83      	subs	r3, r0, r2
  4043fa:	2b0f      	cmp	r3, #15
  4043fc:	ddde      	ble.n	4043bc <_malloc_trim_r+0x3c>
  4043fe:	4c06      	ldr	r4, [pc, #24]	; (404418 <_malloc_trim_r+0x98>)
  404400:	4904      	ldr	r1, [pc, #16]	; (404414 <_malloc_trim_r+0x94>)
  404402:	6824      	ldr	r4, [r4, #0]
  404404:	f043 0301 	orr.w	r3, r3, #1
  404408:	1b00      	subs	r0, r0, r4
  40440a:	6053      	str	r3, [r2, #4]
  40440c:	6008      	str	r0, [r1, #0]
  40440e:	e7d5      	b.n	4043bc <_malloc_trim_r+0x3c>
  404410:	2000047c 	.word	0x2000047c
  404414:	20000cfc 	.word	0x20000cfc
  404418:	20000888 	.word	0x20000888

0040441c <_free_r>:
  40441c:	2900      	cmp	r1, #0
  40441e:	d045      	beq.n	4044ac <_free_r+0x90>
  404420:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  404424:	460d      	mov	r5, r1
  404426:	4680      	mov	r8, r0
  404428:	f000 fcf0 	bl	404e0c <__malloc_lock>
  40442c:	f855 7c04 	ldr.w	r7, [r5, #-4]
  404430:	496a      	ldr	r1, [pc, #424]	; (4045dc <_free_r+0x1c0>)
  404432:	f027 0301 	bic.w	r3, r7, #1
  404436:	f1a5 0408 	sub.w	r4, r5, #8
  40443a:	18e2      	adds	r2, r4, r3
  40443c:	688e      	ldr	r6, [r1, #8]
  40443e:	6850      	ldr	r0, [r2, #4]
  404440:	42b2      	cmp	r2, r6
  404442:	f020 0003 	bic.w	r0, r0, #3
  404446:	d062      	beq.n	40450e <_free_r+0xf2>
  404448:	07fe      	lsls	r6, r7, #31
  40444a:	6050      	str	r0, [r2, #4]
  40444c:	d40b      	bmi.n	404466 <_free_r+0x4a>
  40444e:	f855 7c08 	ldr.w	r7, [r5, #-8]
  404452:	1be4      	subs	r4, r4, r7
  404454:	f101 0e08 	add.w	lr, r1, #8
  404458:	68a5      	ldr	r5, [r4, #8]
  40445a:	4575      	cmp	r5, lr
  40445c:	443b      	add	r3, r7
  40445e:	d06f      	beq.n	404540 <_free_r+0x124>
  404460:	68e7      	ldr	r7, [r4, #12]
  404462:	60ef      	str	r7, [r5, #12]
  404464:	60bd      	str	r5, [r7, #8]
  404466:	1815      	adds	r5, r2, r0
  404468:	686d      	ldr	r5, [r5, #4]
  40446a:	07ed      	lsls	r5, r5, #31
  40446c:	d542      	bpl.n	4044f4 <_free_r+0xd8>
  40446e:	f043 0201 	orr.w	r2, r3, #1
  404472:	6062      	str	r2, [r4, #4]
  404474:	50e3      	str	r3, [r4, r3]
  404476:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  40447a:	d218      	bcs.n	4044ae <_free_r+0x92>
  40447c:	08db      	lsrs	r3, r3, #3
  40447e:	1c5a      	adds	r2, r3, #1
  404480:	684d      	ldr	r5, [r1, #4]
  404482:	f851 7032 	ldr.w	r7, [r1, r2, lsl #3]
  404486:	60a7      	str	r7, [r4, #8]
  404488:	2001      	movs	r0, #1
  40448a:	109b      	asrs	r3, r3, #2
  40448c:	fa00 f303 	lsl.w	r3, r0, r3
  404490:	eb01 00c2 	add.w	r0, r1, r2, lsl #3
  404494:	431d      	orrs	r5, r3
  404496:	3808      	subs	r0, #8
  404498:	60e0      	str	r0, [r4, #12]
  40449a:	604d      	str	r5, [r1, #4]
  40449c:	f841 4032 	str.w	r4, [r1, r2, lsl #3]
  4044a0:	60fc      	str	r4, [r7, #12]
  4044a2:	4640      	mov	r0, r8
  4044a4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  4044a8:	f000 bcb2 	b.w	404e10 <__malloc_unlock>
  4044ac:	4770      	bx	lr
  4044ae:	0a5a      	lsrs	r2, r3, #9
  4044b0:	2a04      	cmp	r2, #4
  4044b2:	d853      	bhi.n	40455c <_free_r+0x140>
  4044b4:	099a      	lsrs	r2, r3, #6
  4044b6:	f102 0739 	add.w	r7, r2, #57	; 0x39
  4044ba:	007f      	lsls	r7, r7, #1
  4044bc:	f102 0538 	add.w	r5, r2, #56	; 0x38
  4044c0:	eb01 0087 	add.w	r0, r1, r7, lsl #2
  4044c4:	f851 2027 	ldr.w	r2, [r1, r7, lsl #2]
  4044c8:	4944      	ldr	r1, [pc, #272]	; (4045dc <_free_r+0x1c0>)
  4044ca:	3808      	subs	r0, #8
  4044cc:	4290      	cmp	r0, r2
  4044ce:	d04d      	beq.n	40456c <_free_r+0x150>
  4044d0:	6851      	ldr	r1, [r2, #4]
  4044d2:	f021 0103 	bic.w	r1, r1, #3
  4044d6:	428b      	cmp	r3, r1
  4044d8:	d202      	bcs.n	4044e0 <_free_r+0xc4>
  4044da:	6892      	ldr	r2, [r2, #8]
  4044dc:	4290      	cmp	r0, r2
  4044de:	d1f7      	bne.n	4044d0 <_free_r+0xb4>
  4044e0:	68d0      	ldr	r0, [r2, #12]
  4044e2:	60e0      	str	r0, [r4, #12]
  4044e4:	60a2      	str	r2, [r4, #8]
  4044e6:	6084      	str	r4, [r0, #8]
  4044e8:	60d4      	str	r4, [r2, #12]
  4044ea:	4640      	mov	r0, r8
  4044ec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  4044f0:	f000 bc8e 	b.w	404e10 <__malloc_unlock>
  4044f4:	6895      	ldr	r5, [r2, #8]
  4044f6:	4f3a      	ldr	r7, [pc, #232]	; (4045e0 <_free_r+0x1c4>)
  4044f8:	42bd      	cmp	r5, r7
  4044fa:	4403      	add	r3, r0
  4044fc:	d03f      	beq.n	40457e <_free_r+0x162>
  4044fe:	68d0      	ldr	r0, [r2, #12]
  404500:	60e8      	str	r0, [r5, #12]
  404502:	f043 0201 	orr.w	r2, r3, #1
  404506:	6085      	str	r5, [r0, #8]
  404508:	6062      	str	r2, [r4, #4]
  40450a:	50e3      	str	r3, [r4, r3]
  40450c:	e7b3      	b.n	404476 <_free_r+0x5a>
  40450e:	07ff      	lsls	r7, r7, #31
  404510:	4403      	add	r3, r0
  404512:	d407      	bmi.n	404524 <_free_r+0x108>
  404514:	f855 2c08 	ldr.w	r2, [r5, #-8]
  404518:	1aa4      	subs	r4, r4, r2
  40451a:	4413      	add	r3, r2
  40451c:	68a0      	ldr	r0, [r4, #8]
  40451e:	68e2      	ldr	r2, [r4, #12]
  404520:	60c2      	str	r2, [r0, #12]
  404522:	6090      	str	r0, [r2, #8]
  404524:	4a2f      	ldr	r2, [pc, #188]	; (4045e4 <_free_r+0x1c8>)
  404526:	6812      	ldr	r2, [r2, #0]
  404528:	f043 0001 	orr.w	r0, r3, #1
  40452c:	4293      	cmp	r3, r2
  40452e:	6060      	str	r0, [r4, #4]
  404530:	608c      	str	r4, [r1, #8]
  404532:	d3b6      	bcc.n	4044a2 <_free_r+0x86>
  404534:	4b2c      	ldr	r3, [pc, #176]	; (4045e8 <_free_r+0x1cc>)
  404536:	4640      	mov	r0, r8
  404538:	6819      	ldr	r1, [r3, #0]
  40453a:	f7ff ff21 	bl	404380 <_malloc_trim_r>
  40453e:	e7b0      	b.n	4044a2 <_free_r+0x86>
  404540:	1811      	adds	r1, r2, r0
  404542:	6849      	ldr	r1, [r1, #4]
  404544:	07c9      	lsls	r1, r1, #31
  404546:	d444      	bmi.n	4045d2 <_free_r+0x1b6>
  404548:	6891      	ldr	r1, [r2, #8]
  40454a:	68d2      	ldr	r2, [r2, #12]
  40454c:	60ca      	str	r2, [r1, #12]
  40454e:	4403      	add	r3, r0
  404550:	f043 0001 	orr.w	r0, r3, #1
  404554:	6091      	str	r1, [r2, #8]
  404556:	6060      	str	r0, [r4, #4]
  404558:	50e3      	str	r3, [r4, r3]
  40455a:	e7a2      	b.n	4044a2 <_free_r+0x86>
  40455c:	2a14      	cmp	r2, #20
  40455e:	d817      	bhi.n	404590 <_free_r+0x174>
  404560:	f102 075c 	add.w	r7, r2, #92	; 0x5c
  404564:	007f      	lsls	r7, r7, #1
  404566:	f102 055b 	add.w	r5, r2, #91	; 0x5b
  40456a:	e7a9      	b.n	4044c0 <_free_r+0xa4>
  40456c:	10aa      	asrs	r2, r5, #2
  40456e:	684b      	ldr	r3, [r1, #4]
  404570:	2501      	movs	r5, #1
  404572:	fa05 f202 	lsl.w	r2, r5, r2
  404576:	4313      	orrs	r3, r2
  404578:	604b      	str	r3, [r1, #4]
  40457a:	4602      	mov	r2, r0
  40457c:	e7b1      	b.n	4044e2 <_free_r+0xc6>
  40457e:	f043 0201 	orr.w	r2, r3, #1
  404582:	614c      	str	r4, [r1, #20]
  404584:	610c      	str	r4, [r1, #16]
  404586:	60e5      	str	r5, [r4, #12]
  404588:	60a5      	str	r5, [r4, #8]
  40458a:	6062      	str	r2, [r4, #4]
  40458c:	50e3      	str	r3, [r4, r3]
  40458e:	e788      	b.n	4044a2 <_free_r+0x86>
  404590:	2a54      	cmp	r2, #84	; 0x54
  404592:	d806      	bhi.n	4045a2 <_free_r+0x186>
  404594:	0b1a      	lsrs	r2, r3, #12
  404596:	f102 076f 	add.w	r7, r2, #111	; 0x6f
  40459a:	007f      	lsls	r7, r7, #1
  40459c:	f102 056e 	add.w	r5, r2, #110	; 0x6e
  4045a0:	e78e      	b.n	4044c0 <_free_r+0xa4>
  4045a2:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  4045a6:	d806      	bhi.n	4045b6 <_free_r+0x19a>
  4045a8:	0bda      	lsrs	r2, r3, #15
  4045aa:	f102 0778 	add.w	r7, r2, #120	; 0x78
  4045ae:	007f      	lsls	r7, r7, #1
  4045b0:	f102 0577 	add.w	r5, r2, #119	; 0x77
  4045b4:	e784      	b.n	4044c0 <_free_r+0xa4>
  4045b6:	f240 5054 	movw	r0, #1364	; 0x554
  4045ba:	4282      	cmp	r2, r0
  4045bc:	d806      	bhi.n	4045cc <_free_r+0x1b0>
  4045be:	0c9a      	lsrs	r2, r3, #18
  4045c0:	f102 077d 	add.w	r7, r2, #125	; 0x7d
  4045c4:	007f      	lsls	r7, r7, #1
  4045c6:	f102 057c 	add.w	r5, r2, #124	; 0x7c
  4045ca:	e779      	b.n	4044c0 <_free_r+0xa4>
  4045cc:	27fe      	movs	r7, #254	; 0xfe
  4045ce:	257e      	movs	r5, #126	; 0x7e
  4045d0:	e776      	b.n	4044c0 <_free_r+0xa4>
  4045d2:	f043 0201 	orr.w	r2, r3, #1
  4045d6:	6062      	str	r2, [r4, #4]
  4045d8:	50e3      	str	r3, [r4, r3]
  4045da:	e762      	b.n	4044a2 <_free_r+0x86>
  4045dc:	2000047c 	.word	0x2000047c
  4045e0:	20000484 	.word	0x20000484
  4045e4:	20000884 	.word	0x20000884
  4045e8:	20000cf8 	.word	0x20000cf8

004045ec <_localeconv_r>:
  4045ec:	4800      	ldr	r0, [pc, #0]	; (4045f0 <_localeconv_r+0x4>)
  4045ee:	4770      	bx	lr
  4045f0:	20000444 	.word	0x20000444

004045f4 <_malloc_r>:
  4045f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4045f8:	f101 050b 	add.w	r5, r1, #11
  4045fc:	2d16      	cmp	r5, #22
  4045fe:	b083      	sub	sp, #12
  404600:	4606      	mov	r6, r0
  404602:	f240 809f 	bls.w	404744 <_malloc_r+0x150>
  404606:	f035 0507 	bics.w	r5, r5, #7
  40460a:	f100 80bf 	bmi.w	40478c <_malloc_r+0x198>
  40460e:	42a9      	cmp	r1, r5
  404610:	f200 80bc 	bhi.w	40478c <_malloc_r+0x198>
  404614:	f000 fbfa 	bl	404e0c <__malloc_lock>
  404618:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
  40461c:	f0c0 829c 	bcc.w	404b58 <_malloc_r+0x564>
  404620:	0a6b      	lsrs	r3, r5, #9
  404622:	f000 80ba 	beq.w	40479a <_malloc_r+0x1a6>
  404626:	2b04      	cmp	r3, #4
  404628:	f200 8183 	bhi.w	404932 <_malloc_r+0x33e>
  40462c:	09a8      	lsrs	r0, r5, #6
  40462e:	f100 0e39 	add.w	lr, r0, #57	; 0x39
  404632:	ea4f 034e 	mov.w	r3, lr, lsl #1
  404636:	3038      	adds	r0, #56	; 0x38
  404638:	4fc4      	ldr	r7, [pc, #784]	; (40494c <_malloc_r+0x358>)
  40463a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
  40463e:	f1a3 0108 	sub.w	r1, r3, #8
  404642:	685c      	ldr	r4, [r3, #4]
  404644:	42a1      	cmp	r1, r4
  404646:	d107      	bne.n	404658 <_malloc_r+0x64>
  404648:	e0ac      	b.n	4047a4 <_malloc_r+0x1b0>
  40464a:	2a00      	cmp	r2, #0
  40464c:	f280 80ac 	bge.w	4047a8 <_malloc_r+0x1b4>
  404650:	68e4      	ldr	r4, [r4, #12]
  404652:	42a1      	cmp	r1, r4
  404654:	f000 80a6 	beq.w	4047a4 <_malloc_r+0x1b0>
  404658:	6863      	ldr	r3, [r4, #4]
  40465a:	f023 0303 	bic.w	r3, r3, #3
  40465e:	1b5a      	subs	r2, r3, r5
  404660:	2a0f      	cmp	r2, #15
  404662:	ddf2      	ble.n	40464a <_malloc_r+0x56>
  404664:	49b9      	ldr	r1, [pc, #740]	; (40494c <_malloc_r+0x358>)
  404666:	693c      	ldr	r4, [r7, #16]
  404668:	f101 0e08 	add.w	lr, r1, #8
  40466c:	4574      	cmp	r4, lr
  40466e:	f000 81b3 	beq.w	4049d8 <_malloc_r+0x3e4>
  404672:	6863      	ldr	r3, [r4, #4]
  404674:	f023 0303 	bic.w	r3, r3, #3
  404678:	1b5a      	subs	r2, r3, r5
  40467a:	2a0f      	cmp	r2, #15
  40467c:	f300 8199 	bgt.w	4049b2 <_malloc_r+0x3be>
  404680:	2a00      	cmp	r2, #0
  404682:	f8c1 e014 	str.w	lr, [r1, #20]
  404686:	f8c1 e010 	str.w	lr, [r1, #16]
  40468a:	f280 809e 	bge.w	4047ca <_malloc_r+0x1d6>
  40468e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  404692:	f080 8167 	bcs.w	404964 <_malloc_r+0x370>
  404696:	08db      	lsrs	r3, r3, #3
  404698:	f103 0c01 	add.w	ip, r3, #1
  40469c:	2201      	movs	r2, #1
  40469e:	109b      	asrs	r3, r3, #2
  4046a0:	fa02 f303 	lsl.w	r3, r2, r3
  4046a4:	684a      	ldr	r2, [r1, #4]
  4046a6:	f851 803c 	ldr.w	r8, [r1, ip, lsl #3]
  4046aa:	f8c4 8008 	str.w	r8, [r4, #8]
  4046ae:	eb01 09cc 	add.w	r9, r1, ip, lsl #3
  4046b2:	431a      	orrs	r2, r3
  4046b4:	f1a9 0308 	sub.w	r3, r9, #8
  4046b8:	60e3      	str	r3, [r4, #12]
  4046ba:	604a      	str	r2, [r1, #4]
  4046bc:	f841 403c 	str.w	r4, [r1, ip, lsl #3]
  4046c0:	f8c8 400c 	str.w	r4, [r8, #12]
  4046c4:	1083      	asrs	r3, r0, #2
  4046c6:	2401      	movs	r4, #1
  4046c8:	409c      	lsls	r4, r3
  4046ca:	4294      	cmp	r4, r2
  4046cc:	f200 808a 	bhi.w	4047e4 <_malloc_r+0x1f0>
  4046d0:	4214      	tst	r4, r2
  4046d2:	d106      	bne.n	4046e2 <_malloc_r+0xee>
  4046d4:	f020 0003 	bic.w	r0, r0, #3
  4046d8:	0064      	lsls	r4, r4, #1
  4046da:	4214      	tst	r4, r2
  4046dc:	f100 0004 	add.w	r0, r0, #4
  4046e0:	d0fa      	beq.n	4046d8 <_malloc_r+0xe4>
  4046e2:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
  4046e6:	46cc      	mov	ip, r9
  4046e8:	4680      	mov	r8, r0
  4046ea:	f8dc 100c 	ldr.w	r1, [ip, #12]
  4046ee:	458c      	cmp	ip, r1
  4046f0:	d107      	bne.n	404702 <_malloc_r+0x10e>
  4046f2:	e173      	b.n	4049dc <_malloc_r+0x3e8>
  4046f4:	2a00      	cmp	r2, #0
  4046f6:	f280 8181 	bge.w	4049fc <_malloc_r+0x408>
  4046fa:	68c9      	ldr	r1, [r1, #12]
  4046fc:	458c      	cmp	ip, r1
  4046fe:	f000 816d 	beq.w	4049dc <_malloc_r+0x3e8>
  404702:	684b      	ldr	r3, [r1, #4]
  404704:	f023 0303 	bic.w	r3, r3, #3
  404708:	1b5a      	subs	r2, r3, r5
  40470a:	2a0f      	cmp	r2, #15
  40470c:	ddf2      	ble.n	4046f4 <_malloc_r+0x100>
  40470e:	460c      	mov	r4, r1
  404710:	f8d1 c00c 	ldr.w	ip, [r1, #12]
  404714:	f854 8f08 	ldr.w	r8, [r4, #8]!
  404718:	194b      	adds	r3, r1, r5
  40471a:	f045 0501 	orr.w	r5, r5, #1
  40471e:	604d      	str	r5, [r1, #4]
  404720:	f042 0101 	orr.w	r1, r2, #1
  404724:	f8c8 c00c 	str.w	ip, [r8, #12]
  404728:	4630      	mov	r0, r6
  40472a:	f8cc 8008 	str.w	r8, [ip, #8]
  40472e:	617b      	str	r3, [r7, #20]
  404730:	613b      	str	r3, [r7, #16]
  404732:	f8c3 e00c 	str.w	lr, [r3, #12]
  404736:	f8c3 e008 	str.w	lr, [r3, #8]
  40473a:	6059      	str	r1, [r3, #4]
  40473c:	509a      	str	r2, [r3, r2]
  40473e:	f000 fb67 	bl	404e10 <__malloc_unlock>
  404742:	e01f      	b.n	404784 <_malloc_r+0x190>
  404744:	2910      	cmp	r1, #16
  404746:	d821      	bhi.n	40478c <_malloc_r+0x198>
  404748:	f000 fb60 	bl	404e0c <__malloc_lock>
  40474c:	2510      	movs	r5, #16
  40474e:	2306      	movs	r3, #6
  404750:	2002      	movs	r0, #2
  404752:	4f7e      	ldr	r7, [pc, #504]	; (40494c <_malloc_r+0x358>)
  404754:	eb07 0383 	add.w	r3, r7, r3, lsl #2
  404758:	f1a3 0208 	sub.w	r2, r3, #8
  40475c:	685c      	ldr	r4, [r3, #4]
  40475e:	4294      	cmp	r4, r2
  404760:	f000 8145 	beq.w	4049ee <_malloc_r+0x3fa>
  404764:	6863      	ldr	r3, [r4, #4]
  404766:	68e1      	ldr	r1, [r4, #12]
  404768:	68a5      	ldr	r5, [r4, #8]
  40476a:	f023 0303 	bic.w	r3, r3, #3
  40476e:	4423      	add	r3, r4
  404770:	4630      	mov	r0, r6
  404772:	685a      	ldr	r2, [r3, #4]
  404774:	60e9      	str	r1, [r5, #12]
  404776:	f042 0201 	orr.w	r2, r2, #1
  40477a:	608d      	str	r5, [r1, #8]
  40477c:	605a      	str	r2, [r3, #4]
  40477e:	f000 fb47 	bl	404e10 <__malloc_unlock>
  404782:	3408      	adds	r4, #8
  404784:	4620      	mov	r0, r4
  404786:	b003      	add	sp, #12
  404788:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40478c:	2400      	movs	r4, #0
  40478e:	230c      	movs	r3, #12
  404790:	4620      	mov	r0, r4
  404792:	6033      	str	r3, [r6, #0]
  404794:	b003      	add	sp, #12
  404796:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40479a:	2380      	movs	r3, #128	; 0x80
  40479c:	f04f 0e40 	mov.w	lr, #64	; 0x40
  4047a0:	203f      	movs	r0, #63	; 0x3f
  4047a2:	e749      	b.n	404638 <_malloc_r+0x44>
  4047a4:	4670      	mov	r0, lr
  4047a6:	e75d      	b.n	404664 <_malloc_r+0x70>
  4047a8:	4423      	add	r3, r4
  4047aa:	68e1      	ldr	r1, [r4, #12]
  4047ac:	685a      	ldr	r2, [r3, #4]
  4047ae:	68a5      	ldr	r5, [r4, #8]
  4047b0:	f042 0201 	orr.w	r2, r2, #1
  4047b4:	60e9      	str	r1, [r5, #12]
  4047b6:	4630      	mov	r0, r6
  4047b8:	608d      	str	r5, [r1, #8]
  4047ba:	605a      	str	r2, [r3, #4]
  4047bc:	f000 fb28 	bl	404e10 <__malloc_unlock>
  4047c0:	3408      	adds	r4, #8
  4047c2:	4620      	mov	r0, r4
  4047c4:	b003      	add	sp, #12
  4047c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4047ca:	4423      	add	r3, r4
  4047cc:	4630      	mov	r0, r6
  4047ce:	685a      	ldr	r2, [r3, #4]
  4047d0:	f042 0201 	orr.w	r2, r2, #1
  4047d4:	605a      	str	r2, [r3, #4]
  4047d6:	f000 fb1b 	bl	404e10 <__malloc_unlock>
  4047da:	3408      	adds	r4, #8
  4047dc:	4620      	mov	r0, r4
  4047de:	b003      	add	sp, #12
  4047e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4047e4:	68bc      	ldr	r4, [r7, #8]
  4047e6:	6863      	ldr	r3, [r4, #4]
  4047e8:	f023 0803 	bic.w	r8, r3, #3
  4047ec:	45a8      	cmp	r8, r5
  4047ee:	d304      	bcc.n	4047fa <_malloc_r+0x206>
  4047f0:	ebc5 0308 	rsb	r3, r5, r8
  4047f4:	2b0f      	cmp	r3, #15
  4047f6:	f300 808c 	bgt.w	404912 <_malloc_r+0x31e>
  4047fa:	4b55      	ldr	r3, [pc, #340]	; (404950 <_malloc_r+0x35c>)
  4047fc:	f8df 9160 	ldr.w	r9, [pc, #352]	; 404960 <_malloc_r+0x36c>
  404800:	681a      	ldr	r2, [r3, #0]
  404802:	f8d9 3000 	ldr.w	r3, [r9]
  404806:	3301      	adds	r3, #1
  404808:	442a      	add	r2, r5
  40480a:	eb04 0a08 	add.w	sl, r4, r8
  40480e:	f000 8160 	beq.w	404ad2 <_malloc_r+0x4de>
  404812:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
  404816:	320f      	adds	r2, #15
  404818:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
  40481c:	f022 020f 	bic.w	r2, r2, #15
  404820:	4611      	mov	r1, r2
  404822:	4630      	mov	r0, r6
  404824:	9201      	str	r2, [sp, #4]
  404826:	f000 fff3 	bl	405810 <_sbrk_r>
  40482a:	f1b0 3fff 	cmp.w	r0, #4294967295
  40482e:	4683      	mov	fp, r0
  404830:	9a01      	ldr	r2, [sp, #4]
  404832:	f000 8158 	beq.w	404ae6 <_malloc_r+0x4f2>
  404836:	4582      	cmp	sl, r0
  404838:	f200 80fc 	bhi.w	404a34 <_malloc_r+0x440>
  40483c:	4b45      	ldr	r3, [pc, #276]	; (404954 <_malloc_r+0x360>)
  40483e:	6819      	ldr	r1, [r3, #0]
  404840:	45da      	cmp	sl, fp
  404842:	4411      	add	r1, r2
  404844:	6019      	str	r1, [r3, #0]
  404846:	f000 8153 	beq.w	404af0 <_malloc_r+0x4fc>
  40484a:	f8d9 0000 	ldr.w	r0, [r9]
  40484e:	f8df e110 	ldr.w	lr, [pc, #272]	; 404960 <_malloc_r+0x36c>
  404852:	3001      	adds	r0, #1
  404854:	bf1b      	ittet	ne
  404856:	ebca 0a0b 	rsbne	sl, sl, fp
  40485a:	4451      	addne	r1, sl
  40485c:	f8ce b000 	streq.w	fp, [lr]
  404860:	6019      	strne	r1, [r3, #0]
  404862:	f01b 0107 	ands.w	r1, fp, #7
  404866:	f000 8117 	beq.w	404a98 <_malloc_r+0x4a4>
  40486a:	f1c1 0008 	rsb	r0, r1, #8
  40486e:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  404872:	4483      	add	fp, r0
  404874:	3108      	adds	r1, #8
  404876:	445a      	add	r2, fp
  404878:	f3c2 020b 	ubfx	r2, r2, #0, #12
  40487c:	ebc2 0901 	rsb	r9, r2, r1
  404880:	4649      	mov	r1, r9
  404882:	4630      	mov	r0, r6
  404884:	9301      	str	r3, [sp, #4]
  404886:	f000 ffc3 	bl	405810 <_sbrk_r>
  40488a:	1c43      	adds	r3, r0, #1
  40488c:	9b01      	ldr	r3, [sp, #4]
  40488e:	f000 813f 	beq.w	404b10 <_malloc_r+0x51c>
  404892:	ebcb 0200 	rsb	r2, fp, r0
  404896:	444a      	add	r2, r9
  404898:	f042 0201 	orr.w	r2, r2, #1
  40489c:	6819      	ldr	r1, [r3, #0]
  40489e:	f8c7 b008 	str.w	fp, [r7, #8]
  4048a2:	4449      	add	r1, r9
  4048a4:	42bc      	cmp	r4, r7
  4048a6:	f8cb 2004 	str.w	r2, [fp, #4]
  4048aa:	6019      	str	r1, [r3, #0]
  4048ac:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 404954 <_malloc_r+0x360>
  4048b0:	d016      	beq.n	4048e0 <_malloc_r+0x2ec>
  4048b2:	f1b8 0f0f 	cmp.w	r8, #15
  4048b6:	f240 80fd 	bls.w	404ab4 <_malloc_r+0x4c0>
  4048ba:	6862      	ldr	r2, [r4, #4]
  4048bc:	f1a8 030c 	sub.w	r3, r8, #12
  4048c0:	f023 0307 	bic.w	r3, r3, #7
  4048c4:	18e0      	adds	r0, r4, r3
  4048c6:	f002 0201 	and.w	r2, r2, #1
  4048ca:	f04f 0e05 	mov.w	lr, #5
  4048ce:	431a      	orrs	r2, r3
  4048d0:	2b0f      	cmp	r3, #15
  4048d2:	6062      	str	r2, [r4, #4]
  4048d4:	f8c0 e004 	str.w	lr, [r0, #4]
  4048d8:	f8c0 e008 	str.w	lr, [r0, #8]
  4048dc:	f200 811c 	bhi.w	404b18 <_malloc_r+0x524>
  4048e0:	4b1d      	ldr	r3, [pc, #116]	; (404958 <_malloc_r+0x364>)
  4048e2:	68bc      	ldr	r4, [r7, #8]
  4048e4:	681a      	ldr	r2, [r3, #0]
  4048e6:	4291      	cmp	r1, r2
  4048e8:	bf88      	it	hi
  4048ea:	6019      	strhi	r1, [r3, #0]
  4048ec:	4b1b      	ldr	r3, [pc, #108]	; (40495c <_malloc_r+0x368>)
  4048ee:	681a      	ldr	r2, [r3, #0]
  4048f0:	4291      	cmp	r1, r2
  4048f2:	6862      	ldr	r2, [r4, #4]
  4048f4:	bf88      	it	hi
  4048f6:	6019      	strhi	r1, [r3, #0]
  4048f8:	f022 0203 	bic.w	r2, r2, #3
  4048fc:	4295      	cmp	r5, r2
  4048fe:	eba2 0305 	sub.w	r3, r2, r5
  404902:	d801      	bhi.n	404908 <_malloc_r+0x314>
  404904:	2b0f      	cmp	r3, #15
  404906:	dc04      	bgt.n	404912 <_malloc_r+0x31e>
  404908:	4630      	mov	r0, r6
  40490a:	f000 fa81 	bl	404e10 <__malloc_unlock>
  40490e:	2400      	movs	r4, #0
  404910:	e738      	b.n	404784 <_malloc_r+0x190>
  404912:	1962      	adds	r2, r4, r5
  404914:	f043 0301 	orr.w	r3, r3, #1
  404918:	f045 0501 	orr.w	r5, r5, #1
  40491c:	6065      	str	r5, [r4, #4]
  40491e:	4630      	mov	r0, r6
  404920:	60ba      	str	r2, [r7, #8]
  404922:	6053      	str	r3, [r2, #4]
  404924:	f000 fa74 	bl	404e10 <__malloc_unlock>
  404928:	3408      	adds	r4, #8
  40492a:	4620      	mov	r0, r4
  40492c:	b003      	add	sp, #12
  40492e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404932:	2b14      	cmp	r3, #20
  404934:	d971      	bls.n	404a1a <_malloc_r+0x426>
  404936:	2b54      	cmp	r3, #84	; 0x54
  404938:	f200 80a4 	bhi.w	404a84 <_malloc_r+0x490>
  40493c:	0b28      	lsrs	r0, r5, #12
  40493e:	f100 0e6f 	add.w	lr, r0, #111	; 0x6f
  404942:	ea4f 034e 	mov.w	r3, lr, lsl #1
  404946:	306e      	adds	r0, #110	; 0x6e
  404948:	e676      	b.n	404638 <_malloc_r+0x44>
  40494a:	bf00      	nop
  40494c:	2000047c 	.word	0x2000047c
  404950:	20000cf8 	.word	0x20000cf8
  404954:	20000cfc 	.word	0x20000cfc
  404958:	20000cf4 	.word	0x20000cf4
  40495c:	20000cf0 	.word	0x20000cf0
  404960:	20000888 	.word	0x20000888
  404964:	0a5a      	lsrs	r2, r3, #9
  404966:	2a04      	cmp	r2, #4
  404968:	d95e      	bls.n	404a28 <_malloc_r+0x434>
  40496a:	2a14      	cmp	r2, #20
  40496c:	f200 80b3 	bhi.w	404ad6 <_malloc_r+0x4e2>
  404970:	f102 015c 	add.w	r1, r2, #92	; 0x5c
  404974:	0049      	lsls	r1, r1, #1
  404976:	325b      	adds	r2, #91	; 0x5b
  404978:	eb07 0c81 	add.w	ip, r7, r1, lsl #2
  40497c:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
  404980:	f8df 81dc 	ldr.w	r8, [pc, #476]	; 404b60 <_malloc_r+0x56c>
  404984:	f1ac 0c08 	sub.w	ip, ip, #8
  404988:	458c      	cmp	ip, r1
  40498a:	f000 8088 	beq.w	404a9e <_malloc_r+0x4aa>
  40498e:	684a      	ldr	r2, [r1, #4]
  404990:	f022 0203 	bic.w	r2, r2, #3
  404994:	4293      	cmp	r3, r2
  404996:	d202      	bcs.n	40499e <_malloc_r+0x3aa>
  404998:	6889      	ldr	r1, [r1, #8]
  40499a:	458c      	cmp	ip, r1
  40499c:	d1f7      	bne.n	40498e <_malloc_r+0x39a>
  40499e:	f8d1 c00c 	ldr.w	ip, [r1, #12]
  4049a2:	687a      	ldr	r2, [r7, #4]
  4049a4:	f8c4 c00c 	str.w	ip, [r4, #12]
  4049a8:	60a1      	str	r1, [r4, #8]
  4049aa:	f8cc 4008 	str.w	r4, [ip, #8]
  4049ae:	60cc      	str	r4, [r1, #12]
  4049b0:	e688      	b.n	4046c4 <_malloc_r+0xd0>
  4049b2:	1963      	adds	r3, r4, r5
  4049b4:	f042 0701 	orr.w	r7, r2, #1
  4049b8:	f045 0501 	orr.w	r5, r5, #1
  4049bc:	6065      	str	r5, [r4, #4]
  4049be:	4630      	mov	r0, r6
  4049c0:	614b      	str	r3, [r1, #20]
  4049c2:	610b      	str	r3, [r1, #16]
  4049c4:	f8c3 e00c 	str.w	lr, [r3, #12]
  4049c8:	f8c3 e008 	str.w	lr, [r3, #8]
  4049cc:	605f      	str	r7, [r3, #4]
  4049ce:	509a      	str	r2, [r3, r2]
  4049d0:	3408      	adds	r4, #8
  4049d2:	f000 fa1d 	bl	404e10 <__malloc_unlock>
  4049d6:	e6d5      	b.n	404784 <_malloc_r+0x190>
  4049d8:	684a      	ldr	r2, [r1, #4]
  4049da:	e673      	b.n	4046c4 <_malloc_r+0xd0>
  4049dc:	f108 0801 	add.w	r8, r8, #1
  4049e0:	f018 0f03 	tst.w	r8, #3
  4049e4:	f10c 0c08 	add.w	ip, ip, #8
  4049e8:	f47f ae7f 	bne.w	4046ea <_malloc_r+0xf6>
  4049ec:	e030      	b.n	404a50 <_malloc_r+0x45c>
  4049ee:	68dc      	ldr	r4, [r3, #12]
  4049f0:	42a3      	cmp	r3, r4
  4049f2:	bf08      	it	eq
  4049f4:	3002      	addeq	r0, #2
  4049f6:	f43f ae35 	beq.w	404664 <_malloc_r+0x70>
  4049fa:	e6b3      	b.n	404764 <_malloc_r+0x170>
  4049fc:	440b      	add	r3, r1
  4049fe:	460c      	mov	r4, r1
  404a00:	685a      	ldr	r2, [r3, #4]
  404a02:	68c9      	ldr	r1, [r1, #12]
  404a04:	f854 5f08 	ldr.w	r5, [r4, #8]!
  404a08:	f042 0201 	orr.w	r2, r2, #1
  404a0c:	605a      	str	r2, [r3, #4]
  404a0e:	4630      	mov	r0, r6
  404a10:	60e9      	str	r1, [r5, #12]
  404a12:	608d      	str	r5, [r1, #8]
  404a14:	f000 f9fc 	bl	404e10 <__malloc_unlock>
  404a18:	e6b4      	b.n	404784 <_malloc_r+0x190>
  404a1a:	f103 0e5c 	add.w	lr, r3, #92	; 0x5c
  404a1e:	f103 005b 	add.w	r0, r3, #91	; 0x5b
  404a22:	ea4f 034e 	mov.w	r3, lr, lsl #1
  404a26:	e607      	b.n	404638 <_malloc_r+0x44>
  404a28:	099a      	lsrs	r2, r3, #6
  404a2a:	f102 0139 	add.w	r1, r2, #57	; 0x39
  404a2e:	0049      	lsls	r1, r1, #1
  404a30:	3238      	adds	r2, #56	; 0x38
  404a32:	e7a1      	b.n	404978 <_malloc_r+0x384>
  404a34:	42bc      	cmp	r4, r7
  404a36:	4b4a      	ldr	r3, [pc, #296]	; (404b60 <_malloc_r+0x56c>)
  404a38:	f43f af00 	beq.w	40483c <_malloc_r+0x248>
  404a3c:	689c      	ldr	r4, [r3, #8]
  404a3e:	6862      	ldr	r2, [r4, #4]
  404a40:	f022 0203 	bic.w	r2, r2, #3
  404a44:	e75a      	b.n	4048fc <_malloc_r+0x308>
  404a46:	f859 3908 	ldr.w	r3, [r9], #-8
  404a4a:	4599      	cmp	r9, r3
  404a4c:	f040 8082 	bne.w	404b54 <_malloc_r+0x560>
  404a50:	f010 0f03 	tst.w	r0, #3
  404a54:	f100 30ff 	add.w	r0, r0, #4294967295
  404a58:	d1f5      	bne.n	404a46 <_malloc_r+0x452>
  404a5a:	687b      	ldr	r3, [r7, #4]
  404a5c:	ea23 0304 	bic.w	r3, r3, r4
  404a60:	607b      	str	r3, [r7, #4]
  404a62:	0064      	lsls	r4, r4, #1
  404a64:	429c      	cmp	r4, r3
  404a66:	f63f aebd 	bhi.w	4047e4 <_malloc_r+0x1f0>
  404a6a:	2c00      	cmp	r4, #0
  404a6c:	f43f aeba 	beq.w	4047e4 <_malloc_r+0x1f0>
  404a70:	421c      	tst	r4, r3
  404a72:	4640      	mov	r0, r8
  404a74:	f47f ae35 	bne.w	4046e2 <_malloc_r+0xee>
  404a78:	0064      	lsls	r4, r4, #1
  404a7a:	421c      	tst	r4, r3
  404a7c:	f100 0004 	add.w	r0, r0, #4
  404a80:	d0fa      	beq.n	404a78 <_malloc_r+0x484>
  404a82:	e62e      	b.n	4046e2 <_malloc_r+0xee>
  404a84:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  404a88:	d818      	bhi.n	404abc <_malloc_r+0x4c8>
  404a8a:	0be8      	lsrs	r0, r5, #15
  404a8c:	f100 0e78 	add.w	lr, r0, #120	; 0x78
  404a90:	ea4f 034e 	mov.w	r3, lr, lsl #1
  404a94:	3077      	adds	r0, #119	; 0x77
  404a96:	e5cf      	b.n	404638 <_malloc_r+0x44>
  404a98:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  404a9c:	e6eb      	b.n	404876 <_malloc_r+0x282>
  404a9e:	2101      	movs	r1, #1
  404aa0:	f8d8 3004 	ldr.w	r3, [r8, #4]
  404aa4:	1092      	asrs	r2, r2, #2
  404aa6:	fa01 f202 	lsl.w	r2, r1, r2
  404aaa:	431a      	orrs	r2, r3
  404aac:	f8c8 2004 	str.w	r2, [r8, #4]
  404ab0:	4661      	mov	r1, ip
  404ab2:	e777      	b.n	4049a4 <_malloc_r+0x3b0>
  404ab4:	2301      	movs	r3, #1
  404ab6:	f8cb 3004 	str.w	r3, [fp, #4]
  404aba:	e725      	b.n	404908 <_malloc_r+0x314>
  404abc:	f240 5254 	movw	r2, #1364	; 0x554
  404ac0:	4293      	cmp	r3, r2
  404ac2:	d820      	bhi.n	404b06 <_malloc_r+0x512>
  404ac4:	0ca8      	lsrs	r0, r5, #18
  404ac6:	f100 0e7d 	add.w	lr, r0, #125	; 0x7d
  404aca:	ea4f 034e 	mov.w	r3, lr, lsl #1
  404ace:	307c      	adds	r0, #124	; 0x7c
  404ad0:	e5b2      	b.n	404638 <_malloc_r+0x44>
  404ad2:	3210      	adds	r2, #16
  404ad4:	e6a4      	b.n	404820 <_malloc_r+0x22c>
  404ad6:	2a54      	cmp	r2, #84	; 0x54
  404ad8:	d826      	bhi.n	404b28 <_malloc_r+0x534>
  404ada:	0b1a      	lsrs	r2, r3, #12
  404adc:	f102 016f 	add.w	r1, r2, #111	; 0x6f
  404ae0:	0049      	lsls	r1, r1, #1
  404ae2:	326e      	adds	r2, #110	; 0x6e
  404ae4:	e748      	b.n	404978 <_malloc_r+0x384>
  404ae6:	68bc      	ldr	r4, [r7, #8]
  404ae8:	6862      	ldr	r2, [r4, #4]
  404aea:	f022 0203 	bic.w	r2, r2, #3
  404aee:	e705      	b.n	4048fc <_malloc_r+0x308>
  404af0:	f3ca 000b 	ubfx	r0, sl, #0, #12
  404af4:	2800      	cmp	r0, #0
  404af6:	f47f aea8 	bne.w	40484a <_malloc_r+0x256>
  404afa:	4442      	add	r2, r8
  404afc:	68bb      	ldr	r3, [r7, #8]
  404afe:	f042 0201 	orr.w	r2, r2, #1
  404b02:	605a      	str	r2, [r3, #4]
  404b04:	e6ec      	b.n	4048e0 <_malloc_r+0x2ec>
  404b06:	23fe      	movs	r3, #254	; 0xfe
  404b08:	f04f 0e7f 	mov.w	lr, #127	; 0x7f
  404b0c:	207e      	movs	r0, #126	; 0x7e
  404b0e:	e593      	b.n	404638 <_malloc_r+0x44>
  404b10:	2201      	movs	r2, #1
  404b12:	f04f 0900 	mov.w	r9, #0
  404b16:	e6c1      	b.n	40489c <_malloc_r+0x2a8>
  404b18:	f104 0108 	add.w	r1, r4, #8
  404b1c:	4630      	mov	r0, r6
  404b1e:	f7ff fc7d 	bl	40441c <_free_r>
  404b22:	f8d9 1000 	ldr.w	r1, [r9]
  404b26:	e6db      	b.n	4048e0 <_malloc_r+0x2ec>
  404b28:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  404b2c:	d805      	bhi.n	404b3a <_malloc_r+0x546>
  404b2e:	0bda      	lsrs	r2, r3, #15
  404b30:	f102 0178 	add.w	r1, r2, #120	; 0x78
  404b34:	0049      	lsls	r1, r1, #1
  404b36:	3277      	adds	r2, #119	; 0x77
  404b38:	e71e      	b.n	404978 <_malloc_r+0x384>
  404b3a:	f240 5154 	movw	r1, #1364	; 0x554
  404b3e:	428a      	cmp	r2, r1
  404b40:	d805      	bhi.n	404b4e <_malloc_r+0x55a>
  404b42:	0c9a      	lsrs	r2, r3, #18
  404b44:	f102 017d 	add.w	r1, r2, #125	; 0x7d
  404b48:	0049      	lsls	r1, r1, #1
  404b4a:	327c      	adds	r2, #124	; 0x7c
  404b4c:	e714      	b.n	404978 <_malloc_r+0x384>
  404b4e:	21fe      	movs	r1, #254	; 0xfe
  404b50:	227e      	movs	r2, #126	; 0x7e
  404b52:	e711      	b.n	404978 <_malloc_r+0x384>
  404b54:	687b      	ldr	r3, [r7, #4]
  404b56:	e784      	b.n	404a62 <_malloc_r+0x46e>
  404b58:	08e8      	lsrs	r0, r5, #3
  404b5a:	1c43      	adds	r3, r0, #1
  404b5c:	005b      	lsls	r3, r3, #1
  404b5e:	e5f8      	b.n	404752 <_malloc_r+0x15e>
  404b60:	2000047c 	.word	0x2000047c
	...

00404b70 <memchr>:
  404b70:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  404b74:	2a10      	cmp	r2, #16
  404b76:	db2b      	blt.n	404bd0 <memchr+0x60>
  404b78:	f010 0f07 	tst.w	r0, #7
  404b7c:	d008      	beq.n	404b90 <memchr+0x20>
  404b7e:	f810 3b01 	ldrb.w	r3, [r0], #1
  404b82:	3a01      	subs	r2, #1
  404b84:	428b      	cmp	r3, r1
  404b86:	d02d      	beq.n	404be4 <memchr+0x74>
  404b88:	f010 0f07 	tst.w	r0, #7
  404b8c:	b342      	cbz	r2, 404be0 <memchr+0x70>
  404b8e:	d1f6      	bne.n	404b7e <memchr+0xe>
  404b90:	b4f0      	push	{r4, r5, r6, r7}
  404b92:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  404b96:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  404b9a:	f022 0407 	bic.w	r4, r2, #7
  404b9e:	f07f 0700 	mvns.w	r7, #0
  404ba2:	2300      	movs	r3, #0
  404ba4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  404ba8:	3c08      	subs	r4, #8
  404baa:	ea85 0501 	eor.w	r5, r5, r1
  404bae:	ea86 0601 	eor.w	r6, r6, r1
  404bb2:	fa85 f547 	uadd8	r5, r5, r7
  404bb6:	faa3 f587 	sel	r5, r3, r7
  404bba:	fa86 f647 	uadd8	r6, r6, r7
  404bbe:	faa5 f687 	sel	r6, r5, r7
  404bc2:	b98e      	cbnz	r6, 404be8 <memchr+0x78>
  404bc4:	d1ee      	bne.n	404ba4 <memchr+0x34>
  404bc6:	bcf0      	pop	{r4, r5, r6, r7}
  404bc8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  404bcc:	f002 0207 	and.w	r2, r2, #7
  404bd0:	b132      	cbz	r2, 404be0 <memchr+0x70>
  404bd2:	f810 3b01 	ldrb.w	r3, [r0], #1
  404bd6:	3a01      	subs	r2, #1
  404bd8:	ea83 0301 	eor.w	r3, r3, r1
  404bdc:	b113      	cbz	r3, 404be4 <memchr+0x74>
  404bde:	d1f8      	bne.n	404bd2 <memchr+0x62>
  404be0:	2000      	movs	r0, #0
  404be2:	4770      	bx	lr
  404be4:	3801      	subs	r0, #1
  404be6:	4770      	bx	lr
  404be8:	2d00      	cmp	r5, #0
  404bea:	bf06      	itte	eq
  404bec:	4635      	moveq	r5, r6
  404bee:	3803      	subeq	r0, #3
  404bf0:	3807      	subne	r0, #7
  404bf2:	f015 0f01 	tst.w	r5, #1
  404bf6:	d107      	bne.n	404c08 <memchr+0x98>
  404bf8:	3001      	adds	r0, #1
  404bfa:	f415 7f80 	tst.w	r5, #256	; 0x100
  404bfe:	bf02      	ittt	eq
  404c00:	3001      	addeq	r0, #1
  404c02:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  404c06:	3001      	addeq	r0, #1
  404c08:	bcf0      	pop	{r4, r5, r6, r7}
  404c0a:	3801      	subs	r0, #1
  404c0c:	4770      	bx	lr
  404c0e:	bf00      	nop

00404c10 <memcpy>:
  404c10:	4684      	mov	ip, r0
  404c12:	ea41 0300 	orr.w	r3, r1, r0
  404c16:	f013 0303 	ands.w	r3, r3, #3
  404c1a:	d16d      	bne.n	404cf8 <memcpy+0xe8>
  404c1c:	3a40      	subs	r2, #64	; 0x40
  404c1e:	d341      	bcc.n	404ca4 <memcpy+0x94>
  404c20:	f851 3b04 	ldr.w	r3, [r1], #4
  404c24:	f840 3b04 	str.w	r3, [r0], #4
  404c28:	f851 3b04 	ldr.w	r3, [r1], #4
  404c2c:	f840 3b04 	str.w	r3, [r0], #4
  404c30:	f851 3b04 	ldr.w	r3, [r1], #4
  404c34:	f840 3b04 	str.w	r3, [r0], #4
  404c38:	f851 3b04 	ldr.w	r3, [r1], #4
  404c3c:	f840 3b04 	str.w	r3, [r0], #4
  404c40:	f851 3b04 	ldr.w	r3, [r1], #4
  404c44:	f840 3b04 	str.w	r3, [r0], #4
  404c48:	f851 3b04 	ldr.w	r3, [r1], #4
  404c4c:	f840 3b04 	str.w	r3, [r0], #4
  404c50:	f851 3b04 	ldr.w	r3, [r1], #4
  404c54:	f840 3b04 	str.w	r3, [r0], #4
  404c58:	f851 3b04 	ldr.w	r3, [r1], #4
  404c5c:	f840 3b04 	str.w	r3, [r0], #4
  404c60:	f851 3b04 	ldr.w	r3, [r1], #4
  404c64:	f840 3b04 	str.w	r3, [r0], #4
  404c68:	f851 3b04 	ldr.w	r3, [r1], #4
  404c6c:	f840 3b04 	str.w	r3, [r0], #4
  404c70:	f851 3b04 	ldr.w	r3, [r1], #4
  404c74:	f840 3b04 	str.w	r3, [r0], #4
  404c78:	f851 3b04 	ldr.w	r3, [r1], #4
  404c7c:	f840 3b04 	str.w	r3, [r0], #4
  404c80:	f851 3b04 	ldr.w	r3, [r1], #4
  404c84:	f840 3b04 	str.w	r3, [r0], #4
  404c88:	f851 3b04 	ldr.w	r3, [r1], #4
  404c8c:	f840 3b04 	str.w	r3, [r0], #4
  404c90:	f851 3b04 	ldr.w	r3, [r1], #4
  404c94:	f840 3b04 	str.w	r3, [r0], #4
  404c98:	f851 3b04 	ldr.w	r3, [r1], #4
  404c9c:	f840 3b04 	str.w	r3, [r0], #4
  404ca0:	3a40      	subs	r2, #64	; 0x40
  404ca2:	d2bd      	bcs.n	404c20 <memcpy+0x10>
  404ca4:	3230      	adds	r2, #48	; 0x30
  404ca6:	d311      	bcc.n	404ccc <memcpy+0xbc>
  404ca8:	f851 3b04 	ldr.w	r3, [r1], #4
  404cac:	f840 3b04 	str.w	r3, [r0], #4
  404cb0:	f851 3b04 	ldr.w	r3, [r1], #4
  404cb4:	f840 3b04 	str.w	r3, [r0], #4
  404cb8:	f851 3b04 	ldr.w	r3, [r1], #4
  404cbc:	f840 3b04 	str.w	r3, [r0], #4
  404cc0:	f851 3b04 	ldr.w	r3, [r1], #4
  404cc4:	f840 3b04 	str.w	r3, [r0], #4
  404cc8:	3a10      	subs	r2, #16
  404cca:	d2ed      	bcs.n	404ca8 <memcpy+0x98>
  404ccc:	320c      	adds	r2, #12
  404cce:	d305      	bcc.n	404cdc <memcpy+0xcc>
  404cd0:	f851 3b04 	ldr.w	r3, [r1], #4
  404cd4:	f840 3b04 	str.w	r3, [r0], #4
  404cd8:	3a04      	subs	r2, #4
  404cda:	d2f9      	bcs.n	404cd0 <memcpy+0xc0>
  404cdc:	3204      	adds	r2, #4
  404cde:	d008      	beq.n	404cf2 <memcpy+0xe2>
  404ce0:	07d2      	lsls	r2, r2, #31
  404ce2:	bf1c      	itt	ne
  404ce4:	f811 3b01 	ldrbne.w	r3, [r1], #1
  404ce8:	f800 3b01 	strbne.w	r3, [r0], #1
  404cec:	d301      	bcc.n	404cf2 <memcpy+0xe2>
  404cee:	880b      	ldrh	r3, [r1, #0]
  404cf0:	8003      	strh	r3, [r0, #0]
  404cf2:	4660      	mov	r0, ip
  404cf4:	4770      	bx	lr
  404cf6:	bf00      	nop
  404cf8:	2a08      	cmp	r2, #8
  404cfa:	d313      	bcc.n	404d24 <memcpy+0x114>
  404cfc:	078b      	lsls	r3, r1, #30
  404cfe:	d08d      	beq.n	404c1c <memcpy+0xc>
  404d00:	f010 0303 	ands.w	r3, r0, #3
  404d04:	d08a      	beq.n	404c1c <memcpy+0xc>
  404d06:	f1c3 0304 	rsb	r3, r3, #4
  404d0a:	1ad2      	subs	r2, r2, r3
  404d0c:	07db      	lsls	r3, r3, #31
  404d0e:	bf1c      	itt	ne
  404d10:	f811 3b01 	ldrbne.w	r3, [r1], #1
  404d14:	f800 3b01 	strbne.w	r3, [r0], #1
  404d18:	d380      	bcc.n	404c1c <memcpy+0xc>
  404d1a:	f831 3b02 	ldrh.w	r3, [r1], #2
  404d1e:	f820 3b02 	strh.w	r3, [r0], #2
  404d22:	e77b      	b.n	404c1c <memcpy+0xc>
  404d24:	3a04      	subs	r2, #4
  404d26:	d3d9      	bcc.n	404cdc <memcpy+0xcc>
  404d28:	3a01      	subs	r2, #1
  404d2a:	f811 3b01 	ldrb.w	r3, [r1], #1
  404d2e:	f800 3b01 	strb.w	r3, [r0], #1
  404d32:	d2f9      	bcs.n	404d28 <memcpy+0x118>
  404d34:	780b      	ldrb	r3, [r1, #0]
  404d36:	7003      	strb	r3, [r0, #0]
  404d38:	784b      	ldrb	r3, [r1, #1]
  404d3a:	7043      	strb	r3, [r0, #1]
  404d3c:	788b      	ldrb	r3, [r1, #2]
  404d3e:	7083      	strb	r3, [r0, #2]
  404d40:	4660      	mov	r0, ip
  404d42:	4770      	bx	lr

00404d44 <memmove>:
  404d44:	4288      	cmp	r0, r1
  404d46:	b5f0      	push	{r4, r5, r6, r7, lr}
  404d48:	d90d      	bls.n	404d66 <memmove+0x22>
  404d4a:	188b      	adds	r3, r1, r2
  404d4c:	4298      	cmp	r0, r3
  404d4e:	d20a      	bcs.n	404d66 <memmove+0x22>
  404d50:	1881      	adds	r1, r0, r2
  404d52:	2a00      	cmp	r2, #0
  404d54:	d051      	beq.n	404dfa <memmove+0xb6>
  404d56:	1a9a      	subs	r2, r3, r2
  404d58:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  404d5c:	f801 4d01 	strb.w	r4, [r1, #-1]!
  404d60:	4293      	cmp	r3, r2
  404d62:	d1f9      	bne.n	404d58 <memmove+0x14>
  404d64:	bdf0      	pop	{r4, r5, r6, r7, pc}
  404d66:	2a0f      	cmp	r2, #15
  404d68:	d948      	bls.n	404dfc <memmove+0xb8>
  404d6a:	ea41 0300 	orr.w	r3, r1, r0
  404d6e:	079b      	lsls	r3, r3, #30
  404d70:	d146      	bne.n	404e00 <memmove+0xbc>
  404d72:	f100 0410 	add.w	r4, r0, #16
  404d76:	f101 0310 	add.w	r3, r1, #16
  404d7a:	4615      	mov	r5, r2
  404d7c:	f853 6c10 	ldr.w	r6, [r3, #-16]
  404d80:	f844 6c10 	str.w	r6, [r4, #-16]
  404d84:	f853 6c0c 	ldr.w	r6, [r3, #-12]
  404d88:	f844 6c0c 	str.w	r6, [r4, #-12]
  404d8c:	f853 6c08 	ldr.w	r6, [r3, #-8]
  404d90:	f844 6c08 	str.w	r6, [r4, #-8]
  404d94:	3d10      	subs	r5, #16
  404d96:	f853 6c04 	ldr.w	r6, [r3, #-4]
  404d9a:	f844 6c04 	str.w	r6, [r4, #-4]
  404d9e:	2d0f      	cmp	r5, #15
  404da0:	f103 0310 	add.w	r3, r3, #16
  404da4:	f104 0410 	add.w	r4, r4, #16
  404da8:	d8e8      	bhi.n	404d7c <memmove+0x38>
  404daa:	f1a2 0310 	sub.w	r3, r2, #16
  404dae:	f023 030f 	bic.w	r3, r3, #15
  404db2:	f002 0e0f 	and.w	lr, r2, #15
  404db6:	3310      	adds	r3, #16
  404db8:	f1be 0f03 	cmp.w	lr, #3
  404dbc:	4419      	add	r1, r3
  404dbe:	4403      	add	r3, r0
  404dc0:	d921      	bls.n	404e06 <memmove+0xc2>
  404dc2:	1f1e      	subs	r6, r3, #4
  404dc4:	460d      	mov	r5, r1
  404dc6:	4674      	mov	r4, lr
  404dc8:	3c04      	subs	r4, #4
  404dca:	f855 7b04 	ldr.w	r7, [r5], #4
  404dce:	f846 7f04 	str.w	r7, [r6, #4]!
  404dd2:	2c03      	cmp	r4, #3
  404dd4:	d8f8      	bhi.n	404dc8 <memmove+0x84>
  404dd6:	f1ae 0404 	sub.w	r4, lr, #4
  404dda:	f024 0403 	bic.w	r4, r4, #3
  404dde:	3404      	adds	r4, #4
  404de0:	4423      	add	r3, r4
  404de2:	4421      	add	r1, r4
  404de4:	f002 0203 	and.w	r2, r2, #3
  404de8:	b162      	cbz	r2, 404e04 <memmove+0xc0>
  404dea:	3b01      	subs	r3, #1
  404dec:	440a      	add	r2, r1
  404dee:	f811 4b01 	ldrb.w	r4, [r1], #1
  404df2:	f803 4f01 	strb.w	r4, [r3, #1]!
  404df6:	428a      	cmp	r2, r1
  404df8:	d1f9      	bne.n	404dee <memmove+0xaa>
  404dfa:	bdf0      	pop	{r4, r5, r6, r7, pc}
  404dfc:	4603      	mov	r3, r0
  404dfe:	e7f3      	b.n	404de8 <memmove+0xa4>
  404e00:	4603      	mov	r3, r0
  404e02:	e7f2      	b.n	404dea <memmove+0xa6>
  404e04:	bdf0      	pop	{r4, r5, r6, r7, pc}
  404e06:	4672      	mov	r2, lr
  404e08:	e7ee      	b.n	404de8 <memmove+0xa4>
  404e0a:	bf00      	nop

00404e0c <__malloc_lock>:
  404e0c:	4770      	bx	lr
  404e0e:	bf00      	nop

00404e10 <__malloc_unlock>:
  404e10:	4770      	bx	lr
  404e12:	bf00      	nop

00404e14 <_Balloc>:
  404e14:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  404e16:	b570      	push	{r4, r5, r6, lr}
  404e18:	4605      	mov	r5, r0
  404e1a:	460c      	mov	r4, r1
  404e1c:	b14b      	cbz	r3, 404e32 <_Balloc+0x1e>
  404e1e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
  404e22:	b180      	cbz	r0, 404e46 <_Balloc+0x32>
  404e24:	6802      	ldr	r2, [r0, #0]
  404e26:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
  404e2a:	2300      	movs	r3, #0
  404e2c:	6103      	str	r3, [r0, #16]
  404e2e:	60c3      	str	r3, [r0, #12]
  404e30:	bd70      	pop	{r4, r5, r6, pc}
  404e32:	2221      	movs	r2, #33	; 0x21
  404e34:	2104      	movs	r1, #4
  404e36:	f000 fdcf 	bl	4059d8 <_calloc_r>
  404e3a:	64e8      	str	r0, [r5, #76]	; 0x4c
  404e3c:	4603      	mov	r3, r0
  404e3e:	2800      	cmp	r0, #0
  404e40:	d1ed      	bne.n	404e1e <_Balloc+0xa>
  404e42:	2000      	movs	r0, #0
  404e44:	bd70      	pop	{r4, r5, r6, pc}
  404e46:	2101      	movs	r1, #1
  404e48:	fa01 f604 	lsl.w	r6, r1, r4
  404e4c:	1d72      	adds	r2, r6, #5
  404e4e:	4628      	mov	r0, r5
  404e50:	0092      	lsls	r2, r2, #2
  404e52:	f000 fdc1 	bl	4059d8 <_calloc_r>
  404e56:	2800      	cmp	r0, #0
  404e58:	d0f3      	beq.n	404e42 <_Balloc+0x2e>
  404e5a:	6044      	str	r4, [r0, #4]
  404e5c:	6086      	str	r6, [r0, #8]
  404e5e:	e7e4      	b.n	404e2a <_Balloc+0x16>

00404e60 <_Bfree>:
  404e60:	b131      	cbz	r1, 404e70 <_Bfree+0x10>
  404e62:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  404e64:	684a      	ldr	r2, [r1, #4]
  404e66:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
  404e6a:	6008      	str	r0, [r1, #0]
  404e6c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  404e70:	4770      	bx	lr
  404e72:	bf00      	nop

00404e74 <__multadd>:
  404e74:	b5f0      	push	{r4, r5, r6, r7, lr}
  404e76:	690c      	ldr	r4, [r1, #16]
  404e78:	b083      	sub	sp, #12
  404e7a:	460d      	mov	r5, r1
  404e7c:	4606      	mov	r6, r0
  404e7e:	f101 0e14 	add.w	lr, r1, #20
  404e82:	2700      	movs	r7, #0
  404e84:	f8de 0000 	ldr.w	r0, [lr]
  404e88:	b281      	uxth	r1, r0
  404e8a:	fb02 3101 	mla	r1, r2, r1, r3
  404e8e:	0c0b      	lsrs	r3, r1, #16
  404e90:	0c00      	lsrs	r0, r0, #16
  404e92:	fb02 3300 	mla	r3, r2, r0, r3
  404e96:	b289      	uxth	r1, r1
  404e98:	3701      	adds	r7, #1
  404e9a:	eb01 4103 	add.w	r1, r1, r3, lsl #16
  404e9e:	42bc      	cmp	r4, r7
  404ea0:	f84e 1b04 	str.w	r1, [lr], #4
  404ea4:	ea4f 4313 	mov.w	r3, r3, lsr #16
  404ea8:	dcec      	bgt.n	404e84 <__multadd+0x10>
  404eaa:	b13b      	cbz	r3, 404ebc <__multadd+0x48>
  404eac:	68aa      	ldr	r2, [r5, #8]
  404eae:	4294      	cmp	r4, r2
  404eb0:	da07      	bge.n	404ec2 <__multadd+0x4e>
  404eb2:	eb05 0284 	add.w	r2, r5, r4, lsl #2
  404eb6:	3401      	adds	r4, #1
  404eb8:	6153      	str	r3, [r2, #20]
  404eba:	612c      	str	r4, [r5, #16]
  404ebc:	4628      	mov	r0, r5
  404ebe:	b003      	add	sp, #12
  404ec0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  404ec2:	6869      	ldr	r1, [r5, #4]
  404ec4:	9301      	str	r3, [sp, #4]
  404ec6:	3101      	adds	r1, #1
  404ec8:	4630      	mov	r0, r6
  404eca:	f7ff ffa3 	bl	404e14 <_Balloc>
  404ece:	692a      	ldr	r2, [r5, #16]
  404ed0:	3202      	adds	r2, #2
  404ed2:	f105 010c 	add.w	r1, r5, #12
  404ed6:	4607      	mov	r7, r0
  404ed8:	0092      	lsls	r2, r2, #2
  404eda:	300c      	adds	r0, #12
  404edc:	f7ff fe98 	bl	404c10 <memcpy>
  404ee0:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
  404ee2:	6869      	ldr	r1, [r5, #4]
  404ee4:	9b01      	ldr	r3, [sp, #4]
  404ee6:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
  404eea:	6028      	str	r0, [r5, #0]
  404eec:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
  404ef0:	463d      	mov	r5, r7
  404ef2:	e7de      	b.n	404eb2 <__multadd+0x3e>

00404ef4 <__hi0bits>:
  404ef4:	0c03      	lsrs	r3, r0, #16
  404ef6:	041b      	lsls	r3, r3, #16
  404ef8:	b9b3      	cbnz	r3, 404f28 <__hi0bits+0x34>
  404efa:	0400      	lsls	r0, r0, #16
  404efc:	2310      	movs	r3, #16
  404efe:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
  404f02:	bf04      	itt	eq
  404f04:	0200      	lsleq	r0, r0, #8
  404f06:	3308      	addeq	r3, #8
  404f08:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
  404f0c:	bf04      	itt	eq
  404f0e:	0100      	lsleq	r0, r0, #4
  404f10:	3304      	addeq	r3, #4
  404f12:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
  404f16:	bf04      	itt	eq
  404f18:	0080      	lsleq	r0, r0, #2
  404f1a:	3302      	addeq	r3, #2
  404f1c:	2800      	cmp	r0, #0
  404f1e:	db07      	blt.n	404f30 <__hi0bits+0x3c>
  404f20:	0042      	lsls	r2, r0, #1
  404f22:	d403      	bmi.n	404f2c <__hi0bits+0x38>
  404f24:	2020      	movs	r0, #32
  404f26:	4770      	bx	lr
  404f28:	2300      	movs	r3, #0
  404f2a:	e7e8      	b.n	404efe <__hi0bits+0xa>
  404f2c:	1c58      	adds	r0, r3, #1
  404f2e:	4770      	bx	lr
  404f30:	4618      	mov	r0, r3
  404f32:	4770      	bx	lr

00404f34 <__lo0bits>:
  404f34:	6803      	ldr	r3, [r0, #0]
  404f36:	f013 0207 	ands.w	r2, r3, #7
  404f3a:	d007      	beq.n	404f4c <__lo0bits+0x18>
  404f3c:	07d9      	lsls	r1, r3, #31
  404f3e:	d420      	bmi.n	404f82 <__lo0bits+0x4e>
  404f40:	079a      	lsls	r2, r3, #30
  404f42:	d420      	bmi.n	404f86 <__lo0bits+0x52>
  404f44:	089b      	lsrs	r3, r3, #2
  404f46:	6003      	str	r3, [r0, #0]
  404f48:	2002      	movs	r0, #2
  404f4a:	4770      	bx	lr
  404f4c:	b299      	uxth	r1, r3
  404f4e:	b909      	cbnz	r1, 404f54 <__lo0bits+0x20>
  404f50:	0c1b      	lsrs	r3, r3, #16
  404f52:	2210      	movs	r2, #16
  404f54:	f013 0fff 	tst.w	r3, #255	; 0xff
  404f58:	bf04      	itt	eq
  404f5a:	0a1b      	lsreq	r3, r3, #8
  404f5c:	3208      	addeq	r2, #8
  404f5e:	0719      	lsls	r1, r3, #28
  404f60:	bf04      	itt	eq
  404f62:	091b      	lsreq	r3, r3, #4
  404f64:	3204      	addeq	r2, #4
  404f66:	0799      	lsls	r1, r3, #30
  404f68:	bf04      	itt	eq
  404f6a:	089b      	lsreq	r3, r3, #2
  404f6c:	3202      	addeq	r2, #2
  404f6e:	07d9      	lsls	r1, r3, #31
  404f70:	d404      	bmi.n	404f7c <__lo0bits+0x48>
  404f72:	085b      	lsrs	r3, r3, #1
  404f74:	d101      	bne.n	404f7a <__lo0bits+0x46>
  404f76:	2020      	movs	r0, #32
  404f78:	4770      	bx	lr
  404f7a:	3201      	adds	r2, #1
  404f7c:	6003      	str	r3, [r0, #0]
  404f7e:	4610      	mov	r0, r2
  404f80:	4770      	bx	lr
  404f82:	2000      	movs	r0, #0
  404f84:	4770      	bx	lr
  404f86:	085b      	lsrs	r3, r3, #1
  404f88:	6003      	str	r3, [r0, #0]
  404f8a:	2001      	movs	r0, #1
  404f8c:	4770      	bx	lr
  404f8e:	bf00      	nop

00404f90 <__i2b>:
  404f90:	b510      	push	{r4, lr}
  404f92:	460c      	mov	r4, r1
  404f94:	2101      	movs	r1, #1
  404f96:	f7ff ff3d 	bl	404e14 <_Balloc>
  404f9a:	2201      	movs	r2, #1
  404f9c:	6144      	str	r4, [r0, #20]
  404f9e:	6102      	str	r2, [r0, #16]
  404fa0:	bd10      	pop	{r4, pc}
  404fa2:	bf00      	nop

00404fa4 <__multiply>:
  404fa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  404fa8:	690d      	ldr	r5, [r1, #16]
  404faa:	6917      	ldr	r7, [r2, #16]
  404fac:	42bd      	cmp	r5, r7
  404fae:	b083      	sub	sp, #12
  404fb0:	460c      	mov	r4, r1
  404fb2:	4616      	mov	r6, r2
  404fb4:	da04      	bge.n	404fc0 <__multiply+0x1c>
  404fb6:	462a      	mov	r2, r5
  404fb8:	4634      	mov	r4, r6
  404fba:	463d      	mov	r5, r7
  404fbc:	460e      	mov	r6, r1
  404fbe:	4617      	mov	r7, r2
  404fc0:	68a3      	ldr	r3, [r4, #8]
  404fc2:	6861      	ldr	r1, [r4, #4]
  404fc4:	eb05 0807 	add.w	r8, r5, r7
  404fc8:	4598      	cmp	r8, r3
  404fca:	bfc8      	it	gt
  404fcc:	3101      	addgt	r1, #1
  404fce:	f7ff ff21 	bl	404e14 <_Balloc>
  404fd2:	f100 0c14 	add.w	ip, r0, #20
  404fd6:	eb0c 0988 	add.w	r9, ip, r8, lsl #2
  404fda:	45cc      	cmp	ip, r9
  404fdc:	9000      	str	r0, [sp, #0]
  404fde:	d205      	bcs.n	404fec <__multiply+0x48>
  404fe0:	4663      	mov	r3, ip
  404fe2:	2100      	movs	r1, #0
  404fe4:	f843 1b04 	str.w	r1, [r3], #4
  404fe8:	4599      	cmp	r9, r3
  404fea:	d8fb      	bhi.n	404fe4 <__multiply+0x40>
  404fec:	f106 0214 	add.w	r2, r6, #20
  404ff0:	eb02 0a87 	add.w	sl, r2, r7, lsl #2
  404ff4:	f104 0314 	add.w	r3, r4, #20
  404ff8:	4552      	cmp	r2, sl
  404ffa:	eb03 0e85 	add.w	lr, r3, r5, lsl #2
  404ffe:	d254      	bcs.n	4050aa <__multiply+0x106>
  405000:	f8cd 9004 	str.w	r9, [sp, #4]
  405004:	4699      	mov	r9, r3
  405006:	f852 3b04 	ldr.w	r3, [r2], #4
  40500a:	fa1f fb83 	uxth.w	fp, r3
  40500e:	f1bb 0f00 	cmp.w	fp, #0
  405012:	d020      	beq.n	405056 <__multiply+0xb2>
  405014:	2000      	movs	r0, #0
  405016:	464f      	mov	r7, r9
  405018:	4666      	mov	r6, ip
  40501a:	4605      	mov	r5, r0
  40501c:	e000      	b.n	405020 <__multiply+0x7c>
  40501e:	461e      	mov	r6, r3
  405020:	f857 4b04 	ldr.w	r4, [r7], #4
  405024:	6830      	ldr	r0, [r6, #0]
  405026:	b2a1      	uxth	r1, r4
  405028:	b283      	uxth	r3, r0
  40502a:	fb0b 3101 	mla	r1, fp, r1, r3
  40502e:	0c24      	lsrs	r4, r4, #16
  405030:	0c00      	lsrs	r0, r0, #16
  405032:	194b      	adds	r3, r1, r5
  405034:	fb0b 0004 	mla	r0, fp, r4, r0
  405038:	eb00 4013 	add.w	r0, r0, r3, lsr #16
  40503c:	b299      	uxth	r1, r3
  40503e:	4633      	mov	r3, r6
  405040:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
  405044:	45be      	cmp	lr, r7
  405046:	ea4f 4510 	mov.w	r5, r0, lsr #16
  40504a:	f843 1b04 	str.w	r1, [r3], #4
  40504e:	d8e6      	bhi.n	40501e <__multiply+0x7a>
  405050:	6075      	str	r5, [r6, #4]
  405052:	f852 3c04 	ldr.w	r3, [r2, #-4]
  405056:	ea5f 4b13 	movs.w	fp, r3, lsr #16
  40505a:	d020      	beq.n	40509e <__multiply+0xfa>
  40505c:	f8dc 3000 	ldr.w	r3, [ip]
  405060:	4667      	mov	r7, ip
  405062:	4618      	mov	r0, r3
  405064:	464d      	mov	r5, r9
  405066:	2100      	movs	r1, #0
  405068:	e000      	b.n	40506c <__multiply+0xc8>
  40506a:	4637      	mov	r7, r6
  40506c:	882c      	ldrh	r4, [r5, #0]
  40506e:	0c00      	lsrs	r0, r0, #16
  405070:	fb0b 0004 	mla	r0, fp, r4, r0
  405074:	4401      	add	r1, r0
  405076:	b29c      	uxth	r4, r3
  405078:	463e      	mov	r6, r7
  40507a:	ea44 4301 	orr.w	r3, r4, r1, lsl #16
  40507e:	f846 3b04 	str.w	r3, [r6], #4
  405082:	6878      	ldr	r0, [r7, #4]
  405084:	f855 4b04 	ldr.w	r4, [r5], #4
  405088:	b283      	uxth	r3, r0
  40508a:	0c24      	lsrs	r4, r4, #16
  40508c:	fb0b 3404 	mla	r4, fp, r4, r3
  405090:	eb04 4311 	add.w	r3, r4, r1, lsr #16
  405094:	45ae      	cmp	lr, r5
  405096:	ea4f 4113 	mov.w	r1, r3, lsr #16
  40509a:	d8e6      	bhi.n	40506a <__multiply+0xc6>
  40509c:	607b      	str	r3, [r7, #4]
  40509e:	4592      	cmp	sl, r2
  4050a0:	f10c 0c04 	add.w	ip, ip, #4
  4050a4:	d8af      	bhi.n	405006 <__multiply+0x62>
  4050a6:	f8dd 9004 	ldr.w	r9, [sp, #4]
  4050aa:	f1b8 0f00 	cmp.w	r8, #0
  4050ae:	dd0b      	ble.n	4050c8 <__multiply+0x124>
  4050b0:	f859 3c04 	ldr.w	r3, [r9, #-4]
  4050b4:	f1a9 0904 	sub.w	r9, r9, #4
  4050b8:	b11b      	cbz	r3, 4050c2 <__multiply+0x11e>
  4050ba:	e005      	b.n	4050c8 <__multiply+0x124>
  4050bc:	f859 3d04 	ldr.w	r3, [r9, #-4]!
  4050c0:	b913      	cbnz	r3, 4050c8 <__multiply+0x124>
  4050c2:	f1b8 0801 	subs.w	r8, r8, #1
  4050c6:	d1f9      	bne.n	4050bc <__multiply+0x118>
  4050c8:	9800      	ldr	r0, [sp, #0]
  4050ca:	f8c0 8010 	str.w	r8, [r0, #16]
  4050ce:	b003      	add	sp, #12
  4050d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

004050d4 <__pow5mult>:
  4050d4:	f012 0303 	ands.w	r3, r2, #3
  4050d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4050dc:	4614      	mov	r4, r2
  4050de:	4607      	mov	r7, r0
  4050e0:	d12e      	bne.n	405140 <__pow5mult+0x6c>
  4050e2:	460e      	mov	r6, r1
  4050e4:	10a4      	asrs	r4, r4, #2
  4050e6:	d01c      	beq.n	405122 <__pow5mult+0x4e>
  4050e8:	6cbd      	ldr	r5, [r7, #72]	; 0x48
  4050ea:	b395      	cbz	r5, 405152 <__pow5mult+0x7e>
  4050ec:	07e3      	lsls	r3, r4, #31
  4050ee:	f04f 0800 	mov.w	r8, #0
  4050f2:	d406      	bmi.n	405102 <__pow5mult+0x2e>
  4050f4:	1064      	asrs	r4, r4, #1
  4050f6:	d014      	beq.n	405122 <__pow5mult+0x4e>
  4050f8:	6828      	ldr	r0, [r5, #0]
  4050fa:	b1a8      	cbz	r0, 405128 <__pow5mult+0x54>
  4050fc:	4605      	mov	r5, r0
  4050fe:	07e3      	lsls	r3, r4, #31
  405100:	d5f8      	bpl.n	4050f4 <__pow5mult+0x20>
  405102:	462a      	mov	r2, r5
  405104:	4631      	mov	r1, r6
  405106:	4638      	mov	r0, r7
  405108:	f7ff ff4c 	bl	404fa4 <__multiply>
  40510c:	b1b6      	cbz	r6, 40513c <__pow5mult+0x68>
  40510e:	6872      	ldr	r2, [r6, #4]
  405110:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  405112:	1064      	asrs	r4, r4, #1
  405114:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  405118:	6031      	str	r1, [r6, #0]
  40511a:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
  40511e:	4606      	mov	r6, r0
  405120:	d1ea      	bne.n	4050f8 <__pow5mult+0x24>
  405122:	4630      	mov	r0, r6
  405124:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  405128:	462a      	mov	r2, r5
  40512a:	4629      	mov	r1, r5
  40512c:	4638      	mov	r0, r7
  40512e:	f7ff ff39 	bl	404fa4 <__multiply>
  405132:	6028      	str	r0, [r5, #0]
  405134:	f8c0 8000 	str.w	r8, [r0]
  405138:	4605      	mov	r5, r0
  40513a:	e7e0      	b.n	4050fe <__pow5mult+0x2a>
  40513c:	4606      	mov	r6, r0
  40513e:	e7d9      	b.n	4050f4 <__pow5mult+0x20>
  405140:	1e5a      	subs	r2, r3, #1
  405142:	4d0b      	ldr	r5, [pc, #44]	; (405170 <__pow5mult+0x9c>)
  405144:	2300      	movs	r3, #0
  405146:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
  40514a:	f7ff fe93 	bl	404e74 <__multadd>
  40514e:	4606      	mov	r6, r0
  405150:	e7c8      	b.n	4050e4 <__pow5mult+0x10>
  405152:	2101      	movs	r1, #1
  405154:	4638      	mov	r0, r7
  405156:	f7ff fe5d 	bl	404e14 <_Balloc>
  40515a:	f240 2171 	movw	r1, #625	; 0x271
  40515e:	2201      	movs	r2, #1
  405160:	2300      	movs	r3, #0
  405162:	6141      	str	r1, [r0, #20]
  405164:	6102      	str	r2, [r0, #16]
  405166:	4605      	mov	r5, r0
  405168:	64b8      	str	r0, [r7, #72]	; 0x48
  40516a:	6003      	str	r3, [r0, #0]
  40516c:	e7be      	b.n	4050ec <__pow5mult+0x18>
  40516e:	bf00      	nop
  405170:	00406f78 	.word	0x00406f78

00405174 <__lshift>:
  405174:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  405178:	4691      	mov	r9, r2
  40517a:	690a      	ldr	r2, [r1, #16]
  40517c:	688b      	ldr	r3, [r1, #8]
  40517e:	ea4f 1469 	mov.w	r4, r9, asr #5
  405182:	eb04 0802 	add.w	r8, r4, r2
  405186:	f108 0501 	add.w	r5, r8, #1
  40518a:	429d      	cmp	r5, r3
  40518c:	460e      	mov	r6, r1
  40518e:	4682      	mov	sl, r0
  405190:	6849      	ldr	r1, [r1, #4]
  405192:	dd04      	ble.n	40519e <__lshift+0x2a>
  405194:	005b      	lsls	r3, r3, #1
  405196:	429d      	cmp	r5, r3
  405198:	f101 0101 	add.w	r1, r1, #1
  40519c:	dcfa      	bgt.n	405194 <__lshift+0x20>
  40519e:	4650      	mov	r0, sl
  4051a0:	f7ff fe38 	bl	404e14 <_Balloc>
  4051a4:	2c00      	cmp	r4, #0
  4051a6:	f100 0214 	add.w	r2, r0, #20
  4051aa:	dd38      	ble.n	40521e <__lshift+0xaa>
  4051ac:	eb02 0384 	add.w	r3, r2, r4, lsl #2
  4051b0:	2100      	movs	r1, #0
  4051b2:	f842 1b04 	str.w	r1, [r2], #4
  4051b6:	4293      	cmp	r3, r2
  4051b8:	d1fb      	bne.n	4051b2 <__lshift+0x3e>
  4051ba:	6934      	ldr	r4, [r6, #16]
  4051bc:	f106 0114 	add.w	r1, r6, #20
  4051c0:	f019 091f 	ands.w	r9, r9, #31
  4051c4:	eb01 0e84 	add.w	lr, r1, r4, lsl #2
  4051c8:	d021      	beq.n	40520e <__lshift+0x9a>
  4051ca:	f1c9 0220 	rsb	r2, r9, #32
  4051ce:	2400      	movs	r4, #0
  4051d0:	680f      	ldr	r7, [r1, #0]
  4051d2:	fa07 fc09 	lsl.w	ip, r7, r9
  4051d6:	ea4c 0404 	orr.w	r4, ip, r4
  4051da:	469c      	mov	ip, r3
  4051dc:	f843 4b04 	str.w	r4, [r3], #4
  4051e0:	f851 4b04 	ldr.w	r4, [r1], #4
  4051e4:	458e      	cmp	lr, r1
  4051e6:	fa24 f402 	lsr.w	r4, r4, r2
  4051ea:	d8f1      	bhi.n	4051d0 <__lshift+0x5c>
  4051ec:	f8cc 4004 	str.w	r4, [ip, #4]
  4051f0:	b10c      	cbz	r4, 4051f6 <__lshift+0x82>
  4051f2:	f108 0502 	add.w	r5, r8, #2
  4051f6:	f8da 304c 	ldr.w	r3, [sl, #76]	; 0x4c
  4051fa:	6872      	ldr	r2, [r6, #4]
  4051fc:	3d01      	subs	r5, #1
  4051fe:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  405202:	6105      	str	r5, [r0, #16]
  405204:	6031      	str	r1, [r6, #0]
  405206:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
  40520a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40520e:	3b04      	subs	r3, #4
  405210:	f851 2b04 	ldr.w	r2, [r1], #4
  405214:	f843 2f04 	str.w	r2, [r3, #4]!
  405218:	458e      	cmp	lr, r1
  40521a:	d8f9      	bhi.n	405210 <__lshift+0x9c>
  40521c:	e7eb      	b.n	4051f6 <__lshift+0x82>
  40521e:	4613      	mov	r3, r2
  405220:	e7cb      	b.n	4051ba <__lshift+0x46>
  405222:	bf00      	nop

00405224 <__mcmp>:
  405224:	6902      	ldr	r2, [r0, #16]
  405226:	690b      	ldr	r3, [r1, #16]
  405228:	1ad2      	subs	r2, r2, r3
  40522a:	d112      	bne.n	405252 <__mcmp+0x2e>
  40522c:	009b      	lsls	r3, r3, #2
  40522e:	3014      	adds	r0, #20
  405230:	3114      	adds	r1, #20
  405232:	4419      	add	r1, r3
  405234:	b410      	push	{r4}
  405236:	4403      	add	r3, r0
  405238:	e001      	b.n	40523e <__mcmp+0x1a>
  40523a:	4298      	cmp	r0, r3
  40523c:	d20b      	bcs.n	405256 <__mcmp+0x32>
  40523e:	f853 4d04 	ldr.w	r4, [r3, #-4]!
  405242:	f851 2d04 	ldr.w	r2, [r1, #-4]!
  405246:	4294      	cmp	r4, r2
  405248:	d0f7      	beq.n	40523a <__mcmp+0x16>
  40524a:	d307      	bcc.n	40525c <__mcmp+0x38>
  40524c:	2001      	movs	r0, #1
  40524e:	bc10      	pop	{r4}
  405250:	4770      	bx	lr
  405252:	4610      	mov	r0, r2
  405254:	4770      	bx	lr
  405256:	2000      	movs	r0, #0
  405258:	bc10      	pop	{r4}
  40525a:	4770      	bx	lr
  40525c:	f04f 30ff 	mov.w	r0, #4294967295
  405260:	e7f5      	b.n	40524e <__mcmp+0x2a>
  405262:	bf00      	nop

00405264 <__mdiff>:
  405264:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  405268:	690b      	ldr	r3, [r1, #16]
  40526a:	460f      	mov	r7, r1
  40526c:	6911      	ldr	r1, [r2, #16]
  40526e:	1a5b      	subs	r3, r3, r1
  405270:	2b00      	cmp	r3, #0
  405272:	4690      	mov	r8, r2
  405274:	d117      	bne.n	4052a6 <__mdiff+0x42>
  405276:	0089      	lsls	r1, r1, #2
  405278:	f107 0214 	add.w	r2, r7, #20
  40527c:	f108 0514 	add.w	r5, r8, #20
  405280:	1853      	adds	r3, r2, r1
  405282:	4429      	add	r1, r5
  405284:	e001      	b.n	40528a <__mdiff+0x26>
  405286:	429a      	cmp	r2, r3
  405288:	d25e      	bcs.n	405348 <__mdiff+0xe4>
  40528a:	f853 6d04 	ldr.w	r6, [r3, #-4]!
  40528e:	f851 4d04 	ldr.w	r4, [r1, #-4]!
  405292:	42a6      	cmp	r6, r4
  405294:	d0f7      	beq.n	405286 <__mdiff+0x22>
  405296:	d260      	bcs.n	40535a <__mdiff+0xf6>
  405298:	463b      	mov	r3, r7
  40529a:	4614      	mov	r4, r2
  40529c:	4647      	mov	r7, r8
  40529e:	f04f 0901 	mov.w	r9, #1
  4052a2:	4698      	mov	r8, r3
  4052a4:	e006      	b.n	4052b4 <__mdiff+0x50>
  4052a6:	db5d      	blt.n	405364 <__mdiff+0x100>
  4052a8:	f107 0514 	add.w	r5, r7, #20
  4052ac:	f102 0414 	add.w	r4, r2, #20
  4052b0:	f04f 0900 	mov.w	r9, #0
  4052b4:	6879      	ldr	r1, [r7, #4]
  4052b6:	f7ff fdad 	bl	404e14 <_Balloc>
  4052ba:	f8d8 3010 	ldr.w	r3, [r8, #16]
  4052be:	693e      	ldr	r6, [r7, #16]
  4052c0:	f8c0 900c 	str.w	r9, [r0, #12]
  4052c4:	eb04 0c83 	add.w	ip, r4, r3, lsl #2
  4052c8:	46a6      	mov	lr, r4
  4052ca:	eb05 0786 	add.w	r7, r5, r6, lsl #2
  4052ce:	f100 0414 	add.w	r4, r0, #20
  4052d2:	2300      	movs	r3, #0
  4052d4:	f85e 1b04 	ldr.w	r1, [lr], #4
  4052d8:	f855 8b04 	ldr.w	r8, [r5], #4
  4052dc:	b28a      	uxth	r2, r1
  4052de:	fa13 f388 	uxtah	r3, r3, r8
  4052e2:	0c09      	lsrs	r1, r1, #16
  4052e4:	1a9a      	subs	r2, r3, r2
  4052e6:	ebc1 4318 	rsb	r3, r1, r8, lsr #16
  4052ea:	eb03 4322 	add.w	r3, r3, r2, asr #16
  4052ee:	b292      	uxth	r2, r2
  4052f0:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
  4052f4:	45f4      	cmp	ip, lr
  4052f6:	f844 2b04 	str.w	r2, [r4], #4
  4052fa:	ea4f 4323 	mov.w	r3, r3, asr #16
  4052fe:	d8e9      	bhi.n	4052d4 <__mdiff+0x70>
  405300:	42af      	cmp	r7, r5
  405302:	d917      	bls.n	405334 <__mdiff+0xd0>
  405304:	46a4      	mov	ip, r4
  405306:	4629      	mov	r1, r5
  405308:	f851 eb04 	ldr.w	lr, [r1], #4
  40530c:	fa13 f28e 	uxtah	r2, r3, lr
  405310:	1413      	asrs	r3, r2, #16
  405312:	eb03 431e 	add.w	r3, r3, lr, lsr #16
  405316:	b292      	uxth	r2, r2
  405318:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
  40531c:	428f      	cmp	r7, r1
  40531e:	f84c 2b04 	str.w	r2, [ip], #4
  405322:	ea4f 4323 	mov.w	r3, r3, asr #16
  405326:	d8ef      	bhi.n	405308 <__mdiff+0xa4>
  405328:	43ed      	mvns	r5, r5
  40532a:	443d      	add	r5, r7
  40532c:	f025 0503 	bic.w	r5, r5, #3
  405330:	3504      	adds	r5, #4
  405332:	442c      	add	r4, r5
  405334:	3c04      	subs	r4, #4
  405336:	b922      	cbnz	r2, 405342 <__mdiff+0xde>
  405338:	f854 3d04 	ldr.w	r3, [r4, #-4]!
  40533c:	3e01      	subs	r6, #1
  40533e:	2b00      	cmp	r3, #0
  405340:	d0fa      	beq.n	405338 <__mdiff+0xd4>
  405342:	6106      	str	r6, [r0, #16]
  405344:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  405348:	2100      	movs	r1, #0
  40534a:	f7ff fd63 	bl	404e14 <_Balloc>
  40534e:	2201      	movs	r2, #1
  405350:	2300      	movs	r3, #0
  405352:	6102      	str	r2, [r0, #16]
  405354:	6143      	str	r3, [r0, #20]
  405356:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40535a:	462c      	mov	r4, r5
  40535c:	f04f 0900 	mov.w	r9, #0
  405360:	4615      	mov	r5, r2
  405362:	e7a7      	b.n	4052b4 <__mdiff+0x50>
  405364:	463b      	mov	r3, r7
  405366:	f107 0414 	add.w	r4, r7, #20
  40536a:	f108 0514 	add.w	r5, r8, #20
  40536e:	4647      	mov	r7, r8
  405370:	f04f 0901 	mov.w	r9, #1
  405374:	4698      	mov	r8, r3
  405376:	e79d      	b.n	4052b4 <__mdiff+0x50>

00405378 <__d2b>:
  405378:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40537c:	b082      	sub	sp, #8
  40537e:	2101      	movs	r1, #1
  405380:	461c      	mov	r4, r3
  405382:	f3c3 570a 	ubfx	r7, r3, #20, #11
  405386:	4615      	mov	r5, r2
  405388:	9e08      	ldr	r6, [sp, #32]
  40538a:	f7ff fd43 	bl	404e14 <_Balloc>
  40538e:	f3c4 0413 	ubfx	r4, r4, #0, #20
  405392:	4680      	mov	r8, r0
  405394:	b10f      	cbz	r7, 40539a <__d2b+0x22>
  405396:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
  40539a:	9401      	str	r4, [sp, #4]
  40539c:	b31d      	cbz	r5, 4053e6 <__d2b+0x6e>
  40539e:	a802      	add	r0, sp, #8
  4053a0:	f840 5d08 	str.w	r5, [r0, #-8]!
  4053a4:	f7ff fdc6 	bl	404f34 <__lo0bits>
  4053a8:	2800      	cmp	r0, #0
  4053aa:	d134      	bne.n	405416 <__d2b+0x9e>
  4053ac:	e89d 000c 	ldmia.w	sp, {r2, r3}
  4053b0:	f8c8 2014 	str.w	r2, [r8, #20]
  4053b4:	2b00      	cmp	r3, #0
  4053b6:	bf0c      	ite	eq
  4053b8:	2101      	moveq	r1, #1
  4053ba:	2102      	movne	r1, #2
  4053bc:	f8c8 3018 	str.w	r3, [r8, #24]
  4053c0:	f8c8 1010 	str.w	r1, [r8, #16]
  4053c4:	b9df      	cbnz	r7, 4053fe <__d2b+0x86>
  4053c6:	eb08 0381 	add.w	r3, r8, r1, lsl #2
  4053ca:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
  4053ce:	6030      	str	r0, [r6, #0]
  4053d0:	6918      	ldr	r0, [r3, #16]
  4053d2:	f7ff fd8f 	bl	404ef4 <__hi0bits>
  4053d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4053d8:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
  4053dc:	6018      	str	r0, [r3, #0]
  4053de:	4640      	mov	r0, r8
  4053e0:	b002      	add	sp, #8
  4053e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4053e6:	a801      	add	r0, sp, #4
  4053e8:	f7ff fda4 	bl	404f34 <__lo0bits>
  4053ec:	9b01      	ldr	r3, [sp, #4]
  4053ee:	f8c8 3014 	str.w	r3, [r8, #20]
  4053f2:	2101      	movs	r1, #1
  4053f4:	3020      	adds	r0, #32
  4053f6:	f8c8 1010 	str.w	r1, [r8, #16]
  4053fa:	2f00      	cmp	r7, #0
  4053fc:	d0e3      	beq.n	4053c6 <__d2b+0x4e>
  4053fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
  405400:	f2a7 4733 	subw	r7, r7, #1075	; 0x433
  405404:	4407      	add	r7, r0
  405406:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
  40540a:	6037      	str	r7, [r6, #0]
  40540c:	6018      	str	r0, [r3, #0]
  40540e:	4640      	mov	r0, r8
  405410:	b002      	add	sp, #8
  405412:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  405416:	e89d 000c 	ldmia.w	sp, {r2, r3}
  40541a:	f1c0 0120 	rsb	r1, r0, #32
  40541e:	fa03 f101 	lsl.w	r1, r3, r1
  405422:	430a      	orrs	r2, r1
  405424:	40c3      	lsrs	r3, r0
  405426:	9301      	str	r3, [sp, #4]
  405428:	f8c8 2014 	str.w	r2, [r8, #20]
  40542c:	e7c2      	b.n	4053b4 <__d2b+0x3c>
  40542e:	bf00      	nop

00405430 <_realloc_r>:
  405430:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  405434:	4617      	mov	r7, r2
  405436:	b083      	sub	sp, #12
  405438:	2900      	cmp	r1, #0
  40543a:	f000 80c1 	beq.w	4055c0 <_realloc_r+0x190>
  40543e:	460e      	mov	r6, r1
  405440:	4681      	mov	r9, r0
  405442:	f107 050b 	add.w	r5, r7, #11
  405446:	f7ff fce1 	bl	404e0c <__malloc_lock>
  40544a:	f856 ec04 	ldr.w	lr, [r6, #-4]
  40544e:	2d16      	cmp	r5, #22
  405450:	f02e 0403 	bic.w	r4, lr, #3
  405454:	f1a6 0808 	sub.w	r8, r6, #8
  405458:	d840      	bhi.n	4054dc <_realloc_r+0xac>
  40545a:	2210      	movs	r2, #16
  40545c:	4615      	mov	r5, r2
  40545e:	42af      	cmp	r7, r5
  405460:	d841      	bhi.n	4054e6 <_realloc_r+0xb6>
  405462:	4294      	cmp	r4, r2
  405464:	da75      	bge.n	405552 <_realloc_r+0x122>
  405466:	4bc9      	ldr	r3, [pc, #804]	; (40578c <_realloc_r+0x35c>)
  405468:	6899      	ldr	r1, [r3, #8]
  40546a:	eb08 0004 	add.w	r0, r8, r4
  40546e:	4288      	cmp	r0, r1
  405470:	6841      	ldr	r1, [r0, #4]
  405472:	f000 80d9 	beq.w	405628 <_realloc_r+0x1f8>
  405476:	f021 0301 	bic.w	r3, r1, #1
  40547a:	4403      	add	r3, r0
  40547c:	685b      	ldr	r3, [r3, #4]
  40547e:	07db      	lsls	r3, r3, #31
  405480:	d57d      	bpl.n	40557e <_realloc_r+0x14e>
  405482:	f01e 0f01 	tst.w	lr, #1
  405486:	d035      	beq.n	4054f4 <_realloc_r+0xc4>
  405488:	4639      	mov	r1, r7
  40548a:	4648      	mov	r0, r9
  40548c:	f7ff f8b2 	bl	4045f4 <_malloc_r>
  405490:	4607      	mov	r7, r0
  405492:	b1e0      	cbz	r0, 4054ce <_realloc_r+0x9e>
  405494:	f856 3c04 	ldr.w	r3, [r6, #-4]
  405498:	f023 0301 	bic.w	r3, r3, #1
  40549c:	4443      	add	r3, r8
  40549e:	f1a0 0208 	sub.w	r2, r0, #8
  4054a2:	429a      	cmp	r2, r3
  4054a4:	f000 8144 	beq.w	405730 <_realloc_r+0x300>
  4054a8:	1f22      	subs	r2, r4, #4
  4054aa:	2a24      	cmp	r2, #36	; 0x24
  4054ac:	f200 8131 	bhi.w	405712 <_realloc_r+0x2e2>
  4054b0:	2a13      	cmp	r2, #19
  4054b2:	f200 8104 	bhi.w	4056be <_realloc_r+0x28e>
  4054b6:	4603      	mov	r3, r0
  4054b8:	4632      	mov	r2, r6
  4054ba:	6811      	ldr	r1, [r2, #0]
  4054bc:	6019      	str	r1, [r3, #0]
  4054be:	6851      	ldr	r1, [r2, #4]
  4054c0:	6059      	str	r1, [r3, #4]
  4054c2:	6892      	ldr	r2, [r2, #8]
  4054c4:	609a      	str	r2, [r3, #8]
  4054c6:	4631      	mov	r1, r6
  4054c8:	4648      	mov	r0, r9
  4054ca:	f7fe ffa7 	bl	40441c <_free_r>
  4054ce:	4648      	mov	r0, r9
  4054d0:	f7ff fc9e 	bl	404e10 <__malloc_unlock>
  4054d4:	4638      	mov	r0, r7
  4054d6:	b003      	add	sp, #12
  4054d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4054dc:	f025 0507 	bic.w	r5, r5, #7
  4054e0:	2d00      	cmp	r5, #0
  4054e2:	462a      	mov	r2, r5
  4054e4:	dabb      	bge.n	40545e <_realloc_r+0x2e>
  4054e6:	230c      	movs	r3, #12
  4054e8:	2000      	movs	r0, #0
  4054ea:	f8c9 3000 	str.w	r3, [r9]
  4054ee:	b003      	add	sp, #12
  4054f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4054f4:	f856 3c08 	ldr.w	r3, [r6, #-8]
  4054f8:	ebc3 0a08 	rsb	sl, r3, r8
  4054fc:	f8da 3004 	ldr.w	r3, [sl, #4]
  405500:	f023 0c03 	bic.w	ip, r3, #3
  405504:	eb04 030c 	add.w	r3, r4, ip
  405508:	4293      	cmp	r3, r2
  40550a:	dbbd      	blt.n	405488 <_realloc_r+0x58>
  40550c:	4657      	mov	r7, sl
  40550e:	f8da 100c 	ldr.w	r1, [sl, #12]
  405512:	f857 0f08 	ldr.w	r0, [r7, #8]!
  405516:	1f22      	subs	r2, r4, #4
  405518:	2a24      	cmp	r2, #36	; 0x24
  40551a:	60c1      	str	r1, [r0, #12]
  40551c:	6088      	str	r0, [r1, #8]
  40551e:	f200 8117 	bhi.w	405750 <_realloc_r+0x320>
  405522:	2a13      	cmp	r2, #19
  405524:	f240 8112 	bls.w	40574c <_realloc_r+0x31c>
  405528:	6831      	ldr	r1, [r6, #0]
  40552a:	f8ca 1008 	str.w	r1, [sl, #8]
  40552e:	6871      	ldr	r1, [r6, #4]
  405530:	f8ca 100c 	str.w	r1, [sl, #12]
  405534:	2a1b      	cmp	r2, #27
  405536:	f200 812b 	bhi.w	405790 <_realloc_r+0x360>
  40553a:	3608      	adds	r6, #8
  40553c:	f10a 0210 	add.w	r2, sl, #16
  405540:	6831      	ldr	r1, [r6, #0]
  405542:	6011      	str	r1, [r2, #0]
  405544:	6871      	ldr	r1, [r6, #4]
  405546:	6051      	str	r1, [r2, #4]
  405548:	68b1      	ldr	r1, [r6, #8]
  40554a:	6091      	str	r1, [r2, #8]
  40554c:	463e      	mov	r6, r7
  40554e:	461c      	mov	r4, r3
  405550:	46d0      	mov	r8, sl
  405552:	1b63      	subs	r3, r4, r5
  405554:	2b0f      	cmp	r3, #15
  405556:	d81d      	bhi.n	405594 <_realloc_r+0x164>
  405558:	f8d8 3004 	ldr.w	r3, [r8, #4]
  40555c:	f003 0301 	and.w	r3, r3, #1
  405560:	4323      	orrs	r3, r4
  405562:	4444      	add	r4, r8
  405564:	f8c8 3004 	str.w	r3, [r8, #4]
  405568:	6863      	ldr	r3, [r4, #4]
  40556a:	f043 0301 	orr.w	r3, r3, #1
  40556e:	6063      	str	r3, [r4, #4]
  405570:	4648      	mov	r0, r9
  405572:	f7ff fc4d 	bl	404e10 <__malloc_unlock>
  405576:	4630      	mov	r0, r6
  405578:	b003      	add	sp, #12
  40557a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40557e:	f021 0103 	bic.w	r1, r1, #3
  405582:	4421      	add	r1, r4
  405584:	4291      	cmp	r1, r2
  405586:	db21      	blt.n	4055cc <_realloc_r+0x19c>
  405588:	68c3      	ldr	r3, [r0, #12]
  40558a:	6882      	ldr	r2, [r0, #8]
  40558c:	460c      	mov	r4, r1
  40558e:	60d3      	str	r3, [r2, #12]
  405590:	609a      	str	r2, [r3, #8]
  405592:	e7de      	b.n	405552 <_realloc_r+0x122>
  405594:	f8d8 2004 	ldr.w	r2, [r8, #4]
  405598:	eb08 0105 	add.w	r1, r8, r5
  40559c:	f002 0201 	and.w	r2, r2, #1
  4055a0:	4315      	orrs	r5, r2
  4055a2:	f043 0201 	orr.w	r2, r3, #1
  4055a6:	440b      	add	r3, r1
  4055a8:	f8c8 5004 	str.w	r5, [r8, #4]
  4055ac:	604a      	str	r2, [r1, #4]
  4055ae:	685a      	ldr	r2, [r3, #4]
  4055b0:	f042 0201 	orr.w	r2, r2, #1
  4055b4:	3108      	adds	r1, #8
  4055b6:	605a      	str	r2, [r3, #4]
  4055b8:	4648      	mov	r0, r9
  4055ba:	f7fe ff2f 	bl	40441c <_free_r>
  4055be:	e7d7      	b.n	405570 <_realloc_r+0x140>
  4055c0:	4611      	mov	r1, r2
  4055c2:	b003      	add	sp, #12
  4055c4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4055c8:	f7ff b814 	b.w	4045f4 <_malloc_r>
  4055cc:	f01e 0f01 	tst.w	lr, #1
  4055d0:	f47f af5a 	bne.w	405488 <_realloc_r+0x58>
  4055d4:	f856 3c08 	ldr.w	r3, [r6, #-8]
  4055d8:	ebc3 0a08 	rsb	sl, r3, r8
  4055dc:	f8da 3004 	ldr.w	r3, [sl, #4]
  4055e0:	f023 0c03 	bic.w	ip, r3, #3
  4055e4:	eb01 0e0c 	add.w	lr, r1, ip
  4055e8:	4596      	cmp	lr, r2
  4055ea:	db8b      	blt.n	405504 <_realloc_r+0xd4>
  4055ec:	68c3      	ldr	r3, [r0, #12]
  4055ee:	6882      	ldr	r2, [r0, #8]
  4055f0:	4657      	mov	r7, sl
  4055f2:	60d3      	str	r3, [r2, #12]
  4055f4:	609a      	str	r2, [r3, #8]
  4055f6:	f857 1f08 	ldr.w	r1, [r7, #8]!
  4055fa:	f8da 300c 	ldr.w	r3, [sl, #12]
  4055fe:	60cb      	str	r3, [r1, #12]
  405600:	1f22      	subs	r2, r4, #4
  405602:	2a24      	cmp	r2, #36	; 0x24
  405604:	6099      	str	r1, [r3, #8]
  405606:	f200 8099 	bhi.w	40573c <_realloc_r+0x30c>
  40560a:	2a13      	cmp	r2, #19
  40560c:	d962      	bls.n	4056d4 <_realloc_r+0x2a4>
  40560e:	6833      	ldr	r3, [r6, #0]
  405610:	f8ca 3008 	str.w	r3, [sl, #8]
  405614:	6873      	ldr	r3, [r6, #4]
  405616:	f8ca 300c 	str.w	r3, [sl, #12]
  40561a:	2a1b      	cmp	r2, #27
  40561c:	f200 80a0 	bhi.w	405760 <_realloc_r+0x330>
  405620:	3608      	adds	r6, #8
  405622:	f10a 0310 	add.w	r3, sl, #16
  405626:	e056      	b.n	4056d6 <_realloc_r+0x2a6>
  405628:	f021 0b03 	bic.w	fp, r1, #3
  40562c:	44a3      	add	fp, r4
  40562e:	f105 0010 	add.w	r0, r5, #16
  405632:	4583      	cmp	fp, r0
  405634:	da59      	bge.n	4056ea <_realloc_r+0x2ba>
  405636:	f01e 0f01 	tst.w	lr, #1
  40563a:	f47f af25 	bne.w	405488 <_realloc_r+0x58>
  40563e:	f856 1c08 	ldr.w	r1, [r6, #-8]
  405642:	ebc1 0a08 	rsb	sl, r1, r8
  405646:	f8da 1004 	ldr.w	r1, [sl, #4]
  40564a:	f021 0c03 	bic.w	ip, r1, #3
  40564e:	44e3      	add	fp, ip
  405650:	4558      	cmp	r0, fp
  405652:	f73f af57 	bgt.w	405504 <_realloc_r+0xd4>
  405656:	4657      	mov	r7, sl
  405658:	f8da 100c 	ldr.w	r1, [sl, #12]
  40565c:	f857 0f08 	ldr.w	r0, [r7, #8]!
  405660:	1f22      	subs	r2, r4, #4
  405662:	2a24      	cmp	r2, #36	; 0x24
  405664:	60c1      	str	r1, [r0, #12]
  405666:	6088      	str	r0, [r1, #8]
  405668:	f200 80b4 	bhi.w	4057d4 <_realloc_r+0x3a4>
  40566c:	2a13      	cmp	r2, #19
  40566e:	f240 80a5 	bls.w	4057bc <_realloc_r+0x38c>
  405672:	6831      	ldr	r1, [r6, #0]
  405674:	f8ca 1008 	str.w	r1, [sl, #8]
  405678:	6871      	ldr	r1, [r6, #4]
  40567a:	f8ca 100c 	str.w	r1, [sl, #12]
  40567e:	2a1b      	cmp	r2, #27
  405680:	f200 80af 	bhi.w	4057e2 <_realloc_r+0x3b2>
  405684:	3608      	adds	r6, #8
  405686:	f10a 0210 	add.w	r2, sl, #16
  40568a:	6831      	ldr	r1, [r6, #0]
  40568c:	6011      	str	r1, [r2, #0]
  40568e:	6871      	ldr	r1, [r6, #4]
  405690:	6051      	str	r1, [r2, #4]
  405692:	68b1      	ldr	r1, [r6, #8]
  405694:	6091      	str	r1, [r2, #8]
  405696:	eb0a 0105 	add.w	r1, sl, r5
  40569a:	ebc5 020b 	rsb	r2, r5, fp
  40569e:	f042 0201 	orr.w	r2, r2, #1
  4056a2:	6099      	str	r1, [r3, #8]
  4056a4:	604a      	str	r2, [r1, #4]
  4056a6:	f8da 3004 	ldr.w	r3, [sl, #4]
  4056aa:	f003 0301 	and.w	r3, r3, #1
  4056ae:	431d      	orrs	r5, r3
  4056b0:	4648      	mov	r0, r9
  4056b2:	f8ca 5004 	str.w	r5, [sl, #4]
  4056b6:	f7ff fbab 	bl	404e10 <__malloc_unlock>
  4056ba:	4638      	mov	r0, r7
  4056bc:	e75c      	b.n	405578 <_realloc_r+0x148>
  4056be:	6833      	ldr	r3, [r6, #0]
  4056c0:	6003      	str	r3, [r0, #0]
  4056c2:	6873      	ldr	r3, [r6, #4]
  4056c4:	6043      	str	r3, [r0, #4]
  4056c6:	2a1b      	cmp	r2, #27
  4056c8:	d827      	bhi.n	40571a <_realloc_r+0x2ea>
  4056ca:	f100 0308 	add.w	r3, r0, #8
  4056ce:	f106 0208 	add.w	r2, r6, #8
  4056d2:	e6f2      	b.n	4054ba <_realloc_r+0x8a>
  4056d4:	463b      	mov	r3, r7
  4056d6:	6832      	ldr	r2, [r6, #0]
  4056d8:	601a      	str	r2, [r3, #0]
  4056da:	6872      	ldr	r2, [r6, #4]
  4056dc:	605a      	str	r2, [r3, #4]
  4056de:	68b2      	ldr	r2, [r6, #8]
  4056e0:	609a      	str	r2, [r3, #8]
  4056e2:	463e      	mov	r6, r7
  4056e4:	4674      	mov	r4, lr
  4056e6:	46d0      	mov	r8, sl
  4056e8:	e733      	b.n	405552 <_realloc_r+0x122>
  4056ea:	eb08 0105 	add.w	r1, r8, r5
  4056ee:	ebc5 0b0b 	rsb	fp, r5, fp
  4056f2:	f04b 0201 	orr.w	r2, fp, #1
  4056f6:	6099      	str	r1, [r3, #8]
  4056f8:	604a      	str	r2, [r1, #4]
  4056fa:	f856 3c04 	ldr.w	r3, [r6, #-4]
  4056fe:	f003 0301 	and.w	r3, r3, #1
  405702:	431d      	orrs	r5, r3
  405704:	4648      	mov	r0, r9
  405706:	f846 5c04 	str.w	r5, [r6, #-4]
  40570a:	f7ff fb81 	bl	404e10 <__malloc_unlock>
  40570e:	4630      	mov	r0, r6
  405710:	e732      	b.n	405578 <_realloc_r+0x148>
  405712:	4631      	mov	r1, r6
  405714:	f7ff fb16 	bl	404d44 <memmove>
  405718:	e6d5      	b.n	4054c6 <_realloc_r+0x96>
  40571a:	68b3      	ldr	r3, [r6, #8]
  40571c:	6083      	str	r3, [r0, #8]
  40571e:	68f3      	ldr	r3, [r6, #12]
  405720:	60c3      	str	r3, [r0, #12]
  405722:	2a24      	cmp	r2, #36	; 0x24
  405724:	d028      	beq.n	405778 <_realloc_r+0x348>
  405726:	f100 0310 	add.w	r3, r0, #16
  40572a:	f106 0210 	add.w	r2, r6, #16
  40572e:	e6c4      	b.n	4054ba <_realloc_r+0x8a>
  405730:	f850 3c04 	ldr.w	r3, [r0, #-4]
  405734:	f023 0303 	bic.w	r3, r3, #3
  405738:	441c      	add	r4, r3
  40573a:	e70a      	b.n	405552 <_realloc_r+0x122>
  40573c:	4631      	mov	r1, r6
  40573e:	4638      	mov	r0, r7
  405740:	4674      	mov	r4, lr
  405742:	46d0      	mov	r8, sl
  405744:	f7ff fafe 	bl	404d44 <memmove>
  405748:	463e      	mov	r6, r7
  40574a:	e702      	b.n	405552 <_realloc_r+0x122>
  40574c:	463a      	mov	r2, r7
  40574e:	e6f7      	b.n	405540 <_realloc_r+0x110>
  405750:	4631      	mov	r1, r6
  405752:	4638      	mov	r0, r7
  405754:	461c      	mov	r4, r3
  405756:	46d0      	mov	r8, sl
  405758:	f7ff faf4 	bl	404d44 <memmove>
  40575c:	463e      	mov	r6, r7
  40575e:	e6f8      	b.n	405552 <_realloc_r+0x122>
  405760:	68b3      	ldr	r3, [r6, #8]
  405762:	f8ca 3010 	str.w	r3, [sl, #16]
  405766:	68f3      	ldr	r3, [r6, #12]
  405768:	f8ca 3014 	str.w	r3, [sl, #20]
  40576c:	2a24      	cmp	r2, #36	; 0x24
  40576e:	d01b      	beq.n	4057a8 <_realloc_r+0x378>
  405770:	3610      	adds	r6, #16
  405772:	f10a 0318 	add.w	r3, sl, #24
  405776:	e7ae      	b.n	4056d6 <_realloc_r+0x2a6>
  405778:	6933      	ldr	r3, [r6, #16]
  40577a:	6103      	str	r3, [r0, #16]
  40577c:	6973      	ldr	r3, [r6, #20]
  40577e:	6143      	str	r3, [r0, #20]
  405780:	f106 0218 	add.w	r2, r6, #24
  405784:	f100 0318 	add.w	r3, r0, #24
  405788:	e697      	b.n	4054ba <_realloc_r+0x8a>
  40578a:	bf00      	nop
  40578c:	2000047c 	.word	0x2000047c
  405790:	68b1      	ldr	r1, [r6, #8]
  405792:	f8ca 1010 	str.w	r1, [sl, #16]
  405796:	68f1      	ldr	r1, [r6, #12]
  405798:	f8ca 1014 	str.w	r1, [sl, #20]
  40579c:	2a24      	cmp	r2, #36	; 0x24
  40579e:	d00f      	beq.n	4057c0 <_realloc_r+0x390>
  4057a0:	3610      	adds	r6, #16
  4057a2:	f10a 0218 	add.w	r2, sl, #24
  4057a6:	e6cb      	b.n	405540 <_realloc_r+0x110>
  4057a8:	6933      	ldr	r3, [r6, #16]
  4057aa:	f8ca 3018 	str.w	r3, [sl, #24]
  4057ae:	6973      	ldr	r3, [r6, #20]
  4057b0:	f8ca 301c 	str.w	r3, [sl, #28]
  4057b4:	3618      	adds	r6, #24
  4057b6:	f10a 0320 	add.w	r3, sl, #32
  4057ba:	e78c      	b.n	4056d6 <_realloc_r+0x2a6>
  4057bc:	463a      	mov	r2, r7
  4057be:	e764      	b.n	40568a <_realloc_r+0x25a>
  4057c0:	6932      	ldr	r2, [r6, #16]
  4057c2:	f8ca 2018 	str.w	r2, [sl, #24]
  4057c6:	6972      	ldr	r2, [r6, #20]
  4057c8:	f8ca 201c 	str.w	r2, [sl, #28]
  4057cc:	3618      	adds	r6, #24
  4057ce:	f10a 0220 	add.w	r2, sl, #32
  4057d2:	e6b5      	b.n	405540 <_realloc_r+0x110>
  4057d4:	4631      	mov	r1, r6
  4057d6:	4638      	mov	r0, r7
  4057d8:	9301      	str	r3, [sp, #4]
  4057da:	f7ff fab3 	bl	404d44 <memmove>
  4057de:	9b01      	ldr	r3, [sp, #4]
  4057e0:	e759      	b.n	405696 <_realloc_r+0x266>
  4057e2:	68b1      	ldr	r1, [r6, #8]
  4057e4:	f8ca 1010 	str.w	r1, [sl, #16]
  4057e8:	68f1      	ldr	r1, [r6, #12]
  4057ea:	f8ca 1014 	str.w	r1, [sl, #20]
  4057ee:	2a24      	cmp	r2, #36	; 0x24
  4057f0:	d003      	beq.n	4057fa <_realloc_r+0x3ca>
  4057f2:	3610      	adds	r6, #16
  4057f4:	f10a 0218 	add.w	r2, sl, #24
  4057f8:	e747      	b.n	40568a <_realloc_r+0x25a>
  4057fa:	6932      	ldr	r2, [r6, #16]
  4057fc:	f8ca 2018 	str.w	r2, [sl, #24]
  405800:	6972      	ldr	r2, [r6, #20]
  405802:	f8ca 201c 	str.w	r2, [sl, #28]
  405806:	3618      	adds	r6, #24
  405808:	f10a 0220 	add.w	r2, sl, #32
  40580c:	e73d      	b.n	40568a <_realloc_r+0x25a>
  40580e:	bf00      	nop

00405810 <_sbrk_r>:
  405810:	b538      	push	{r3, r4, r5, lr}
  405812:	4c07      	ldr	r4, [pc, #28]	; (405830 <_sbrk_r+0x20>)
  405814:	2300      	movs	r3, #0
  405816:	4605      	mov	r5, r0
  405818:	4608      	mov	r0, r1
  40581a:	6023      	str	r3, [r4, #0]
  40581c:	f7fb ffc6 	bl	4017ac <_sbrk>
  405820:	1c43      	adds	r3, r0, #1
  405822:	d000      	beq.n	405826 <_sbrk_r+0x16>
  405824:	bd38      	pop	{r3, r4, r5, pc}
  405826:	6823      	ldr	r3, [r4, #0]
  405828:	2b00      	cmp	r3, #0
  40582a:	d0fb      	beq.n	405824 <_sbrk_r+0x14>
  40582c:	602b      	str	r3, [r5, #0]
  40582e:	bd38      	pop	{r3, r4, r5, pc}
  405830:	20000d38 	.word	0x20000d38

00405834 <__ssprint_r>:
  405834:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  405838:	6893      	ldr	r3, [r2, #8]
  40583a:	b083      	sub	sp, #12
  40583c:	4690      	mov	r8, r2
  40583e:	2b00      	cmp	r3, #0
  405840:	d072      	beq.n	405928 <__ssprint_r+0xf4>
  405842:	4683      	mov	fp, r0
  405844:	f04f 0900 	mov.w	r9, #0
  405848:	6816      	ldr	r6, [r2, #0]
  40584a:	6808      	ldr	r0, [r1, #0]
  40584c:	688b      	ldr	r3, [r1, #8]
  40584e:	460d      	mov	r5, r1
  405850:	464c      	mov	r4, r9
  405852:	2c00      	cmp	r4, #0
  405854:	d045      	beq.n	4058e2 <__ssprint_r+0xae>
  405856:	429c      	cmp	r4, r3
  405858:	461f      	mov	r7, r3
  40585a:	469a      	mov	sl, r3
  40585c:	d346      	bcc.n	4058ec <__ssprint_r+0xb8>
  40585e:	89ab      	ldrh	r3, [r5, #12]
  405860:	f413 6f90 	tst.w	r3, #1152	; 0x480
  405864:	d02d      	beq.n	4058c2 <__ssprint_r+0x8e>
  405866:	696f      	ldr	r7, [r5, #20]
  405868:	6929      	ldr	r1, [r5, #16]
  40586a:	eb07 0747 	add.w	r7, r7, r7, lsl #1
  40586e:	ebc1 0a00 	rsb	sl, r1, r0
  405872:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
  405876:	1c60      	adds	r0, r4, #1
  405878:	107f      	asrs	r7, r7, #1
  40587a:	4450      	add	r0, sl
  40587c:	42b8      	cmp	r0, r7
  40587e:	463a      	mov	r2, r7
  405880:	bf84      	itt	hi
  405882:	4607      	movhi	r7, r0
  405884:	463a      	movhi	r2, r7
  405886:	055b      	lsls	r3, r3, #21
  405888:	d533      	bpl.n	4058f2 <__ssprint_r+0xbe>
  40588a:	4611      	mov	r1, r2
  40588c:	4658      	mov	r0, fp
  40588e:	f7fe feb1 	bl	4045f4 <_malloc_r>
  405892:	2800      	cmp	r0, #0
  405894:	d037      	beq.n	405906 <__ssprint_r+0xd2>
  405896:	4652      	mov	r2, sl
  405898:	6929      	ldr	r1, [r5, #16]
  40589a:	9001      	str	r0, [sp, #4]
  40589c:	f7ff f9b8 	bl	404c10 <memcpy>
  4058a0:	89aa      	ldrh	r2, [r5, #12]
  4058a2:	9b01      	ldr	r3, [sp, #4]
  4058a4:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
  4058a8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
  4058ac:	81aa      	strh	r2, [r5, #12]
  4058ae:	ebca 0207 	rsb	r2, sl, r7
  4058b2:	eb03 000a 	add.w	r0, r3, sl
  4058b6:	616f      	str	r7, [r5, #20]
  4058b8:	612b      	str	r3, [r5, #16]
  4058ba:	6028      	str	r0, [r5, #0]
  4058bc:	60aa      	str	r2, [r5, #8]
  4058be:	4627      	mov	r7, r4
  4058c0:	46a2      	mov	sl, r4
  4058c2:	4652      	mov	r2, sl
  4058c4:	4649      	mov	r1, r9
  4058c6:	f7ff fa3d 	bl	404d44 <memmove>
  4058ca:	f8d8 2008 	ldr.w	r2, [r8, #8]
  4058ce:	68ab      	ldr	r3, [r5, #8]
  4058d0:	6828      	ldr	r0, [r5, #0]
  4058d2:	1bdb      	subs	r3, r3, r7
  4058d4:	4450      	add	r0, sl
  4058d6:	1b14      	subs	r4, r2, r4
  4058d8:	60ab      	str	r3, [r5, #8]
  4058da:	6028      	str	r0, [r5, #0]
  4058dc:	f8c8 4008 	str.w	r4, [r8, #8]
  4058e0:	b314      	cbz	r4, 405928 <__ssprint_r+0xf4>
  4058e2:	f8d6 9000 	ldr.w	r9, [r6]
  4058e6:	6874      	ldr	r4, [r6, #4]
  4058e8:	3608      	adds	r6, #8
  4058ea:	e7b2      	b.n	405852 <__ssprint_r+0x1e>
  4058ec:	4627      	mov	r7, r4
  4058ee:	46a2      	mov	sl, r4
  4058f0:	e7e7      	b.n	4058c2 <__ssprint_r+0x8e>
  4058f2:	4658      	mov	r0, fp
  4058f4:	f7ff fd9c 	bl	405430 <_realloc_r>
  4058f8:	4603      	mov	r3, r0
  4058fa:	2800      	cmp	r0, #0
  4058fc:	d1d7      	bne.n	4058ae <__ssprint_r+0x7a>
  4058fe:	6929      	ldr	r1, [r5, #16]
  405900:	4658      	mov	r0, fp
  405902:	f7fe fd8b 	bl	40441c <_free_r>
  405906:	230c      	movs	r3, #12
  405908:	f8cb 3000 	str.w	r3, [fp]
  40590c:	89ab      	ldrh	r3, [r5, #12]
  40590e:	2200      	movs	r2, #0
  405910:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  405914:	f04f 30ff 	mov.w	r0, #4294967295
  405918:	81ab      	strh	r3, [r5, #12]
  40591a:	f8c8 2008 	str.w	r2, [r8, #8]
  40591e:	f8c8 2004 	str.w	r2, [r8, #4]
  405922:	b003      	add	sp, #12
  405924:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405928:	2000      	movs	r0, #0
  40592a:	f8c8 0004 	str.w	r0, [r8, #4]
  40592e:	b003      	add	sp, #12
  405930:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00405934 <__register_exitproc>:
  405934:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  405938:	4c25      	ldr	r4, [pc, #148]	; (4059d0 <__register_exitproc+0x9c>)
  40593a:	6825      	ldr	r5, [r4, #0]
  40593c:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
  405940:	4606      	mov	r6, r0
  405942:	4688      	mov	r8, r1
  405944:	4692      	mov	sl, r2
  405946:	4699      	mov	r9, r3
  405948:	b3c4      	cbz	r4, 4059bc <__register_exitproc+0x88>
  40594a:	6860      	ldr	r0, [r4, #4]
  40594c:	281f      	cmp	r0, #31
  40594e:	dc17      	bgt.n	405980 <__register_exitproc+0x4c>
  405950:	1c43      	adds	r3, r0, #1
  405952:	b176      	cbz	r6, 405972 <__register_exitproc+0x3e>
  405954:	eb04 0580 	add.w	r5, r4, r0, lsl #2
  405958:	2201      	movs	r2, #1
  40595a:	f8c5 a088 	str.w	sl, [r5, #136]	; 0x88
  40595e:	f8d4 1188 	ldr.w	r1, [r4, #392]	; 0x188
  405962:	4082      	lsls	r2, r0
  405964:	4311      	orrs	r1, r2
  405966:	2e02      	cmp	r6, #2
  405968:	f8c4 1188 	str.w	r1, [r4, #392]	; 0x188
  40596c:	f8c5 9108 	str.w	r9, [r5, #264]	; 0x108
  405970:	d01e      	beq.n	4059b0 <__register_exitproc+0x7c>
  405972:	3002      	adds	r0, #2
  405974:	6063      	str	r3, [r4, #4]
  405976:	f844 8020 	str.w	r8, [r4, r0, lsl #2]
  40597a:	2000      	movs	r0, #0
  40597c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  405980:	4b14      	ldr	r3, [pc, #80]	; (4059d4 <__register_exitproc+0xa0>)
  405982:	b303      	cbz	r3, 4059c6 <__register_exitproc+0x92>
  405984:	f44f 70c8 	mov.w	r0, #400	; 0x190
  405988:	f3af 8000 	nop.w
  40598c:	4604      	mov	r4, r0
  40598e:	b1d0      	cbz	r0, 4059c6 <__register_exitproc+0x92>
  405990:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
  405994:	2700      	movs	r7, #0
  405996:	e880 0088 	stmia.w	r0, {r3, r7}
  40599a:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  40599e:	4638      	mov	r0, r7
  4059a0:	2301      	movs	r3, #1
  4059a2:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
  4059a6:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
  4059aa:	2e00      	cmp	r6, #0
  4059ac:	d0e1      	beq.n	405972 <__register_exitproc+0x3e>
  4059ae:	e7d1      	b.n	405954 <__register_exitproc+0x20>
  4059b0:	f8d4 118c 	ldr.w	r1, [r4, #396]	; 0x18c
  4059b4:	430a      	orrs	r2, r1
  4059b6:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
  4059ba:	e7da      	b.n	405972 <__register_exitproc+0x3e>
  4059bc:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
  4059c0:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  4059c4:	e7c1      	b.n	40594a <__register_exitproc+0x16>
  4059c6:	f04f 30ff 	mov.w	r0, #4294967295
  4059ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4059ce:	bf00      	nop
  4059d0:	00406e04 	.word	0x00406e04
  4059d4:	00000000 	.word	0x00000000

004059d8 <_calloc_r>:
  4059d8:	b510      	push	{r4, lr}
  4059da:	fb02 f101 	mul.w	r1, r2, r1
  4059de:	f7fe fe09 	bl	4045f4 <_malloc_r>
  4059e2:	4604      	mov	r4, r0
  4059e4:	b1d8      	cbz	r0, 405a1e <_calloc_r+0x46>
  4059e6:	f850 2c04 	ldr.w	r2, [r0, #-4]
  4059ea:	f022 0203 	bic.w	r2, r2, #3
  4059ee:	3a04      	subs	r2, #4
  4059f0:	2a24      	cmp	r2, #36	; 0x24
  4059f2:	d818      	bhi.n	405a26 <_calloc_r+0x4e>
  4059f4:	2a13      	cmp	r2, #19
  4059f6:	d914      	bls.n	405a22 <_calloc_r+0x4a>
  4059f8:	2300      	movs	r3, #0
  4059fa:	2a1b      	cmp	r2, #27
  4059fc:	6003      	str	r3, [r0, #0]
  4059fe:	6043      	str	r3, [r0, #4]
  405a00:	d916      	bls.n	405a30 <_calloc_r+0x58>
  405a02:	2a24      	cmp	r2, #36	; 0x24
  405a04:	6083      	str	r3, [r0, #8]
  405a06:	60c3      	str	r3, [r0, #12]
  405a08:	bf11      	iteee	ne
  405a0a:	f100 0210 	addne.w	r2, r0, #16
  405a0e:	6103      	streq	r3, [r0, #16]
  405a10:	6143      	streq	r3, [r0, #20]
  405a12:	f100 0218 	addeq.w	r2, r0, #24
  405a16:	2300      	movs	r3, #0
  405a18:	6013      	str	r3, [r2, #0]
  405a1a:	6053      	str	r3, [r2, #4]
  405a1c:	6093      	str	r3, [r2, #8]
  405a1e:	4620      	mov	r0, r4
  405a20:	bd10      	pop	{r4, pc}
  405a22:	4602      	mov	r2, r0
  405a24:	e7f7      	b.n	405a16 <_calloc_r+0x3e>
  405a26:	2100      	movs	r1, #0
  405a28:	f7fc f896 	bl	401b58 <memset>
  405a2c:	4620      	mov	r0, r4
  405a2e:	bd10      	pop	{r4, pc}
  405a30:	f100 0208 	add.w	r2, r0, #8
  405a34:	e7ef      	b.n	405a16 <_calloc_r+0x3e>
  405a36:	bf00      	nop

00405a38 <__aeabi_drsub>:
  405a38:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
  405a3c:	e002      	b.n	405a44 <__adddf3>
  405a3e:	bf00      	nop

00405a40 <__aeabi_dsub>:
  405a40:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00405a44 <__adddf3>:
  405a44:	b530      	push	{r4, r5, lr}
  405a46:	ea4f 0441 	mov.w	r4, r1, lsl #1
  405a4a:	ea4f 0543 	mov.w	r5, r3, lsl #1
  405a4e:	ea94 0f05 	teq	r4, r5
  405a52:	bf08      	it	eq
  405a54:	ea90 0f02 	teqeq	r0, r2
  405a58:	bf1f      	itttt	ne
  405a5a:	ea54 0c00 	orrsne.w	ip, r4, r0
  405a5e:	ea55 0c02 	orrsne.w	ip, r5, r2
  405a62:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
  405a66:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  405a6a:	f000 80e2 	beq.w	405c32 <__adddf3+0x1ee>
  405a6e:	ea4f 5454 	mov.w	r4, r4, lsr #21
  405a72:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
  405a76:	bfb8      	it	lt
  405a78:	426d      	neglt	r5, r5
  405a7a:	dd0c      	ble.n	405a96 <__adddf3+0x52>
  405a7c:	442c      	add	r4, r5
  405a7e:	ea80 0202 	eor.w	r2, r0, r2
  405a82:	ea81 0303 	eor.w	r3, r1, r3
  405a86:	ea82 0000 	eor.w	r0, r2, r0
  405a8a:	ea83 0101 	eor.w	r1, r3, r1
  405a8e:	ea80 0202 	eor.w	r2, r0, r2
  405a92:	ea81 0303 	eor.w	r3, r1, r3
  405a96:	2d36      	cmp	r5, #54	; 0x36
  405a98:	bf88      	it	hi
  405a9a:	bd30      	pophi	{r4, r5, pc}
  405a9c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  405aa0:	ea4f 3101 	mov.w	r1, r1, lsl #12
  405aa4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
  405aa8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
  405aac:	d002      	beq.n	405ab4 <__adddf3+0x70>
  405aae:	4240      	negs	r0, r0
  405ab0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  405ab4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
  405ab8:	ea4f 3303 	mov.w	r3, r3, lsl #12
  405abc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
  405ac0:	d002      	beq.n	405ac8 <__adddf3+0x84>
  405ac2:	4252      	negs	r2, r2
  405ac4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  405ac8:	ea94 0f05 	teq	r4, r5
  405acc:	f000 80a7 	beq.w	405c1e <__adddf3+0x1da>
  405ad0:	f1a4 0401 	sub.w	r4, r4, #1
  405ad4:	f1d5 0e20 	rsbs	lr, r5, #32
  405ad8:	db0d      	blt.n	405af6 <__adddf3+0xb2>
  405ada:	fa02 fc0e 	lsl.w	ip, r2, lr
  405ade:	fa22 f205 	lsr.w	r2, r2, r5
  405ae2:	1880      	adds	r0, r0, r2
  405ae4:	f141 0100 	adc.w	r1, r1, #0
  405ae8:	fa03 f20e 	lsl.w	r2, r3, lr
  405aec:	1880      	adds	r0, r0, r2
  405aee:	fa43 f305 	asr.w	r3, r3, r5
  405af2:	4159      	adcs	r1, r3
  405af4:	e00e      	b.n	405b14 <__adddf3+0xd0>
  405af6:	f1a5 0520 	sub.w	r5, r5, #32
  405afa:	f10e 0e20 	add.w	lr, lr, #32
  405afe:	2a01      	cmp	r2, #1
  405b00:	fa03 fc0e 	lsl.w	ip, r3, lr
  405b04:	bf28      	it	cs
  405b06:	f04c 0c02 	orrcs.w	ip, ip, #2
  405b0a:	fa43 f305 	asr.w	r3, r3, r5
  405b0e:	18c0      	adds	r0, r0, r3
  405b10:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
  405b14:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  405b18:	d507      	bpl.n	405b2a <__adddf3+0xe6>
  405b1a:	f04f 0e00 	mov.w	lr, #0
  405b1e:	f1dc 0c00 	rsbs	ip, ip, #0
  405b22:	eb7e 0000 	sbcs.w	r0, lr, r0
  405b26:	eb6e 0101 	sbc.w	r1, lr, r1
  405b2a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
  405b2e:	d31b      	bcc.n	405b68 <__adddf3+0x124>
  405b30:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
  405b34:	d30c      	bcc.n	405b50 <__adddf3+0x10c>
  405b36:	0849      	lsrs	r1, r1, #1
  405b38:	ea5f 0030 	movs.w	r0, r0, rrx
  405b3c:	ea4f 0c3c 	mov.w	ip, ip, rrx
  405b40:	f104 0401 	add.w	r4, r4, #1
  405b44:	ea4f 5244 	mov.w	r2, r4, lsl #21
  405b48:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
  405b4c:	f080 809a 	bcs.w	405c84 <__adddf3+0x240>
  405b50:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  405b54:	bf08      	it	eq
  405b56:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  405b5a:	f150 0000 	adcs.w	r0, r0, #0
  405b5e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  405b62:	ea41 0105 	orr.w	r1, r1, r5
  405b66:	bd30      	pop	{r4, r5, pc}
  405b68:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
  405b6c:	4140      	adcs	r0, r0
  405b6e:	eb41 0101 	adc.w	r1, r1, r1
  405b72:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  405b76:	f1a4 0401 	sub.w	r4, r4, #1
  405b7a:	d1e9      	bne.n	405b50 <__adddf3+0x10c>
  405b7c:	f091 0f00 	teq	r1, #0
  405b80:	bf04      	itt	eq
  405b82:	4601      	moveq	r1, r0
  405b84:	2000      	moveq	r0, #0
  405b86:	fab1 f381 	clz	r3, r1
  405b8a:	bf08      	it	eq
  405b8c:	3320      	addeq	r3, #32
  405b8e:	f1a3 030b 	sub.w	r3, r3, #11
  405b92:	f1b3 0220 	subs.w	r2, r3, #32
  405b96:	da0c      	bge.n	405bb2 <__adddf3+0x16e>
  405b98:	320c      	adds	r2, #12
  405b9a:	dd08      	ble.n	405bae <__adddf3+0x16a>
  405b9c:	f102 0c14 	add.w	ip, r2, #20
  405ba0:	f1c2 020c 	rsb	r2, r2, #12
  405ba4:	fa01 f00c 	lsl.w	r0, r1, ip
  405ba8:	fa21 f102 	lsr.w	r1, r1, r2
  405bac:	e00c      	b.n	405bc8 <__adddf3+0x184>
  405bae:	f102 0214 	add.w	r2, r2, #20
  405bb2:	bfd8      	it	le
  405bb4:	f1c2 0c20 	rsble	ip, r2, #32
  405bb8:	fa01 f102 	lsl.w	r1, r1, r2
  405bbc:	fa20 fc0c 	lsr.w	ip, r0, ip
  405bc0:	bfdc      	itt	le
  405bc2:	ea41 010c 	orrle.w	r1, r1, ip
  405bc6:	4090      	lslle	r0, r2
  405bc8:	1ae4      	subs	r4, r4, r3
  405bca:	bfa2      	ittt	ge
  405bcc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
  405bd0:	4329      	orrge	r1, r5
  405bd2:	bd30      	popge	{r4, r5, pc}
  405bd4:	ea6f 0404 	mvn.w	r4, r4
  405bd8:	3c1f      	subs	r4, #31
  405bda:	da1c      	bge.n	405c16 <__adddf3+0x1d2>
  405bdc:	340c      	adds	r4, #12
  405bde:	dc0e      	bgt.n	405bfe <__adddf3+0x1ba>
  405be0:	f104 0414 	add.w	r4, r4, #20
  405be4:	f1c4 0220 	rsb	r2, r4, #32
  405be8:	fa20 f004 	lsr.w	r0, r0, r4
  405bec:	fa01 f302 	lsl.w	r3, r1, r2
  405bf0:	ea40 0003 	orr.w	r0, r0, r3
  405bf4:	fa21 f304 	lsr.w	r3, r1, r4
  405bf8:	ea45 0103 	orr.w	r1, r5, r3
  405bfc:	bd30      	pop	{r4, r5, pc}
  405bfe:	f1c4 040c 	rsb	r4, r4, #12
  405c02:	f1c4 0220 	rsb	r2, r4, #32
  405c06:	fa20 f002 	lsr.w	r0, r0, r2
  405c0a:	fa01 f304 	lsl.w	r3, r1, r4
  405c0e:	ea40 0003 	orr.w	r0, r0, r3
  405c12:	4629      	mov	r1, r5
  405c14:	bd30      	pop	{r4, r5, pc}
  405c16:	fa21 f004 	lsr.w	r0, r1, r4
  405c1a:	4629      	mov	r1, r5
  405c1c:	bd30      	pop	{r4, r5, pc}
  405c1e:	f094 0f00 	teq	r4, #0
  405c22:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
  405c26:	bf06      	itte	eq
  405c28:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
  405c2c:	3401      	addeq	r4, #1
  405c2e:	3d01      	subne	r5, #1
  405c30:	e74e      	b.n	405ad0 <__adddf3+0x8c>
  405c32:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  405c36:	bf18      	it	ne
  405c38:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  405c3c:	d029      	beq.n	405c92 <__adddf3+0x24e>
  405c3e:	ea94 0f05 	teq	r4, r5
  405c42:	bf08      	it	eq
  405c44:	ea90 0f02 	teqeq	r0, r2
  405c48:	d005      	beq.n	405c56 <__adddf3+0x212>
  405c4a:	ea54 0c00 	orrs.w	ip, r4, r0
  405c4e:	bf04      	itt	eq
  405c50:	4619      	moveq	r1, r3
  405c52:	4610      	moveq	r0, r2
  405c54:	bd30      	pop	{r4, r5, pc}
  405c56:	ea91 0f03 	teq	r1, r3
  405c5a:	bf1e      	ittt	ne
  405c5c:	2100      	movne	r1, #0
  405c5e:	2000      	movne	r0, #0
  405c60:	bd30      	popne	{r4, r5, pc}
  405c62:	ea5f 5c54 	movs.w	ip, r4, lsr #21
  405c66:	d105      	bne.n	405c74 <__adddf3+0x230>
  405c68:	0040      	lsls	r0, r0, #1
  405c6a:	4149      	adcs	r1, r1
  405c6c:	bf28      	it	cs
  405c6e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
  405c72:	bd30      	pop	{r4, r5, pc}
  405c74:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
  405c78:	bf3c      	itt	cc
  405c7a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
  405c7e:	bd30      	popcc	{r4, r5, pc}
  405c80:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  405c84:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
  405c88:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  405c8c:	f04f 0000 	mov.w	r0, #0
  405c90:	bd30      	pop	{r4, r5, pc}
  405c92:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  405c96:	bf1a      	itte	ne
  405c98:	4619      	movne	r1, r3
  405c9a:	4610      	movne	r0, r2
  405c9c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
  405ca0:	bf1c      	itt	ne
  405ca2:	460b      	movne	r3, r1
  405ca4:	4602      	movne	r2, r0
  405ca6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  405caa:	bf06      	itte	eq
  405cac:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
  405cb0:	ea91 0f03 	teqeq	r1, r3
  405cb4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
  405cb8:	bd30      	pop	{r4, r5, pc}
  405cba:	bf00      	nop

00405cbc <__aeabi_ui2d>:
  405cbc:	f090 0f00 	teq	r0, #0
  405cc0:	bf04      	itt	eq
  405cc2:	2100      	moveq	r1, #0
  405cc4:	4770      	bxeq	lr
  405cc6:	b530      	push	{r4, r5, lr}
  405cc8:	f44f 6480 	mov.w	r4, #1024	; 0x400
  405ccc:	f104 0432 	add.w	r4, r4, #50	; 0x32
  405cd0:	f04f 0500 	mov.w	r5, #0
  405cd4:	f04f 0100 	mov.w	r1, #0
  405cd8:	e750      	b.n	405b7c <__adddf3+0x138>
  405cda:	bf00      	nop

00405cdc <__aeabi_i2d>:
  405cdc:	f090 0f00 	teq	r0, #0
  405ce0:	bf04      	itt	eq
  405ce2:	2100      	moveq	r1, #0
  405ce4:	4770      	bxeq	lr
  405ce6:	b530      	push	{r4, r5, lr}
  405ce8:	f44f 6480 	mov.w	r4, #1024	; 0x400
  405cec:	f104 0432 	add.w	r4, r4, #50	; 0x32
  405cf0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
  405cf4:	bf48      	it	mi
  405cf6:	4240      	negmi	r0, r0
  405cf8:	f04f 0100 	mov.w	r1, #0
  405cfc:	e73e      	b.n	405b7c <__adddf3+0x138>
  405cfe:	bf00      	nop

00405d00 <__aeabi_f2d>:
  405d00:	0042      	lsls	r2, r0, #1
  405d02:	ea4f 01e2 	mov.w	r1, r2, asr #3
  405d06:	ea4f 0131 	mov.w	r1, r1, rrx
  405d0a:	ea4f 7002 	mov.w	r0, r2, lsl #28
  405d0e:	bf1f      	itttt	ne
  405d10:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
  405d14:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  405d18:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
  405d1c:	4770      	bxne	lr
  405d1e:	f092 0f00 	teq	r2, #0
  405d22:	bf14      	ite	ne
  405d24:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  405d28:	4770      	bxeq	lr
  405d2a:	b530      	push	{r4, r5, lr}
  405d2c:	f44f 7460 	mov.w	r4, #896	; 0x380
  405d30:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  405d34:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  405d38:	e720      	b.n	405b7c <__adddf3+0x138>
  405d3a:	bf00      	nop

00405d3c <__aeabi_ul2d>:
  405d3c:	ea50 0201 	orrs.w	r2, r0, r1
  405d40:	bf08      	it	eq
  405d42:	4770      	bxeq	lr
  405d44:	b530      	push	{r4, r5, lr}
  405d46:	f04f 0500 	mov.w	r5, #0
  405d4a:	e00a      	b.n	405d62 <__aeabi_l2d+0x16>

00405d4c <__aeabi_l2d>:
  405d4c:	ea50 0201 	orrs.w	r2, r0, r1
  405d50:	bf08      	it	eq
  405d52:	4770      	bxeq	lr
  405d54:	b530      	push	{r4, r5, lr}
  405d56:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
  405d5a:	d502      	bpl.n	405d62 <__aeabi_l2d+0x16>
  405d5c:	4240      	negs	r0, r0
  405d5e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  405d62:	f44f 6480 	mov.w	r4, #1024	; 0x400
  405d66:	f104 0432 	add.w	r4, r4, #50	; 0x32
  405d6a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
  405d6e:	f43f aedc 	beq.w	405b2a <__adddf3+0xe6>
  405d72:	f04f 0203 	mov.w	r2, #3
  405d76:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  405d7a:	bf18      	it	ne
  405d7c:	3203      	addne	r2, #3
  405d7e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  405d82:	bf18      	it	ne
  405d84:	3203      	addne	r2, #3
  405d86:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
  405d8a:	f1c2 0320 	rsb	r3, r2, #32
  405d8e:	fa00 fc03 	lsl.w	ip, r0, r3
  405d92:	fa20 f002 	lsr.w	r0, r0, r2
  405d96:	fa01 fe03 	lsl.w	lr, r1, r3
  405d9a:	ea40 000e 	orr.w	r0, r0, lr
  405d9e:	fa21 f102 	lsr.w	r1, r1, r2
  405da2:	4414      	add	r4, r2
  405da4:	e6c1      	b.n	405b2a <__adddf3+0xe6>
  405da6:	bf00      	nop

00405da8 <__aeabi_dmul>:
  405da8:	b570      	push	{r4, r5, r6, lr}
  405daa:	f04f 0cff 	mov.w	ip, #255	; 0xff
  405dae:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  405db2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  405db6:	bf1d      	ittte	ne
  405db8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  405dbc:	ea94 0f0c 	teqne	r4, ip
  405dc0:	ea95 0f0c 	teqne	r5, ip
  405dc4:	f000 f8de 	bleq	405f84 <__aeabi_dmul+0x1dc>
  405dc8:	442c      	add	r4, r5
  405dca:	ea81 0603 	eor.w	r6, r1, r3
  405dce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
  405dd2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
  405dd6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
  405dda:	bf18      	it	ne
  405ddc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
  405de0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  405de4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  405de8:	d038      	beq.n	405e5c <__aeabi_dmul+0xb4>
  405dea:	fba0 ce02 	umull	ip, lr, r0, r2
  405dee:	f04f 0500 	mov.w	r5, #0
  405df2:	fbe1 e502 	umlal	lr, r5, r1, r2
  405df6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
  405dfa:	fbe0 e503 	umlal	lr, r5, r0, r3
  405dfe:	f04f 0600 	mov.w	r6, #0
  405e02:	fbe1 5603 	umlal	r5, r6, r1, r3
  405e06:	f09c 0f00 	teq	ip, #0
  405e0a:	bf18      	it	ne
  405e0c:	f04e 0e01 	orrne.w	lr, lr, #1
  405e10:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
  405e14:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
  405e18:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
  405e1c:	d204      	bcs.n	405e28 <__aeabi_dmul+0x80>
  405e1e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
  405e22:	416d      	adcs	r5, r5
  405e24:	eb46 0606 	adc.w	r6, r6, r6
  405e28:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
  405e2c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
  405e30:	ea4f 20c5 	mov.w	r0, r5, lsl #11
  405e34:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
  405e38:	ea4f 2ece 	mov.w	lr, lr, lsl #11
  405e3c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  405e40:	bf88      	it	hi
  405e42:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  405e46:	d81e      	bhi.n	405e86 <__aeabi_dmul+0xde>
  405e48:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
  405e4c:	bf08      	it	eq
  405e4e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
  405e52:	f150 0000 	adcs.w	r0, r0, #0
  405e56:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  405e5a:	bd70      	pop	{r4, r5, r6, pc}
  405e5c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
  405e60:	ea46 0101 	orr.w	r1, r6, r1
  405e64:	ea40 0002 	orr.w	r0, r0, r2
  405e68:	ea81 0103 	eor.w	r1, r1, r3
  405e6c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
  405e70:	bfc2      	ittt	gt
  405e72:	ebd4 050c 	rsbsgt	r5, r4, ip
  405e76:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  405e7a:	bd70      	popgt	{r4, r5, r6, pc}
  405e7c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  405e80:	f04f 0e00 	mov.w	lr, #0
  405e84:	3c01      	subs	r4, #1
  405e86:	f300 80ab 	bgt.w	405fe0 <__aeabi_dmul+0x238>
  405e8a:	f114 0f36 	cmn.w	r4, #54	; 0x36
  405e8e:	bfde      	ittt	le
  405e90:	2000      	movle	r0, #0
  405e92:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
  405e96:	bd70      	pople	{r4, r5, r6, pc}
  405e98:	f1c4 0400 	rsb	r4, r4, #0
  405e9c:	3c20      	subs	r4, #32
  405e9e:	da35      	bge.n	405f0c <__aeabi_dmul+0x164>
  405ea0:	340c      	adds	r4, #12
  405ea2:	dc1b      	bgt.n	405edc <__aeabi_dmul+0x134>
  405ea4:	f104 0414 	add.w	r4, r4, #20
  405ea8:	f1c4 0520 	rsb	r5, r4, #32
  405eac:	fa00 f305 	lsl.w	r3, r0, r5
  405eb0:	fa20 f004 	lsr.w	r0, r0, r4
  405eb4:	fa01 f205 	lsl.w	r2, r1, r5
  405eb8:	ea40 0002 	orr.w	r0, r0, r2
  405ebc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
  405ec0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  405ec4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  405ec8:	fa21 f604 	lsr.w	r6, r1, r4
  405ecc:	eb42 0106 	adc.w	r1, r2, r6
  405ed0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  405ed4:	bf08      	it	eq
  405ed6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  405eda:	bd70      	pop	{r4, r5, r6, pc}
  405edc:	f1c4 040c 	rsb	r4, r4, #12
  405ee0:	f1c4 0520 	rsb	r5, r4, #32
  405ee4:	fa00 f304 	lsl.w	r3, r0, r4
  405ee8:	fa20 f005 	lsr.w	r0, r0, r5
  405eec:	fa01 f204 	lsl.w	r2, r1, r4
  405ef0:	ea40 0002 	orr.w	r0, r0, r2
  405ef4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  405ef8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  405efc:	f141 0100 	adc.w	r1, r1, #0
  405f00:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  405f04:	bf08      	it	eq
  405f06:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  405f0a:	bd70      	pop	{r4, r5, r6, pc}
  405f0c:	f1c4 0520 	rsb	r5, r4, #32
  405f10:	fa00 f205 	lsl.w	r2, r0, r5
  405f14:	ea4e 0e02 	orr.w	lr, lr, r2
  405f18:	fa20 f304 	lsr.w	r3, r0, r4
  405f1c:	fa01 f205 	lsl.w	r2, r1, r5
  405f20:	ea43 0302 	orr.w	r3, r3, r2
  405f24:	fa21 f004 	lsr.w	r0, r1, r4
  405f28:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  405f2c:	fa21 f204 	lsr.w	r2, r1, r4
  405f30:	ea20 0002 	bic.w	r0, r0, r2
  405f34:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
  405f38:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  405f3c:	bf08      	it	eq
  405f3e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  405f42:	bd70      	pop	{r4, r5, r6, pc}
  405f44:	f094 0f00 	teq	r4, #0
  405f48:	d10f      	bne.n	405f6a <__aeabi_dmul+0x1c2>
  405f4a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
  405f4e:	0040      	lsls	r0, r0, #1
  405f50:	eb41 0101 	adc.w	r1, r1, r1
  405f54:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  405f58:	bf08      	it	eq
  405f5a:	3c01      	subeq	r4, #1
  405f5c:	d0f7      	beq.n	405f4e <__aeabi_dmul+0x1a6>
  405f5e:	ea41 0106 	orr.w	r1, r1, r6
  405f62:	f095 0f00 	teq	r5, #0
  405f66:	bf18      	it	ne
  405f68:	4770      	bxne	lr
  405f6a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
  405f6e:	0052      	lsls	r2, r2, #1
  405f70:	eb43 0303 	adc.w	r3, r3, r3
  405f74:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
  405f78:	bf08      	it	eq
  405f7a:	3d01      	subeq	r5, #1
  405f7c:	d0f7      	beq.n	405f6e <__aeabi_dmul+0x1c6>
  405f7e:	ea43 0306 	orr.w	r3, r3, r6
  405f82:	4770      	bx	lr
  405f84:	ea94 0f0c 	teq	r4, ip
  405f88:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  405f8c:	bf18      	it	ne
  405f8e:	ea95 0f0c 	teqne	r5, ip
  405f92:	d00c      	beq.n	405fae <__aeabi_dmul+0x206>
  405f94:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  405f98:	bf18      	it	ne
  405f9a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  405f9e:	d1d1      	bne.n	405f44 <__aeabi_dmul+0x19c>
  405fa0:	ea81 0103 	eor.w	r1, r1, r3
  405fa4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  405fa8:	f04f 0000 	mov.w	r0, #0
  405fac:	bd70      	pop	{r4, r5, r6, pc}
  405fae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  405fb2:	bf06      	itte	eq
  405fb4:	4610      	moveq	r0, r2
  405fb6:	4619      	moveq	r1, r3
  405fb8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  405fbc:	d019      	beq.n	405ff2 <__aeabi_dmul+0x24a>
  405fbe:	ea94 0f0c 	teq	r4, ip
  405fc2:	d102      	bne.n	405fca <__aeabi_dmul+0x222>
  405fc4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
  405fc8:	d113      	bne.n	405ff2 <__aeabi_dmul+0x24a>
  405fca:	ea95 0f0c 	teq	r5, ip
  405fce:	d105      	bne.n	405fdc <__aeabi_dmul+0x234>
  405fd0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
  405fd4:	bf1c      	itt	ne
  405fd6:	4610      	movne	r0, r2
  405fd8:	4619      	movne	r1, r3
  405fda:	d10a      	bne.n	405ff2 <__aeabi_dmul+0x24a>
  405fdc:	ea81 0103 	eor.w	r1, r1, r3
  405fe0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  405fe4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  405fe8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  405fec:	f04f 0000 	mov.w	r0, #0
  405ff0:	bd70      	pop	{r4, r5, r6, pc}
  405ff2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  405ff6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
  405ffa:	bd70      	pop	{r4, r5, r6, pc}

00405ffc <__aeabi_ddiv>:
  405ffc:	b570      	push	{r4, r5, r6, lr}
  405ffe:	f04f 0cff 	mov.w	ip, #255	; 0xff
  406002:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  406006:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  40600a:	bf1d      	ittte	ne
  40600c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  406010:	ea94 0f0c 	teqne	r4, ip
  406014:	ea95 0f0c 	teqne	r5, ip
  406018:	f000 f8a7 	bleq	40616a <__aeabi_ddiv+0x16e>
  40601c:	eba4 0405 	sub.w	r4, r4, r5
  406020:	ea81 0e03 	eor.w	lr, r1, r3
  406024:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  406028:	ea4f 3101 	mov.w	r1, r1, lsl #12
  40602c:	f000 8088 	beq.w	406140 <__aeabi_ddiv+0x144>
  406030:	ea4f 3303 	mov.w	r3, r3, lsl #12
  406034:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
  406038:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
  40603c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
  406040:	ea4f 2202 	mov.w	r2, r2, lsl #8
  406044:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
  406048:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
  40604c:	ea4f 2600 	mov.w	r6, r0, lsl #8
  406050:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
  406054:	429d      	cmp	r5, r3
  406056:	bf08      	it	eq
  406058:	4296      	cmpeq	r6, r2
  40605a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
  40605e:	f504 7440 	add.w	r4, r4, #768	; 0x300
  406062:	d202      	bcs.n	40606a <__aeabi_ddiv+0x6e>
  406064:	085b      	lsrs	r3, r3, #1
  406066:	ea4f 0232 	mov.w	r2, r2, rrx
  40606a:	1ab6      	subs	r6, r6, r2
  40606c:	eb65 0503 	sbc.w	r5, r5, r3
  406070:	085b      	lsrs	r3, r3, #1
  406072:	ea4f 0232 	mov.w	r2, r2, rrx
  406076:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  40607a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
  40607e:	ebb6 0e02 	subs.w	lr, r6, r2
  406082:	eb75 0e03 	sbcs.w	lr, r5, r3
  406086:	bf22      	ittt	cs
  406088:	1ab6      	subcs	r6, r6, r2
  40608a:	4675      	movcs	r5, lr
  40608c:	ea40 000c 	orrcs.w	r0, r0, ip
  406090:	085b      	lsrs	r3, r3, #1
  406092:	ea4f 0232 	mov.w	r2, r2, rrx
  406096:	ebb6 0e02 	subs.w	lr, r6, r2
  40609a:	eb75 0e03 	sbcs.w	lr, r5, r3
  40609e:	bf22      	ittt	cs
  4060a0:	1ab6      	subcs	r6, r6, r2
  4060a2:	4675      	movcs	r5, lr
  4060a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  4060a8:	085b      	lsrs	r3, r3, #1
  4060aa:	ea4f 0232 	mov.w	r2, r2, rrx
  4060ae:	ebb6 0e02 	subs.w	lr, r6, r2
  4060b2:	eb75 0e03 	sbcs.w	lr, r5, r3
  4060b6:	bf22      	ittt	cs
  4060b8:	1ab6      	subcs	r6, r6, r2
  4060ba:	4675      	movcs	r5, lr
  4060bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  4060c0:	085b      	lsrs	r3, r3, #1
  4060c2:	ea4f 0232 	mov.w	r2, r2, rrx
  4060c6:	ebb6 0e02 	subs.w	lr, r6, r2
  4060ca:	eb75 0e03 	sbcs.w	lr, r5, r3
  4060ce:	bf22      	ittt	cs
  4060d0:	1ab6      	subcs	r6, r6, r2
  4060d2:	4675      	movcs	r5, lr
  4060d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  4060d8:	ea55 0e06 	orrs.w	lr, r5, r6
  4060dc:	d018      	beq.n	406110 <__aeabi_ddiv+0x114>
  4060de:	ea4f 1505 	mov.w	r5, r5, lsl #4
  4060e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
  4060e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
  4060ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
  4060ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
  4060f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
  4060f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
  4060fa:	d1c0      	bne.n	40607e <__aeabi_ddiv+0x82>
  4060fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  406100:	d10b      	bne.n	40611a <__aeabi_ddiv+0x11e>
  406102:	ea41 0100 	orr.w	r1, r1, r0
  406106:	f04f 0000 	mov.w	r0, #0
  40610a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
  40610e:	e7b6      	b.n	40607e <__aeabi_ddiv+0x82>
  406110:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  406114:	bf04      	itt	eq
  406116:	4301      	orreq	r1, r0
  406118:	2000      	moveq	r0, #0
  40611a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  40611e:	bf88      	it	hi
  406120:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  406124:	f63f aeaf 	bhi.w	405e86 <__aeabi_dmul+0xde>
  406128:	ebb5 0c03 	subs.w	ip, r5, r3
  40612c:	bf04      	itt	eq
  40612e:	ebb6 0c02 	subseq.w	ip, r6, r2
  406132:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  406136:	f150 0000 	adcs.w	r0, r0, #0
  40613a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  40613e:	bd70      	pop	{r4, r5, r6, pc}
  406140:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
  406144:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
  406148:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
  40614c:	bfc2      	ittt	gt
  40614e:	ebd4 050c 	rsbsgt	r5, r4, ip
  406152:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  406156:	bd70      	popgt	{r4, r5, r6, pc}
  406158:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  40615c:	f04f 0e00 	mov.w	lr, #0
  406160:	3c01      	subs	r4, #1
  406162:	e690      	b.n	405e86 <__aeabi_dmul+0xde>
  406164:	ea45 0e06 	orr.w	lr, r5, r6
  406168:	e68d      	b.n	405e86 <__aeabi_dmul+0xde>
  40616a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  40616e:	ea94 0f0c 	teq	r4, ip
  406172:	bf08      	it	eq
  406174:	ea95 0f0c 	teqeq	r5, ip
  406178:	f43f af3b 	beq.w	405ff2 <__aeabi_dmul+0x24a>
  40617c:	ea94 0f0c 	teq	r4, ip
  406180:	d10a      	bne.n	406198 <__aeabi_ddiv+0x19c>
  406182:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  406186:	f47f af34 	bne.w	405ff2 <__aeabi_dmul+0x24a>
  40618a:	ea95 0f0c 	teq	r5, ip
  40618e:	f47f af25 	bne.w	405fdc <__aeabi_dmul+0x234>
  406192:	4610      	mov	r0, r2
  406194:	4619      	mov	r1, r3
  406196:	e72c      	b.n	405ff2 <__aeabi_dmul+0x24a>
  406198:	ea95 0f0c 	teq	r5, ip
  40619c:	d106      	bne.n	4061ac <__aeabi_ddiv+0x1b0>
  40619e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  4061a2:	f43f aefd 	beq.w	405fa0 <__aeabi_dmul+0x1f8>
  4061a6:	4610      	mov	r0, r2
  4061a8:	4619      	mov	r1, r3
  4061aa:	e722      	b.n	405ff2 <__aeabi_dmul+0x24a>
  4061ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  4061b0:	bf18      	it	ne
  4061b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  4061b6:	f47f aec5 	bne.w	405f44 <__aeabi_dmul+0x19c>
  4061ba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
  4061be:	f47f af0d 	bne.w	405fdc <__aeabi_dmul+0x234>
  4061c2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
  4061c6:	f47f aeeb 	bne.w	405fa0 <__aeabi_dmul+0x1f8>
  4061ca:	e712      	b.n	405ff2 <__aeabi_dmul+0x24a>

004061cc <__gedf2>:
  4061cc:	f04f 3cff 	mov.w	ip, #4294967295
  4061d0:	e006      	b.n	4061e0 <__cmpdf2+0x4>
  4061d2:	bf00      	nop

004061d4 <__ledf2>:
  4061d4:	f04f 0c01 	mov.w	ip, #1
  4061d8:	e002      	b.n	4061e0 <__cmpdf2+0x4>
  4061da:	bf00      	nop

004061dc <__cmpdf2>:
  4061dc:	f04f 0c01 	mov.w	ip, #1
  4061e0:	f84d cd04 	str.w	ip, [sp, #-4]!
  4061e4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  4061e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  4061ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  4061f0:	bf18      	it	ne
  4061f2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
  4061f6:	d01b      	beq.n	406230 <__cmpdf2+0x54>
  4061f8:	b001      	add	sp, #4
  4061fa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
  4061fe:	bf0c      	ite	eq
  406200:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
  406204:	ea91 0f03 	teqne	r1, r3
  406208:	bf02      	ittt	eq
  40620a:	ea90 0f02 	teqeq	r0, r2
  40620e:	2000      	moveq	r0, #0
  406210:	4770      	bxeq	lr
  406212:	f110 0f00 	cmn.w	r0, #0
  406216:	ea91 0f03 	teq	r1, r3
  40621a:	bf58      	it	pl
  40621c:	4299      	cmppl	r1, r3
  40621e:	bf08      	it	eq
  406220:	4290      	cmpeq	r0, r2
  406222:	bf2c      	ite	cs
  406224:	17d8      	asrcs	r0, r3, #31
  406226:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
  40622a:	f040 0001 	orr.w	r0, r0, #1
  40622e:	4770      	bx	lr
  406230:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  406234:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  406238:	d102      	bne.n	406240 <__cmpdf2+0x64>
  40623a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  40623e:	d107      	bne.n	406250 <__cmpdf2+0x74>
  406240:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  406244:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  406248:	d1d6      	bne.n	4061f8 <__cmpdf2+0x1c>
  40624a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  40624e:	d0d3      	beq.n	4061f8 <__cmpdf2+0x1c>
  406250:	f85d 0b04 	ldr.w	r0, [sp], #4
  406254:	4770      	bx	lr
  406256:	bf00      	nop

00406258 <__aeabi_cdrcmple>:
  406258:	4684      	mov	ip, r0
  40625a:	4610      	mov	r0, r2
  40625c:	4662      	mov	r2, ip
  40625e:	468c      	mov	ip, r1
  406260:	4619      	mov	r1, r3
  406262:	4663      	mov	r3, ip
  406264:	e000      	b.n	406268 <__aeabi_cdcmpeq>
  406266:	bf00      	nop

00406268 <__aeabi_cdcmpeq>:
  406268:	b501      	push	{r0, lr}
  40626a:	f7ff ffb7 	bl	4061dc <__cmpdf2>
  40626e:	2800      	cmp	r0, #0
  406270:	bf48      	it	mi
  406272:	f110 0f00 	cmnmi.w	r0, #0
  406276:	bd01      	pop	{r0, pc}

00406278 <__aeabi_dcmpeq>:
  406278:	f84d ed08 	str.w	lr, [sp, #-8]!
  40627c:	f7ff fff4 	bl	406268 <__aeabi_cdcmpeq>
  406280:	bf0c      	ite	eq
  406282:	2001      	moveq	r0, #1
  406284:	2000      	movne	r0, #0
  406286:	f85d fb08 	ldr.w	pc, [sp], #8
  40628a:	bf00      	nop

0040628c <__aeabi_dcmplt>:
  40628c:	f84d ed08 	str.w	lr, [sp, #-8]!
  406290:	f7ff ffea 	bl	406268 <__aeabi_cdcmpeq>
  406294:	bf34      	ite	cc
  406296:	2001      	movcc	r0, #1
  406298:	2000      	movcs	r0, #0
  40629a:	f85d fb08 	ldr.w	pc, [sp], #8
  40629e:	bf00      	nop

004062a0 <__aeabi_dcmple>:
  4062a0:	f84d ed08 	str.w	lr, [sp, #-8]!
  4062a4:	f7ff ffe0 	bl	406268 <__aeabi_cdcmpeq>
  4062a8:	bf94      	ite	ls
  4062aa:	2001      	movls	r0, #1
  4062ac:	2000      	movhi	r0, #0
  4062ae:	f85d fb08 	ldr.w	pc, [sp], #8
  4062b2:	bf00      	nop

004062b4 <__aeabi_dcmpge>:
  4062b4:	f84d ed08 	str.w	lr, [sp, #-8]!
  4062b8:	f7ff ffce 	bl	406258 <__aeabi_cdrcmple>
  4062bc:	bf94      	ite	ls
  4062be:	2001      	movls	r0, #1
  4062c0:	2000      	movhi	r0, #0
  4062c2:	f85d fb08 	ldr.w	pc, [sp], #8
  4062c6:	bf00      	nop

004062c8 <__aeabi_dcmpgt>:
  4062c8:	f84d ed08 	str.w	lr, [sp, #-8]!
  4062cc:	f7ff ffc4 	bl	406258 <__aeabi_cdrcmple>
  4062d0:	bf34      	ite	cc
  4062d2:	2001      	movcc	r0, #1
  4062d4:	2000      	movcs	r0, #0
  4062d6:	f85d fb08 	ldr.w	pc, [sp], #8
  4062da:	bf00      	nop

004062dc <__aeabi_dcmpun>:
  4062dc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  4062e0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  4062e4:	d102      	bne.n	4062ec <__aeabi_dcmpun+0x10>
  4062e6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  4062ea:	d10a      	bne.n	406302 <__aeabi_dcmpun+0x26>
  4062ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  4062f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  4062f4:	d102      	bne.n	4062fc <__aeabi_dcmpun+0x20>
  4062f6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  4062fa:	d102      	bne.n	406302 <__aeabi_dcmpun+0x26>
  4062fc:	f04f 0000 	mov.w	r0, #0
  406300:	4770      	bx	lr
  406302:	f04f 0001 	mov.w	r0, #1
  406306:	4770      	bx	lr

00406308 <__aeabi_d2iz>:
  406308:	ea4f 0241 	mov.w	r2, r1, lsl #1
  40630c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
  406310:	d215      	bcs.n	40633e <__aeabi_d2iz+0x36>
  406312:	d511      	bpl.n	406338 <__aeabi_d2iz+0x30>
  406314:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
  406318:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
  40631c:	d912      	bls.n	406344 <__aeabi_d2iz+0x3c>
  40631e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  406322:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  406326:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
  40632a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  40632e:	fa23 f002 	lsr.w	r0, r3, r2
  406332:	bf18      	it	ne
  406334:	4240      	negne	r0, r0
  406336:	4770      	bx	lr
  406338:	f04f 0000 	mov.w	r0, #0
  40633c:	4770      	bx	lr
  40633e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
  406342:	d105      	bne.n	406350 <__aeabi_d2iz+0x48>
  406344:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
  406348:	bf08      	it	eq
  40634a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
  40634e:	4770      	bx	lr
  406350:	f04f 0000 	mov.w	r0, #0
  406354:	4770      	bx	lr
  406356:	bf00      	nop

00406358 <__aeabi_uldivmod>:
  406358:	b953      	cbnz	r3, 406370 <__aeabi_uldivmod+0x18>
  40635a:	b94a      	cbnz	r2, 406370 <__aeabi_uldivmod+0x18>
  40635c:	2900      	cmp	r1, #0
  40635e:	bf08      	it	eq
  406360:	2800      	cmpeq	r0, #0
  406362:	bf1c      	itt	ne
  406364:	f04f 31ff 	movne.w	r1, #4294967295
  406368:	f04f 30ff 	movne.w	r0, #4294967295
  40636c:	f000 b97e 	b.w	40666c <__aeabi_idiv0>
  406370:	f1ad 0c08 	sub.w	ip, sp, #8
  406374:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  406378:	f000 f806 	bl	406388 <__udivmoddi4>
  40637c:	f8dd e004 	ldr.w	lr, [sp, #4]
  406380:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  406384:	b004      	add	sp, #16
  406386:	4770      	bx	lr

00406388 <__udivmoddi4>:
  406388:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40638c:	468c      	mov	ip, r1
  40638e:	460e      	mov	r6, r1
  406390:	4604      	mov	r4, r0
  406392:	9d08      	ldr	r5, [sp, #32]
  406394:	2b00      	cmp	r3, #0
  406396:	d150      	bne.n	40643a <__udivmoddi4+0xb2>
  406398:	428a      	cmp	r2, r1
  40639a:	4617      	mov	r7, r2
  40639c:	d96c      	bls.n	406478 <__udivmoddi4+0xf0>
  40639e:	fab2 fe82 	clz	lr, r2
  4063a2:	f1be 0f00 	cmp.w	lr, #0
  4063a6:	d00b      	beq.n	4063c0 <__udivmoddi4+0x38>
  4063a8:	f1ce 0420 	rsb	r4, lr, #32
  4063ac:	fa20 f404 	lsr.w	r4, r0, r4
  4063b0:	fa01 f60e 	lsl.w	r6, r1, lr
  4063b4:	ea44 0c06 	orr.w	ip, r4, r6
  4063b8:	fa02 f70e 	lsl.w	r7, r2, lr
  4063bc:	fa00 f40e 	lsl.w	r4, r0, lr
  4063c0:	ea4f 4917 	mov.w	r9, r7, lsr #16
  4063c4:	0c22      	lsrs	r2, r4, #16
  4063c6:	fbbc f0f9 	udiv	r0, ip, r9
  4063ca:	fa1f f887 	uxth.w	r8, r7
  4063ce:	fb09 c610 	mls	r6, r9, r0, ip
  4063d2:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
  4063d6:	fb00 f308 	mul.w	r3, r0, r8
  4063da:	42b3      	cmp	r3, r6
  4063dc:	d909      	bls.n	4063f2 <__udivmoddi4+0x6a>
  4063de:	19f6      	adds	r6, r6, r7
  4063e0:	f100 32ff 	add.w	r2, r0, #4294967295
  4063e4:	f080 8122 	bcs.w	40662c <__udivmoddi4+0x2a4>
  4063e8:	42b3      	cmp	r3, r6
  4063ea:	f240 811f 	bls.w	40662c <__udivmoddi4+0x2a4>
  4063ee:	3802      	subs	r0, #2
  4063f0:	443e      	add	r6, r7
  4063f2:	1af6      	subs	r6, r6, r3
  4063f4:	b2a2      	uxth	r2, r4
  4063f6:	fbb6 f3f9 	udiv	r3, r6, r9
  4063fa:	fb09 6613 	mls	r6, r9, r3, r6
  4063fe:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
  406402:	fb03 f808 	mul.w	r8, r3, r8
  406406:	45a0      	cmp	r8, r4
  406408:	d909      	bls.n	40641e <__udivmoddi4+0x96>
  40640a:	19e4      	adds	r4, r4, r7
  40640c:	f103 32ff 	add.w	r2, r3, #4294967295
  406410:	f080 810a 	bcs.w	406628 <__udivmoddi4+0x2a0>
  406414:	45a0      	cmp	r8, r4
  406416:	f240 8107 	bls.w	406628 <__udivmoddi4+0x2a0>
  40641a:	3b02      	subs	r3, #2
  40641c:	443c      	add	r4, r7
  40641e:	ebc8 0404 	rsb	r4, r8, r4
  406422:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
  406426:	2100      	movs	r1, #0
  406428:	2d00      	cmp	r5, #0
  40642a:	d062      	beq.n	4064f2 <__udivmoddi4+0x16a>
  40642c:	fa24 f40e 	lsr.w	r4, r4, lr
  406430:	2300      	movs	r3, #0
  406432:	602c      	str	r4, [r5, #0]
  406434:	606b      	str	r3, [r5, #4]
  406436:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40643a:	428b      	cmp	r3, r1
  40643c:	d907      	bls.n	40644e <__udivmoddi4+0xc6>
  40643e:	2d00      	cmp	r5, #0
  406440:	d055      	beq.n	4064ee <__udivmoddi4+0x166>
  406442:	2100      	movs	r1, #0
  406444:	e885 0041 	stmia.w	r5, {r0, r6}
  406448:	4608      	mov	r0, r1
  40644a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40644e:	fab3 f183 	clz	r1, r3
  406452:	2900      	cmp	r1, #0
  406454:	f040 8090 	bne.w	406578 <__udivmoddi4+0x1f0>
  406458:	42b3      	cmp	r3, r6
  40645a:	d302      	bcc.n	406462 <__udivmoddi4+0xda>
  40645c:	4282      	cmp	r2, r0
  40645e:	f200 80f8 	bhi.w	406652 <__udivmoddi4+0x2ca>
  406462:	1a84      	subs	r4, r0, r2
  406464:	eb66 0603 	sbc.w	r6, r6, r3
  406468:	2001      	movs	r0, #1
  40646a:	46b4      	mov	ip, r6
  40646c:	2d00      	cmp	r5, #0
  40646e:	d040      	beq.n	4064f2 <__udivmoddi4+0x16a>
  406470:	e885 1010 	stmia.w	r5, {r4, ip}
  406474:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  406478:	b912      	cbnz	r2, 406480 <__udivmoddi4+0xf8>
  40647a:	2701      	movs	r7, #1
  40647c:	fbb7 f7f2 	udiv	r7, r7, r2
  406480:	fab7 fe87 	clz	lr, r7
  406484:	f1be 0f00 	cmp.w	lr, #0
  406488:	d135      	bne.n	4064f6 <__udivmoddi4+0x16e>
  40648a:	1bf3      	subs	r3, r6, r7
  40648c:	ea4f 4817 	mov.w	r8, r7, lsr #16
  406490:	fa1f fc87 	uxth.w	ip, r7
  406494:	2101      	movs	r1, #1
  406496:	fbb3 f0f8 	udiv	r0, r3, r8
  40649a:	0c22      	lsrs	r2, r4, #16
  40649c:	fb08 3610 	mls	r6, r8, r0, r3
  4064a0:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
  4064a4:	fb0c f300 	mul.w	r3, ip, r0
  4064a8:	42b3      	cmp	r3, r6
  4064aa:	d907      	bls.n	4064bc <__udivmoddi4+0x134>
  4064ac:	19f6      	adds	r6, r6, r7
  4064ae:	f100 32ff 	add.w	r2, r0, #4294967295
  4064b2:	d202      	bcs.n	4064ba <__udivmoddi4+0x132>
  4064b4:	42b3      	cmp	r3, r6
  4064b6:	f200 80ce 	bhi.w	406656 <__udivmoddi4+0x2ce>
  4064ba:	4610      	mov	r0, r2
  4064bc:	1af6      	subs	r6, r6, r3
  4064be:	b2a2      	uxth	r2, r4
  4064c0:	fbb6 f3f8 	udiv	r3, r6, r8
  4064c4:	fb08 6613 	mls	r6, r8, r3, r6
  4064c8:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
  4064cc:	fb0c fc03 	mul.w	ip, ip, r3
  4064d0:	45a4      	cmp	ip, r4
  4064d2:	d907      	bls.n	4064e4 <__udivmoddi4+0x15c>
  4064d4:	19e4      	adds	r4, r4, r7
  4064d6:	f103 32ff 	add.w	r2, r3, #4294967295
  4064da:	d202      	bcs.n	4064e2 <__udivmoddi4+0x15a>
  4064dc:	45a4      	cmp	ip, r4
  4064de:	f200 80b5 	bhi.w	40664c <__udivmoddi4+0x2c4>
  4064e2:	4613      	mov	r3, r2
  4064e4:	ebcc 0404 	rsb	r4, ip, r4
  4064e8:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
  4064ec:	e79c      	b.n	406428 <__udivmoddi4+0xa0>
  4064ee:	4629      	mov	r1, r5
  4064f0:	4628      	mov	r0, r5
  4064f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4064f6:	f1ce 0120 	rsb	r1, lr, #32
  4064fa:	fa06 f30e 	lsl.w	r3, r6, lr
  4064fe:	fa07 f70e 	lsl.w	r7, r7, lr
  406502:	fa20 f901 	lsr.w	r9, r0, r1
  406506:	ea4f 4817 	mov.w	r8, r7, lsr #16
  40650a:	40ce      	lsrs	r6, r1
  40650c:	ea49 0903 	orr.w	r9, r9, r3
  406510:	fbb6 faf8 	udiv	sl, r6, r8
  406514:	ea4f 4419 	mov.w	r4, r9, lsr #16
  406518:	fb08 661a 	mls	r6, r8, sl, r6
  40651c:	fa1f fc87 	uxth.w	ip, r7
  406520:	ea44 4306 	orr.w	r3, r4, r6, lsl #16
  406524:	fb0a f20c 	mul.w	r2, sl, ip
  406528:	429a      	cmp	r2, r3
  40652a:	fa00 f40e 	lsl.w	r4, r0, lr
  40652e:	d90a      	bls.n	406546 <__udivmoddi4+0x1be>
  406530:	19db      	adds	r3, r3, r7
  406532:	f10a 31ff 	add.w	r1, sl, #4294967295
  406536:	f080 8087 	bcs.w	406648 <__udivmoddi4+0x2c0>
  40653a:	429a      	cmp	r2, r3
  40653c:	f240 8084 	bls.w	406648 <__udivmoddi4+0x2c0>
  406540:	f1aa 0a02 	sub.w	sl, sl, #2
  406544:	443b      	add	r3, r7
  406546:	1a9b      	subs	r3, r3, r2
  406548:	fa1f f989 	uxth.w	r9, r9
  40654c:	fbb3 f1f8 	udiv	r1, r3, r8
  406550:	fb08 3311 	mls	r3, r8, r1, r3
  406554:	ea49 4303 	orr.w	r3, r9, r3, lsl #16
  406558:	fb01 f60c 	mul.w	r6, r1, ip
  40655c:	429e      	cmp	r6, r3
  40655e:	d907      	bls.n	406570 <__udivmoddi4+0x1e8>
  406560:	19db      	adds	r3, r3, r7
  406562:	f101 32ff 	add.w	r2, r1, #4294967295
  406566:	d26b      	bcs.n	406640 <__udivmoddi4+0x2b8>
  406568:	429e      	cmp	r6, r3
  40656a:	d969      	bls.n	406640 <__udivmoddi4+0x2b8>
  40656c:	3902      	subs	r1, #2
  40656e:	443b      	add	r3, r7
  406570:	1b9b      	subs	r3, r3, r6
  406572:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
  406576:	e78e      	b.n	406496 <__udivmoddi4+0x10e>
  406578:	f1c1 0e20 	rsb	lr, r1, #32
  40657c:	fa22 f40e 	lsr.w	r4, r2, lr
  406580:	408b      	lsls	r3, r1
  406582:	4323      	orrs	r3, r4
  406584:	fa20 f70e 	lsr.w	r7, r0, lr
  406588:	fa06 f401 	lsl.w	r4, r6, r1
  40658c:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  406590:	fa26 f60e 	lsr.w	r6, r6, lr
  406594:	433c      	orrs	r4, r7
  406596:	fbb6 f9fc 	udiv	r9, r6, ip
  40659a:	0c27      	lsrs	r7, r4, #16
  40659c:	fb0c 6619 	mls	r6, ip, r9, r6
  4065a0:	fa1f f883 	uxth.w	r8, r3
  4065a4:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
  4065a8:	fb09 f708 	mul.w	r7, r9, r8
  4065ac:	42b7      	cmp	r7, r6
  4065ae:	fa02 f201 	lsl.w	r2, r2, r1
  4065b2:	fa00 fa01 	lsl.w	sl, r0, r1
  4065b6:	d908      	bls.n	4065ca <__udivmoddi4+0x242>
  4065b8:	18f6      	adds	r6, r6, r3
  4065ba:	f109 30ff 	add.w	r0, r9, #4294967295
  4065be:	d241      	bcs.n	406644 <__udivmoddi4+0x2bc>
  4065c0:	42b7      	cmp	r7, r6
  4065c2:	d93f      	bls.n	406644 <__udivmoddi4+0x2bc>
  4065c4:	f1a9 0902 	sub.w	r9, r9, #2
  4065c8:	441e      	add	r6, r3
  4065ca:	1bf6      	subs	r6, r6, r7
  4065cc:	b2a0      	uxth	r0, r4
  4065ce:	fbb6 f4fc 	udiv	r4, r6, ip
  4065d2:	fb0c 6614 	mls	r6, ip, r4, r6
  4065d6:	ea40 4706 	orr.w	r7, r0, r6, lsl #16
  4065da:	fb04 f808 	mul.w	r8, r4, r8
  4065de:	45b8      	cmp	r8, r7
  4065e0:	d907      	bls.n	4065f2 <__udivmoddi4+0x26a>
  4065e2:	18ff      	adds	r7, r7, r3
  4065e4:	f104 30ff 	add.w	r0, r4, #4294967295
  4065e8:	d228      	bcs.n	40663c <__udivmoddi4+0x2b4>
  4065ea:	45b8      	cmp	r8, r7
  4065ec:	d926      	bls.n	40663c <__udivmoddi4+0x2b4>
  4065ee:	3c02      	subs	r4, #2
  4065f0:	441f      	add	r7, r3
  4065f2:	ea44 4009 	orr.w	r0, r4, r9, lsl #16
  4065f6:	ebc8 0707 	rsb	r7, r8, r7
  4065fa:	fba0 8902 	umull	r8, r9, r0, r2
  4065fe:	454f      	cmp	r7, r9
  406600:	4644      	mov	r4, r8
  406602:	464e      	mov	r6, r9
  406604:	d314      	bcc.n	406630 <__udivmoddi4+0x2a8>
  406606:	d029      	beq.n	40665c <__udivmoddi4+0x2d4>
  406608:	b365      	cbz	r5, 406664 <__udivmoddi4+0x2dc>
  40660a:	ebba 0304 	subs.w	r3, sl, r4
  40660e:	eb67 0706 	sbc.w	r7, r7, r6
  406612:	fa07 fe0e 	lsl.w	lr, r7, lr
  406616:	40cb      	lsrs	r3, r1
  406618:	40cf      	lsrs	r7, r1
  40661a:	ea4e 0303 	orr.w	r3, lr, r3
  40661e:	e885 0088 	stmia.w	r5, {r3, r7}
  406622:	2100      	movs	r1, #0
  406624:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  406628:	4613      	mov	r3, r2
  40662a:	e6f8      	b.n	40641e <__udivmoddi4+0x96>
  40662c:	4610      	mov	r0, r2
  40662e:	e6e0      	b.n	4063f2 <__udivmoddi4+0x6a>
  406630:	ebb8 0402 	subs.w	r4, r8, r2
  406634:	eb69 0603 	sbc.w	r6, r9, r3
  406638:	3801      	subs	r0, #1
  40663a:	e7e5      	b.n	406608 <__udivmoddi4+0x280>
  40663c:	4604      	mov	r4, r0
  40663e:	e7d8      	b.n	4065f2 <__udivmoddi4+0x26a>
  406640:	4611      	mov	r1, r2
  406642:	e795      	b.n	406570 <__udivmoddi4+0x1e8>
  406644:	4681      	mov	r9, r0
  406646:	e7c0      	b.n	4065ca <__udivmoddi4+0x242>
  406648:	468a      	mov	sl, r1
  40664a:	e77c      	b.n	406546 <__udivmoddi4+0x1be>
  40664c:	3b02      	subs	r3, #2
  40664e:	443c      	add	r4, r7
  406650:	e748      	b.n	4064e4 <__udivmoddi4+0x15c>
  406652:	4608      	mov	r0, r1
  406654:	e70a      	b.n	40646c <__udivmoddi4+0xe4>
  406656:	3802      	subs	r0, #2
  406658:	443e      	add	r6, r7
  40665a:	e72f      	b.n	4064bc <__udivmoddi4+0x134>
  40665c:	45c2      	cmp	sl, r8
  40665e:	d3e7      	bcc.n	406630 <__udivmoddi4+0x2a8>
  406660:	463e      	mov	r6, r7
  406662:	e7d1      	b.n	406608 <__udivmoddi4+0x280>
  406664:	4629      	mov	r1, r5
  406666:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40666a:	bf00      	nop

0040666c <__aeabi_idiv0>:
  40666c:	4770      	bx	lr
  40666e:	bf00      	nop

00406670 <p_uc_charset10x14>:
	...
  40668c:	ccff ccff 0000 0000 0000 0000 0000 0000     ................
  40669c:	00f0 00f0 0000 0000 00f0 00f0 0000 0000     ................
  4066ac:	c00c c00c fcff fcff c00c c00c fcff fcff     ................
  4066bc:	c00c c00c 600c 701e 303f 3033 fcff fcff     .....`.p?030....
  4066cc:	3033 f033 e039 c018 0060 0cf0 3cf0 f060     303.9...`....<`.
  4066dc:	c003 000f 183c 3cf0 3cc0 1800 f03c f87f     ....<..<.<..<...
  4066ec:	1cc3 8cc7 cccf ecdc 7878 3030 fc00 cc00     ........xx00....
  4066fc:	0000 0000 0000 0044 00ec 00f8 0070 0000     ......D.....p...
	...
  406714:	c00f f03f 7878 1860 0cc0 0cc0 0000 0000     ..?.xx`.........
  406724:	0000 0000 0cc0 0cc0 1860 7878 f03f c00f     ........`.xx?...
  406734:	0000 0000 600c e00e c007 8003 f83f f83f     .....`......?.?.
  406744:	8003 c007 e00e 600c 0003 0003 0003 0003     .......`........
  406754:	f03f f03f 0003 0003 0003 0003 4400 ec00     ?.?..........D..
  406764:	f800 7000 0000 0000 0000 0000 0000 0000     ...p............
  406774:	0003 0003 0003 0003 0003 0003 0003 0003     ................
  406784:	0003 0003 1800 3c00 3c00 1800 0000 0000     .......<.<......
	...
  40679c:	0000 0c00 3c00 f000 c003 000f 003c 00f0     .....<......<...
  4067ac:	00c0 0000 f03f f87f fce0 ccc1 8cc3 0cc7     ....?...........
  4067bc:	0cce 1cfc f87f f03f 0000 0000 0c30 0c70     ......?.....0.p.
  4067cc:	fcff fcff 0c00 0c00 0000 0000 0c30 1c70     ............0.p.
  4067dc:	3ce0 7cc0 ecc0 ccc1 8cc3 0ce7 0c7e 0c3c     .<.|........~.<.
  4067ec:	3030 3870 1ce0 0cc0 0cc0 0cc3 0cc3 1ce3     00p8............
  4067fc:	f87f f03c c003 c007 c00e c01c c038 c070     ..<.........8.p.
  40680c:	fcff fcff c000 c000 30fc 38fc 1ccc 0ccc     .........0.8....
  40681c:	0ccc 0ccc 0ccc 1cce f8c7 f0c3 f03f f87f     ............?...
  40682c:	1ce3 0cc3 0cc3 0cc3 0cc3 9ce3 f871 f030     ............q.0.
  40683c:	00c0 00c0 00c0 00c0 fcc3 fcc7 00ce 00dc     ................
  40684c:	00f8 00f0 f03c f87f 9ce7 0cc3 0cc3 0cc3     ....<...........
  40685c:	0cc3 9ce7 f87f f03c 003c 007e 0ce7 0cc3     ......<.<.~.....
  40686c:	1cc3 38c3 70c3 e0e7 c07f 803f 0000 0000     ...8.p....?.....
  40687c:	0000 6018 f03c f03c 6018 0000 0000 0000     ...`<.<..`......
  40688c:	0000 0000 0000 4418 ec3c f83c 7018 0000     .......D<.<..p..
  40689c:	0000 0000 0000 0003 8007 c00f e01c 7038     ..............8p
  4068ac:	3870 1ce0 0cc0 0000 c00c c00c c00c c00c     p8..............
  4068bc:	c00c c00c c00c c00c c00c c00c 0000 0cc0     ................
  4068cc:	1ce0 3870 7038 e01c c00f 8007 0003 0000     ..p88p..........
  4068dc:	0030 0070 00e0 00c0 ecc1 ecc3 00c3 00e6     0.p.............
  4068ec:	007e 003c f030 f871 9ce3 0cc3 fcc3 fcc3     ~.<.0.q.........
  4068fc:	0cc0 1ce0 f87f f03f fc3f fc7f c0e0 c0c0     ......?.?.......
  40690c:	c0c0 c0c0 c0c0 c0e0 fc7f fc3f fcff fcff     ..........?.....
  40691c:	0cc3 0cc3 0cc3 0cc3 0cc3 9ce7 f87f f03c     ..............<.
  40692c:	f03f f87f 1ce0 0cc0 0cc0 0cc0 0cc0 1ce0     ?...............
  40693c:	3870 3030 fcff fcff 0cc0 0cc0 0cc0 0cc0     p800............
  40694c:	0cc0 1ce0 f87f f03f fcff fcff 0cc3 0cc3     ......?.........
  40695c:	0cc3 0cc3 0cc3 0cc3 0cc0 0cc0 fcff fcff     ................
  40696c:	00c3 00c3 00c3 00c3 00c3 00c3 00c0 00c0     ................
  40697c:	f03f f87f 1ce0 0cc0 0cc0 0cc3 0cc3 1ce3     ?...............
  40698c:	f873 f033 fcff fcff 0003 0003 0003 0003     s.3.............
  40699c:	0003 0003 fcff fcff 0000 0000 0cc0 0cc0     ................
  4069ac:	fcff fcff 0cc0 0cc0 0000 0000 3000 3800     .............0.8
  4069bc:	1cc0 0cc0 0cc0 1cc0 f8ff f0ff 00c0 00c0     ................
  4069cc:	fcff fcff 8007 8007 c00f e01c 7038 3870     ............8pp8
  4069dc:	1ce0 0cc0 fcff fcff 0c00 0c00 0c00 0c00     ................
  4069ec:	0c00 0c00 0c00 0c00 fcff fcff 0070 0038     ............p.8.
  4069fc:	001f 001f 0038 0070 fcff fcff fcff fcff     ....8.p.........
  406a0c:	001c 000e 0007 8003 c001 e000 fcff fcff     ................
  406a1c:	f03f f87f 1ce0 0cc0 0cc0 0cc0 0cc0 1ce0     ?...............
  406a2c:	f87f f03f fcff fcff 00c3 00c3 00c3 00c3     ..?.............
  406a3c:	00c3 00e7 007e 003c f03f f87f 1ce0 0cc0     ....~.<.?.......
  406a4c:	ccc0 ecc0 7cc0 38e0 fc7f ec3f fcff fcff     .....|.8..?.....
  406a5c:	00c3 80c3 80c3 c0c3 c0c3 70e7 3c7e 1c3c     ...........p~<<.
  406a6c:	183c 1c7e 0ce7 0cc3 0cc3 0cc3 0cc3 9cc3     <.~.............
  406a7c:	f8e1 f060 00c0 00c0 00c0 00c0 fcff fcff     ..`.............
  406a8c:	00c0 00c0 00c0 00c0 f0ff f8ff 1c00 0c00     ................
  406a9c:	0c00 0c00 0c00 1c00 f8ff f0ff c0ff e0ff     ................
  406aac:	7000 3800 1c00 1c00 3800 7000 e0ff c0ff     .p.8.....8.p....
  406abc:	f0ff f8ff 1c00 3c00 f800 f800 3c00 1c00     .......<.....<..
  406acc:	f8ff f0ff 3cf0 7cf8 e01c c00f 8007 8007     .....<.|........
  406adc:	c00f e01c 7cf8 3cf0 00fc 00fe 0007 8003     .....|.<........
  406aec:	fc01 fc01 8003 0007 00fe 00fc 3cc0 7cc0     .............<.|
  406afc:	ecc0 ccc1 8cc3 0cc7 0cce 0cdc 0cf8 0cf0     ................
  406b0c:	0000 0000 fcff fcff 0cc0 0cc0 0cc0 0000     ................
  406b1c:	0000 0000 0030 0030 000c 000c 0003 0003     ....0.0.........
  406b2c:	c000 c000 3000 3000 0000 0000 0cc0 0cc0     .....0.0........
  406b3c:	0cc0 fcff fcff 0000 0000 0000 000c 001c     ................
  406b4c:	0038 0070 00e0 00e0 0070 0038 001c 000c     8.p.....p.8.....
  406b5c:	0c00 0c00 0c00 0c00 0c00 0c00 0c00 0c00     ................
  406b6c:	0c00 0c00 0000 0000 00c0 00e0 0070 0038     ............p.8.
  406b7c:	0018 0000 0000 0000 3000 7806 fc0e cc0c     .........0.x....
  406b8c:	cc0c cc0c cc0c cc0e fc07 f803 fcff fcff     ................
  406b9c:	0c03 0c03 0c03 0c03 0c03 9c03 f801 f000     ................
  406bac:	f003 f807 1c0e 0c0c 0c0c 0c0c 0c0c 1c0e     ................
  406bbc:	3807 3003 f000 f801 9c03 0c03 0c03 0c03     .8.0............
  406bcc:	0c03 0c03 fcff fcff f003 f807 dc0e cc0c     ................
  406bdc:	cc0c cc0c cc0c dc0e d807 9003 0000 0003     ................
  406bec:	fc3f fc7f 00e3 00e3 0070 0030 0000 0000     ?.......p.0.....
  406bfc:	1803 9c07 cc0f cc0c cc0c cc0c cc0c dc0c     ................
  406c0c:	f80f f007 fcff fcff 0003 0003 0003 0003     ................
  406c1c:	8003 fc01 fc00 0000 0000 0000 0000 0000     ................
  406c2c:	fc1b fc1b 0000 0000 0000 0000 0000 3000     ...............0
  406c3c:	3800 1c00 0c00 0c00 1c00 f8cf f0cf 0000     .8..............
  406c4c:	0000 fcff fcff e000 e001 f003 3807 1c0e     .............8..
  406c5c:	0c0c 0000 0000 0000 0cc0 0cc0 fcff fcff     ................
  406c6c:	0c00 0c00 0000 0000 fc0f fc0f 000e 0007     ................
  406c7c:	c003 c003 0007 000e fc0f fc0f fc0f fc0f     ................
  406c8c:	0003 0007 000e 000c 000c 000e fc07 fc03     ................
  406c9c:	f003 f807 1c0e 0c0c 0c0c 0c0c 0c0c 1c0e     ................
  406cac:	f807 f003 fc0f fc0f c00c c00c c00c c00c     ................
  406cbc:	c00c c00f 8007 0003 0003 8007 c00f c00c     ................
  406ccc:	c00c c00c c00c c00c fc0f fc0f fc0f fc0f     ................
  406cdc:	8003 0007 000e 000c 000c 000e 0007 0003     ................
  406cec:	1803 9c07 cc0f cc0c cc0c cc0c cc0c fc0c     ................
  406cfc:	780e 3006 0000 000c 000c f0ff f8ff 1c0c     .x.0............
  406d0c:	1c0c 380c 300c 0000 f00f f80f 1c00 0c00     ...8.0..........
  406d1c:	0c00 0c00 0c00 1c00 f80f f00f c00f e00f     ................
  406d2c:	7000 3800 1c00 1c00 3800 7000 e00f c00f     .p.8.....8.p....
  406d3c:	f00f f80f 1c00 1c00 f800 f800 1c00 1c00     ................
  406d4c:	f80f f00f 0c0c 1c0e 3807 f003 e001 e001     .........8......
  406d5c:	f003 3807 1c0e 0c0c 000c 000e 0c07 9c03     ...8............
  406d6c:	f801 f001 8003 0007 000e 000c 0c0c 1c0c     ................
  406d7c:	3c0c 7c0c ec0c cc0d 8c0f 0c0f 0c0e 0c0c     .<.|............
  406d8c:	0000 0003 8007 f03f f87c 1ce0 0cc0 0cc0     ......?.|.......
  406d9c:	0cc0 0000 0c03 0c03 fc3f fc7f 0ce3 0cc3     ........?.......
  406dac:	0cc0 0ce0 0c70 0c30 0000 0cc0 0cc0 0cc0     ....p.0.........
  406dbc:	1ce0 f87c f03f 8007 0003 0000 00c0 00c0     ..|.?...........
  406dcc:	00c0 00c0 00c0 00c0 00c0 00c0 00c0 00c0     ................
  406ddc:	fcff fcff fcff fcff fcff fcff fcff fcff     ................
  406dec:	fcff fcff 6425 0000 7541 616c 2d20 4120     ....%d..Aula - A
  406dfc:	4344 0000 0043 0000                         DC..C...

00406e04 <_global_impure_ptr>:
  406e04:	0018 2000                                   ... 

00406e08 <zeroes.7035>:
  406e08:	3030 3030 3030 3030 3030 3030 3030 3030     0000000000000000
  406e18:	4e49 0046 6e69 0066 414e 004e 616e 006e     INF.inf.NAN.nan.
  406e28:	3130 3332 3534 3736 3938 4241 4443 4645     0123456789ABCDEF
  406e38:	0000 0000 3130 3332 3534 3736 3938 6261     ....0123456789ab
  406e48:	6463 6665 0000 0000 6e28 6c75 296c 0000     cdef....(null)..
  406e58:	0030 0000                                   0...

00406e5c <blanks.7034>:
  406e5c:	2020 2020 2020 2020 2020 2020 2020 2020                     
  406e6c:	6e49 6966 696e 7974 0000 0000 614e 004e     Infinity....NaN.
  406e7c:	4f50 4953 0058 0000 002e 0000               POSIX.......

00406e88 <__mprec_tens>:
  406e88:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
  406e98:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
  406ea8:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
  406eb8:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
  406ec8:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
  406ed8:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
  406ee8:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
  406ef8:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
  406f08:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
  406f18:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
  406f28:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
  406f38:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
  406f48:	9db4 79d9 7843 44ea                         ...yCx.D

00406f50 <__mprec_bigtens>:
  406f50:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
  406f60:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
  406f70:	bf3c 7f73 4fdd 7515                         <.s..O.u

00406f78 <p05.5373>:
  406f78:	0005 0000 0019 0000 007d 0000               ........}...

00406f84 <_init>:
  406f84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  406f86:	bf00      	nop
  406f88:	bcf8      	pop	{r3, r4, r5, r6, r7}
  406f8a:	bc08      	pop	{r3}
  406f8c:	469e      	mov	lr, r3
  406f8e:	4770      	bx	lr

00406f90 <__init_array_start>:
  406f90:	004033b9 	.word	0x004033b9

00406f94 <__frame_dummy_init_array_entry>:
  406f94:	004000f1                                ..@.

00406f98 <_fini>:
  406f98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  406f9a:	bf00      	nop
  406f9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
  406f9e:	bc08      	pop	{r3}
  406fa0:	469e      	mov	lr, r3
  406fa2:	4770      	bx	lr

00406fa4 <__fini_array_start>:
  406fa4:	004000cd 	.word	0x004000cd
